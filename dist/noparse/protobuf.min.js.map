{"version":3,"sources":["/node_modules/browser-pack/_prelude.js","/node_modules/@protobufjs/aspromise/index.js","/node_modules/@protobufjs/base64/index.js","/node_modules/@protobufjs/codegen/index.js","/node_modules/@protobufjs/eventemitter/index.js","/node_modules/@protobufjs/extend/index.js","/node_modules/@protobufjs/fetch/index.js","/node_modules/@protobufjs/inquire/index.js","/node_modules/@protobufjs/path/index.js","/node_modules/@protobufjs/pool/index.js","/node_modules/@protobufjs/utf8/index.js","/src/class.js","/src/converter.js","/src/decoder.js","/src/encoder.js","/src/enum.js","/src/field.js","/src/mapfield.js","/src/message.js","/src/method.js","/src/namespace.js","/src/object.js","/src/oneof.js","/src/reader.js","/src/reader_buffer.js","/src/root.js","/src/rpc.js","/src/rpc/service.js","/src/service.js","/src/type.js","/src/types.js","/src/util.js","/src/util/longbits.js","/src/util/runtime.js","/src/verifier.js","/src/writer.js","/src/writer_buffer.js","/src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","undefined","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","arg","JSON","stringify","Number","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","Type","TypeError","util","Message","merge","$type","fieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","long","emptyObject","oneofsArray","oneof","defineProperty","get","indexOf","set","value","genValuePartial_fromObject","fieldIndex","prop","resolvedType","Enum","values","repeated","typeDefault","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","fields","_prop","toObject","repeatedFields","filter","mapFields","otherFields","valuesById","low","high","unsigned","toString","toNumber","bytes","decoder","group","ref","id","keyType","resolvedKeyType","types","basic","compat","packed","genTypePartial","encoder","oneofs","wireType","mapKey","partOf","required","oneofFields","options","ReflectionObject","self","val","parseInt","EnumPrototype","className","testJSON","json","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","rule","toLowerCase","optional","message","Long","extensionField","declaringField","_packed","safeProp","FieldPrototype","MapField","getOption","setOption","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","MapFieldPrototype","properties","writer","encodeDelimited","readerOrBuffer","decodeDelimited","verify","object","from","longs","enums","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","arrayToJSON","array","obj","nested","_nestedArray","_clearProperties","clearCache","namespace","NamespacePrototype","methods","addJSON","toArray","nestedArray","nestedJson","ns","nestedName","getEnum","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","root","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","defineProperties","fullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","_fieldsArray","addFieldsToParent","OneOfPrototype","index","fieldName","indexOutOfRange","reader","writeLength","RangeError","pos","Reader","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","BufferReader","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","skip","skipType","_configure","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","parse","common","resolvePath","initParser","load","filename","finish","cb","process","parsed","imports","weakImports","sync","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","endedByRPC","_methodsArray","service","ServicePrototype","methodName","inherited","methodsArray","requestDelimited","responseDelimited","rpcService","method","lcFirst","request","requestData","setImmediate","responseData","response","err2","extensions","reserved","_fieldsById","_oneofsArray","_ctor","TypePrototype","Writer","verifier","oneOfName","fieldsById","names","setup","fld","fork","ldelim","bake","ucFirst","toUpperCase","LongBitsPrototype","zero","zzEncode","zeroHash","fromString","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","isFinite","floor","utf8Write","encoding","allocUnsafe","sizeOrArray","arrayNe","dcodeIO","longToHash","longFromHash","fromBits","longNe","dst","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength","protobuf","roots","tokenize","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            case \"d\":\r\n                return Number(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object.<string,*>} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted\r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(18),\r\n    util    = require(31);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a class instance, which is also a {@link Message} prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(29);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        /* istanbul ignore next */\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        // create named constructor functions (codegen is required anyway)\r\n        ctor = util.codegen(\"p\")(\"return ctor.call(this,p)\").eof(type.name, {\r\n            ctor: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.fieldsArray.forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.oneofsArray.forEach(function(oneof) {\r\n        Object.defineProperty(prototype, oneof.resolve().name, {\r\n            get: function() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(15),\r\n    util = require(31);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) {\r\n            var values = field.resolvedType.values; gen\r\n            (\"switch(d%s){\", prop);\r\n            Object.keys(values).forEach(function(key) {\r\n                if (field.repeated && values[key] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", key)\r\n                (\"case %j:\", values[key])\r\n                    (\"m%s=%j\", prop, values[key])\r\n                    (\"break\");\r\n            }); gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low,d%s.high).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop, prop)\r\n                (\"else if(d%s&&d%s.length)\", prop, prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            default: gen /* bool, uint32, string etc. */\r\n                (\"m%s=d%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"var m=new(this.ctor)\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = field._prop;\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop, prop)\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].ctor.prototype.toObject.call(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low,m%s.high).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n    var repeatedFields = fields.filter(function(field) { return field.repeated; });\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        fields.forEach(function(field) {\r\n            if (field.resolve().repeated) gen\r\n        (\"d%s=[]\", field._prop);\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    var mapFields = fields.filter(function(field) { return field.map; });\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        fields.forEach(function(field) {\r\n            if (field.map) gen\r\n        (\"d%s={}\", field._prop);\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    var otherFields = fields.filter(function(field) { return !(field.repeated || field.map); });\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        fields.forEach(function(field) {\r\n            if (field.repeated || field.map)\r\n                return;\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", field._prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", field._prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", field._prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", field._prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", field._prop, field.typeDefault); // also messages (=null)\r\n        }); gen\r\n    (\"}\");\r\n    } gen\r\n    (\"for(var ks=Object.keys(m),i=0;i<ks.length;++i){\")\r\n        (\"switch(ks[i]){\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = field._prop; gen\r\n        (\"case%j:\", field.name);\r\n        if (field.map) { gen\r\n            (\"if(m%s&&m%s!==util.emptyObject){\", prop, prop)\r\n                (\"d%s={}\", prop)\r\n                (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n        } else if (field.repeated) { gen\r\n            (\"if(m%s.length){\", prop)\r\n                (\"d%s=[]\", prop)\r\n                (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n                (\"}\")\r\n            (\"}\");\r\n        } else { gen\r\n            (\"if(m%s!==undefined&&m%s!==null){\", prop, prop);\r\n            genValuePartial_toObject(gen, field, i, prop)\r\n            (\"}\");\r\n        } gen\r\n            (\"break\");\r\n    }\r\n    return gen\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(30),\r\n    util    = require(31);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.ctor)\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + field._prop; gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType; gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(30),\r\n    util     = require(31);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var oneofs = mtype.oneofsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + field._prop;\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType; gen\r\n    (\"if(%s&&%s!==util.emptyObject){\", ref, ref)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length){\", ref, ref)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s){\", ref)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) { // see below for oneofs\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&util.longNe(%s,%d,%d))\", ref, ref, ref, field.defaultValue.low, field.defaultValue.high);\r\n                else if (field.bytes) gen\r\n    (\"if(%s&&%s.length\" + (field.defaultValue.length ? \"&&util.arrayNe(%s,%j)\" : \"\") + \")\", ref, ref, ref, Array.prototype.slice.call(field.defaultValue));\r\n                else gen\r\n    (\"if(%s!==undefined&&%s!==%j)\", ref, ref, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i]; gen\r\n        (\"switch(%s){\", \"m\" + oneof._prop);\r\n        var oneofFields = oneof.fieldsArray;\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + field._prop; gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n    \r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(21);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(31);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    var self = this;\r\n    Object.keys(values || {}).forEach(function(key) {\r\n        var val;\r\n        if (typeof values[key] === \"number\")\r\n            val = values[key];\r\n        else {\r\n            val = parseInt(key, 10);\r\n            key = values[key];\r\n        }\r\n        self.valuesById[self.values[key] = val] = key;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(21);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(15),\r\n    types     = require(30),\r\n    util      = require(31);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n\r\n    /**\r\n     * Safe property accessor on messages used by codegen.\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this._prop = util.safeProp(this.name);\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(FieldPrototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(17);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) {\r\n        // if not a basic type, resolve it\r\n        if (!Type)\r\n            Type = require(29);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        /* istanbul ignore next */\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.defaultValue];\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // account for maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(16);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(30),\r\n    util    = require(31);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, {\r\n        longs: String,\r\n        enums: String,\r\n        bytes: String\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(21);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(29),\r\n    util = require(31);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(21);\r\n/** @alias NamespaceBase.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(15),\r\n    Field   = require(16),\r\n    util    = require(31);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(29);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(28);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @memberof Namespace\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(NamespacePrototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName + \" must be JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object must be \" + nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object must be an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            /* istanbul ignore next */\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(29);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(28);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.nestedArray;\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(29);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(28);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(31);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(25);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(25);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (!Root)\r\n        Root = require(25);\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(21);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(16),\r\n    util  = require(31);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n\r\n    /**\r\n     * Safe property accessor on messages used by codegen.\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this._prop = util.safeProp(this.name);\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(OneOfPrototype, \"fieldsArray\", {\r\n    get: function() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(33);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(24);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(23);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(20);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(16),\r\n    util   = require(31);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\nvar initParser = function() {\r\n    try { // excluded in noparse builds\r\n        parse  = require(\"./parse\");\r\n        common = require(\"./common\");\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    initParser = null;\r\n};\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (initParser)\r\n        initParser();\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            if (sync)\r\n                throw err;\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(27);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar EventEmitter = require(31).EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n(Service.prototype = Object.create(EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(20);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(19),\r\n    util   = require(31),\r\n    rpc    = require(26);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(ServicePrototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.methodsArray.forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n\r\n            /* istanbul ignore next */\r\n            if (!request)\r\n                throw TypeError(\"request must not be null\");\r\n\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(20);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(22),\r\n    Field     = require(16),\r\n    Service   = require(28),\r\n    Class     = require(11),\r\n    Message   = require(18),\r\n    Reader    = require(23),\r\n    Writer    = require(35),\r\n    util      = require(31),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(34),\r\n    converter = require(12);\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = this.fieldsArray.map(function(fld) { return fld.resolve().resolvedType; });\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nTypePrototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nTypePrototype.from = TypePrototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nTypePrototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(31);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(33);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(3);\r\nutil.EventEmitter = require(4);\r\nutil.extend       = require(5);\r\nutil.fetch        = require(6);\r\nutil.path         = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    return object ? Object.values ? Object.values(object) : Object.keys(object).map(function(key) {\r\n        return object[key];\r\n    }) : [];\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    /* istanbul ignore next */\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util.Buffer.allocUnsafe(sizeOrArray) // polyfilled\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util.Buffer.from(sizeOrArray) // polyfilled\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\n/**\r\n * Tests if two arrays are not equal.\r\n * @param {Array.<*>} a Array 1\r\n * @param {Array.<*>} b Array 2\r\n * @returns {boolean} `true` if not equal, otherwise `false`\r\n */\r\nutil.arrayNe = function arrayNe(a, b) {\r\n    if (a.length === b.length)\r\n        for (var i = 0; i < a.length; ++i)\r\n            if (a[i] !== b[i])\r\n                return true;\r\n    return false;\r\n};\r\n\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    if (src)\r\n        for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(31);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.fullName.substring(1) + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e;\")\r\n            (\"if(e=types[%d].verify(%s))\", fieldIndex, ref)\r\n                (\"return e\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9][0-9]*)$/.test(%s))\", ref) // it's important not to use any literals here that might be confused with short variable names by pbjs' beautify\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + field._prop;\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(33);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(36);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(35);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(33);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser (if not excluded)\r\ntry {\r\n    protobuf.tokenize     = require(\"./tokenize\");\r\n    protobuf.parse        = require(\"./parse\");\r\n    protobuf.common       = require(\"./common\");\r\n} catch (e) {} // eslint-disable-line no-empty\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = require(\"./writer_buffer\");\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = require(\"./reader_buffer\");\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n/* istanbul ignore next */\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}