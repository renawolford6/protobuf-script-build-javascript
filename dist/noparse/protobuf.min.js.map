{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/converter.js","src/converters.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/writer_buffer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","undefined","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","arg","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","Type","TypeError","util","Message","merge","$type","fieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","long","emptyObject","oneofsArray","oneof","defineProperty","get","indexOf","set","value","genConvert","fieldIndex","prop","resolvedType","Enum","typeDefault","low","high","converter","mtype","fields","convert","safeProp","repeated","converters","json","typeOrCtor","options","fieldsOnly","enums","values","longs","defaultLow","defaultHigh","unsigned","Number","LongBits","from","toNumber","Long","fromNumber","toString","fromValue","bytes","defaults","Buffer","isBuffer","message","fromString","newBuffer","decoder","group","ref","id","keyType","resolvedKeyType","types","basic","packed","genEncodeType","encoder","oneofs","wireType","mapKey","partOf","required","oneofFields","ReflectionObject","valuesById","self","val","parseInt","EnumPrototype","className","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","rule","toLowerCase","optional","extensionField","declaringField","_packed","FieldPrototype","MapField","defineProperties","getOption","setOption","ifNotSet","resolved","parent","lookup","freeze","MapFieldPrototype","properties","MessagePrototype","asJSON","object","writer","encodeDelimited","readerOrBuffer","decodeDelimited","verify","impl","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","nested","_nestedArray","_clearProperties","clearCache","namespace","arrayToJSON","array","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","nestedJson","ns","nestedName","getEnum","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","root","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","fullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","_fieldsArray","addFieldsToParent","OneOfPrototype","index","fieldName","indexOutOfRange","reader","writeLength","RangeError","pos","Reader","readLongVarint","bits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","BufferReader","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","skip","skipType","_configure","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","parse","common","resolvePath","initParser","load","filename","finish","cb","process","parsed","imports","weakImports","sync","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","service","methodsArray","methodName","inherited","requestDelimited","responseDelimited","rpcService","method","lcFirst","request","requestData","setImmediate","responseData","response","err2","extensions","reserved","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","Writer","verifier","fieldsById","names","repeatedFieldsArray","filter","oneOfName","setup","fld","fork","ldelim","bake","ucFirst","toUpperCase","allocUnsafe","LongBitsPrototype","zero","zzEncode","zeroHash","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","utf8Write","encoding","dcodeIO","isFinite","floor","longToHash","longFromHash","fromBits","longNe","arrayNe","dst","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength","protobuf","roots","tokenize","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object.<string,*>} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted\r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(32);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(30);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        /* istanbul ignore next */\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        ctor = util.codegen(\"p\")(\"return ctor.call(this,p)\").eof(type.name, {\r\n            ctor: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.fieldsArray.forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.oneofsArray.forEach(function(oneof) {\r\n        Object.defineProperty(prototype, oneof.resolve().name, {\r\n            get: function() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a message from a JSON object by converting strings and numbers to their respective field types.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Options\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n\r\n/**\r\n * Converts an object or runtime message of this type.\r\n * @name Class#convert\r\n * @function\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\n","\"use strict\";\r\nmodule.exports = converter;\r\n\r\nvar Enum       = require(16),\r\n    converters = require(13),\r\n    util       = require(32);\r\n\r\nvar sprintf    = util.codegen.sprintf;\r\n\r\nfunction genConvert(field, fieldIndex, prop) {\r\n    if (field.resolvedType)\r\n        return field.resolvedType instanceof Enum\r\n            // enums\r\n            ? sprintf(\"f.enums(s%s,%d,types[%d].values,o)\", prop, field.typeDefault, fieldIndex)\r\n            // recurse into messages\r\n            : sprintf(\"types[%d].convert(s%s,f,o)\", fieldIndex, prop);\r\n    switch (field.type) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            // longs\r\n            return sprintf(\"f.longs(s%s,%d,%d,%j,o)\", prop, field.typeDefault.low, field.typeDefault.high, field.type.charAt(0) === \"u\");\r\n        case \"bytes\":\r\n            // bytes\r\n            return sprintf(\"f.bytes(s%s,%j,o)\", prop, Array.prototype.slice.call(field.typeDefault));\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Generates a conveter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @param {function} generateField Field generator\r\n * @returns {Codegen} Codegen instance\r\n * @property {ConverterImpl} json Converter implementation producing JSON\r\n * @property {ConverterImpl} message Converter implementation producing runtime messages\r\n */\r\nfunction converter(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"s\", \"f\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d=f.create(s,this,o)\");\r\n    if (fields.length) { gen\r\n    (\"if(d){\");\r\n        var convert;\r\n        fields.forEach(function(field, i) {\r\n            var prop = util.safeProp(field.resolve().name);\r\n\r\n            // repeated\r\n            if (field.repeated) { gen\r\n        (\"if(s%s&&s%s.length){\", prop, prop)\r\n            (\"d%s=[]\", prop)\r\n            (\"for(var i=0;i<s%s.length;++i)\", prop);\r\n                if (convert = genConvert(field, i, prop + \"[i]\")) gen\r\n                (\"d%s.push(%s)\", prop, convert);\r\n                else gen\r\n                (\"d%s.push(s%s[i])\", prop, prop);\r\n                gen\r\n        (\"}else if(o.defaults||o.arrays)\")\r\n            (\"d%s=[]\", prop);\r\n\r\n            // non-repeated\r\n            } else if (convert = genConvert(field, i, prop)) {\r\n                if (field.long) gen\r\n        (\"if(o.defaults||s%s!==undefined&&s%s!==null&&util.longNe(s%s,%d,%d))\", prop, prop, prop, field.typeDefault.low, field.typeDefault.high);\r\n                else if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n        (\"if(o.defaults||s%s!==undefined&&s%s!==null)\", prop, prop);\r\n                else gen\r\n        (\"if(o.defaults||s%s!==undefined&&s%s!==%j)\", prop, prop, field.typeDefault);\r\n                gen\r\n            (\"d%s=%s\", prop, convert);\r\n            } else gen\r\n        (\"if(d%s===undefined&&o.defaults)\", prop)\r\n            (\"d%s=%j\", prop, field.typeDefault /* == field.defaultValue */);\r\n\r\n        });\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nutil.merge(converter, converters);\r\n\r\n/**\r\n * A converter implementation as used by {@link Type#convert} respectively {@link Message.convert}.\r\n * @typedef ConverterImpl\r\n * @type {Object}\r\n * @property {ConverterCreate} create Function for creating a new destination object\r\n * @property {ConverterEnums} enums Function for converting enum values\r\n * @property {ConverterLongs} longs Function for converting long values\r\n * @property {ConverterBytes} bytes Function for converting bytes values\r\n */\r\n\r\n/**\r\n * A function for creating a new destination object.\r\n * @typedef ConverterCreate\r\n * @type {function}\r\n * @param {Message|Object} value Source object or message\r\n * @param {Function} typeOrCtor Reflected type or message constructor\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Destination object or message\r\n */\r\n\r\n/**\r\n * A function for converting enum values.\r\n * @typedef ConverterEnums\r\n * @type {function}\r\n * @param {number|string} value Actual value\r\n * @param {number} defaultValue Default value\r\n * @param {Object.<string,number>} values Possible values\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {number|string} Converted value\r\n */\r\n\r\n/**\r\n * A function for converting long values.\r\n * @typedef ConverterLongs\r\n * @type {function}\r\n * @param {number|string|Long} value Actual value\r\n * @param {Long} defaultValue Default value\r\n * @param {boolean} unsigned Whether unsigned or not\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {number|string|Long} Converted value\r\n */\r\n\r\n/**\r\n * A function for converting bytes values.\r\n * @typedef ConverterBytes\r\n * @type {function}\r\n * @param {string|number[]|Uint8Array} value Actual value\r\n * @param {number[]} defaultValue Default value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {string|number[]|Uint8Array} Converted value \r\n */\r\n","\"use strict\";\r\nvar converters = exports;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * JSON conversion options as used by {@link Message#asJSON}.\r\n * @typedef JSONConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n * @property {*} [longs] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @property {*} [enums=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Converter implementation producing JSON.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.json = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value) // inner messages\r\n            return null;\r\n        return options.fieldsOnly\r\n            ? {}\r\n            : util.merge({}, value);\r\n    },\r\n    enums: function(value, defaultValue, values, options) {\r\n        if (value === undefined)\r\n            value = defaultValue;\r\n        return options.enums === String && typeof value === \"number\"\r\n            ? values[value]\r\n            : value;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned, options) {\r\n        if (value === undefined || value === null)\r\n            value = { low: defaultLow, high: defaultHigh };\r\n        if (options.longs === Number)\r\n            return typeof value === \"number\"\r\n                ? value\r\n                : util.LongBits.from(value).toNumber(unsigned);\r\n        if (options.longs === String) {\r\n            if (typeof value === \"number\")\r\n                return util.Long.fromNumber(value, unsigned).toString();\r\n            value = util.Long.fromValue(value); // has no unsigned option\r\n            value.unsigned = unsigned;\r\n            return value.toString();\r\n        }\r\n        return value;\r\n    },\r\n    bytes: function(value, defaultValue, options) {\r\n        if (!value) {\r\n            value = defaultValue;\r\n        } else if (!value.length && !options.defaults)\r\n            return undefined;\r\n        return options.bytes === String\r\n            ? util.base64.encode(value, 0, value.length)\r\n            : options.bytes === Array\r\n            ? Array.prototype.slice.call(value)\r\n            : options.bytes === util.Buffer && !util.Buffer.isBuffer(value)\r\n            ? util.Buffer.from(value) // polyfilled\r\n            : value;\r\n    }\r\n};\r\n\r\n/**\r\n * Message conversion options as used by {@link Message.from} and {@link Type#from}.\r\n * @typedef MessageConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n */\r\n// Note that options.defaults and options.arrays also affect the message converter.\r\n// As defaults are already on the prototype, usage is not recommended and thus undocumented.\r\n\r\n/**\r\n * Converter implementation producing runtime messages.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.message = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        // can't use instanceof Type here because converters are also part of the minimal runtime\r\n        return new (typeOrCtor.ctor ? typeOrCtor.ctor : typeOrCtor)(options.fieldsOnly ? undefined : value);\r\n    },\r\n    enums: function(value, defaultValue, values) {\r\n        if (typeof value === \"string\")\r\n            return values[value];\r\n        return value;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned) {\r\n        if (typeof value === \"string\")\r\n            return util.Long.fromString(value, unsigned);\r\n        if (typeof value === \"number\")\r\n            return util.Long.fromNumber(value, unsigned);\r\n        return value;\r\n    },\r\n    bytes: function(value/*, defaultValue*/) {\r\n        if (util.Buffer)\r\n            return util.Buffer.isBuffer(value)\r\n                ? value\r\n                : util.Buffer.from(value, \"base64\"); // polyfilled\r\n        if (typeof value === \"string\") {\r\n            var buf = util.newBuffer(util.base64.length(value));\r\n            util.base64.decode(value, buf, 0);\r\n            return buf;\r\n        }\r\n        return value instanceof util.Array\r\n            ? value\r\n            : new util.Array(value);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(16),\r\n    types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.ctor)\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packed\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(16),\r\n    types    = require(31),\r\n    util     = require(32);\r\n\r\nfunction genEncodeType(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var oneofs = mtype.oneofsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(%s&&%s!==util.emptyObject){\", ref, ref)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length){\", ref, ref)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s){\", ref)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genEncodeType(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&util.longNe(%s,%d,%d))\", ref, ref, ref, field.defaultValue.low, field.defaultValue.high);\r\n                else if (field.bytes) gen\r\n    (\"if(%s&&%s.length\" + (field.defaultValue.length ? \"&&util.arrayNe(%s,%j)\" : \"\") + \")\", ref, ref, ref, Array.prototype.slice.call(field.defaultValue));\r\n                else gen\r\n    (\"if(%s!==undefined&&%s!==%j)\", ref, ref, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genEncodeType(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i];\r\n        gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        var oneofFields = oneof.fieldsArray;\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType === undefined)\r\n                genEncodeType(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    var self = this;\r\n    Object.keys(values || {}).forEach(function(key) {\r\n        var val;\r\n        if (typeof values[key] === \"number\")\r\n            val = values[key];\r\n        else {\r\n            val = parseInt(key, 10);\r\n            key = values[key];\r\n        }\r\n        self.valuesById[self.values[key] = val] = key;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(16),\r\n    types     = require(31),\r\n    util      = require(32);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nObject.defineProperties(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: function() {\r\n            // defaults to packed=true if not explicity set to false\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(18);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) {\r\n        // if not a basic type, resolve it\r\n        if (!Type)\r\n            Type = require(30);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        /* istanbul ignore next */\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.defaultValue];\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // account for maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(17);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar converters = require(13);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {JSONConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    return this.$type.convert(this, converters.json, options);\r\n};\r\n\r\n/**\r\n * Creates a message from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Options\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = function from(object, options) {\r\n    return this.$type.convert(object, converters.message, options);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Converts an object or runtime message of this type.\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\nMessage.convert = function convert(source, impl, options) {\r\n    return this.$type.convert(source, impl, options);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(30),\r\n    util = require(32);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(16),\r\n    Field   = require(17),\r\n    util    = require(32);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(30);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(29);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\nObject.defineProperties(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName + \" must be JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object must be \" + nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object must be an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            /* istanbul ignore next */\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(30);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(29);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.nestedArray;\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name Namespace#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(30);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(29);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(32);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(17);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(OneOfPrototype, \"fieldsArray\", {\r\n    get: function() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(25);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\nvar Reader = require(24);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(17),\r\n    util   = require(32);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>|*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    // note that `json` actually must be of type `Object.<string,*>` but TypeScript\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\nvar initParser = function() {\r\n    try { // excluded in noparse builds\r\n        parse  = require(\"./parse\");\r\n        common = require(\"./common\");\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    initParser = null;\r\n};\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (initParser)\r\n        initParser();\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            if (sync)\r\n                throw err;\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(28);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(32);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(32),\r\n    rpc    = require(27);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nObject.defineProperties(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.methodsArray.forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n\r\n            /* istanbul ignore next */\r\n            if (!request)\r\n                throw TypeError(\"request must not be null\");\r\n\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(16),\r\n    OneOf     = require(23),\r\n    Field     = require(17),\r\n    Service   = require(29),\r\n    Class     = require(11),\r\n    Message   = require(19),\r\n    Reader    = require(24),\r\n    Writer    = require(36),\r\n    util      = require(32),\r\n    encoder   = require(15),\r\n    decoder   = require(14),\r\n    verifier  = require(35),\r\n    converter = require(12);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.fieldsArray.filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Conversion options\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.from = function from(object, options) {\r\n    return this.convert(object, converter.message, options);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = this.fieldsArray.map(function(fld) { return fld.resolve().resolvedType; });\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.convert = converter(this).eof(fullName + \"$convert\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Converts an object or runtime message.\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\nTypePrototype.convert = function convert_setup(source, impl, options) {\r\n    return this.setup().convert(source, impl, options); // overrides this method\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(32);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(34);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(3);\r\nutil.EventEmitter = require(4);\r\nutil.extend       = require(5);\r\nutil.fetch        = require(6);\r\nutil.path         = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    return object ? Object.values ? Object.values(object) : Object.keys(object).map(function(key) {\r\n        return object[key];\r\n    }) : [];\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    /* istanbul ignore next */\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n\r\n/**\r\n * Tests if two arrays are not equal.\r\n * @param {Array.<*>} a Array 1\r\n * @param {Array.<*>} b Array 2\r\n * @returns {boolean} `true` if not equal, otherwise `false`\r\n */\r\nutil.arrayNe = function arrayNe(a, b) {\r\n    if (a.length === b.length)\r\n        for (var i = 0; i < a.length; ++i)\r\n            if (a[i] !== b[i])\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(16),\r\n    util      = require(32);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.fullName.substring(1) + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e;\")\r\n            (\"if(e=types[%d].verify(%s))\", fieldIndex, ref)\r\n                (\"return e\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(37);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset()\r\n        .uint32(len)\r\n        .tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\nvar Writer = require(36);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(34);\r\n\r\nvar utf8   = util.utf8,\r\n    Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        val.copy(buf, pos, 0, val.length);\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser (if not excluded)\r\ntry {\r\n    protobuf.tokenize     = require(\"./tokenize\");\r\n    protobuf.parse        = require(\"./parse\");\r\n    protobuf.common       = require(\"./common\");\r\n} catch (e) {} // eslint-disable-line no-empty\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = require(\"./writer_buffer\");\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = require(\"./reader_buffer\");\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n/* istanbul ignore next */\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}