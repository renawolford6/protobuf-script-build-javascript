{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/convert.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/writer_buffer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","undefined","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","test","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","arg","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","Type","TypeError","MessageCtor","properties","Message","util","merge","$type","getFieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","long","emptyObject","getOneofsArray","oneof","prop","get","indexOf","set","value","setCtor","_TypeError","convert","destination","options","converter","defaults","fields","repeated","fieldsOnly","Enum","toJson","enums","resolvedType","getValuesById","longs","unsigned","Number","LongBits","from","toNumber","Long","fromNumber","toString","fromValue","bytes","Buffer","isBuffer","toMessage","getCtor","values","fromString","newBuffer","decoder","mtype","group","ref","safeProp","id","keyType","resolvedKeyType","types","basic","packed","genEncodeType","fieldIndex","encoder","oneofs","wireType","mapKey","partOf","required","low","high","oneofFields","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","className","props","valuesById","testJSON","json","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","rule","toLowerCase","optional","message","extensionField","declaringField","_packed","FieldPrototype","MapField","isPacked","getOption","setOption","ifNotSet","resolved","typeDefault","parent","lookup","freeze","MapFieldPrototype","MessagePrototype","asJSON","object","writer","encodeDelimited","readerOrBuffer","decodeDelimited","verify","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","nested","_nestedArray","_clearProperties","namespace","arrayToJSON","array","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","getEnum","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","getRoot","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","ucFirst","_fieldsArray","addFieldsToParent","OneOfPrototype","index","self","fieldName","indexOutOfRange","reader","writeLength","RangeError","pos","Reader","readLongVarint","bits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","BufferReader","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","skip","skipType","_configure","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","parse","common","resolvePath","initParser","load","filename","finish","cb","process","parsed","imports","weakImports","sync","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","service","methodsArray","methodName","inherited","getMethodsArray","requestDelimited","responseDelimited","rpcService","method","lcFirst","request","requestData","setImmediate","responseData","response","err2","extensions","reserved","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","verifier","Writer","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","oneOfName","getFieldsById","setup","fld","fork","ldelim","bake","description","dst","allocUnsafe","LongBitsPrototype","zero","zzEncode","abs","parseInt","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","isIE8","utf8Write","encoding","dcodeIO","isFinite","floor","longToHash","longFromHash","fromBits","longNeq","longNe","val","toUpperCase","target","descriptors","descriptor","ucKey","defineProperty","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength","protobuf","roots","tokenize","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = [],\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            parts.push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (i)\r\n        parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n    return parts.join(\"\");\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(18),\r\n    util    = require(31);\r\n\r\nvar Type; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(29);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type\", \"a Type\");\r\n\r\n    if (ctor) {\r\n        /* istanbul ignore next */\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) {\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n    \r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.getFieldsArray().forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n            // see util.prop for IE8 support\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.setCtor(ctor);\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\nmodule.exports = convert;\r\n\r\nvar Enum    = require(15),\r\n    util    = require(31);\r\n\r\nvar Type,    // cyclic\r\n    Message;\r\n\r\n/**\r\n * A converter as used by {@link convert}.\r\n * @typedef Converter\r\n * @type {function}\r\n * @param {Field} field Reflected field\r\n * @param {*} value Value to convert\r\n * @param {Object.<string,*>} options Conversion options\r\n * @returns {*} Converted value\r\n */\r\n\r\n/**\r\n * Converts between JSON objects and messages, based on reflection information.\r\n * @param {Type} type Type \r\n * @param {*} source Source object\r\n * @param {*} destination Destination object\r\n * @param {Object.<string,*>} options Conversion options\r\n * @param {Converter} converter Conversion function\r\n * @returns {*} `destination`\r\n * @property {Converter} toJson To JSON converter using {@link JSONConversionOptions}\r\n * @property {Converter} toMessage To message converter using {@link MessageConversionOptions}\r\n */\r\nfunction convert(type, source, destination, options, converter) {\r\n\r\n    if (!Type) { // require this here already so it is available within the converters below\r\n        Type = require(29);\r\n        Message = require(18);\r\n    }\r\n\r\n    if (!options)\r\n        options = {};\r\n\r\n    var keys = Object.keys(options.defaults ? type.fields : source);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = type.fields[key = keys[i]],\r\n            value = source[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value || options.defaults) {\r\n                    destination[key] = [];\r\n                    if (value)\r\n                        for (var j = 0, l = value.length; j < l; ++j)\r\n                            destination[key].push(converter(field, value[j], options));\r\n                }\r\n            } else\r\n                destination[key] = converter(field, value, options);\r\n        } else if (!options.fieldsOnly)\r\n            destination[key] = value;\r\n    }\r\n    return destination;\r\n}\r\n\r\n/**\r\n * JSON conversion options as used by {@link Message#asJSON} with {@link convert}.\r\n * @typedef JSONConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n * @property {*} [longs] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @property {*} [enums=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n */\r\n/**/\r\nconvert.toJson = function toJson(field, value, options) {\r\n    if (!options)\r\n        options = {};\r\n    \r\n    // Recurse into inner messages\r\n    if (value instanceof Message)\r\n        return convert(value.$type, value, {}, options, toJson);\r\n\r\n    // Enums as strings\r\n    if (options.enums && field.resolvedType instanceof Enum)\r\n        return options.enums === String\r\n            ? field.resolvedType.getValuesById()[value]\r\n            : value | 0;\r\n\r\n    // Longs as numbers or strings\r\n    if (options.longs && field.long) {\r\n        var unsigned = field.type.charAt(0) === \"u\";\r\n        if (options.longs === Number)\r\n            return typeof value === \"number\"\r\n                ? value\r\n                : util.LongBits.from(value).toNumber(unsigned);\r\n        if (options.longs === String) {\r\n            if(typeof value === \"number\")\r\n                return util.Long.fromNumber(value, unsigned).toString();\r\n            value = util.Long.fromValue(value); // TODO: fromValue is missing an unsigned option (long.js 3.2.0)\r\n            value.unsigned = unsigned;\r\n            return value.toString();\r\n        }\r\n    }\r\n\r\n    // Bytes as base64 strings, plain arrays or buffers\r\n    if (options.bytes && field.bytes) {\r\n        if (options.bytes === String)\r\n            return util.base64.encode(value, 0, value.length);\r\n        if (options.bytes === Array)\r\n            return Array.prototype.slice.call(value);\r\n        if (options.bytes === util.Buffer && !util.Buffer.isBuffer(value))\r\n            return util.Buffer.from(value); // polyfilled\r\n    }\r\n    return value;\r\n};\r\n\r\n/**\r\n * Message conversion options as used by {@link Message.from} and {@link Type#from} with {@link convert}.\r\n * @typedef MessageConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n */\r\n/**/\r\nconvert.toMessage = function toMessage(field, value, options) {\r\n    switch (typeof value) {\r\n\r\n        // Recurse into inner messages\r\n        case \"object\":\r\n            if (value) {\r\n                if (field.resolvedType instanceof Type)\r\n                    return convert(field.resolvedType, value, new (field.resolvedType.getCtor())(), options, toMessage);\r\n                if (field.type === \"bytes\")\r\n                    return util.Buffer\r\n                        ? util.Buffer.isBuffer(value)\r\n                          ? value\r\n                          : util.Buffer.from(value) // polyfilled\r\n                        : value instanceof util.Array\r\n                          ? value\r\n                          : new util.Array(value);\r\n            }\r\n            break;\r\n\r\n        // Strings to proper numbers, longs or buffers\r\n        case \"string\":\r\n            if (field.resolvedType instanceof Enum)\r\n                return field.resolvedType.values[value] || 0;\r\n            if (field.long)\r\n                return util.Long.fromString(value, field.type.charAt(0) === \"u\");\r\n            if (field.bytes) {\r\n                var buf = util.newBuffer(util.base64.length(value));\r\n                util.base64.decode(value, buf, 0);\r\n                return buf;\r\n            }\r\n            break;\r\n\r\n        // Numbers to proper longs\r\n        case \"number\":\r\n            if (field.long)\r\n                return util.Long.fromNumber(value, field.type.charAt(0) === \"u\");\r\n            break;\r\n\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(30),\r\n    util    = require(31);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"%s&&%s.length||(%s=[])\", ref, ref, ref);\r\n\r\n            // Packed\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(30),\r\n    util     = require(31);\r\n\r\nvar safeProp = util.safeProp;\r\n\r\nfunction genEncodeType(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.getFieldsArray();\r\n    var oneofs = mtype.getOneofsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(%s&&%s!==util.emptyObject){\", ref, ref)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\"w.uint32(%d).%s(%s[ks[i]])\", 16 | wireType, type, ref);\r\n            gen\r\n            (\"w.ldelim()\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length){\", ref, ref)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s)\", ref)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genEncodeType(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) {\r\n                    gen\r\n    (\"if(%s!==undefined&&util.longNe(%s,%d,%d))\", ref, ref, field.defaultValue.low, field.defaultValue.high);\r\n                } else gen\r\n    (\"if(%s!==undefined&&%s!==%j)\", ref, ref, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genEncodeType(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i];\r\n        gen\r\n        (\"switch(%s){\", \"m\" + safeProp(oneof.name));\r\n        var oneofFields = oneof.getFieldsArray();\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType === undefined)\r\n                genEncodeType(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");        \r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(31);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById|valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id\", \"a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(15),\r\n    types     = require(30),\r\n    util      = require(31);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object} [rule=\"optional\"] Field rule\r\n * @param {string|Object} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    \r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id\", \"a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            // defaults to packed=true if not explicity set to false\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed|packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(17);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        if (!Type)\r\n            Type = require(29);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            typeDefault = 0;\r\n        /* istanbul ignore next */\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved, determine the default value\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else {\r\n        if (this.options && this.options[\"default\"] !== undefined)\r\n            this.defaultValue = this.options[\"default\"];\r\n        else\r\n            this.defaultValue = typeDefault;\r\n        \r\n        if (this.long) {\r\n            this.defaultValue = util.Long.fromNumber(this.defaultValue, this.type.charAt(0) === \"u\");\r\n            if (Object.freeze)\r\n                Object.freeze(this.defaultValue); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n        }\r\n    }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(16);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(30),\r\n    util    = require(31);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar convert = require(12);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This method should be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @extends {Object}\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @abstract\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {JSONConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    return convert(this.$type, this, {}, options, convert.toJson);\r\n};\r\n\r\n/**\r\n * Creates a message from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Options\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = function from(object, options) {\r\n    return convert(this.$type, object, new this.constructor(), options, convert.toMessage);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(29),\r\n    util = require(31);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(15),\r\n    Field   = require(16),\r\n    util    = require(31);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(29);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(28);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object\", nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object\", \"an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            /* istanbul ignore next */\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object\", \"a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    \r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(29);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(28);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.getNestedArray();\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name Namespace#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(29);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(28);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(31);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    /* istanbul ignore next */\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(25);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(25);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (!Root)\r\n        Root = require(25);\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className;\r\n    var fullName = this.getFullName();\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(16),\r\n    util  = require(31);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = util.ucFirst(this.name);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nutil.prop(OneOfPrototype, \"fieldsArray\", {\r\n    get: function getFieldsArray() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field\", \"a Field\");\r\n\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field\", \"a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(33);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(24);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return new BufferReader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        \r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        \r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\nvar Reader = require(23);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(20);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(16),\r\n    util   = require(31);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\nvar initParser = function() {\r\n    try { // excluded in noparse builds\r\n        parse  = require(\"./parse\");\r\n        common = require(\"./common\");\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    initParser = null;\r\n};\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (initParser)\r\n        initParser();\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(27);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(31);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(20);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(19),\r\n    util   = require(31),\r\n    rpc    = require(26);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n\r\n            /* istanbul ignore next */\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(20);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(22),\r\n    Field     = require(16),\r\n    Service   = require(28),\r\n    Class     = require(11),\r\n    Message   = require(18),\r\n    Reader    = require(23),\r\n    Writer    = require(35),\r\n    convert   = require(12),\r\n    util      = require(31);\r\n\r\nvar encoder,  // might become cyclic\r\n    decoder,  // might become cyclic\r\n    verifier; // cyclic\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new (this.getCtor())(properties);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object} object JSON object\r\n * @param {MessageConversionOptions} [options] Conversion options\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.from = function from(object, options) {\r\n    return convert(this, object, new (this.getCtor())(), options, convert.toMessage);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    if (!encoder) {\r\n        encoder  = require(14);\r\n        decoder  = require(13);\r\n        verifier = require(34);\r\n    }\r\n    this.encode = encoder(this).eof(this.getFullName() + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(this.getFullName() + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(this.getFullName() + \"$verify\", {\r\n        types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(31);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(33);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(3);\r\nutil.EventEmitter = require(4);\r\nutil.extend       = require(5);\r\nutil.fetch        = require(6);\r\nutil.path         = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the second character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) { // ucFirst counterpart is in runtime util\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Whether running within IE8 or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isIE8 = false; try { util.isIE8 = eval(\"!-[1,]\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    /* istanbul ignore next */\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n * @deprecated Use {@link util.longNe|longNe} instead\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === \"number\"\r\n         ? typeof b === \"number\"\r\n            ? a !== b\r\n            : (a = util.LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === \"number\"\r\n            ? (b = util.LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) { // lcFirst counterpart is in core util\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ucKey = util.ucFirst(key);\r\n    if (descriptor.get)\r\n        target[\"get\" + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target[\"set\" + ucKey] = util.isIE8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (util.isIE8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    Type      = require(29),\r\n    util      = require(31);\r\n\r\nfunction invalid(field, expected) {\r\n    return \"invalid value for field \" + field.getFullName() + \" (\" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected)\";\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else if (field.resolvedType instanceof Type) gen\r\n            (\"var r;\")\r\n            (\"if(r=types[%d].verify(%s))\", fieldIndex, ref)\r\n                (\"return r\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType instanceof Type) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(33);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(36);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset()\r\n        .uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\nvar Writer = require(35);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(33);\r\n\r\nvar utf8   = util.utf8,\r\n    Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        val.copy(buf, pos, 0, val.length);\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser (if not excluded)\r\ntry {\r\n    protobuf.tokenize     = require(\"./tokenize\");\r\n    protobuf.parse        = require(\"./parse\");\r\n    protobuf.common       = require(\"./common\");\r\n} catch (e) {} // eslint-disable-line no-empty\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = require(\"./writer_buffer\");\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = require(\"./reader_buffer\");\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}