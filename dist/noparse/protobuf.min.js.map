{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/convert.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/writer_buffer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","undefined","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","test","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","arg","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","Type","TypeError","MessageCtor","properties","Message","util","merge","$type","getFieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","long","emptyObject","getOneofsArray","oneof","prop","get","indexOf","set","value","setCtor","_TypeError","convert","destination","options","converter","defaults","fields","repeated","arrays","fieldsOnly","Enum","toJson","enums","resolvedType","getValuesById","longs","unsigned","Number","LongBits","from","toNumber","Long","fromNumber","toString","fromValue","bytes","Buffer","isBuffer","toMessage","getCtor","values","fromString","newBuffer","decoder","mtype","group","ref","safeProp","id","keyType","resolvedKeyType","types","basic","packed","genEncodeType","fieldIndex","encoder","oneofs","wireType","mapKey","partOf","required","low","high","ucName","oneofFields","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","className","props","valuesById","testJSON","json","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","rule","toLowerCase","optional","message","extensionField","declaringField","_packed","FieldPrototype","MapField","isPacked","getOption","setOption","ifNotSet","resolved","typeDefault","parent","lookup","freeze","MapFieldPrototype","MessagePrototype","asJSON","object","writer","encodeDelimited","readerOrBuffer","decodeDelimited","verify","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","nested","_nestedArray","_clearProperties","namespace","arrayToJSON","array","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","getEnum","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","getRoot","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucFirst","_fieldsArray","addFieldsToParent","OneOfPrototype","index","self","fieldName","indexOutOfRange","reader","writeLength","RangeError","pos","Reader","readLongVarint","bits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","BufferReader","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","skip","skipType","_configure","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","parse","common","resolvePath","initParser","load","filename","finish","cb","process","parsed","imports","weakImports","sync","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","service","methodsArray","methodName","inherited","getMethodsArray","requestDelimited","responseDelimited","rpcService","method","lcFirst","request","requestData","setImmediate","responseData","response","err2","extensions","reserved","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","verifier","Writer","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","oneOfName","getFieldsById","setup","fld","fork","ldelim","bake","description","dst","allocUnsafe","LongBitsPrototype","zero","zzEncode","zeroHash","parseInt","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","isIE8","utf8Write","encoding","dcodeIO","isFinite","floor","longToHash","longFromHash","fromBits","longNeq","longNe","val","toUpperCase","target","descriptors","descriptor","ucKey","defineProperty","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength","protobuf","roots","tokenize","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(18),\r\n    util    = require(31);\r\n\r\nvar Type; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(29);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type\", \"a Type\");\r\n\r\n    if (ctor) {\r\n        /* istanbul ignore next */\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) {\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.getFieldsArray().forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n            // see util.prop for IE8 support\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.setCtor(ctor);\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\nmodule.exports = convert;\r\n\r\nvar Enum    = require(15),\r\n    util    = require(31);\r\n\r\nvar Type,    // cyclic\r\n    Message;\r\n\r\n/**\r\n * A converter as used by {@link convert}.\r\n * @typedef Converter\r\n * @type {function}\r\n * @param {Field} field Reflected field\r\n * @param {*} value Value to convert\r\n * @param {Object.<string,*>} options Conversion options\r\n * @returns {*} Converted value\r\n */\r\n\r\n/**\r\n * Converts between JSON objects and messages, based on reflection information.\r\n * @param {Type} type Type\r\n * @param {*} source Source object\r\n * @param {*} destination Destination object\r\n * @param {Object.<string,*>} options Conversion options\r\n * @param {Converter} converter Conversion function\r\n * @returns {*} `destination`\r\n * @property {Converter} toJson To JSON converter using {@link JSONConversionOptions}\r\n * @property {Converter} toMessage To message converter using {@link MessageConversionOptions}\r\n */\r\nfunction convert(type, source, destination, options, converter) {\r\n\r\n    if (!Type) { // require this here already so it is available within the converters below\r\n        Type = require(29);\r\n        Message = require(18);\r\n    }\r\n\r\n    if (!options)\r\n        options = {};\r\n\r\n    var keys = Object.keys(options.defaults ? type.fields : source);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = type.fields[key = keys[i]],\r\n            value = source[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value || options.defaults || options.arrays) {\r\n                    destination[key] = [];\r\n                    if (value)\r\n                        for (var j = 0, l = value.length; j < l; ++j)\r\n                            destination[key].push(converter(field, value[j], options));\r\n                }\r\n            } else\r\n                destination[key] = converter(field, value, options);\r\n        } else if (!options.fieldsOnly)\r\n            destination[key] = value;\r\n    }\r\n    return destination;\r\n}\r\n\r\n/**\r\n * JSON conversion options as used by {@link Message#asJSON} with {@link convert}.\r\n * @typedef JSONConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] If `true`, keeps only properties that reference a field.\r\n * @property {*} [longs] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @property {*} [enums=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to `Number`, which sets the numeric ids.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type, which usually is an `Uint8Array` in the browser and a `Buffer` under node.\r\n * @property {boolean} [defaults=false] If `true`, sets default values on the resulting object including empty arrays for repeated fields\r\n * @property {boolean} [arrays=false] If `true`, always initializes empty arrays for repeated fields. Only relevant with `defaults=false`.\r\n */\r\n/**/\r\nconvert.toJson = function toJson(field, value, options) {\r\n    if (!options)\r\n        options = {};\r\n\r\n    // Recurse into inner messages\r\n    if (value instanceof Message)\r\n        return convert(value.$type, value, {}, options, toJson);\r\n\r\n    // Enums as strings\r\n    if (options.enums && field.resolvedType instanceof Enum)\r\n        return options.enums === String\r\n            ? field.resolvedType.getValuesById()[value]\r\n            : value | 0;\r\n\r\n    // Longs as numbers or strings\r\n    if (options.longs && field.long) {\r\n        var unsigned = field.type.charAt(0) === \"u\";\r\n        if (options.longs === Number)\r\n            return typeof value === \"number\"\r\n                ? value\r\n                : util.LongBits.from(value).toNumber(unsigned);\r\n        if (options.longs === String) {\r\n            if(typeof value === \"number\")\r\n                return util.Long.fromNumber(value, unsigned).toString();\r\n            value = util.Long.fromValue(value); // has no unsigned option\r\n            value.unsigned = unsigned;\r\n            return value.toString();\r\n        }\r\n    }\r\n\r\n    // Bytes as base64 strings, plain arrays or buffers\r\n    if (options.bytes && field.bytes) {\r\n        if (options.bytes === String)\r\n            return util.base64.encode(value, 0, value.length);\r\n        if (options.bytes === Array)\r\n            return Array.prototype.slice.call(value);\r\n        if (options.bytes === util.Buffer && !util.Buffer.isBuffer(value))\r\n            return util.Buffer.from(value); // polyfilled\r\n    }\r\n    return value;\r\n};\r\n\r\n/**\r\n * Message conversion options as used by {@link Message.from} and {@link Type#from} with {@link convert}.\r\n * @typedef MessageConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n */\r\n/**/\r\nconvert.toMessage = function toMessage(field, value, options) {\r\n    switch (typeof value) {\r\n\r\n        // Recurse into inner messages\r\n        case \"object\":\r\n            if (value) {\r\n                if (field.resolvedType instanceof Type)\r\n                    return convert(field.resolvedType, value, new (field.resolvedType.getCtor())(), options, toMessage);\r\n                if (field.type === \"bytes\")\r\n                    return util.Buffer\r\n                        ? util.Buffer.isBuffer(value)\r\n                          ? value\r\n                          : util.Buffer.from(value) // polyfilled\r\n                        : value instanceof util.Array\r\n                          ? value\r\n                          : new util.Array(value);\r\n            }\r\n            break;\r\n\r\n        // Strings to proper numbers, longs or buffers\r\n        case \"string\":\r\n            if (field.resolvedType instanceof Enum)\r\n                return field.resolvedType.values[value] || 0;\r\n            if (field.long)\r\n                return util.Long.fromString(value, field.type.charAt(0) === \"u\");\r\n            if (field.bytes) {\r\n                var buf = util.newBuffer(util.base64.length(value));\r\n                util.base64.decode(value, buf, 0);\r\n                return buf;\r\n            }\r\n            break;\r\n\r\n        // Numbers to proper longs\r\n        case \"number\":\r\n            if (field.long)\r\n                return util.Long.fromNumber(value, field.type.charAt(0) === \"u\");\r\n            break;\r\n\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(30),\r\n    util    = require(31);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"%s&&%s.length||(%s=[])\", ref, ref, ref);\r\n\r\n            // Packed\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(30),\r\n    util     = require(31);\r\n\r\nfunction genEncodeType(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.getFieldsArray();\r\n    var oneofs = mtype.getOneofsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(%s&&%s!==util.emptyObject){\", ref, ref)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\"w.uint32(%d).%s(%s[ks[i]])\", 16 | wireType, type, ref);\r\n            gen\r\n            (\"w.ldelim()\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length){\", ref, ref)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s)\", ref)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genEncodeType(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) {\r\n                    gen\r\n    (\"if(%s!==undefined&&%s!==null&&util.longNe(%s,%d,%d))\", ref, ref, ref, field.defaultValue.low, field.defaultValue.high);\r\n                } else gen\r\n    (\"if(%s!==undefined&&%s!==%j)\", ref, ref, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genEncodeType(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i];\r\n        gen\r\n        (\"switch(%s){\", \"m.get\" + oneof.ucName + \"()\");\r\n        var oneofFields = oneof.getFieldsArray();\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType === undefined)\r\n                genEncodeType(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(31);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById|valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id\", \"a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(15),\r\n    types     = require(30),\r\n    util      = require(31);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id\", \"a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            // defaults to packed=true if not explicity set to false\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed|packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(17);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        if (!Type)\r\n            Type = require(29);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            typeDefault = 0;\r\n        /* istanbul ignore next */\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved, determine the default value\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else {\r\n        if (this.options && this.options[\"default\"] !== undefined)\r\n            this.defaultValue = this.options[\"default\"];\r\n        else\r\n            this.defaultValue = typeDefault;\r\n\r\n        if (this.long) {\r\n            this.defaultValue = util.Long.fromNumber(this.defaultValue, this.type.charAt(0) === \"u\");\r\n            if (Object.freeze)\r\n                Object.freeze(this.defaultValue); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n        }\r\n    }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(16);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(30),\r\n    util    = require(31);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar convert = require(12);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {JSONConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    return convert(this.$type, this, {}, options, convert.toJson);\r\n};\r\n\r\n/**\r\n * Creates a message from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Options\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = function from(object, options) {\r\n    return convert(this.$type, object, new this.constructor(), options, convert.toMessage);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(29),\r\n    util = require(31);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(15),\r\n    Field   = require(16),\r\n    util    = require(31);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(29);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(28);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object\", nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object\", \"an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            /* istanbul ignore next */\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object\", \"a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(29);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(28);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.getNestedArray();\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name Namespace#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(29);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(28);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(31);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    /* istanbul ignore next */\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(25);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(25);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (!Root)\r\n        Root = require(25);\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className;\r\n    var fullName = this.getFullName();\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(16),\r\n    util  = require(31);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = util.ucFirst(this.name);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nutil.prop(OneOfPrototype, \"fieldsArray\", {\r\n    get: function getFieldsArray() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field\", \"a Field\");\r\n\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field\", \"a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(33);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(24);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return new BufferReader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\nvar Reader = require(23);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(20);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(16),\r\n    util   = require(31);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>|*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    // note that `json` actually must be of type `Object.<string,*>` but TypeScript\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\nvar initParser = function() {\r\n    try { // excluded in noparse builds\r\n        parse  = require(\"./parse\");\r\n        common = require(\"./common\");\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    initParser = null;\r\n};\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (initParser)\r\n        initParser();\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.getFullName();\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(27);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(31);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(20);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(19),\r\n    util   = require(31),\r\n    rpc    = require(26);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n\r\n            /* istanbul ignore next */\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\nvar Namespace = require(20);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(22),\r\n    Field     = require(16),\r\n    Service   = require(28),\r\n    Class     = require(11),\r\n    Message   = require(18),\r\n    Reader    = require(23),\r\n    Writer    = require(35),\r\n    convert   = require(12),\r\n    util      = require(31);\r\n\r\nvar encoder,  // might become cyclic\r\n    decoder,  // might become cyclic\r\n    verifier; // cyclic\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new (this.getCtor())(properties);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Conversion options\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.from = function from(object, options) {\r\n    return convert(this, object, new (this.getCtor())(), options, convert.toMessage);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    if (!encoder) {\r\n        encoder  = require(14);\r\n        decoder  = require(13);\r\n        verifier = require(34);\r\n    }\r\n    this.encode = encoder(this).eof(this.getFullName() + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(this.getFullName() + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(this.getFullName() + \"$verify\", {\r\n        types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(31);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(33);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(3);\r\nutil.EventEmitter = require(4);\r\nutil.extend       = require(5);\r\nutil.fetch        = require(6);\r\nutil.path         = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the second character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) { // ucFirst counterpart is in runtime util\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Whether running within IE8 or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isIE8 = false; try { util.isIE8 = eval(\"!-[1,]\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    /* istanbul ignore next */\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n * @deprecated Use {@link util.longNe|longNe} instead\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === \"number\"\r\n         ? typeof b === \"number\"\r\n            ? a !== b\r\n            : (a = util.LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === \"number\"\r\n            ? (b = util.LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) { // lcFirst counterpart is in core util\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object.<string,*>} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object.<string,*>} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ucKey = util.ucFirst(key);\r\n    if (descriptor.get)\r\n        target[\"get\" + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target[\"set\" + ucKey] = util.isIE8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (util.isIE8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    Type      = require(29),\r\n    util      = require(31);\r\n\r\nfunction invalid(field, expected) {\r\n    return \"invalid value for field \" + field.getFullName() + \" (\" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected)\";\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else if (field.resolvedType instanceof Type) gen\r\n            (\"var r;\")\r\n            (\"if(r=types[%d].verify(%s))\", fieldIndex, ref)\r\n                (\"return r\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType instanceof Type) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(33);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(36);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset()\r\n        .uint32(len)\r\n        .tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\nvar Writer = require(35);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(33);\r\n\r\nvar utf8   = util.utf8,\r\n    Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        val.copy(buf, pos, 0, val.length);\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser (if not excluded)\r\ntry {\r\n    protobuf.tokenize     = require(\"./tokenize\");\r\n    protobuf.parse        = require(\"./parse\");\r\n    protobuf.common       = require(\"./common\");\r\n} catch (e) {} // eslint-disable-line no-empty\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = require(\"./writer_buffer\");\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = require(\"./reader_buffer\");\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n/* istanbul ignore next */\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}