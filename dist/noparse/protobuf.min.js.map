{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/converter.js","src/converters.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/type.js","src/types.js","src/util.js","src/util/codegen/index.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/writer_buffer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","undefined","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","keys","Object","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","replace","isAbsolute","test","normalize","parts","split","absolute","prefix","shift","join","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","Type","TypeError","MessageCtor","properties","Message","util","merge","$type","fieldsArray","forEach","field","name","isArray","defaultValue","emptyArray","isObject","long","emptyObject","oneofsArray","oneof","defineProperty","get","indexOf","set","value","_TypeError","genConvert","fieldIndex","prop","resolvedType","Enum","sprintf","converter","mtype","fields","gen","codegen","convert","safeProp","repeated","converters","json","typeOrCtor","options","fieldsOnly","enums","values","defaults","longs","defaultLow","defaultHigh","unsigned","longNe","low","high","Number","LongBits","from","toNumber","Long","fromNumber","toString","fromValue","bytes","Buffer","isBuffer","message","fromString","newBuffer","decoder","group","ref","id","map","keyType","resolvedKeyType","types","basic","packed","genEncodeType","encoder","oneofs","wireType","mapKey","partOf","required","oneofFields","ReflectionObject","valuesById","self","key","val","parseInt","EnumPrototype","className","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","rule","toLowerCase","optional","extensionField","declaringField","_packed","FieldPrototype","MapField","defineProperties","getOption","setOption","ifNotSet","resolved","typeDefault","parent","lookup","freeze","MapFieldPrototype","MessagePrototype","asJSON","object","writer","encodeDelimited","readerOrBuffer","decodeDelimited","verify","source","impl","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","nested","_nestedArray","_clearProperties","clearCache","namespace","arrayToJSON","array","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","nestedJson","ns","nestedName","getEnum","prev","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","root","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","fullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","ucFirst","_fieldsArray","addFieldsToParent","OneOfPrototype","index","fieldName","indexOutOfRange","reader","writeLength","RangeError","pos","Reader","readLongVarint","bits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","BufferReader","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","skip","skipType","_configure","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","parse","common","resolvePath","initParser","load","filename","finish","cb","process","JSON","parsed","imports","weakImports","sync","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","service","methodsArray","methodName","inherited","requestDelimited","responseDelimited","rpcService","method","lcFirst","request","requestData","setImmediate","responseData","response","err2","extensions","reserved","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","Writer","verifier","fieldsById","names","repeatedFieldsArray","filter","oneOfName","setup","fld","eof","fork","ldelim","bake","description","dst","src","str","allocUnsafe","line","level","indent","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","scope","verbose","console","log","Function","concat","format","$0","$1","arg","stringify","supported","LongBitsPrototype","zero","zzEncode","zeroHash","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","isIE8","utf8Write","encoding","dcodeIO","isFinite","floor","longToHash","longFromHash","fromBits","toUpperCase","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength","protobuf","roots","tokenize","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(6);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(18),\r\n    util    = require(31);\r\n\r\nvar Type; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(29);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type\", \"a Type\");\r\n\r\n    if (ctor) {\r\n        /* istanbul ignore next */\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) {\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.fieldsArray.forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.oneofsArray.forEach(function(oneof) {\r\n        Object.defineProperty(prototype, oneof.resolve().name, {\r\n            get: function() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\nmodule.exports = converter;\r\n\r\nvar Enum       = require(15),\r\n    converters = require(12),\r\n    util       = require(31);\r\n\r\nvar sprintf    = util.codegen.sprintf;\r\n\r\nfunction genConvert(field, fieldIndex, prop) {\r\n    if (field.resolvedType)\r\n        return field.resolvedType instanceof Enum\r\n             ? sprintf(\"f.enums(s%s,%d,types[%d].values,o)\", prop, 0, fieldIndex)\r\n             : sprintf(\"types[%d].convert(s%s,f,o)\", fieldIndex, prop);\r\n    switch (field.type) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            return sprintf(\"f.longs(s%s,%d,%d,%j,o)\", prop, 0, 0, field.type.charAt(0) === \"u\");\r\n        case \"bytes\":\r\n            return sprintf(\"f.bytes(s%s,%j,o)\", prop, field.defaultValue);\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Generates a conveter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @param {function} generateField Field generator\r\n * @returns {Codegen} Codegen instance\r\n * @property {ConverterImpl} json Converter implementation producing JSON\r\n * @property {ConverterImpl} message Converter implementation producing runtime messages\r\n */\r\nfunction converter(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"s\", \"f\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d=f.create(s,this,o)\");\r\n    if (fields.length) { gen\r\n    (\"if(d){\");\r\n        var convert;\r\n        fields.forEach(function(field, i) {\r\n            var prop = util.safeProp(field.resolve().name);\r\n            if (field.repeated) { gen\r\n        (\"if(s%s&&s%s.length){\", prop, prop)\r\n            (\"d%s=[]\", prop)\r\n            (\"for(var i=0;i<s%s.length;++i)\", prop);\r\n                if (convert = genConvert(field, i, prop + \"[i]\")) gen\r\n                (\"d%s.push(%s)\", prop, convert);\r\n                else gen\r\n                (\"d%s.push(s%s[i])\", prop, prop);\r\n                gen\r\n        (\"}else if(o.defaults||o.arrays)\")\r\n            (\"d%s=[]\", prop);\r\n            } else if (convert = genConvert(field, i, prop)) gen\r\n        (\"d%s=%s\", prop, convert);\r\n            else gen\r\n        (\"if(d%s===undefined&&o.defaults)\", prop)\r\n            (\"d%s=%j\", prop, field.defaultValue);\r\n        });\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nutil.merge(converter, converters);\r\n\r\n/**\r\n * A converter implementation as used by {@link Type#convert} respectively {@link Message.convert}.\r\n * @typedef ConverterImpl\r\n * @type {Object}\r\n * @property {ConverterCreate} create Function for creating a new destination object\r\n * @property {ConverterEnums} enums Function for converting enum values\r\n * @property {ConverterLongs} longs Function for converting long values\r\n * @property {ConverterBytes} bytes Function for converting bytes values\r\n */\r\n\r\n/**\r\n * A function for creating a new destination object.\r\n * @typedef ConverterCreate\r\n * @type {function}\r\n * @param {Message|Object} value Source object or message\r\n * @param {Function} typeOrCtor Reflected type or message constructor\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Destination object or message\r\n */\r\n\r\n/**\r\n * A function for converting enum values.\r\n * @typedef ConverterEnums\r\n * @type {function}\r\n * @param {number|string} value Actual value\r\n * @param {number} defaultValue Default value\r\n * @param {Object.<string,number>} values Possible values\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {number|string} Converted value\r\n */\r\n\r\n/**\r\n * A function for converting long values.\r\n * @typedef ConverterLongs\r\n * @type {function}\r\n * @param {number|string|Long} value Actual value\r\n * @param {Long} defaultValue Default value\r\n * @param {boolean} unsigned Whether unsigned or not\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {number|string|Long} Converted value\r\n */\r\n\r\n/**\r\n * A function for converting bytes values.\r\n * @typedef ConverterBytes\r\n * @type {function}\r\n * @param {string|number[]|Uint8Array} value Actual value\r\n * @param {number[]} defaultValue Default value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {string|number[]|Uint8Array} Converted value \r\n */\r\n","\"use strict\";\r\nvar converters = exports;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * JSON conversion options as used by {@link Message#asJSON}.\r\n * @typedef JSONConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n * @property {*} [longs] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @property {*} [enums=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Converter implementation producing JSON.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.json = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        return options.fieldsOnly\r\n            ? {}\r\n            : util.merge({}, value);\r\n    },\r\n    enums: function(value, defaultValue, values, options) {\r\n        if (!options.defaults) {\r\n            if (value === undefined || value === defaultValue)\r\n                return undefined;\r\n        } else if (value === undefined)\r\n            value = defaultValue;\r\n        return options.enums === String && typeof value === \"number\"\r\n            ? values[value]\r\n            : value;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned, options) {\r\n        if (!value) {\r\n            if (options.defaults)\r\n                value = { low: defaultLow, high: defaultHigh };\r\n            else\r\n                return undefined;\r\n        } else if (!util.longNe(value, defaultLow, defaultHigh) && !options.defaults)\r\n            return undefined;\r\n        if (options.longs === Number)\r\n            return typeof value === \"number\"\r\n                ? value\r\n                : util.LongBits.from(value).toNumber(unsigned);\r\n        if (options.longs === String) {\r\n            if (typeof value === \"number\")\r\n                return util.Long.fromNumber(value, unsigned).toString();\r\n            value = util.Long.fromValue(value); // has no unsigned option\r\n            value.unsigned = unsigned;\r\n            return value.toString();\r\n        }\r\n        return value;\r\n    },\r\n    bytes: function(value, defaultValue, options) {\r\n        if (!value) {\r\n            if (options.defaults)\r\n                value = defaultValue;\r\n            else\r\n                return undefined;\r\n        } else if (!value.length && !options.defaults)\r\n            return undefined;\r\n        return options.bytes === String\r\n            ? util.base64.encode(value, 0, value.length)\r\n            : options.bytes === Array\r\n            ? Array.prototype.slice.call(value)\r\n            : options.bytes === util.Buffer && !util.Buffer.isBuffer(value)\r\n            ? util.Buffer.from(value) // polyfilled\r\n            : value;\r\n    }\r\n};\r\n\r\n/**\r\n * Message conversion options as used by {@link Message.from} and {@link Type#from}.\r\n * @typedef MessageConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n */\r\n// Note that options.defaults and options.arrays also affect the message converter.\r\n// As defaults are already on the prototype, usage is not recommended and thus undocumented.\r\n\r\n/**\r\n * Converter implementation producing runtime messages.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.message = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        // can't use instanceof Type here because converters are also part of the minimal runtime\r\n        return new (typeOrCtor.ctor ? typeOrCtor.ctor : typeOrCtor)(options.fieldsOnly ? undefined : value);\r\n    },\r\n    enums: function(value, defaultValue, values) {\r\n        if (typeof value === \"string\")\r\n            return values[value];\r\n        return value | 0;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned) {\r\n        if (typeof value === \"string\")\r\n            return util.Long.fromString(value, unsigned);\r\n        if (typeof value === \"number\")\r\n            return util.Long.fromNumber(value, unsigned);\r\n        return value;\r\n    },\r\n    bytes: function(value/*, defaultValue*/) {\r\n        if (util.Buffer)\r\n            return util.Buffer.isBuffer(value)\r\n                ? value\r\n                : util.Buffer.from(value, \"base64\"); // polyfilled\r\n        if (typeof value === \"string\") {\r\n            var buf = util.newBuffer(util.base64.length(value));\r\n            util.base64.decode(value, buf, 0);\r\n            return buf;\r\n        }\r\n        return value instanceof util.Array\r\n            ? value\r\n            : new util.Array(value);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(30),\r\n    util    = require(31);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.ctor)\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packed\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(30),\r\n    util     = require(31);\r\n\r\nfunction genEncodeType(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var oneofs = mtype.oneofsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(%s&&%s!==util.emptyObject){\", ref, ref)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length){\", ref, ref)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s){\", ref)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genEncodeType(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) {\r\n                    gen\r\n    (\"if(%s!==undefined&&%s!==null&&util.longNe(%s,%d,%d))\", ref, ref, ref, field.defaultValue.low, field.defaultValue.high);\r\n                } else gen\r\n    (\"if(%s!==undefined&&%s!==%j)\", ref, ref, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genEncodeType(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i];\r\n        gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        var oneofFields = oneof.fieldsArray;\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType === undefined)\r\n                genEncodeType(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(31);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    var self = this;\r\n    Object.keys(values || {}).forEach(function(key) {\r\n        var val;\r\n        if (typeof values[key] === \"number\")\r\n            val = values[key];\r\n        else {\r\n            val = parseInt(key, 10);\r\n            key = values[key];\r\n        }\r\n        self.valuesById[self.values[key] = val] = key;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id\", \"a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(15),\r\n    types     = require(30),\r\n    util      = require(31);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id\", \"a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nObject.defineProperties(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: function() {\r\n            // defaults to packed=true if not explicity set to false\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(17);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        if (!Type)\r\n            Type = require(29);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            typeDefault = 0;\r\n        /* istanbul ignore next */\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved, determine the default value\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else {\r\n        if (this.options && this.options[\"default\"] !== undefined) {\r\n            this.defaultValue = this.options[\"default\"];\r\n            if (this.resolvedType instanceof Enum && typeof this.defaultValue === \"string\")\r\n                this.defaultValue = this.resolvedType.values[this.defaultValue] || 0;\r\n        } else\r\n            this.defaultValue = typeDefault;\r\n\r\n        if (this.long) {\r\n            this.defaultValue = util.Long.fromNumber(this.defaultValue, this.type.charAt(0) === \"u\");\r\n            if (Object.freeze)\r\n                Object.freeze(this.defaultValue); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n        }\r\n    }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(16);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(30),\r\n    util    = require(31);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar converters = require(12);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {JSONConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    return this.$type.convert(this, converters.json, options);\r\n};\r\n\r\n/**\r\n * Creates a message from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Options\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = function from(object, options) {\r\n    return this.$type.convert(object, converters.message, options);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Converts an object or runtime message of this type.\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\nMessage.convert = function convert(source, impl, options) {\r\n    return this.$type.convert(source, impl, options);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(29),\r\n    util = require(31);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(15),\r\n    Field   = require(16),\r\n    util    = require(31);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(29);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(28);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\nObject.defineProperties(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object\", nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object\", \"an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            /* istanbul ignore next */\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object\", \"a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(29);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(28);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.nestedArray;\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name Namespace#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(29);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(28);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(31);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    /* istanbul ignore next */\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(25);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(25);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (!Root)\r\n        Root = require(25);\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(16),\r\n    util  = require(31);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = util.ucFirst(this.name);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(OneOfPrototype, \"fieldsArray\", {\r\n    get: function() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field\", \"a Field\");\r\n\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field\", \"a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(24);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return new BufferReader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\nvar Reader = require(23);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(20);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(16),\r\n    util   = require(31);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>|*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    // note that `json` actually must be of type `Object.<string,*>` but TypeScript\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\nvar initParser = function() {\r\n    try { // excluded in noparse builds\r\n        parse  = require(\"./parse\");\r\n        common = require(\"./common\");\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    initParser = null;\r\n};\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (initParser)\r\n        initParser();\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(27);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(31);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(20);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(19),\r\n    util   = require(31),\r\n    rpc    = require(26);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nObject.defineProperties(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.methodsArray.forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n\r\n            /* istanbul ignore next */\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\nvar Namespace = require(20);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(22),\r\n    Field     = require(16),\r\n    Service   = require(28),\r\n    Class     = require(10),\r\n    Message   = require(18),\r\n    Reader    = require(23),\r\n    Writer    = require(36),\r\n    util      = require(31),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(35),\r\n    converter = require(11);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.fieldsArray.filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Conversion options\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.from = function from(object, options) {\r\n    return this.convert(object, converter.message, options);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = this.fieldsArray.map(function(fld) { return fld.resolve().resolvedType; });\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.convert = converter(this).eof(fullName + \"$convert\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Converts an object or runtime message.\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\nTypePrototype.convert = function convert_setup(source, impl, options) {\r\n    return this.setup().convert(source, impl, options); // overrides this method\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(31);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(34);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(32);\r\nutil.EventEmitter = require(3);\r\nutil.extend       = require(4);\r\nutil.fetch        = require(5);\r\nutil.path         = require(7);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the second character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) { // ucFirst counterpart is in runtime util\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Whether running within IE8 or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isIE8 = false; try { util.isIE8 = eval(\"!-[1,]\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    /* istanbul ignore next */\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) { // lcFirst counterpart is in core util\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(31);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.fullName.substring(1) + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e;\")\r\n            (\"if(e=types[%d].verify(%s))\", fieldIndex, ref)\r\n                (\"return e\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(37);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset()\r\n        .uint32(len)\r\n        .tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\nvar Writer = require(36);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(34);\r\n\r\nvar utf8   = util.utf8,\r\n    Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        val.copy(buf, pos, 0, val.length);\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser (if not excluded)\r\ntry {\r\n    protobuf.tokenize     = require(\"./tokenize\");\r\n    protobuf.parse        = require(\"./parse\");\r\n    protobuf.common       = require(\"./common\");\r\n} catch (e) {} // eslint-disable-line no-empty\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = require(\"./writer_buffer\");\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = require(\"./reader_buffer\");\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n/* istanbul ignore next */\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}