{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/converter.js","src/converters.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/type.js","src/types.js","src/util.js","src/util/base64/index.js","src/util/codegen/index.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/writer_buffer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","undefined","listeners","splice","emit","extend","ctor","keys","Object","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","replace","isAbsolute","test","normalize","parts","split","absolute","prefix","shift","join","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","offset","buf","utf8","string","len","c","charCodeAt","read","buffer","start","end","chunk","String","fromCharCode","write","c1","c2","Class","type","Type","TypeError","MessageCtor","properties","Message","util","merge","$type","fieldsArray","forEach","field","name","Array","isArray","defaultValue","emptyArray","isObject","long","emptyObject","oneofsArray","oneof","defineProperty","get","indexOf","set","value","genConvert","fieldIndex","prop","resolvedType","Enum","sprintf","charAt","converter","mtype","fields","gen","codegen","convert","safeProp","repeated","converters","json","typeOrCtor","options","fieldsOnly","enums","values","defaults","longs","defaultLow","defaultHigh","unsigned","longNe","low","high","Number","LongBits","from","toNumber","Long","fromNumber","toString","fromValue","bytes","base64","encode","Buffer","isBuffer","message","fromString","newBuffer","decode","decoder","group","ref","id","map","keyType","resolvedKeyType","types","basic","packed","genEncodeType","encoder","oneofs","wireType","mapKey","partOf","required","oneofFields","j","ReflectionObject","valuesById","self","key","val","parseInt","EnumPrototype","className","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","rule","toLowerCase","optional","extensionField","declaringField","_packed","FieldPrototype","MapField","defineProperties","getOption","setOption","ifNotSet","resolved","typeDefault","parent","lookup","freeze","MapFieldPrototype","MessagePrototype","asJSON","object","writer","encodeDelimited","readerOrBuffer","decodeDelimited","verify","source","impl","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","nested","_nestedArray","_clearProperties","clearCache","namespace","arrayToJSON","array","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","nestedJson","ns","nestedName","getEnum","prev","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","root","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","fullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","_fieldsArray","addFieldsToParent","OneOfPrototype","index","fieldName","indexOutOfRange","reader","writeLength","RangeError","pos","Reader","readLongVarint","bits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","BufferReader","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","Math","pow","float","readDouble","Float64Array","f64","double","skip","skipType","_configure","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","parse","common","resolvePath","initParser","load","filename","finish","cb","process","JSON","parsed","imports","weakImports","sync","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","service","methodsArray","methodName","inherited","requestDelimited","responseDelimited","rpcService","method","lcFirst","request","requestData","setImmediate","responseData","response","err2","extensions","reserved","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","Writer","verifier","fieldsById","names","repeatedFieldsArray","filter","oneOfName","setup","fld","eof","fork","ldelim","bake","dst","src","str","ucFirst","toUpperCase","allocUnsafe","p","ceil","b64","s64","b","invalidEncoding","line","level","indent","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","scope","verbose","console","log","Function","concat","format","$0","$1","arg","stringify","supported","LongBitsPrototype","zero","zzEncode","zeroHash","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","utf8Write","encoding","dcodeIO","isFinite","floor","longToHash","longFromHash","fromBits","arrayNe","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength","protobuf","roots","tokenize","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(5);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(17),\r\n    util    = require(30);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(28);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        /* istanbul ignore next */\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) {\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.fieldsArray.forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.oneofsArray.forEach(function(oneof) {\r\n        Object.defineProperty(prototype, oneof.resolve().name, {\r\n            get: function() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\nmodule.exports = converter;\r\n\r\nvar Enum       = require(14),\r\n    converters = require(11),\r\n    util       = require(30);\r\n\r\nvar sprintf    = util.codegen.sprintf;\r\n\r\nfunction genConvert(field, fieldIndex, prop) {\r\n    if (field.resolvedType)\r\n        return field.resolvedType instanceof Enum\r\n             ? sprintf(\"f.enums(s%s,%d,types[%d].values,o)\", prop, 0, fieldIndex)\r\n             : sprintf(\"types[%d].convert(s%s,f,o)\", fieldIndex, prop);\r\n    switch (field.type) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            return sprintf(\"f.longs(s%s,%d,%d,%j,o)\", prop, 0, 0, field.type.charAt(0) === \"u\");\r\n        case \"bytes\":\r\n            return sprintf(\"f.bytes(s%s,%j,o)\", prop, Array.prototype.slice.call(field.defaultValue));\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Generates a conveter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @param {function} generateField Field generator\r\n * @returns {Codegen} Codegen instance\r\n * @property {ConverterImpl} json Converter implementation producing JSON\r\n * @property {ConverterImpl} message Converter implementation producing runtime messages\r\n */\r\nfunction converter(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"s\", \"f\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d=f.create(s,this,o)\");\r\n    if (fields.length) { gen\r\n    (\"if(d){\");\r\n        var convert;\r\n        fields.forEach(function(field, i) {\r\n            var prop = util.safeProp(field.resolve().name);\r\n            if (field.repeated) { gen\r\n        (\"if(s%s&&s%s.length){\", prop, prop)\r\n            (\"d%s=[]\", prop)\r\n            (\"for(var i=0;i<s%s.length;++i)\", prop);\r\n                if (convert = genConvert(field, i, prop + \"[i]\")) gen\r\n                (\"d%s.push(%s)\", prop, convert);\r\n                else gen\r\n                (\"d%s.push(s%s[i])\", prop, prop);\r\n                gen\r\n        (\"}else if(o.defaults||o.arrays)\")\r\n            (\"d%s=[]\", prop);\r\n            } else if (convert = genConvert(field, i, prop)) gen\r\n        (\"d%s=%s\", prop, convert);\r\n            else gen\r\n        (\"if(d%s===undefined&&o.defaults)\", prop)\r\n            (\"d%s=%j\", prop, field.defaultValue);\r\n        });\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nutil.merge(converter, converters);\r\n\r\n/**\r\n * A converter implementation as used by {@link Type#convert} respectively {@link Message.convert}.\r\n * @typedef ConverterImpl\r\n * @type {Object}\r\n * @property {ConverterCreate} create Function for creating a new destination object\r\n * @property {ConverterEnums} enums Function for converting enum values\r\n * @property {ConverterLongs} longs Function for converting long values\r\n * @property {ConverterBytes} bytes Function for converting bytes values\r\n */\r\n\r\n/**\r\n * A function for creating a new destination object.\r\n * @typedef ConverterCreate\r\n * @type {function}\r\n * @param {Message|Object} value Source object or message\r\n * @param {Function} typeOrCtor Reflected type or message constructor\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Destination object or message\r\n */\r\n\r\n/**\r\n * A function for converting enum values.\r\n * @typedef ConverterEnums\r\n * @type {function}\r\n * @param {number|string} value Actual value\r\n * @param {number} defaultValue Default value\r\n * @param {Object.<string,number>} values Possible values\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {number|string} Converted value\r\n */\r\n\r\n/**\r\n * A function for converting long values.\r\n * @typedef ConverterLongs\r\n * @type {function}\r\n * @param {number|string|Long} value Actual value\r\n * @param {Long} defaultValue Default value\r\n * @param {boolean} unsigned Whether unsigned or not\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {number|string|Long} Converted value\r\n */\r\n\r\n/**\r\n * A function for converting bytes values.\r\n * @typedef ConverterBytes\r\n * @type {function}\r\n * @param {string|number[]|Uint8Array} value Actual value\r\n * @param {number[]} defaultValue Default value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {string|number[]|Uint8Array} Converted value \r\n */\r\n","\"use strict\";\r\nvar converters = exports;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * JSON conversion options as used by {@link Message#asJSON}.\r\n * @typedef JSONConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n * @property {*} [longs] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @property {*} [enums=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Converter implementation producing JSON.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.json = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        return options.fieldsOnly\r\n            ? {}\r\n            : util.merge({}, value);\r\n    },\r\n    enums: function(value, defaultValue, values, options) {\r\n        if (!options.defaults) {\r\n            if (value === undefined || value === defaultValue)\r\n                return undefined;\r\n        } else if (value === undefined)\r\n            value = defaultValue;\r\n        return options.enums === String && typeof value === \"number\"\r\n            ? values[value]\r\n            : value;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned, options) {\r\n        if (!value) {\r\n            if (options.defaults)\r\n                value = { low: defaultLow, high: defaultHigh };\r\n            else\r\n                return undefined;\r\n        } else if (!util.longNe(value, defaultLow, defaultHigh) && !options.defaults)\r\n            return undefined;\r\n        if (options.longs === Number)\r\n            return typeof value === \"number\"\r\n                ? value\r\n                : util.LongBits.from(value).toNumber(unsigned);\r\n        if (options.longs === String) {\r\n            if (typeof value === \"number\")\r\n                return util.Long.fromNumber(value, unsigned).toString();\r\n            value = util.Long.fromValue(value); // has no unsigned option\r\n            value.unsigned = unsigned;\r\n            return value.toString();\r\n        }\r\n        return value;\r\n    },\r\n    bytes: function(value, defaultValue, options) {\r\n        if (!value) {\r\n            if (options.defaults)\r\n                value = defaultValue;\r\n            else\r\n                return undefined;\r\n        } else if (!value.length && !options.defaults)\r\n            return undefined;\r\n        return options.bytes === String\r\n            ? util.base64.encode(value, 0, value.length)\r\n            : options.bytes === Array\r\n            ? Array.prototype.slice.call(value)\r\n            : options.bytes === util.Buffer && !util.Buffer.isBuffer(value)\r\n            ? util.Buffer.from(value) // polyfilled\r\n            : value;\r\n    }\r\n};\r\n\r\n/**\r\n * Message conversion options as used by {@link Message.from} and {@link Type#from}.\r\n * @typedef MessageConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n */\r\n// Note that options.defaults and options.arrays also affect the message converter.\r\n// As defaults are already on the prototype, usage is not recommended and thus undocumented.\r\n\r\n/**\r\n * Converter implementation producing runtime messages.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.message = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        // can't use instanceof Type here because converters are also part of the minimal runtime\r\n        return new (typeOrCtor.ctor ? typeOrCtor.ctor : typeOrCtor)(options.fieldsOnly ? undefined : value);\r\n    },\r\n    enums: function(value, defaultValue, values) {\r\n        if (typeof value === \"string\")\r\n            return values[value];\r\n        return value | 0;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned) {\r\n        if (typeof value === \"string\")\r\n            return util.Long.fromString(value, unsigned);\r\n        if (typeof value === \"number\")\r\n            return util.Long.fromNumber(value, unsigned);\r\n        return value;\r\n    },\r\n    bytes: function(value/*, defaultValue*/) {\r\n        if (util.Buffer)\r\n            return util.Buffer.isBuffer(value)\r\n                ? value\r\n                : util.Buffer.from(value, \"base64\"); // polyfilled\r\n        if (typeof value === \"string\") {\r\n            var buf = util.newBuffer(util.base64.length(value));\r\n            util.base64.decode(value, buf, 0);\r\n            return buf;\r\n        }\r\n        return value instanceof util.Array\r\n            ? value\r\n            : new util.Array(value);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(14),\r\n    types   = require(29),\r\n    util    = require(30);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.ctor)\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packed\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(14),\r\n    types    = require(29),\r\n    util     = require(30);\r\n\r\nfunction genEncodeType(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var oneofs = mtype.oneofsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(%s&&%s!==util.emptyObject){\", ref, ref)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length){\", ref, ref)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s){\", ref)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genEncodeType(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&util.longNe(%s,%d,%d))\", ref, ref, ref, field.defaultValue.low, field.defaultValue.high);\r\n                else if (field.bytes) gen\r\n    (\"if(%s&&%s.length\" + (field.defaultValue.length ? \"&&util.arrayNe(%s,%j)\" : \"\") + \")\", ref, ref, ref, Array.prototype.slice.call(field.defaultValue));\r\n                else gen\r\n    (\"if(%s!==undefined&&%s!==%j)\", ref, ref, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genEncodeType(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i];\r\n        gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        var oneofFields = oneof.fieldsArray;\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType === undefined)\r\n                genEncodeType(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(20);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(30);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    var self = this;\r\n    Object.keys(values || {}).forEach(function(key) {\r\n        var val;\r\n        if (typeof values[key] === \"number\")\r\n            val = values[key];\r\n        else {\r\n            val = parseInt(key, 10);\r\n            key = values[key];\r\n        }\r\n        self.valuesById[self.values[key] = val] = key;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(20);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(14),\r\n    types     = require(29),\r\n    util      = require(30);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nObject.defineProperties(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: function() {\r\n            // defaults to packed=true if not explicity set to false\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(16);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        if (!Type)\r\n            Type = require(28);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            typeDefault = 0;\r\n        /* istanbul ignore next */\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved, determine the default value\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else {\r\n        if (this.options && this.options[\"default\"] !== undefined) {\r\n            this.defaultValue = this.options[\"default\"];\r\n            if (this.resolvedType instanceof Enum && typeof this.defaultValue === \"string\")\r\n                this.defaultValue = this.resolvedType.values[this.defaultValue] || 0;\r\n        } else\r\n            this.defaultValue = typeDefault;\r\n\r\n        if (this.long) {\r\n            this.defaultValue = util.Long.fromNumber(this.defaultValue, this.type.charAt(0) === \"u\");\r\n            if (Object.freeze)\r\n                Object.freeze(this.defaultValue); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n        } else if (this.bytes && typeof this.defaultValue === \"string\") {\r\n            var buf;\r\n            if (util.base64.test(this.defaultValue))\r\n                util.base64.decode(this.defaultValue, buf = util.newBuffer(util.base64.length(this.defaultValue)), 0);\r\n            else\r\n                util.utf8.write(this.defaultValue, buf = util.newBuffer(util.utf8.length(this.defaultValue)), 0);\r\n            this.defaultValue = buf;\r\n        }\r\n    }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(15);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(29),\r\n    util    = require(30);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar converters = require(11);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {JSONConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    return this.$type.convert(this, converters.json, options);\r\n};\r\n\r\n/**\r\n * Creates a message from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Options\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = function from(object, options) {\r\n    return this.$type.convert(object, converters.message, options);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Converts an object or runtime message of this type.\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\nMessage.convert = function convert(source, impl, options) {\r\n    return this.$type.convert(source, impl, options);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(20);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(28),\r\n    util = require(30);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(20);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(14),\r\n    Field   = require(15),\r\n    util    = require(30);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(28);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(27);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\nObject.defineProperties(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName + \" must be JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object must be \" + nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object must be an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            /* istanbul ignore next */\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(28);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(27);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.nestedArray;\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name Namespace#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(28);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(27);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(30);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(24);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(24);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (!Root)\r\n        Root = require(24);\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(20);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(15);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(OneOfPrototype, \"fieldsArray\", {\r\n    get: function() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(23);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\nvar Reader = require(22);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(19);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(15),\r\n    util   = require(30);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>|*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    // note that `json` actually must be of type `Object.<string,*>` but TypeScript\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\nvar initParser = function() {\r\n    try { // excluded in noparse builds\r\n        parse  = require(\"./parse\");\r\n        common = require(\"./common\");\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    initParser = null;\r\n};\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (initParser)\r\n        initParser();\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(26);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(30);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(19);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(18),\r\n    util   = require(30),\r\n    rpc    = require(25);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nObject.defineProperties(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.methodsArray.forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n\r\n            /* istanbul ignore next */\r\n            if (!request)\r\n                throw TypeError(\"request must not be null\");\r\n\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\nvar Namespace = require(19);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(14),\r\n    OneOf     = require(21),\r\n    Field     = require(15),\r\n    Service   = require(27),\r\n    Class     = require(9),\r\n    Message   = require(17),\r\n    Reader    = require(22),\r\n    Writer    = require(36),\r\n    util      = require(30),\r\n    encoder   = require(13),\r\n    decoder   = require(12),\r\n    verifier  = require(35),\r\n    converter = require(10);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.fieldsArray.filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Conversion options\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.from = function from(object, options) {\r\n    return this.convert(object, converter.message, options);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = this.fieldsArray.map(function(fld) { return fld.resolve().resolvedType; });\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.convert = converter(this).eof(fullName + \"$convert\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Converts an object or runtime message.\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\nTypePrototype.convert = function convert_setup(source, impl, options) {\r\n    return this.setup().convert(source, impl, options); // overrides this method\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(30);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(34);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(32);\r\nutil.EventEmitter = require(2);\r\nutil.extend       = require(3);\r\nutil.fetch        = require(4);\r\nutil.path         = require(6);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    return object ? Object.values ? Object.values(object) : Object.keys(object).map(function(key) {\r\n        return object[key];\r\n    }) : [];\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"./base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    /* istanbul ignore next */\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n\r\n/**\r\n * Tests if two arrays are not equal.\r\n * @param {Array.<*>} a Array 1\r\n * @param {Array.<*>} b Array 2\r\n * @returns {boolean} `true` if not equal, otherwise `false`\r\n */\r\nutil.arrayNe = function arrayNe(a, b) {\r\n    if (a.length === b.length)\r\n        for (var i = 0; i < a.length; ++i)\r\n            if (a[i] !== b[i])\r\n                return true;\r\n    return false;\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(14),\r\n    util      = require(30);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.fullName.substring(1) + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e;\")\r\n            (\"if(e=types[%d].verify(%s))\", fieldIndex, ref)\r\n                (\"return e\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(37);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset()\r\n        .uint32(len)\r\n        .tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\nvar Writer = require(36);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(34);\r\n\r\nvar utf8   = util.utf8,\r\n    Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        val.copy(buf, pos, 0, val.length);\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser (if not excluded)\r\ntry {\r\n    protobuf.tokenize     = require(\"./tokenize\");\r\n    protobuf.parse        = require(\"./parse\");\r\n    protobuf.common       = require(\"./common\");\r\n} catch (e) {} // eslint-disable-line no-empty\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = require(\"./writer_buffer\");\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = require(\"./reader_buffer\");\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n/* istanbul ignore next */\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}