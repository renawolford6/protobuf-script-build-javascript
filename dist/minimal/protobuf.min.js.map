{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/index-minimal","src/reader.js","src/reader_buffer.js","src/rpc.js","src/rpc/service.js","src/util/longbits.js","src/util/minimal.js","src/writer.js","src/writer_buffer.js"],"names":["global","undefined","e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","test","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","inquire","moduleName","mod","eval","replace","Object","keys","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","parts","chunk","join","write","c1","c2","configure","protobuf","Reader","_configure","BufferReader","build","roots","Writer","BufferWriter","util","rpc","define","amd","Long","indexOutOfRange","reader","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","toNumber","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","create","Buffer","isBuffer","_slice","subarray","uint32","value","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","bytes","constructor","skip","skipType","wireType","BufferReader_","int64","uint64","sint64","fixed64","sfixed64","utf8Slice","min","Service","rpcImpl","requestDelimited","responseDelimited","TypeError","rpcCall","method","requestCtor","responseCtor","request","callback","self","setTimeout","finish","response","endedByRPC","zero","zzEncode","zeroHash","fromNumber","from","isString","parseInt","fromString","low","high","unsigned","fromHash","hash","toHash","mask","part0","part1","part2","emptyArray","freeze","emptyObject","isNode","process","versions","node","isInteger","Number","isFinite","floor","isObject","utf8Write","encoding","allocUnsafe","newBuffer","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","merge","dst","src","ifNotSet","lcFirst","str","toLowerCase","substring","oneOfGetter","fieldNames","fieldMap","oneOfSetter","name","lazyResolve","root","lazyTypes","path","split","ptr","shift","toJSONOptions","longs","enums","Op","val","next","noop","State","writer","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeFloat","isNaN","round","log","LN2","writeDouble","writeBytes","set","fork","reset","ldelim","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":";;;;;;CAAA,SAAAA,EAAAC,GAAA,cAAA,QAAAC,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAAC,MAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,GCWA,QAAAC,GAAAC,EAAAC,GAEA,IAAA,GADAC,MACAb,EAAA,EAAAA,EAAAc,UAAAP,QACAM,EAAAE,KAAAD,UAAAd,KACA,IAAAgB,IAAA,CACA,OAAA,IAAAC,SAAA,SAAAC,EAAAC,GACAN,EAAAE,KAAA,SAAAK,GACA,GAAAJ,EAEA,GADAA,GAAA,EACAI,EACAD,EAAAC,OACA,CAEA,IAAA,GADAC,MACArB,EAAA,EAAAA,EAAAc,UAAAP,QACAc,EAAAN,KAAAD,UAAAd,KACAkB,GAAAI,MAAA,KAAAD,KAIA,KACAV,EAAAW,MAAAV,GAAAW,KAAAV,GACA,MAAAO,GACAJ,IACAA,GAAA,EACAG,EAAAC,OAlCAX,EAAAJ,QAAAK,0BCMA,GAAAc,GAAAnB,CAOAmB,GAAAjB,OAAA,SAAAkB,GACA,GAAAC,GAAAD,EAAAlB,MACA,KAAAmB,EACA,MAAA,EAEA,KADA,GAAAjC,GAAA,IACAiC,EAAA,EAAA,GAAA,MAAAD,EAAAE,OAAAD,MACAjC,CACA,OAAAmC,MAAAC,KAAA,EAAAJ,EAAAlB,QAAA,EAAAd,EAUA,KAAA,GANAqC,GAAAC,MAAA,IAGAC,EAAAD,MAAA,KAGA/B,EAAA,EAAAA,EAAA,IACAgC,EAAAF,EAAA9B,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,EAAAA,EAAA,GAAA,IAAAA,GASAwB,GAAAS,OAAA,SAAAC,EAAAC,EAAAC,GAKA,IAJA,GAGA5C,GAHAiC,KACAzB,EAAA,EACAqC,EAAA,EAEAF,EAAAC,GAAA,CACA,GAAAE,GAAAJ,EAAAC,IACA,QAAAE,GACA,IAAA,GACAZ,EAAAzB,KAAA8B,EAAAQ,GAAA,GACA9C,GAAA,EAAA8C,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAZ,EAAAzB,KAAA8B,EAAAtC,EAAA8C,GAAA,GACA9C,GAAA,GAAA8C,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAZ,EAAAzB,KAAA8B,EAAAtC,EAAA8C,GAAA,GACAb,EAAAzB,KAAA8B,EAAA,GAAAQ,GACAD,EAAA,GAUA,MANAA,KACAZ,EAAAzB,KAAA8B,EAAAtC,GACAiC,EAAAzB,GAAA,GACA,IAAAqC,IACAZ,EAAAzB,EAAA,GAAA,KAEAuC,OAAAC,aAAAlB,MAAAiB,OAAAd,GAGA,IAAAgB,GAAA,kBAUAjB,GAAAkB,OAAA,SAAAjB,EAAAS,EAAAS,GAIA,IAAA,GADAnD,GAFA2C,EAAAQ,EACAN,EAAA,EAEArC,EAAA,EAAAA,EAAAyB,EAAAlB,QAAA,CACA,GAAAqC,GAAAnB,EAAAoB,WAAA7C,IACA,IAAA,KAAA4C,GAAAP,EAAA,EACA,KACA,KAAAO,EAAAZ,EAAAY,MAAAtD,EACA,KAAAY,OAAAuC,EACA,QAAAJ,GACA,IAAA,GACA7C,EAAAoD,EACAP,EAAA,CACA,MACA,KAAA,GACAH,EAAAS,KAAAnD,GAAA,GAAA,GAAAoD,IAAA,EACApD,EAAAoD,EACAP,EAAA,CACA,MACA,KAAA,GACAH,EAAAS,MAAA,GAAAnD,IAAA,GAAA,GAAAoD,IAAA,EACApD,EAAAoD,EACAP,EAAA,CACA,MACA,KAAA,GACAH,EAAAS,MAAA,EAAAnD,IAAA,EAAAoD,EACAP,EAAA,GAIA,GAAA,IAAAA,EACA,KAAAnC,OAAAuC,EACA,OAAAE,GAAAR,GAQAX,EAAAsB,KAAA,SAAArB,GACA,MAAA,sEAAAqB,KAAArB,0BCtHA,QAAAsB,KAOAxB,KAAAyB,KAfAvC,EAAAJ,QAAA0C,CAmBA,IAAAE,GAAAF,EAAAG,SASAD,GAAAE,GAAA,SAAAC,EAAAzC,EAAAC,GAKA,OAJAW,KAAAyB,EAAAI,KAAA7B,KAAAyB,EAAAI,QAAArC,MACAJ,GAAAA,EACAC,IAAAA,GAAAW,OAEAA,MASA0B,EAAAI,IAAA,SAAAD,EAAAzC,GACA,GAAAyC,IAAA9D,EACAiC,KAAAyB,SAEA,IAAArC,IAAArB,EACAiC,KAAAyB,EAAAI,UAGA,KAAA,GADAE,GAAA/B,KAAAyB,EAAAI,GACApD,EAAA,EAAAA,EAAAsD,EAAA/C,QACA+C,EAAAtD,GAAAW,KAAAA,EACA2C,EAAAC,OAAAvD,EAAA,KAEAA,CAGA,OAAAuB,OASA0B,EAAAO,KAAA,SAAAJ,GACA,GAAAE,GAAA/B,KAAAyB,EAAAI,EACA,IAAAE,EAAA,CAGA,IAFA,GAAAjC,MACArB,EAAA,EACAA,EAAAc,UAAAP,QACAc,EAAAN,KAAAD,UAAAd,KACA,KAAAA,EAAA,EAAAA,EAAAsD,EAAA/C,QACA+C,EAAAtD,GAAAW,GAAAW,MAAAgC,EAAAtD,KAAAY,IAAAS,GAEA,MAAAE,+BCpEA,QAAAkC,GAAAC,GACA,IACA,GAAAC,GAAAC,KAAA,QAAAC,QAAA,IAAA,OAAAH,EACA,IAAAC,IAAAA,EAAApD,QAAAuD,OAAAC,KAAAJ,GAAApD,QACA,MAAAoD,GACA,MAAApE,IACA,MAAA,MAdAkB,EAAAJ,QAAAoD,wBC6BA,QAAAO,GAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAD,GAAA,KACAE,EAAAD,IAAA,EACAE,EAAA,KACA3B,EAAAyB,CACA,OAAA,UAAAD,GACA,GAAAA,EAAA,GAAAA,EAAAE,EACA,MAAAJ,GAAAE,EACAxB,GAAAwB,EAAAC,IACAE,EAAAL,EAAAG,GACAzB,EAAA,EAEA,IAAA4B,GAAAL,EAAA5D,KAAAgE,EAAA3B,EAAAA,GAAAwB,EAGA,OAFA,GAAAxB,IACAA,GAAA,EAAAA,GAAA,GACA4B,GA5CA9D,EAAAJ,QAAA2D,0BCMA,GAAAQ,GAAAnE,CAOAmE,GAAAjE,OAAA,SAAAkB,GAGA,IAAA,GAFAgD,GAAA,EACA7B,EAAA,EACA5C,EAAA,EAAAA,EAAAyB,EAAAlB,SAAAP,EACA4C,EAAAnB,EAAAoB,WAAA7C,GACA4C,EAAA,IACA6B,GAAA,EACA7B,EAAA,KACA6B,GAAA,EACA,SAAA,MAAA7B,IAAA,SAAA,MAAAnB,EAAAoB,WAAA7C,EAAA,OACAA,EACAyE,GAAA,GAEAA,GAAA,CAEA,OAAAA,IAUAD,EAAAE,KAAA,SAAAxC,EAAAC,EAAAC,GACA,GAAAqC,GAAArC,EAAAD,CACA,IAAAsC,EAAA,EACA,MAAA,EAKA,KAJA,GAGAjF,GAHAmF,EAAA,KACAC,KACA5E,EAAA,EAEAmC,EAAAC,GACA5C,EAAA0C,EAAAC,KACA3C,EAAA,IACAoF,EAAA5E,KAAAR,EACAA,EAAA,KAAAA,EAAA,IACAoF,EAAA5E,MAAA,GAAAR,IAAA,EAAA,GAAA0C,EAAAC,KACA3C,EAAA,KAAAA,EAAA,KACAA,IAAA,EAAAA,IAAA,IAAA,GAAA0C,EAAAC,OAAA,IAAA,GAAAD,EAAAC,OAAA,EAAA,GAAAD,EAAAC,MAAA,MACAyC,EAAA5E,KAAA,OAAAR,GAAA,IACAoF,EAAA5E,KAAA,OAAA,KAAAR,IAEAoF,EAAA5E,MAAA,GAAAR,IAAA,IAAA,GAAA0C,EAAAC,OAAA,EAAA,GAAAD,EAAAC,KACAnC,EAAA,QACA2E,IAAAA,OAAA5D,KAAAwB,OAAAC,aAAAlB,MAAAiB,OAAAqC,IACA5E,EAAA,EAGA,OAAA2E,IACA3E,GACA2E,EAAA5D,KAAAwB,OAAAC,aAAAlB,MAAAiB,OAAAqC,EAAAV,MAAA,EAAAlE,KACA2E,EAAAE,KAAA,KAEA7E,EAAAuC,OAAAC,aAAAlB,MAAAiB,OAAAqC,EAAAV,MAAA,EAAAlE,IAAA,IAUAwE,EAAAM,MAAA,SAAArD,EAAAS,EAAAS,GAIA,IAAA,GAFAoC,GACAC,EAFA7C,EAAAQ,EAGA3C,EAAA,EAAAA,EAAAyB,EAAAlB,SAAAP,EACA+E,EAAAtD,EAAAoB,WAAA7C,GACA+E,EAAA,IACA7C,EAAAS,KAAAoC,EACAA,EAAA,MACA7C,EAAAS,KAAAoC,GAAA,EAAA,IACA7C,EAAAS,KAAA,GAAAoC,EAAA,KACA,SAAA,MAAAA,IAAA,SAAA,OAAAC,EAAAvD,EAAAoB,WAAA7C,EAAA,MACA+E,EAAA,QAAA,KAAAA,IAAA,KAAA,KAAAC,KACAhF,EACAkC,EAAAS,KAAAoC,GAAA,GAAA,IACA7C,EAAAS,KAAAoC,GAAA,GAAA,GAAA,IACA7C,EAAAS,KAAAoC,GAAA,EAAA,GAAA,IACA7C,EAAAS,KAAA,GAAAoC,EAAA,MAEA7C,EAAAS,KAAAoC,GAAA,GAAA,IACA7C,EAAAS,KAAAoC,GAAA,EAAA,GAAA,IACA7C,EAAAS,KAAA,GAAAoC,EAAA,IAGA,OAAApC,GAAAR,2BC5DA,QAAA8C,KACAC,EAAAC,OAAAC,EAAAF,EAAAG,cA3CA,GAAAH,GAAA7F,EAAA6F,SAAA7E,CAOA6E,GAAAI,MAAA,UAiBAJ,EAAAK,SAGAL,EAAAM,OAAAzF,EAAA,IACAmF,EAAAO,aAAA1F,EAAA,IACAmF,EAAAC,OAAApF,EAAA,GACAmF,EAAAG,aAAAtF,EAAA,GAGAmF,EAAAQ,KAAA3F,EAAA,IACAmF,EAAAS,IAAA5F,EAAA,IACAmF,EAAAD,UAAAA,EAcA,kBAAAW,SAAAA,OAAAC,KACAD,QAAA,QAAA,SAAAE,GAKA,MAJAA,KACAZ,EAAAQ,KAAAI,KAAAA,EACAb,KAEAC,IAIAA,EAAAM,OAAAJ,EAAAF,EAAAO,cACAR,yDClDA,QAAAc,GAAAC,EAAAC,GACA,MAAAC,YAAA,uBAAAF,EAAAG,IAAA,OAAAF,GAAA,GAAA,MAAAD,EAAAvB,KASA,QAAAU,GAAAjD,GAMAX,KAAAgD,IAAArC,EAMAX,KAAA4E,IAAA,EAMA5E,KAAAkD,IAAAvC,EAAA3B,OAkEA,QAAA6F,KAEA,GAAAC,GAAA,GAAAC,GAAA,EAAA,GACAtG,EAAA,CACA,MAAAuB,KAAAkD,IAAAlD,KAAA4E,IAAA,GAaA,CACA,KAAAnG,EAAA,IAAAA,EAAA,CAEA,GAAAuB,KAAA4E,KAAA5E,KAAAkD,IACA,KAAAsB,GAAAxE,KAGA,IADA8E,EAAAE,IAAAF,EAAAE,IAAA,IAAAhF,KAAAgD,IAAAhD,KAAA4E,OAAA,EAAAnG,KAAA,EACAuB,KAAAgD,IAAAhD,KAAA4E,OAAA,IACA,MAAAE,GAIA,MADAA,GAAAE,IAAAF,EAAAE,IAAA,IAAAhF,KAAAgD,IAAAhD,KAAA4E,SAAA,EAAAnG,KAAA,EACAqG,EAxBA,KAAArG,EAAA,IAAAA,EAGA,GADAqG,EAAAE,IAAAF,EAAAE,IAAA,IAAAhF,KAAAgD,IAAAhD,KAAA4E,OAAA,EAAAnG,KAAA,EACAuB,KAAAgD,IAAAhD,KAAA4E,OAAA,IACA,MAAAE,EAKA,IAFAA,EAAAE,IAAAF,EAAAE,IAAA,IAAAhF,KAAAgD,IAAAhD,KAAA4E,OAAA,MAAA,EACAE,EAAAG,IAAAH,EAAAG,IAAA,IAAAjF,KAAAgD,IAAAhD,KAAA4E,OAAA,KAAA,EACA5E,KAAAgD,IAAAhD,KAAA4E,OAAA,IACA,MAAAE,EAgBA,IAfArG,EAAA,EAeAuB,KAAAkD,IAAAlD,KAAA4E,IAAA,GACA,KAAAnG,EAAA,IAAAA,EAGA,GADAqG,EAAAG,IAAAH,EAAAG,IAAA,IAAAjF,KAAAgD,IAAAhD,KAAA4E,OAAA,EAAAnG,EAAA,KAAA,EACAuB,KAAAgD,IAAAhD,KAAA4E,OAAA,IACA,MAAAE,OAGA,MAAArG,EAAA,IAAAA,EAAA,CAEA,GAAAuB,KAAA4E,KAAA5E,KAAAkD,IACA,KAAAsB,GAAAxE,KAGA,IADA8E,EAAAG,IAAAH,EAAAG,IAAA,IAAAjF,KAAAgD,IAAAhD,KAAA4E,OAAA,EAAAnG,EAAA,KAAA,EACAuB,KAAAgD,IAAAhD,KAAA4E,OAAA,IACA,MAAAE,GAIA,KAAAnG,OAAA,2BAGA,QAAAuG,KACA,MAAAL,GAAA9F,KAAAiB,MAAAmF,SAIA,QAAAC,KACA,MAAAP,GAAA9F,KAAAiB,MAAAqF,WAGA,QAAAC,KACA,MAAAT,GAAA9F,KAAAiB,MAAAmF,QAAA,GAIA,QAAAI,KACA,MAAAV,GAAA9F,KAAAiB,MAAAqF,UAAA,GAGA,QAAAG,KACA,MAAAX,GAAA9F,KAAAiB,MAAAyF,WAAAN,SAIA,QAAAO,KACA,MAAAb,GAAA9F,KAAAiB,MAAAyF,WAAAJ,WAkCA,QAAAM,GAAA3C,EAAAnC,GACA,OAAAmC,EAAAnC,EAAA,GACAmC,EAAAnC,EAAA,IAAA,EACAmC,EAAAnC,EAAA,IAAA,GACAmC,EAAAnC,EAAA,IAAA,MAAA,EA2BA,QAAA+E,KAGA,GAAA5F,KAAA4E,IAAA,EAAA5E,KAAAkD,IACA,KAAAsB,GAAAxE,KAAA,EAEA,OAAA,IAAA+E,GAAAY,EAAA3F,KAAAgD,IAAAhD,KAAA4E,KAAA,GAAAe,EAAA3F,KAAAgD,IAAAhD,KAAA4E,KAAA,IAGA,QAAAiB,KACA,MAAAD,GAAA7G,KAAAiB,MAAAmF,QAAA,GAIA,QAAAW,KACA,MAAAF,GAAA7G,KAAAiB,MAAAqF,UAAA,GAGA,QAAAU,KACA,MAAAH,GAAA7G,KAAAiB,MAAAyF,WAAAN,SAIA,QAAAa,KACA,MAAAJ,GAAA7G,KAAAiB,MAAAyF,WAAAJ,WA9QAnG,EAAAJ,QAAA8E,CAEA,IAEAE,GAFAK,EAAA3F,EAAA,IAIAuG,EAAAZ,EAAAY,SACA9B,EAAAkB,EAAAlB,IAwCAW,GAAAqC,OAAA9B,EAAA+B,OACA,SAAAvF,GACA,OAAAiD,EAAAqC,OAAA,SAAAtF,GACA,MAAAwD,GAAA+B,OAAAC,SAAAxF,GACA,GAAAmD,GAAAnD,GACA,GAAAiD,GAAAjD,KACAA,IAGA,SAAAA,GACA,MAAA,IAAAiD,GAAAjD,IAGAiD,EAAAjC,UAAAyE,EAAAjC,EAAA3D,MAAAmB,UAAA0E,UAAAlC,EAAA3D,MAAAmB,UAAAgB,MAOAiB,EAAAjC,UAAA2E,OAAA,WACA,GAAAC,GAAA,UACA,OAAA,YACA,GAAAA,GAAA,IAAAvG,KAAAgD,IAAAhD,KAAA4E,QAAA,EAAA5E,KAAAgD,IAAAhD,KAAA4E,OAAA,IAAA,MAAA2B,EACA,IAAAA,GAAAA,GAAA,IAAAvG,KAAAgD,IAAAhD,KAAA4E,OAAA,KAAA,EAAA5E,KAAAgD,IAAAhD,KAAA4E,OAAA,IAAA,MAAA2B,EACA,IAAAA,GAAAA,GAAA,IAAAvG,KAAAgD,IAAAhD,KAAA4E,OAAA,MAAA,EAAA5E,KAAAgD,IAAAhD,KAAA4E,OAAA,IAAA,MAAA2B,EACA,IAAAA,GAAAA,GAAA,IAAAvG,KAAAgD,IAAAhD,KAAA4E,OAAA,MAAA,EAAA5E,KAAAgD,IAAAhD,KAAA4E,OAAA,IAAA,MAAA2B,EACA,IAAAA,GAAAA,GAAA,GAAAvG,KAAAgD,IAAAhD,KAAA4E,OAAA,MAAA,EAAA5E,KAAAgD,IAAAhD,KAAA4E,OAAA,IAAA,MAAA2B,EAGA,KAAAvG,KAAA4E,KAAA,GAAA5E,KAAAkD,IAEA,KADAlD,MAAA4E,IAAA5E,KAAAkD,IACAsB,EAAAxE,KAAA,GAEA,OAAAuG,OAQA3C,EAAAjC,UAAA6E,MAAA,WACA,MAAA,GAAAxG,KAAAsG,UAOA1C,EAAAjC,UAAA8E,OAAA,WACA,GAAAF,GAAAvG,KAAAsG,QACA,OAAAC,KAAA,IAAA,EAAAA,GAAA,GAgHA3C,EAAAjC,UAAA+E,KAAA,WACA,MAAA,KAAA1G,KAAAsG,UAcA1C,EAAAjC,UAAAgF,QAAA,WAGA,GAAA3G,KAAA4E,IAAA,EAAA5E,KAAAkD,IACA,KAAAsB,GAAAxE,KAAA,EAEA,OAAA2F,GAAA3F,KAAAgD,IAAAhD,KAAA4E,KAAA,IAOAhB,EAAAjC,UAAAiF,SAAA,WACA,GAAAL,GAAAvG,KAAA2G,SACA,OAAAJ,KAAA,IAAA,EAAAA,GAgDA,IAAAM,GAAA,mBAAAC,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAE,EAAA,GAAAC,YAAAF,EAAApG,OAEA,OADAoG,GAAA,IAAA,EACAC,EAAA,GACA,SAAAhE,EAAA4B,GAKA,MAJAoC,GAAA,GAAAhE,EAAA4B,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAmC,EAAA,IAGA,SAAA/D,EAAA4B,GAKA,MAJAoC,GAAA,GAAAhE,EAAA4B,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAmC,EAAA,OAIA,SAAA/D,EAAA4B,GACA,GAAAsC,GAAAvB,EAAA3C,EAAA4B,EAAA,GACAuC,EAAA,GAAAD,GAAA,IAAA,EACAE,EAAAF,IAAA,GAAA,IACAG,EAAA,QAAAH,CACA,OAAA,OAAAE,EACAC,EACAC,IACAH,GAAAI,EAAAA,GACA,IAAAH,EACA,sBAAAD,EAAAE,EACAF,EAAA9G,KAAAmH,IAAA,EAAAJ,EAAA,MAAAC,EAAA,SAQAzD,GAAAjC,UAAA8F,MAAA,WAGA,GAAAzH,KAAA4E,IAAA,EAAA5E,KAAAkD,IACA,KAAAsB,GAAAxE,KAAA,EAEA,IAAAuG,GAAAM,EAAA7G,KAAAgD,IAAAhD,KAAA4E,IAEA,OADA5E,MAAA4E,KAAA,EACA2B,EAGA,IAAAmB,GAAA,mBAAAC,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAX,EAAA,GAAAC,YAAAW,EAAAjH,OAEA,OADAiH,GAAA,IAAA,EACAZ,EAAA,GACA,SAAAhE,EAAA4B,GASA,MARAoC,GAAA,GAAAhE,EAAA4B,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAgD,EAAA,IAGA,SAAA5E,EAAA4B,GASA,MARAoC,GAAA,GAAAhE,EAAA4B,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAoC,EAAA,GAAAhE,EAAA4B,EAAA,GACAgD,EAAA,OAIA,SAAA5E,EAAA4B,GACA,GAAAI,GAAAW,EAAA3C,EAAA4B,EAAA,GACAK,EAAAU,EAAA3C,EAAA4B,EAAA,GACAuC,EAAA,GAAAlC,GAAA,IAAA,EACAmC,EAAAnC,IAAA,GAAA,KACAoC,EAAA,YAAA,QAAApC,GAAAD,CACA,OAAA,QAAAoC,EACAC,EACAC,IACAH,GAAAI,EAAAA,GACA,IAAAH,EACA,OAAAD,EAAAE,EACAF,EAAA9G,KAAAmH,IAAA,EAAAJ,EAAA,OAAAC,EAAA,kBAQAzD,GAAAjC,UAAAkG,OAAA,WAGA,GAAA7H,KAAA4E,IAAA,EAAA5E,KAAAkD,IACA,KAAAsB,GAAAxE,KAAA,EAEA,IAAAuG,GAAAmB,EAAA1H,KAAAgD,IAAAhD,KAAA4E,IAEA,OADA5E,MAAA4E,KAAA,EACA2B,GAOA3C,EAAAjC,UAAAmG,MAAA,WACA,GAAA9I,GAAAgB,KAAAsG,SACA1F,EAAAZ,KAAA4E,IACA/D,EAAAb,KAAA4E,IAAA5F,CAGA,IAAA6B,EAAAb,KAAAkD,IACA,KAAAsB,GAAAxE,KAAAhB,EAGA,OADAgB,MAAA4E,KAAA5F,EACA4B,IAAAC,EACA,GAAAb,MAAAgD,IAAA+E,YAAA,GACA/H,KAAAoG,EAAArH,KAAAiB,KAAAgD,IAAApC,EAAAC,IAOA+C,EAAAjC,UAAAzB,OAAA,WACA,GAAA4H,GAAA9H,KAAA8H,OACA,OAAA7E,GAAAE,KAAA2E,EAAA,EAAAA,EAAA9I,SAQA4E,EAAAjC,UAAAqG,KAAA,SAAAhJ,GACA,GAAA,gBAAAA,GAAA,CAEA,GAAAgB,KAAA4E,IAAA5F,EAAAgB,KAAAkD,IACA,KAAAsB,GAAAxE,KAAAhB,EACAgB,MAAA4E,KAAA5F,MAGA,GACA,IAAAgB,KAAA4E,KAAA5E,KAAAkD,IACA,KAAAsB,GAAAxE,YACA,IAAAA,KAAAgD,IAAAhD,KAAA4E,OAEA,OAAA5E,OAQA4D,EAAAjC,UAAAsG,SAAA,SAAAC,GACA,OAAAA,GACA,IAAA,GACAlI,KAAAgI,MACA,MACA,KAAA,GACAhI,KAAAgI,KAAA,EACA,MACA,KAAA,GACAhI,KAAAgI,KAAAhI,KAAAsG,SACA,MACA,KAAA,GACA,OAAA,CACA,GAAA,KAAA4B,EAAA,EAAAlI,KAAAsG,UACA,KACAtG,MAAAiI,SAAAC,GAEA,KACA,KAAA,GACAlI,KAAAgI,KAAA,EACA,MAGA,SACA,KAAArJ,OAAA,qBAAAuJ,EAAA,cAAAlI,KAAA4E,KAEA,MAAA5E,OAGA4D,EAAAC,EAAA,SAAAsE,GACArE,EAAAqE,EAGAhE,EAAAI,MACAX,EAAAjC,UAAAyG,MAAAlD,EACAtB,EAAAjC,UAAA0G,OAAA/C,EACA1B,EAAAjC,UAAA2G,OAAA9C,EACA5B,EAAAjC,UAAA4G,QAAA1C,EACAjC,EAAAjC,UAAA6G,SAAAzC,IAEAnC,EAAAjC,UAAAyG,MAAAhD,EACAxB,EAAAjC,UAAA0G,OAAA9C,EACA3B,EAAAjC,UAAA2G,OAAA5C,EACA9B,EAAAjC,UAAA4G,QAAAzC,EACAlC,EAAAjC,UAAA6G,SAAAxC,+BCveA,QAAAlC,GAAAnD,GACAiD,EAAA7E,KAAAiB,KAAAW,GAhBAzB,EAAAJ,QAAAgF,CAGA,IAAAF,GAAApF,EAAA,IACAsF,EAAAnC,UAAAY,OAAA0D,OAAArC,EAAAjC,YAAAoG,YAAAjE,CAEA,IAAAK,GAAA3F,EAAA,GAcA2F,GAAA+B,SACApC,EAAAnC,UAAAyE,EAAAjC,EAAA+B,OAAAvE,UAAAgB,OAKAmB,EAAAnC,UAAAzB,OAAA,WACA,GAAAgD,GAAAlD,KAAAsG,QACA,OAAAtG,MAAAgD,IAAAyF,UAAAzI,KAAA4E,IAAA5E,KAAA4E,IAAAvE,KAAAqI,IAAA1I,KAAA4E,IAAA1B,EAAAlD,KAAAkD,yCCvBA,GAAAkB,GAAAtF,CA6BAsF,GAAAuE,QAAAnK,EAAA,gCCeA,QAAAmK,GAAAC,EAAAC,EAAAC,GAEA,GAAA,kBAAAF,GACA,KAAAG,WAAA,6BAEA5E,GAAA3C,aAAAzC,KAAAiB,MAMAA,KAAA4I,QAAAA,EAMA5I,KAAA6I,mBAAAA,EAMA7I,KAAA8I,oBAAAA,EAxEA5J,EAAAJ,QAAA6J,CAEA,IAAAxE,GAAA3F,EAAA,KAGAmK,EAAAhH,UAAAY,OAAA0D,OAAA9B,EAAA3C,aAAAG,YAAAoG,YAAAY,EA+EAA,EAAAhH,UAAAqH,QAAA,QAAAA,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAD,EACA,KAAAL,WAAA,4BAEA,IAAAO,GAAAtJ,IACA,KAAAqJ,EACA,MAAAlF,GAAAhF,UAAA6J,EAAAM,EAAAL,EAAAC,EAAAC,EAAAC,EAEA,KAAAE,EAAAV,QAEA,MADAW,YAAA,WAAAF,EAAA1K,MAAA,mBAAA,GACAZ,CAGA,KACA,MAAAuL,GAAAV,QACAK,EACAC,EAAAI,EAAAT,iBAAA,kBAAA,UAAAO,GAAAI,SACA,SAAA3J,EAAA4J,GAEA,GAAA5J,EAEA,MADAyJ,GAAArH,KAAA,QAAApC,EAAAoJ,GACAI,EAAAxJ,EAGA,IAAA,OAAA4J,EAEA,MADAH,GAAAzI,KAAA,GACA9C,CAGA,MAAA0L,YAAAN,IACA,IACAM,EAAAN,EAAAG,EAAAR,kBAAA,kBAAA,UAAAW,GACA,MAAA5J,GAEA,MADAyJ,GAAArH,KAAA,QAAApC,EAAAoJ,GACAI,EAAA,QAAAxJ,GAKA,MADAyJ,GAAArH,KAAA,OAAAwH,EAAAR,GACAI,EAAA,KAAAI,KAGA,MAAA5J,GAGA,MAFAyJ,GAAArH,KAAA,QAAApC,EAAAoJ,GACAM,WAAA,WAAAF,EAAAxJ,IAAA,GACA9B,IASA4K,EAAAhH,UAAAd,IAAA,SAAA6I,GAOA,MANA1J,MAAA4I,UACAc,GACA1J,KAAA4I,QAAA,KAAA,KAAA,MACA5I,KAAA4I,QAAA,KACA5I,KAAAiC,KAAA,OAAAH,OAEA9B,kCC3HA,QAAA+E,GAAAC,EAAAC,GAMAjF,KAAAgF,GAAAA,EAMAhF,KAAAiF,GAAAA,EAnCA/F,EAAAJ,QAAAiG,CAEA,IAAAZ,GAAA3F,EAAA,IAyCAmL,EAAA5E,EAAA4E,KAAA,GAAA5E,GAAA,EAAA,EAEA4E,GAAAtE,SAAA,WAAA,MAAA,IACAsE,EAAAC,SAAAD,EAAAlE,SAAA,WAAA,MAAAzF,OACA2J,EAAA3K,OAAA,WAAA,MAAA,GAOA,IAAA6K,GAAA9E,EAAA8E,SAAA,kBAOA9E,GAAA+E,WAAA,SAAAvD,GACA,GAAA,IAAAA,EACA,MAAAoD,EACA,IAAAxC,GAAAZ,EAAA,CACAY,KACAZ,GAAAA,EACA,IAAAvB,GAAAuB,IAAA,EACAtB,GAAAsB,EAAAvB,GAAA,aAAA,CAUA,OATAmC,KACAlC,GAAAA,IAAA,EACAD,GAAAA,IAAA,IACAA,EAAA,aACAA,EAAA,IACAC,EAAA,aACAA,EAAA,KAGA,GAAAF,GAAAC,EAAAC,IAQAF,EAAAgF,KAAA,SAAAxD,GACA,GAAA,gBAAAA,GACA,MAAAxB,GAAA+E,WAAAvD,EACA,IAAApC,EAAA6F,SAAAzD,GAAA,CAEA,IAAApC,EAAAI,KAGA,MAAAQ,GAAA+E,WAAAG,SAAA1D,EAAA,IAFAA,GAAApC,EAAAI,KAAA2F,WAAA3D,GAIA,MAAAA,GAAA4D,KAAA5D,EAAA6D,KAAA,GAAArF,GAAAwB,EAAA4D,MAAA,EAAA5D,EAAA6D,OAAA,GAAAT,GAQA5E,EAAApD,UAAA0D,SAAA,SAAAgF,GACA,IAAAA,GAAArK,KAAAiF,KAAA,GAAA,CACA,GAAAD,IAAAhF,KAAAgF,GAAA,IAAA,EACAC,GAAAjF,KAAAiF,KAAA,CAGA,OAFAD,KACAC,EAAAA,EAAA,IAAA,KACAD,EAAA,WAAAC,GAEA,MAAAjF,MAAAgF,GAAA,WAAAhF,KAAAiF,IAQAF,EAAApD,UAAAwD,OAAA,SAAAkF,GACA,MAAAlG,GAAAI,KACA,GAAAJ,GAAAI,KAAA,EAAAvE,KAAAgF,GAAA,EAAAhF,KAAAiF,MAAAoF,KAEAF,IAAA,EAAAnK,KAAAgF,GAAAoF,KAAA,EAAApK,KAAAiF,GAAAoF,WAAAA,GAGA,IAAA/I,GAAAN,OAAAW,UAAAL,UAOAyD,GAAAuF,SAAA,SAAAC,GACA,MAAAA,KAAAV,EACAF,EACA,GAAA5E,IACAzD,EAAAvC,KAAAwL,EAAA,GACAjJ,EAAAvC,KAAAwL,EAAA,IAAA,EACAjJ,EAAAvC,KAAAwL,EAAA,IAAA,GACAjJ,EAAAvC,KAAAwL,EAAA,IAAA,MAAA,GAEAjJ,EAAAvC,KAAAwL,EAAA,GACAjJ,EAAAvC,KAAAwL,EAAA,IAAA,EACAjJ,EAAAvC,KAAAwL,EAAA,IAAA,GACAjJ,EAAAvC,KAAAwL,EAAA,IAAA,MAAA,IAQAxF,EAAApD,UAAA6I,OAAA,WACA,MAAAxJ,QAAAC,aACA,IAAAjB,KAAAgF,GACAhF,KAAAgF,KAAA,EAAA,IACAhF,KAAAgF,KAAA,GAAA,IACAhF,KAAAgF,KAAA,GACA,IAAAhF,KAAAiF,GACAjF,KAAAiF,KAAA,EAAA,IACAjF,KAAAiF,KAAA,GAAA,IACAjF,KAAAiF,KAAA,KAQAF,EAAApD,UAAAiI,SAAA,WACA,GAAAa,GAAAzK,KAAAiF,IAAA,EAGA,OAFAjF,MAAAiF,KAAAjF,KAAAiF,IAAA,EAAAjF,KAAAgF,KAAA,IAAAyF,KAAA,EACAzK,KAAAgF,IAAAhF,KAAAgF,IAAA,EAAAyF,KAAA,EACAzK,MAOA+E,EAAApD,UAAA8D,SAAA,WACA,GAAAgF,KAAA,EAAAzK,KAAAgF,GAGA,OAFAhF,MAAAgF,KAAAhF,KAAAgF,KAAA,EAAAhF,KAAAiF,IAAA,IAAAwF,KAAA,EACAzK,KAAAiF,IAAAjF,KAAAiF,KAAA,EAAAwF,KAAA,EACAzK,MAOA+E,EAAApD,UAAA3C,OAAA,WACA,GAAA0L,GAAA1K,KAAAgF,GACA2F,GAAA3K,KAAAgF,KAAA,GAAAhF,KAAAiF,IAAA,KAAA,EACA2F,EAAA5K,KAAAiF,KAAA,EACA,OAAA,KAAA2F,EACA,IAAAD,EACAD,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,QAAA,EAAA,EACAC,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,QAAA,EAAA,EACAC,EAAA,IAAA,EAAA,kCC7MA,GAAAzG,GAAArF,CAEAqF,GAAAhF,UAAAX,EAAA,GACA2F,EAAAlE,OAAAzB,EAAA,GACA2F,EAAA3C,aAAAhD,EAAA,GACA2F,EAAAjC,QAAA1D,EAAA,GACA2F,EAAAlB,KAAAzE,EAAA,GACA2F,EAAA1B,KAAAjE,EAAA,GAEA2F,EAAAY,SAAAvG,EAAA,IAOA2F,EAAA0G,WAAAtI,OAAAuI,OAAAvI,OAAAuI,cAMA3G,EAAA4G,YAAAxI,OAAAuI,OAAAvI,OAAAuI,cAOA3G,EAAA6G,UAAAlN,EAAAmN,SAAAnN,EAAAmN,QAAAC,UAAApN,EAAAmN,QAAAC,SAAAC,MAQAhH,EAAAiH,UAAAC,OAAAD,WAAA,SAAA7E,GACA,MAAA,gBAAAA,IAAA+E,SAAA/E,IAAAlG,KAAAkL,MAAAhF,KAAAA,GAQApC,EAAA6F,SAAA,SAAAzD,GACA,MAAA,gBAAAA,IAAAA,YAAAvF,SAQAmD,EAAAqH,SAAA,SAAAjF,GACA,MAAAA,IAAA,gBAAAA,IAOApC,EAAA+B,OAAA,WACA,IACA,GAAAA,GAAA/B,EAAAjC,QAAA,UAAAgE,MAGA,OAAAA,GAAAvE,UAAA8J,WAIAvF,EAAA6D,OACA7D,EAAA6D,KAAA,SAAAxD,EAAAmF,GAAA,MAAA,IAAAxF,GAAAK,EAAAmF,KAGAxF,EAAAyF,cACAzF,EAAAyF,YAAA,SAAA/I,GAAA,MAAA,IAAAsD,GAAAtD,KAEAsD,GAVA,KAYA,MAAAlI,GAEA,MAAA,UASAmG,EAAAyH,UAAA,SAAAC,GAEA,MAAA,gBAAAA,GACA1H,EAAA+B,OACA/B,EAAA+B,OAAAyF,YAAAE,GACA,GAAA1H,GAAA3D,MAAAqL,GACA1H,EAAA+B,OACA/B,EAAA+B,OAAA6D,KAAA8B,GACA,mBAAA5E,YACA4E,EACA,GAAA5E,YAAA4E,IAOA1H,EAAA3D,MAAA,mBAAAyG,YAAAA,WAAAzG,MAMA2D,EAAAI,KAAAzG,EAAAgO,SAAAhO,EAAAgO,QAAAvH,MAAAJ,EAAAjC,QAAA,QAOAiC,EAAA4H,WAAA,SAAAxF,GACA,MAAAA,GACApC,EAAAY,SAAAgF,KAAAxD,GAAAiE,SACArG,EAAAY,SAAA8E,UASA1F,EAAA6H,aAAA,SAAAzB,EAAAF,GACA,GAAAvF,GAAAX,EAAAY,SAAAuF,SAAAC,EACA,OAAApG,GAAAI,KACAJ,EAAAI,KAAA0H,SAAAnH,EAAAE,GAAAF,EAAAG,GAAAoF,GACAvF,EAAAO,WAAAgF,IAUAlG,EAAA+H,MAAA,SAAAC,EAAAC,EAAAC,GACA,IAAA,GAAA7J,GAAAD,OAAAC,KAAA4J,GAAA3N,EAAA,EAAAA,EAAA+D,EAAAxD,SAAAP,EACA0N,EAAA3J,EAAA/D,MAAAV,GAAAsO,IACAF,EAAA3J,EAAA/D,IAAA2N,EAAA5J,EAAA/D,IACA,OAAA0N,IAQAhI,EAAAmI,QAAA,SAAAC,GACA,MAAAA,GAAAnM,OAAA,GAAAoM,cAAAD,EAAAE,UAAA,IAQAtI,EAAAuI,YAAA,SAAAC,GAEA,IAAA,GADAC,MACAnO,EAAA,EAAAA,EAAAkO,EAAA3N,SAAAP,EACAmO,EAAAD,EAAAlO,IAAA,CAOA,OAAA,YACA,IAAA,GAAA+D,GAAAD,OAAAC,KAAAxC,MAAAvB,EAAA+D,EAAAxD,OAAA,EAAAP,GAAA,IAAAA,EACA,GAAA,IAAAmO,EAAApK,EAAA/D,KAAAuB,KAAAwC,EAAA/D,MAAAV,GAAA,OAAAiC,KAAAwC,EAAA/D,IACA,MAAA+D,GAAA/D,KASA0F,EAAA0I,YAAA,SAAAF,GAQA,MAAA,UAAAG,GACA,IAAA,GAAArO,GAAA,EAAAA,EAAAkO,EAAA3N,SAAAP,EACAkO,EAAAlO,KAAAqO,SACA9M,MAAA2M,EAAAlO,MAUA0F,EAAA4I,YAAA,SAAAC,EAAAC,GACA,IAAA,GAAAxO,GAAA,EAAAA,EAAAwO,EAAAjO,SAAAP,EACA,IAAA,GAAA+D,GAAAD,OAAAC,KAAAyK,EAAAxO,IAAAqC,EAAA,EAAAA,EAAA0B,EAAAxD,SAAA8B,EAAA,CAGA,IAFA,GAAAoM,GAAAD,EAAAxO,GAAA+D,EAAA1B,IAAAqM,MAAA,KACAC,EAAAJ,EACAE,EAAAlO,QACAoO,EAAAA,EAAAF,EAAAG,QACAJ,GAAAxO,GAAA+D,EAAA1B,IAAAsM,IASAjJ,EAAAmJ,eACAC,MAAAvM,OACAwM,MAAAxM,OACA8G,MAAA9G,4DCpNA,QAAAyM,GAAArO,EAAA8D,EAAAwK,GAMA1N,KAAAZ,GAAAA,EAMAY,KAAAkD,IAAAA,EAMAlD,KAAA2N,KAAA5P,EAMAiC,KAAA0N,IAAAA,EAIA,QAAAE,MAWA,QAAAC,GAAAC,GAMA9N,KAAA+N,KAAAD,EAAAC,KAMA/N,KAAAgO,KAAAF,EAAAE,KAMAhO,KAAAkD,IAAA4K,EAAA5K,IAMAlD,KAAA2N,KAAAG,EAAAG,OAQA,QAAAhK,KAMAjE,KAAAkD,IAAA,EAMAlD,KAAA+N,KAAA,GAAAN,GAAAG,EAAA,EAAA,GAMA5N,KAAAgO,KAAAhO,KAAA+N,KAMA/N,KAAAiO,OAAA,KAoDA,QAAAC,GAAAR,EAAA1K,EAAA4B,GACA5B,EAAA4B,GAAA,IAAA8I,EAGA,QAAAS,GAAAT,EAAA1K,EAAA4B,GACA,KAAA8I,EAAA,KACA1K,EAAA4B,KAAA,IAAA8I,EAAA,IACAA,KAAA,CAEA1K,GAAA4B,GAAA8I,EAYA,QAAAU,GAAAlL,EAAAwK,GACA1N,KAAAkD,IAAAA,EACAlD,KAAA2N,KAAA5P,EACAiC,KAAA0N,IAAAA,EA8CA,QAAAW,GAAAX,EAAA1K,EAAA4B,GACA,KAAA8I,EAAAzI,IACAjC,EAAA4B,KAAA,IAAA8I,EAAA1I,GAAA,IACA0I,EAAA1I,IAAA0I,EAAA1I,KAAA,EAAA0I,EAAAzI,IAAA,MAAA,EACAyI,EAAAzI,MAAA,CAEA,MAAAyI,EAAA1I,GAAA,KACAhC,EAAA4B,KAAA,IAAA8I,EAAA1I,GAAA,IACA0I,EAAA1I,GAAA0I,EAAA1I,KAAA,CAEAhC,GAAA4B,KAAA8I,EAAA1I,GA2CA,QAAAsJ,GAAAZ,EAAA1K,EAAA4B,GACA5B,EAAA4B,KAAA,IAAA8I,EACA1K,EAAA4B,KAAA8I,IAAA,EAAA,IACA1K,EAAA4B,KAAA8I,IAAA,GAAA,IACA1K,EAAA4B,GAAA8I,IAAA,GArSAxO,EAAAJ,QAAAmF,CAEA,IAEAC,GAFAC,EAAA3F,EAAA,IAIAuG,EAAAZ,EAAAY,SACA9E,EAAAkE,EAAAlE,OACAgD,EAAAkB,EAAAlB,IAwHAgB,GAAAgC,OAAA9B,EAAA+B,OACA,WACA,OAAAjC,EAAAgC,OAAA,WACA,MAAA,IAAA/B,QAIA,WACA,MAAA,IAAAD,IAQAA,EAAAvB,MAAA,SAAAE,GACA,MAAA,IAAAuB,GAAA3D,MAAAoC,IAKAuB,EAAA3D,QAAAA,QACAyD,EAAAvB,MAAAyB,EAAA1B,KAAAwB,EAAAvB,MAAAyB,EAAA3D,MAAAmB,UAAA0E,WASApC,EAAAtC,UAAAnC,KAAA,SAAAJ,EAAA8D,EAAAwK,GAGA,MAFA1N,MAAAgO,KAAAhO,KAAAgO,KAAAL,KAAA,GAAAF,GAAArO,EAAA8D,EAAAwK,GACA1N,KAAAkD,KAAAA,EACAlD,MA8BAoO,EAAAzM,UAAAY,OAAA0D,OAAAwH,EAAA9L,WACAyM,EAAAzM,UAAAvC,GAAA+O,EAOAlK,EAAAtC,UAAA2E,OAAA,SAAAC,GAWA,MARAvG,MAAAkD,MAAAlD,KAAAgO,KAAAhO,KAAAgO,KAAAL,KAAA,GAAAS,IACA7H,KAAA,GACA,IAAA,EACAA,EAAA,MAAA,EACAA,EAAA,QAAA,EACAA,EAAA,UAAA,EACA,EACAA,IAAArD,IACAlD,MASAiE,EAAAtC,UAAA6E,MAAA,SAAAD,GACA,MAAAA,GAAA,EACAvG,KAAAR,KAAA6O,EAAA,GAAAtJ,EAAA+E,WAAAvD,IACAvG,KAAAsG,OAAAC,IAQAtC,EAAAtC,UAAA8E,OAAA,SAAAF,GACA,MAAAvG,MAAAsG,QAAAC,GAAA,EAAAA,GAAA,MAAA,IAsBAtC,EAAAtC,UAAA0G,OAAA,SAAA9B,GACA,GAAAzB,GAAAC,EAAAgF,KAAAxD,EACA,OAAAvG,MAAAR,KAAA6O,EAAAvJ,EAAA9F,SAAA8F,IAUAb,EAAAtC,UAAAyG,MAAAnE,EAAAtC,UAAA0G,OAQApE,EAAAtC,UAAA2G,OAAA,SAAA/B,GACA,GAAAzB,GAAAC,EAAAgF,KAAAxD,GAAAqD,UACA,OAAA5J,MAAAR,KAAA6O,EAAAvJ,EAAA9F,SAAA8F,IAQAb,EAAAtC,UAAA+E,KAAA,SAAAH,GACA,MAAAvG,MAAAR,KAAA0O,EAAA,EAAA3H,EAAA,EAAA,IAeAtC,EAAAtC,UAAAgF,QAAA,SAAAJ,GACA,MAAAvG,MAAAR,KAAA8O,EAAA,EAAA/H,IAAA,IAQAtC,EAAAtC,UAAAiF,SAAA,SAAAL,GACA,MAAAvG,MAAAR,KAAA8O,EAAA,EAAA/H,GAAA,EAAAA,GAAA,KASAtC,EAAAtC,UAAA4G,QAAA,SAAAhC,GACA,GAAAzB,GAAAC,EAAAgF,KAAAxD,EACA,OAAAvG,MAAAR,KAAA8O,EAAA,EAAAxJ,EAAAE,IAAAxF,KAAA8O,EAAA,EAAAxJ,EAAAG,KASAhB,EAAAtC,UAAA6G,SAAA,SAAAjC,GACA,GAAAzB,GAAAC,EAAAgF,KAAAxD,GAAAqD,UACA,OAAA5J,MAAAR,KAAA8O,EAAA,EAAAxJ,EAAAE,IAAAxF,KAAA8O,EAAA,EAAAxJ,EAAAG,IAGA,IAAAsJ,GAAA,mBAAAzH,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAE,EAAA,GAAAC,YAAAF,EAAApG,OAEA,OADAoG,GAAA,IAAA,EACAC,EAAA,GACA,SAAA0G,EAAA1K,EAAA4B,GACAmC,EAAA,GAAA2G,EACA1K,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,GAAAoC,EAAA,IAGA,SAAA0G,EAAA1K,EAAA4B,GACAmC,EAAA,GAAA2G,EACA1K,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,GAAAoC,EAAA,OAIA,SAAAT,EAAAvD,EAAA4B,GACA,GAAAuC,GAAAZ,EAAA,EAAA,EAAA,CAGA,IAFAY,IACAZ,GAAAA,GACA,IAAAA,EACA+H,EAAA,EAAA/H,EAAA,EAAA,EAAA,WAAAvD,EAAA4B,OACA,IAAA4J,MAAAjI,GACA+H,EAAA,WAAAtL,EAAA4B,OACA,IAAA2B,EAAA,sBACA+H,GAAAnH,GAAA,GAAA,cAAA,EAAAnE,EAAA4B,OACA,IAAA2B,EAAA,uBACA+H,GAAAnH,GAAA,GAAA9G,KAAAoO,MAAAlI,EAAA,0BAAA,EAAAvD,EAAA4B,OACA,CACA,GAAAwC,GAAA/G,KAAAkL,MAAAlL,KAAAqO,IAAAnI,GAAAlG,KAAAsO,KACAtH,EAAA,QAAAhH,KAAAoO,MAAAlI,EAAAlG,KAAAmH,IAAA,GAAAJ,GAAA,QACAkH,IAAAnH,GAAA,GAAAC,EAAA,KAAA,GAAAC,KAAA,EAAArE,EAAA4B,IAUAX,GAAAtC,UAAA8F,MAAA,SAAAlB,GACA,MAAAvG,MAAAR,KAAA+O,EAAA,EAAAhI,GAGA,IAAAqI,GAAA,mBAAAjH,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAX,EAAA,GAAAC,YAAAW,EAAAjH,OAEA,OADAiH,GAAA,IAAA,EACAZ,EAAA,GACA,SAAA0G,EAAA1K,EAAA4B,GACAgD,EAAA,GAAA8F,EACA1K,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,GAAAoC,EAAA,IAGA,SAAA0G,EAAA1K,EAAA4B,GACAgD,EAAA,GAAA8F,EACA1K,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,KAAAoC,EAAA,GACAhE,EAAA4B,GAAAoC,EAAA,OAIA,SAAAT,EAAAvD,EAAA4B,GACA,GAAAuC,GAAAZ,EAAA,EAAA,EAAA,CAGA,IAFAY,IACAZ,GAAAA,GACA,IAAAA,EACA+H,EAAA,EAAAtL,EAAA4B,GACA0J,EAAA,EAAA/H,EAAA,EAAA,EAAA,WAAAvD,EAAA4B,EAAA,OACA,IAAA4J,MAAAjI,GACA+H,EAAA,WAAAtL,EAAA4B,GACA0J,EAAA,WAAAtL,EAAA4B,EAAA,OACA,IAAA2B,EAAA,uBACA+H,EAAA,EAAAtL,EAAA4B,GACA0J,GAAAnH,GAAA,GAAA,cAAA,EAAAnE,EAAA4B,EAAA,OACA,CACA,GAAAyC,EACA,IAAAd,EAAA,wBACAc,EAAAd,EAAA,OACA+H,EAAAjH,IAAA,EAAArE,EAAA4B,GACA0J,GAAAnH,GAAA,GAAAE,EAAA,cAAA,EAAArE,EAAA4B,EAAA,OACA,CACA,GAAAwC,GAAA/G,KAAAkL,MAAAlL,KAAAqO,IAAAnI,GAAAlG,KAAAsO,IACA,QAAAvH,IACAA,EAAA,MACAC,EAAAd,EAAAlG,KAAAmH,IAAA,GAAAJ,GACAkH,EAAA,iBAAAjH,IAAA,EAAArE,EAAA4B,GACA0J,GAAAnH,GAAA,GAAAC,EAAA,MAAA,GAAA,QAAAC,EAAA,WAAA,EAAArE,EAAA4B,EAAA,KAWAX,GAAAtC,UAAAkG,OAAA,SAAAtB,GACA,MAAAvG,MAAAR,KAAAoP,EAAA,EAAArI,GAGA,IAAAsI,GAAA1K,EAAA3D,MAAAmB,UAAAmN,IACA,SAAApB,EAAA1K,EAAA4B,GACA5B,EAAA8L,IAAApB,EAAA9I,IAGA,SAAA8I,EAAA1K,EAAA4B,GACA,IAAA,GAAAnG,GAAA,EAAAA,EAAAiP,EAAA1O,SAAAP,EACAuE,EAAA4B,EAAAnG,GAAAiP,EAAAjP,GAQAwF,GAAAtC,UAAAmG,MAAA,SAAAvB,GACA,GAAArD,GAAAqD,EAAAvH,SAAA,CACA,KAAAkE,EACA,MAAAlD,MAAAR,KAAA0O,EAAA,EAAA,EACA,IAAA/J,EAAA6F,SAAAzD,GAAA,CACA,GAAAvD,GAAAiB,EAAAvB,MAAAQ,EAAAjD,EAAAjB,OAAAuH,GACAtG,GAAAkB,OAAAoF,EAAAvD,EAAA,GACAuD,EAAAvD,EAEA,MAAAhD,MAAAsG,OAAApD,GAAA1D,KAAAqP,EAAA3L,EAAAqD,IAQAtC,EAAAtC,UAAAzB,OAAA,SAAAqG,GACA,GAAArD,GAAAD,EAAAjE,OAAAuH,EACA,OAAArD,GACAlD,KAAAsG,OAAApD,GAAA1D,KAAAyD,EAAAM,MAAAL,EAAAqD,GACAvG,KAAAR,KAAA0O,EAAA,EAAA,IAQAjK,EAAAtC,UAAAoN,KAAA,WAIA,MAHA/O,MAAAiO,OAAA,GAAAJ,GAAA7N,MACAA,KAAA+N,KAAA/N,KAAAgO,KAAA,GAAAP,GAAAG,EAAA,EAAA,GACA5N,KAAAkD,IAAA,EACAlD,MAOAiE,EAAAtC,UAAAqN,MAAA,WAUA,MATAhP,MAAAiO,QACAjO,KAAA+N,KAAA/N,KAAAiO,OAAAF,KACA/N,KAAAgO,KAAAhO,KAAAiO,OAAAD,KACAhO,KAAAkD,IAAAlD,KAAAiO,OAAA/K,IACAlD,KAAAiO,OAAAjO,KAAAiO,OAAAN,OAEA3N,KAAA+N,KAAA/N,KAAAgO,KAAA,GAAAP,GAAAG,EAAA,EAAA,GACA5N,KAAAkD,IAAA,GAEAlD,MAOAiE,EAAAtC,UAAAsN,OAAA,WACA,GAAAlB,GAAA/N,KAAA+N,KACAC,EAAAhO,KAAAgO,KACA9K,EAAAlD,KAAAkD,GAOA,OANAlD,MAAAgP,QAAA1I,OAAApD,GACAA,IACAlD,KAAAgO,KAAAL,KAAAI,EAAAJ,KACA3N,KAAAgO,KAAAA,EACAhO,KAAAkD,KAAAA,GAEAlD,MAOAiE,EAAAtC,UAAA6H,OAAA,WAIA,IAHA,GAAAuE,GAAA/N,KAAA+N,KAAAJ,KACA3K,EAAAhD,KAAA+H,YAAArF,MAAA1C,KAAAkD,KACA0B,EAAA,EACAmJ,GACAA,EAAA3O,GAAA2O,EAAAL,IAAA1K,EAAA4B,GACAA,GAAAmJ,EAAA7K,IACA6K,EAAAA,EAAAJ,IAGA,OAAA3K,IAGAiB,EAAAJ,EAAA,SAAAqL,GACAhL,EAAAgL,+BCliBA,QAAAhL,KACAD,EAAAlF,KAAAiB,MAsCA,QAAAmP,GAAAzB,EAAA1K,EAAA4B,GACA8I,EAAA1O,OAAA,GACAmF,EAAAlB,KAAAM,MAAAmK,EAAA1K,EAAA4B,GAEA5B,EAAAyI,UAAAiC,EAAA9I,GA3DA1F,EAAAJ,QAAAoF,CAGA,IAAAD,GAAAzF,EAAA,KACA0F,EAAAvC,UAAAY,OAAA0D,OAAAhC,EAAAtC,YAAAoG,YAAA7D,CAEA,IAAAC,GAAA3F,EAAA,IAEA0H,EAAA/B,EAAA+B,MAiBAhC,GAAAxB,MAAA,SAAAE,GACA,OAAAsB,EAAAxB,MAAAwD,EAAAyF,aAAA/I,GAGA,IAAAwM,GAAAlJ,GAAAA,EAAAvE,oBAAAsF,aAAA,QAAAf,EAAAvE,UAAAmN,IAAAhC,KACA,SAAAY,EAAA1K,EAAA4B,GACA5B,EAAA8L,IAAApB,EAAA9I,IAIA,SAAA8I,EAAA1K,EAAA4B,GACA,GAAA8I,EAAA2B,KACA3B,EAAA2B,KAAArM,EAAA4B,EAAA,EAAA8I,EAAA1O,YACA,KAAA,GAAAP,GAAA,EAAAA,EAAAiP,EAAA1O,QACAgE,EAAA4B,KAAA8I,EAAAjP,KAMAyF,GAAAvC,UAAAmG,MAAA,SAAAvB,GACApC,EAAA6F,SAAAzD,KACAA,EAAAL,EAAA6D,KAAAxD,EAAA,UACA,IAAArD,GAAAqD,EAAAvH,SAAA,CAIA,OAHAgB,MAAAsG,OAAApD,GACAA,GACAlD,KAAAR,KAAA4P,EAAAlM,EAAAqD,GACAvG,MAaAkE,EAAAvC,UAAAzB,OAAA,SAAAqG,GACA,GAAArD,GAAAgD,EAAAoJ,WAAA/I,EAIA,OAHAvG,MAAAsG,OAAApD,GACAA,GACAlD,KAAAR,KAAA2P,EAAAjM,EAAAqD,GACAvG","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n * \r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n * \r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(14);\r\nprotobuf.BufferWriter = require(15);\r\nprotobuf.Reader       = require(8);\r\nprotobuf.BufferReader = require(9);\r\n\r\n// Utility\r\nprotobuf.util         = require(13);\r\nprotobuf.rpc          = require(10);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n}\r\n\r\n// assumes that loading \"long\" / define itself is asynchronous so that other builds can safely\r\n// continue populating `protobuf`. will see a BOOM eventually if this assumption is wrong:\r\n/* istanbul ignore next */\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(13);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        Reader.prototype.int64 = read_int64_long;\r\n        Reader.prototype.uint64 = read_uint64_long;\r\n        Reader.prototype.sint64 = read_sint64_long;\r\n        Reader.prototype.fixed64 = read_fixed64_long;\r\n        Reader.prototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        Reader.prototype.int64 = read_int64_number;\r\n        Reader.prototype.uint64 = read_uint64_number;\r\n        Reader.prototype.sint64 = read_sint64_number;\r\n        Reader.prototype.fixed64 = read_fixed64_number;\r\n        Reader.prototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(8);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(13);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(11);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(13);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n * \r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n * \r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(\"error\", err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(13);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\nutil.asPromise    = require(1);\r\nutil.base64       = require(2);\r\nutil.EventEmitter = require(3);\r\nutil.inquire      = require(4);\r\nutil.utf8         = require(6);\r\nutil.pool         = require(5);\r\n\r\nutil.LongBits     = require(12);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {};\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util.Buffer.allocUnsafe(sizeOrArray) // polyfilled\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util.Buffer.from(sizeOrArray) // polyfilled\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(13);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(14);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(13);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n"],"sourceRoot":"."}