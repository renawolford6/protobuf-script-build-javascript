{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/index-minimal","../src/reader.js","../src/reader_buffer.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/util/longbits.js","../src/util/minimal.js","../src/writer.js","../src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","isLong","util","configure","module","1","require","asPromise","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","j","b","String","fromCharCode","decode","c","charCodeAt","Error","test","EventEmitter","this","_listeners","prototype","on","evt","push","off","listeners","splice","emit","args","factory","Float32Array","writeFloat_f32_cpy","val","buf","pos","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","Uint8Array","le","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","log","LN2","mantissa","pow","readFloat_ieee754","readUint","uint","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDouble_f64_cpy","f64","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","replace","Object","keys","e","pool","alloc","slice","size","SIZE","MAX","slab","utf8","len","read","parts","chunk","join","write","c1","c2","Reader","_configure","BufferReader","build","Writer","BufferWriter","rpc","roots","indexOutOfRange","reader","writeLength","RangeError","readLongVarint","bits","LongBits","readFixed32_end","readFixed64","create_array","isArray","create","Buffer","isBuffer","_slice","subarray","uint32","value","int32","sint32","bool","fixed32","sfixed32","float","double","bytes","constructor","skip","skipType","wireType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","Service","rpcImpl","requestDelimited","responseDelimited","TypeError","rpcCall","method","requestCtor","responseCtor","request","callback","self","setTimeout","finish","response","endedByRPC","zero","toNumber","zzEncode","zeroHash","fromNumber","from","isString","parseInt","fromString","low","high","unsigned","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","ifNotSet","newError","CustomError","message","properties","defineProperty","get","captureStackTrace","stack","toString","emptyArray","freeze","emptyObject","isNode","process","versions","node","isInteger","Number","isFinite","isObject","isset","isSet","obj","prop","hasOwnProperty","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","lcFirst","str","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","json","encoding","allocUnsafe","Op","next","noop","State","writer","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","set","fork","reset","ldelim","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\n\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\n    // sources through a conflict-free require shim and is again wrapped within an iife that\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\n    // \"use strict\" directive so that minification can remove the directives of each module.\n\n    function $require(name) {\n        var $module = cache[name];\n        if (!$module)\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\n        return $module.exports;\n    }\n\n    // Expose globally\n    var protobuf = global.protobuf = $require(entries[0]);\n\n    // Be nice to AMD\n    if (typeof define === \"function\" && define.amd)\n        define([\"long\"], function(Long) {\n            if (Long && Long.isLong) {\n                protobuf.util.Long = Long;\n                protobuf.configure();\n            }\n            return protobuf;\n        });\n\n    // Be nice to CommonJS\n    if (typeof module === \"object\" && module && module.exports)\n        module.exports = protobuf;\n\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(16);\nprotobuf.BufferWriter = require(17);\nprotobuf.Reader       = require(9);\nprotobuf.BufferReader = require(10);\n\n// Utility\nprotobuf.util         = require(15);\nprotobuf.rpc          = require(12);\nprotobuf.roots        = require(11);\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.Reader._configure(protobuf.BufferReader);\n    protobuf.util._configure();\n}\n\n// Configure serialization\nprotobuf.Writer._configure(protobuf.BufferWriter);\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(15);\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = util.Buffer\n    ? function create_buffer_setup(buffer) {\n        return (Reader.create = function create_buffer(buffer) {\n            return util.Buffer.isBuffer(buffer)\n                ? new BufferReader(buffer)\n                /* istanbul ignore next */\n                : create_array(buffer);\n        })(buffer);\n    }\n    /* istanbul ignore next */\n    : create_array;\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            do { // eslint-disable-line no-constant-condition\n                if ((wireType = this.uint32() & 7) === 4)\n                    break;\n                this.skipType(wireType);\n            } while (true);\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(9);\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(15);\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\n/* istanbul ignore else */\nif (util.Buffer)\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(13);\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(15);\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(15);\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(1);\n\n// converts to / from base64 encoded strings\nutil.base64 = require(2);\n\n// base class of rpc.Service\nutil.EventEmitter = require(3);\n\n// float handling accross browsers\nutil.float = require(4);\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(5);\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(7);\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(6);\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(14);\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(15);\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = util.Buffer\n    ? function create_buffer_setup() {\n        return (Writer.create = function create_buffer() {\n            return new BufferWriter();\n        })();\n    }\n    /* istanbul ignore next */\n    : function create_array() {\n        return new Writer();\n    };\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(16);\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(15);\n\nvar Buffer = util.Buffer;\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Buffer} Buffer\n */\nBufferWriter.alloc = function alloc_buffer(size) {\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\n};\n\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\n    ? function writeBytesBuffer_set(val, buf, pos) {\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n                           // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytesBuffer_copy(val, buf, pos) {\n        if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n        else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n    };\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else\n        buf.utf8Write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n"],"sourceRoot":"."}