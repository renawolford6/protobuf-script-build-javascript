{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/index-minimal","src/reader.js","src/reader_buffer.js","src/util/longbits.js","src/util/minimal.js","src/writer.js","src/writer_buffer.js"],"names":["global","undefined","e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","test","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","inquire","moduleName","mod","eval","replace","Object","keys","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","parts","chunk","join","write","c1","c2","configure","protobuf","Reader","_configure","build","roots","Writer","BufferWriter","BufferReader","util","define","amd","Long","indexOutOfRange","reader","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","toNumber","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","create","Buffer","isBuffer","_slice","subarray","uint32","value","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","bytes","constructor","skip","skipType","wireType","BufferReaderPrototype","utf8Slice","min","LongBitsPrototype","zero","zzEncode","zeroHash","fromNumber","from","parseInt","fromString","low","high","unsigned","fromHash","hash","toHash","mask","part0","part1","part2","emptyArray","freeze","emptyObject","isNode","process","versions","node","isInteger","Number","isFinite","floor","isString","isObject","utf8Write","encoding","allocUnsafe","newBuffer","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","merge","dst","src","ifNotSet","oneOfGetter","fieldNames","fieldMap","forEach","name","oneOfSetter","lazyResolve","root","lazyTypes","types","index","path","split","ptr","shift","toJSONOptions","longs","enums","Op","val","next","noop","State","writer","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","WriterPrototype","writeFloat","isNaN","round","log","LN2","writeDouble","writeBytes","set","fork","reset","ldelim","finish","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(12);\r\nprotobuf.BufferWriter = require(13);\r\nprotobuf.Reader       = require(8);\r\nprotobuf.BufferReader = require(9);\r\n\r\n// Utility\r\nprotobuf.util         = require(11);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n// assumes that loading \"long\" / define itself is asynchronous so that other builds can safely\r\n// continue populating `protobuf`. will see a BOOM eventually if this assumption is wrong:\r\n/* istanbul ignore next */\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(11);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        /* istanbul ignore next */\r\n        if (!BufferReader)\r\n            BufferReader = require(9);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(8);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(11);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(11);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\nutil.asPromise    = require(1);\r\nutil.base64       = require(2);\r\nutil.EventEmitter = require(3);\r\nutil.inquire      = require(4);\r\nutil.utf8         = require(6);\r\nutil.pool         = require(5);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {};\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util.Buffer.allocUnsafe(sizeOrArray) // polyfilled\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util.Buffer.from(sizeOrArray) // polyfilled\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\nutil.LongBits = require(10);\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    fieldNames.forEach(function(name) {\r\n        fieldMap[name] = 1;\r\n    });\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    lazyTypes.forEach(function(types) {\r\n        Object.keys(types).forEach(function(index) {\r\n            var path = types[index |= 0].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            types[index] = ptr;\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(11);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        /* istanbul ignore next */\r\n        if (!BufferWriter)\r\n            BufferWriter = require(13);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (typeof value === \"string\") {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(12);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(11);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n"],"sourceRoot":"."}