{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/fs/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/decode.js","src/encode.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verify.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","ceil","b64","s64","encode","start","end","j","b","String","fromCharCode","invalidEncoding","decode","charCodeAt","undefined","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","test","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","keys","Object","Function","concat","map","key","format","$0","$1","arg","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","eval","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","c1","c2","Class","type","create","Message","Type","util","_TypeError","ctor","MessageCtor","properties","constructor","merge","$type","getFieldsArray","forEach","field","Array","isArray","defaultValue","emptyArray","isObject","emptyObject","getOneofsArray","oneof","prop","get","indexOf","set","setCtor","common","json","nested","google","protobuf","Any","fields","type_url","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","readerOrBuffer","getFieldsById","reader","Reader","limit","pos","message","getCtor","tag","resolvedType","Enum","resolvedKeyType","uint32","ks","vs","types","basic","longToHash","repeated","packed","wireType","plimit","skipType","generate","mtype","safeProp","writer","Writer","fi","fork","mapKey","ldelim","partOf","required","long","longNeq","reset","keyWireType","oneofFields","options","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","extend","props","valuesById","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","getValuesById","remove","Field","toString","toLowerCase","optional","Long","extensionField","declaringField","_packed","FieldPrototype","MapField","isPacked","getOption","setOption","ifNotSet","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","Number","toNumber","MapFieldPrototype","MessagePrototype","asJSON","k","array","fieldsOnly","encodeDelimited","decodeDelimited","verify","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","Namespace","_nestedArray","namespace","arrayToJSON","obj","NamespacePrototype","Service","nestedTypes","nestedError","nestedArray","toArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","object","setOptions","onAdd","onRemove","define","split","ptr","part","shift","resolveAll","parentAlreadyChecked","getRoot","found","lookupType","lookupService","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","substring","toUpperCase","_fieldsArray","addFieldsToParent","OneOfPrototype","index","lower","token","parse","illegal","tn","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRange","parseId","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","p3","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","parseMapField","parseField","parseOneOf","extensions","reserved","camelCase","parseInlineOptions","valueType","parseEnumField","custom","fqTypeRefRe","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","package","indexOutOfRange","writeLength","RangeError","Tag","readLongVarint","lo","hi","LongBits","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","BufferReader","initBufferReader","readStringBuffer_utf8Slice","utf8Slice","readStringBuffer_toString","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","ieee754","ArrayImpl","Uint8Array","Buffer","isBuffer","_slice","subarray","int32","octet","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","float","readDouble","Float64Array","f64","double","bytes","finish","remain","BufferReaderPrototype","readStringBuffer","readFloatLE","readDoubleLE","_configure","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","filename","cb","process","parsed","self","sync","queued","weak","idx","altname","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","methodsArray","methodName","inherited","getMethodsArray","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","stack","repeat","curr","delimRe","delim","expected","actual","equals","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","fieldName","oneOfName","fld","bake","isAbsolutePath","normalizePath","parts","prefix","description","TypeError","originPath","importPath","alreadyNormalized","dst","underScore","newBuffer","allocUnsafe","runtime","LongBitsPrototype","zero","zzEncode","fromNumber","from","fromString","low","high","unsigned","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","dcodeIO","isFinite","longFromHash","bits","fromBits","target","descriptors","descriptor","ie8","ucKey","defineProperty","freeze","invalid","verifyValue","reason","verifyKey","genVerifyValue","fieldIndex","ref","genVerifyKey","Op","val","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","WriterPrototype","op","writeFloat","writeDouble","writeBytes","BufferWriterPrototype","writeStringBuffer","utf8Write","byteLength","roots","amd"],"mappings":";;;;;;CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCkCAA,EAAAK,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAxB,GAAAyB,EACAC,EAAA,EAAAF,EAAAD,EAAA,EACAI,GAAA,GAAAD,GAAA,EACAE,EAAAD,GAAA,EACAE,GAAA,EACApB,EAAAa,EAAA,EAAAE,EAAA,EACAM,EAAAR,EAAA,GAAA,EACAlB,EAAAgB,EAAAC,EAAAZ,EAOA,KALAA,GAAAqB,EAEA9B,EAAAI,GAAA,IAAAyB,GAAA,EACAzB,KAAAyB,EACAA,GAAAH,EACAG,EAAA,EAAA7B,EAAA,IAAAA,EAAAoB,EAAAC,EAAAZ,GAAAA,GAAAqB,EAAAD,GAAA,GAKA,IAHAJ,EAAAzB,GAAA,IAAA6B,GAAA,EACA7B,KAAA6B,EACAA,GAAAN,EACAM,EAAA,EAAAJ,EAAA,IAAAA,EAAAL,EAAAC,EAAAZ,GAAAA,GAAAqB,EAAAD,GAAA,GAEA,GAAA,IAAA7B,EACAA,EAAA,EAAA4B,MACA,CAAA,GAAA5B,IAAA2B,EACA,MAAAF,GAAAM,KAAA3B,GAAA,EAAA,IAAA4B,EAAAA,EAEAP,IAAAQ,KAAAC,IAAA,EAAAX,GACAvB,GAAA4B,EAEA,OAAAxB,GAAA,EAAA,GAAAqB,EAAAQ,KAAAC,IAAA,EAAAlC,EAAAuB,IAGAT,EAAAqB,MAAA,SAAAf,EAAAgB,EAAAf,EAAAC,EAAAC,EAAAC,GACA,GAAAxB,GAAAyB,EAAAY,EACAX,EAAA,EAAAF,EAAAD,EAAA,EACAI,GAAA,GAAAD,GAAA,EACAE,EAAAD,GAAA,EACAW,EAAA,KAAAf,EAAAU,KAAAC,IAAA,GAAA,IAAAD,KAAAC,IAAA,GAAA,IAAA,EACAzB,EAAAa,EAAAE,EAAA,EAAA,EACAM,EAAAR,GAAA,EAAA,EACAlB,EAAAgC,EAAA,GAAA,IAAAA,GAAA,EAAAA,EAAA,EAAA,EAAA,CAmCA,KAjCAA,EAAAH,KAAAM,IAAAH,GAEAI,MAAAJ,IAAAA,IAAAJ,EAAAA,GACAP,EAAAe,MAAAJ,GAAA,EAAA,EACApC,EAAA2B,IAEA3B,EAAAiC,KAAAQ,MAAAR,KAAAS,IAAAN,GAAAH,KAAAU,KACAP,GAAAC,EAAAJ,KAAAC,IAAA,GAAAlC,IAAA,IACAA,IACAqC,GAAA,GAGAD,GADApC,EAAA4B,GAAA,EACAU,EAAAD,EAEAC,EAAAL,KAAAC,IAAA,EAAA,EAAAN,GAEAQ,EAAAC,GAAA,IACArC,IACAqC,GAAA,GAGArC,EAAA4B,GAAAD,GACAF,EAAA,EACAzB,EAAA2B,GACA3B,EAAA4B,GAAA,GACAH,GAAAW,EAAAC,EAAA,GAAAJ,KAAAC,IAAA,EAAAX,GACAvB,GAAA4B,IAEAH,EAAAW,EAAAH,KAAAC,IAAA,EAAAN,EAAA,GAAAK,KAAAC,IAAA,EAAAX,GACAvB,EAAA,IAIAuB,GAAA,EAAAH,EAAAC,EAAAZ,GAAA,IAAAgB,EAAAhB,GAAAqB,EAAAL,GAAA,IAAAF,GAAA,GAIA,IAFAvB,EAAAA,GAAAuB,EAAAE,EACAC,GAAAH,EACAG,EAAA,EAAAN,EAAAC,EAAAZ,GAAA,IAAAT,EAAAS,GAAAqB,EAAA9B,GAAA,IAAA0B,GAAA,GAEAN,EAAAC,EAAAZ,EAAAqB,IAAA,IAAA1B,2BCpHA,YAWA,SAAAwC,GAAAC,EAAAC,GAEA,IAAA,GADAC,MACAtC,EAAA,EAAAA,EAAAuC,UAAAhC,QACA+B,EAAAE,KAAAD,UAAAvC,KACA,IAAAyC,IAAA,CACA,OAAA,IAAAC,SAAA,SAAAC,EAAAC,GACAN,EAAAE,KAAA,SAAAK,GACA,GAAAJ,EAEA,GADAA,GAAA,EACAI,EACAD,EAAAC,OACA,CAEA,IAAA,GADAC,MACA9C,EAAA,EAAAA,EAAAuC,UAAAhC,QACAuC,EAAAN,KAAAD,UAAAvC,KACA2C,GAAAI,MAAA,KAAAD,KAIA,KACAV,EAAAW,MAAAV,GAAAW,KAAAV,GACA,MAAAO,GACAJ,IACAA,GAAA,EACAG,EAAAC,OAlCApC,EAAAJ,QAAA8B,0BCDA,YAOA,IAAAc,GAAA5C,CAOA4C,GAAA1C,OAAA,SAAA2C,GACA,GAAAC,GAAAD,EAAA3C,MACA,KAAA4C,EACA,MAAA,EAEA,KADA,GAAA1D,GAAA,IACA0D,EAAA,EAAA,GAAA,MAAAD,EAAAE,OAAAD,MACA1D,CACA,OAAA+B,MAAA6B,KAAA,EAAAH,EAAA3C,QAAA,EAAAd,EAUA,KAAA,GANA6D,MAGAC,KAGAvD,EAAA,EAAAA,EAAA,IACAuD,EAAAD,EAAAtD,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,EAAAA,EAAA,GAAA,IAAAA,GASAiD,GAAAO,OAAA,SAAA7C,EAAA8C,EAAAC,GAKA,IAJA,GAGAlE,GAHA0D,KACAlD,EAAA,EACA2D,EAAA,EAEAF,EAAAC,GAAA,CACA,GAAAE,GAAAjD,EAAA8C,IACA,QAAAE,GACA,IAAA,GACAT,EAAAlD,KAAAsD,EAAAM,GAAA,GACApE,GAAA,EAAAoE,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAT,EAAAlD,KAAAsD,EAAA9D,EAAAoE,GAAA,GACApE,GAAA,GAAAoE,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAT,EAAAlD,KAAAsD,EAAA9D,EAAAoE,GAAA,GACAV,EAAAlD,KAAAsD,EAAA,GAAAM,GACAD,EAAA,GAUA,MANAA,KACAT,EAAAlD,KAAAsD,EAAA9D,GACA0D,EAAAlD,GAAA,GACA,IAAA2D,IACAT,EAAAlD,EAAA,GAAA,KAEA6D,OAAAC,aAAAf,MAAAc,OAAAX,GAGA,IAAAa,GAAA,kBAUAd,GAAAe,OAAA,SAAAd,EAAAvC,EAAAC,GAIA,IAAA,GADApB,GAFAiE,EAAA7C,EACA+C,EAAA,EAEA3D,EAAA,EAAAA,EAAAkD,EAAA3C,QAAA,CACA,GAAAqB,GAAAsB,EAAAe,WAAAjE,IACA,IAAA,KAAA4B,GAAA+B,EAAA,EACA,KACA,IAAAO,UAAAtC,EAAA2B,EAAA3B,IACA,KAAA1B,OAAA6D,EACA,QAAAJ,GACA,IAAA,GACAnE,EAAAoC,EACA+B,EAAA,CACA,MACA,KAAA,GACAhD,EAAAC,KAAApB,GAAA,GAAA,GAAAoC,IAAA,EACApC,EAAAoC,EACA+B,EAAA,CACA,MACA,KAAA,GACAhD,EAAAC,MAAA,GAAApB,IAAA,GAAA,GAAAoC,IAAA,EACApC,EAAAoC,EACA+B,EAAA,CACA,MACA,KAAA,GACAhD,EAAAC,MAAA,EAAApB,IAAA,EAAAoC,EACA+B,EAAA,GAIA,GAAA,IAAAA,EACA,KAAAzD,OAAA6D,EACA,OAAAnD,GAAA6C,2BCtHA,YAmBA,SAAAU,KAmBA,QAAAC,KAGA,IAFA,GAAAtB,MACA9C,EAAA,EACAA,EAAAuC,UAAAhC,QACAuC,EAAAN,KAAAD,UAAAvC,KACA,IAAAqE,GAAAC,EAAAvB,MAAA,KAAAD,GACAyB,EAAAC,CACA,IAAAC,EAAAlE,OAAA,CACA,GAAAmE,GAAAD,EAAAA,EAAAlE,OAAA,EAGAoE,GAAAC,KAAAF,GACAH,IAAAC,EACAK,EAAAD,KAAAF,MACAH,EAGAO,EAAAF,KAAAF,KAAAI,EAAAF,KAAAP,IACAE,IAAAC,EACAO,GAAA,GACAA,GAAAC,EAAAJ,KAAAF,KACAH,IAAAC,EACAO,GAAA,GAIAE,EAAAL,KAAAP,KACAE,IAAAC,GAEA,IAAAxE,EAAA,EAAAA,EAAAuE,IAAAvE,EACAqE,EAAA,KAAAA,CAEA,OADAI,GAAAjC,KAAA6B,GACAD,EASA,QAAAc,GAAAC,GACA,MAAA,aAAAA,EAAAA,EAAAC,QAAA,WAAA,KAAA,IAAA,IAAA9C,EAAA+C,KAAA,MAAA,QAAAZ,EAAAY,KAAA,MAAA,MAYA,QAAAC,GAAAH,EAAAI,GACA,gBAAAJ,KACAI,EAAAJ,EACAA,EAAAjB,OAEA,IAAAsB,GAAApB,EAAAc,IAAAC,EACAhB,GAAAsB,SACAC,QAAAzD,IAAA,oBAAAuD,EAAAJ,QAAA,MAAA,MAAAA,QAAA,MAAA,MACA,IAAAO,GAAAC,OAAAD,KAAAJ,IAAAA,MACA,OAAAM,UAAA9C,MAAA,KAAA4C,EAAAG,OAAA,UAAAN,IAAAzC,MAAA,KAAA4C,EAAAI,IAAA,SAAAC,GAAA,MAAAT,GAAAS,MA7EA,IAAA,GAJA1D,MACAmC,KACAD,EAAA,EACAO,GAAA,EACA/E,EAAA,EAAAA,EAAAuC,UAAAhC,QACA+B,EAAAE,KAAAD,UAAAvC,KAwFA,OA9BAoE,GAAAc,IAAAA,EA4BAd,EAAAkB,IAAAA,EAEAlB,EAGA,QAAAE,GAAA2B,GAGA,IAFA,GAAAnD,MACA9C,EAAA,EACAA,EAAAuC,UAAAhC,QACAuC,EAAAN,KAAAD,UAAAvC,KAEA,OADAA,GAAA,EACAiG,EAAAb,QAAA,YAAA,SAAAc,EAAAC,GACA,GAAAC,GAAAtD,EAAA9C,IACA,QAAAmG,GACA,IAAA,IACA,MAAAE,MAAAC,UAAAF,EACA,SACA,MAAAvC,QAAAuC,MA/HA3F,EAAAJ,QAAA8D,CAEA,IAAAQ,GAAA,QACAM,EAAA,SACAH,EAAA,KACAD,EAAA,gDACAG,EAAA,sCA8HAb,GAAAoC,WAAA,CAAA,KAAApC,EAAAoC,UAAA,IAAApC,EAAA,IAAA,KAAA,cAAAmB,MAAA,EAAA,GAAA,MAAA/F,IACA4E,EAAAsB,SAAA,0BCtIA,YASA,SAAAe,KAOAxD,KAAAyD,KAfAhG,EAAAJ,QAAAmG,CAmBA,IAAAE,GAAAF,EAAAG,SASAD,GAAAE,GAAA,SAAAC,EAAAzE,EAAAC,GAKA,OAJAW,KAAAyD,EAAAI,KAAA7D,KAAAyD,EAAAI,QAAArE,MACAJ,GAAAA,EACAC,IAAAA,GAAAW,OAEAA,MASA0D,EAAAI,IAAA,SAAAD,EAAAzE,GACA,GAAA8B,SAAA2C,EACA7D,KAAAyD,SAEA,IAAAvC,SAAA9B,EACAY,KAAAyD,EAAAI,UAGA,KAAA,GADAE,GAAA/D,KAAAyD,EAAAI,GACA7G,EAAA,EAAAA,EAAA+G,EAAAxG,QACAwG,EAAA/G,GAAAoC,KAAAA,EACA2E,EAAAC,OAAAhH,EAAA,KAEAA,CAGA,OAAAgD,OASA0D,EAAAO,KAAA,SAAAJ,GACA,GAAAE,GAAA/D,KAAAyD,EAAAI,EACA,IAAAE,EAAA,CAGA,IAFA,GAAAjE,MACA9C,EAAA,EACAA,EAAAuC,UAAAhC,QACAuC,EAAAN,KAAAD,UAAAvC,KACA,KAAAA,EAAA,EAAAA,EAAA+G,EAAAxG,QACAwG,EAAA/G,GAAAoC,GAAAW,MAAAgE,EAAA/G,KAAAqC,IAAAS,GAEA,MAAAE,+BC7EA,YAsBA,SAAAkE,GAAAC,EAAAC,GACA,MAAAA,GAEAC,EAAAC,SACAD,EAAAC,SAAAH,EAAA,OAAA,SAAAtE,EAAA0E,GACA,MAAA1E,IAAA,mBAAA2E,gBACAC,EAAAN,EAAAC,GACAA,EAAAvE,EAAA0E,KAEAE,EAAAN,EAAAC,GAPAjF,EAAA+E,EAAAlE,KAAAmE,GAUA,QAAAM,GAAAN,EAAAC,GACA,GAAAM,GAAA,GAAAF,eACAE,GAAAC,mBAAA,WACA,MAAA,KAAAD,EAAAE,WACA,IAAAF,EAAAG,QAAA,MAAAH,EAAAG,OACAT,EAAA,KAAAM,EAAAI,cACAV,EAAAlH,MAAA,UAAAwH,EAAAG,SACA3D,QAKAwD,EAAAK,KAAA,MAAAZ,GACAO,EAAAM,OA9CAvH,EAAAJ,QAAA6G,CAEA,IAAA/E,GAAApC,EAAA,GACAsH,EAAAtH,EAAA,mDCJA,YASA,KAAAU,OAAAJ,QAAA4H,MAAA,MAAA,QAAA5C,KAAA,KAAA,MAAA,MAAA9F,6BCTA,YA8BA,SAAA2I,GAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAD,GAAA,KACAE,EAAAD,IAAA,EACAE,EAAA,KACA5H,EAAA0H,CACA,OAAA,UAAAD,GACA,GAAAA,EAAAE,EACA,MAAAJ,GAAAE,EACAzH,GAAAyH,EAAAC,IACAE,EAAAL,EAAAG,GACA1H,EAAA,EAEA,IAAA6H,GAAAL,EAAA9H,KAAAkI,EAAA5H,EAAAA,GAAAyH,EAGA,OAFA,GAAAzH,IACAA,GAAA,EAAAA,GAAA,GACA6H,GA5CAhI,EAAAJ,QAAA6H,0BCDA,YAOA,IAAAQ,GAAArI,CAOAqI,GAAAnI,OAAA,SAAA2C,GAGA,IAAA,GAFAyF,GAAA,EACA/G,EAAA,EACA5B,EAAA,EAAAA,EAAAkD,EAAA3C,SAAAP,EACA4B,EAAAsB,EAAAe,WAAAjE,GACA4B,EAAA,IACA+G,GAAA,EACA/G,EAAA,KACA+G,GAAA,EACA,SAAA,MAAA/G,IAAA,SAAA,MAAAsB,EAAAe,WAAAjE,EAAA,OACAA,EACA2I,GAAA,GAEAA,GAAA,CAEA,OAAAA,IAUAD,EAAAhI,KAAA,SAAAC,EAAA8C,EAAAC,GACA,GAAAiF,GAAAjF,EAAAD,CACA,IAAAkF,EAAA,EACA,MAAA,EAIA,KAHA,GAEAnJ,GAFA0D,KACAlD,EAAA,EAEAyD,EAAAC,GACAlE,EAAAmB,EAAA8C,KACAjE,EAAA,IACA0D,EAAAlD,KAAAR,EACAA,EAAA,KAAAA,EAAA,IACA0D,EAAAlD,MAAA,GAAAR,IAAA,EAAA,GAAAmB,EAAA8C,KACAjE,EAAA,KAAAA,EAAA,KACAA,IAAA,EAAAA,IAAA,IAAA,GAAAmB,EAAA8C,OAAA,IAAA,GAAA9C,EAAA8C,OAAA,EAAA,GAAA9C,EAAA8C,MAAA,MACAP,EAAAlD,KAAA,OAAAR,GAAA,IACA0D,EAAAlD,KAAA,OAAA,KAAAR,IAEA0D,EAAAlD,MAAA,GAAAR,IAAA,IAAA,GAAAmB,EAAA8C,OAAA,EAAA,GAAA9C,EAAA8C,IAEA,OAAAI,QAAAC,aAAAf,MAAAc,OAAAX,EAAAkF,MAAA,EAAApI,KAUA0I,EAAAhH,MAAA,SAAAwB,EAAAvC,EAAAC,GAIA,IAAA,GAFAgI,GACAC,EAFApF,EAAA7C,EAGAZ,EAAA,EAAAA,EAAAkD,EAAA3C,SAAAP,EACA4I,EAAA1F,EAAAe,WAAAjE,GACA4I,EAAA,IACAjI,EAAAC,KAAAgI,EACAA,EAAA,MACAjI,EAAAC,KAAAgI,GAAA,EAAA,IACAjI,EAAAC,KAAA,GAAAgI,EAAA,KACA,SAAA,MAAAA,IAAA,SAAA,OAAAC,EAAA3F,EAAAe,WAAAjE,EAAA,MACA4I,EAAA,QAAA,KAAAA,IAAA,KAAA,KAAAC,KACA7I,EACAW,EAAAC,KAAAgI,GAAA,GAAA,IACAjI,EAAAC,KAAAgI,GAAA,GAAA,GAAA,IACAjI,EAAAC,KAAAgI,GAAA,EAAA,GAAA,IACAjI,EAAAC,KAAA,GAAAgI,EAAA,MAEAjI,EAAAC,KAAAgI,GAAA,GAAA,IACAjI,EAAAC,KAAAgI,GAAA,EAAA,GAAA,IACAjI,EAAAC,KAAA,GAAAgI,EAAA,IAGA,OAAAhI,GAAA6C,4BC7FA,YAgBA,SAAAqF,GAAAC,GACA,MAAAD,GAAAE,OAAAD,GAhBAtI,EAAAJ,QAAAyI,CAEA,IAAAG,GAAAlJ,EAAA,IACAmJ,EAAAnJ,EAAA,IACAoJ,EAAApJ,EAAA,IAEAqJ,EAAAD,EAAAC,CAmBAN,GAAAE,OAAA,SAAAD,EAAAM,GACA,KAAAN,YAAAG,IACA,KAAAE,GAAA,OAAA,SACA,IAAAC,GACA,GAAA,kBAAAA,GACA,KAAAD,GAAA,OAAA,kBAEAC,GAAA,SAAAC,GACA,MAAA,UAAAC,GACAD,EAAAhJ,KAAA0C,KAAAuG,KAEAN,EAGAI,GAAAG,YAAAV,CAGA,IAAAnC,GAAA0C,EAAA1C,UAAA,GAAAsC,EA2CA,OA1CAtC,GAAA6C,YAAAH,EAGAF,EAAAM,MAAAJ,EAAAJ,GAAA,GAGAI,EAAAK,MAAAX,EACApC,EAAA+C,MAAAX,EAGAA,EAAAY,iBAAAC,QAAA,SAAAC,GAIAlD,EAAAkD,EAAA1E,MAAA2E,MAAAC,QAAAF,EAAAlH,UAAAqH,cACAb,EAAAc,WACAd,EAAAe,SAAAL,EAAAG,cACAb,EAAAgB,YACAN,EAAAG,eAIAjB,EAAAqB,iBAAAR,QAAA,SAAAS,GACAlB,EAAAmB,KAAA3D,EAAA0D,EAAA1H,UAAAwC,MACAoF,IAAA,WAEA,IAAA,GAAA5E,GAAAC,OAAAD,KAAA3C,MAAAhD,EAAA2F,EAAApF,OAAA,EAAAP,GAAA,IAAAA,EACA,GAAAqK,EAAAA,MAAAG,QAAA7E,EAAA3F,KAAA,EACA,MAAA2F,GAAA3F,IAGAyK,IAAA,SAAA9I,GACA,IAAA,GAAAgE,GAAA0E,EAAAA,MAAArK,EAAA,EAAAA,EAAA2F,EAAApF,SAAAP,EACA2F,EAAA3F,KAAA2B,SACAqB,MAAA2C,EAAA3F,SAMA+I,EAAA2B,QAAArB,GAEA1C,GAIAmC,EAAAnC,UAAAsC,4CC1FA,YAgBA,SAAA0B,GAAAxF,EAAAyF,GACA,QAAAhG,KAAAO,KACAA,EAAA,mBAAAA,EAAA,SACAyF,GAAAC,QAAAC,QAAAD,QAAAE,UAAAF,OAAAD,QAEAD,EAAAxF,GAAAyF,EAnBAnK,EAAAJ,QAAAsK,EA6BAA,EAAA,OACAK,KACAC,QACAC,UACAnC,KAAA,SACAoC,GAAA,GAEAxJ,OACAoH,KAAA,QACAoC,GAAA,MAMA,IAAAC,EAEAT,GAAA,YACAU,SAAAD,GACAH,QACAK,SACAvC,KAAA,QACAoC,GAAA,GAEAI,OACAxC,KAAA,QACAoC,GAAA,OAMAR,EAAA,aACAa,UAAAJ,IAGAT,EAAA,SACAc,OACAR,aAIAN,EAAA,UACAe,QACAT,QACAA,QACAU,QAAA,SACA5C,KAAA,QACAoC,GAAA,KAIAS,OACAC,QACAC,MACAzB,OAAA,YAAA,cAAA,cAAA,YAAA,cAAA,eAGAY,QACAc,WACAhD,KAAA,YACAoC,GAAA,GAEAa,aACAjD,KAAA,SACAoC,GAAA,GAEAc,aACAlD,KAAA,SACAoC,GAAA,GAEAe,WACAnD,KAAA,OACAoC,GAAA,GAEAgB,aACApD,KAAA,SACAoC,GAAA,GAEAiB,WACArD,KAAA,YACAoC,GAAA,KAIAkB,WACAC,QACAC,WAAA,IAGAC,WACAvB,QACAqB,QACAG,KAAA,WACA1D,KAAA,QACAoC,GAAA,gCC9HA,YAgBA,SAAAnH,GAAA0I,EAAAnM,GAMA,IAJA,GAAA0K,GAAAjI,KAAA2J,gBACAC,EAAAF,YAAAG,GAAAH,EAAAG,EAAA7D,OAAA0D,GACAI,EAAA5I,SAAA3D,EAAAqM,EAAAjE,IAAAiE,EAAAG,IAAAxM,EACAyM,EAAA,IAAAhK,KAAAiK,WACAL,EAAAG,IAAAD,GAAA,CACA,GAAAI,GAAAN,EAAAM,MACArD,EAAAoB,EAAAiC,EAAA/B,IAAAxI,UACAoG,EAAAc,EAAAsD,uBAAAC,GAAA,SAAAvD,EAAAd,IAGA,IAAAc,EAGA,GAAAA,EAAA9D,IAAA,CACA,GAAA4F,GAAA9B,EAAAwD,gBAAA,SAAAxD,EAAA8B,QACApL,EAAAqM,EAAAU,SACAvH,EAAAiH,EAAAnD,EAAA1E,QACA,IAAA5E,EAAA,CACAA,GAAAqM,EAAAG,GAEA,KADA,GAAAQ,MAAAC,KACAZ,EAAAG,IAAAxM,GACA,IAAAqM,EAAAM,MAAA/B,GACAoC,EAAAA,EAAAhN,QAAAqM,EAAAjB,KACAzH,SAAAuJ,EAAAC,MAAA3E,GACAyE,EAAAA,EAAAjN,QAAAqM,EAAA7D,KAEAyE,EAAAA,EAAAjN,QAAAsJ,EAAAsD,aAAAnJ,OAAA4I,EAAAA,EAAAU,SAEA,KAAA,GAAAtN,GAAA,EAAAA,EAAAuN,EAAAhN,SAAAP,EACA+F,EAAA,gBAAAwH,GAAAvN,GAAAmJ,EAAAwE,WAAAJ,EAAAvN,IAAAuN,EAAAvN,IAAAwN,EAAAxN,QAIA,IAAA6J,EAAA+D,SAAA,CACA,GAAAtB,GAAAU,EAAAnD,EAAA1E,OAAA6H,EAAAnD,EAAA1E,MAAA5E,OAAAyM,EAAAnD,EAAA1E,MAAA6H,EAAAnD,EAAA1E,QAGA,IAAA0E,EAAAgE,QAAA3J,SAAAuJ,EAAAI,OAAA9E,IAAA,IAAAmE,EAAAY,SAEA,IADA,GAAAC,GAAAnB,EAAAU,SAAAV,EAAAG,IACAH,EAAAG,IAAAgB,GACAzB,EAAAA,EAAA/L,QAAAqM,EAAA7D,SAGA7E,UAAAuJ,EAAAC,MAAA3E,GACAuD,EAAAA,EAAA/L,QAAAqM,EAAA7D,KAEAuD,EAAAA,EAAA/L,QAAAsJ,EAAAsD,aAAAnJ,OAAA4I,EAAAA,EAAAU,cAGApJ,UAAAuJ,EAAAC,MAAA3E,GACAiE,EAAAnD,EAAA1E,MAAAyH,EAAA7D,KAEAiE,EAAAnD,EAAA1E,MAAA0E,EAAAsD,aAAAnJ,OAAA4I,EAAAA,EAAAU,cAIAV,GAAAoB,SAAAd,EAAAY,UAEA,MAAAd,GA3EAvM,EAAAJ,QAAA2D,CAEA,IAAAoJ,GAAArN,EAAA,IACA8M,EAAA9M,EAAA,IACA0N,EAAA1N,EAAA,IACAoJ,EAAApJ,EAAA,GAkFAiE,GAAAiK,SAAA,SAAAC,GAWA,IAAA,GATAjD,GAAAiD,EAAAvE,iBACAvF,EAAA+E,EAAAhF,QAAA,IAAA,KAEA,6CACA,2DACA,mBACA,iBACA,iBAEAnE,EAAA,EAAAA,EAAAiL,EAAA1K,SAAAP,EAAA,CACA,GAAA6J,GAAAoB,EAAAjL,GAAA2C,UACAoG,EAAAc,EAAAsD,uBAAAC,GAAA,SAAAvD,EAAAd,KACAuB,EAAAnB,EAAAgF,SAAAtE,EAAA1E,KAIA,IAHAf,EACA,WAAAyF,EAAAsB,IAEAtB,EAAA9D,IAAA,CACA,GAAA4F,GAAA9B,EAAAwD,gBAAA,SAAAxD,EAAA8B,OACAvH,GACA,yBACA,UACA,YACA,iBACA,mBACA,sBACA,qBAAAuH,GAEAzH,SAAAuJ,EAAAC,MAAA3E,GAAA3E,EAEA,QACA,qBAAA2E,GAEA3E,EAEA,QACA,6CAAApE,EAAAA,GACAoE,EACA,KACA,+BACA,8DACA,KACA,QAAAkG,OAEAT,GAAA+D,UAAAxJ,EAEA,6BAAAkG,EAAAA,EAAAA,EAAAA,GAEAT,EAAAgE,QAAA3J,SAAAuJ,EAAAI,OAAA9E,IAAA3E,EAEA,uBACA,0BACA,kBACA,yBAAAkG,EAAAA,EAAAvB,GACA,SAGA7E,SAAAuJ,EAAAC,MAAA3E,GAAA3E,EAEA,yBAAAkG,EAAAA,EAAAvB,GAEA3E,EAEA,iDAAAkG,EAAAA,EAAAtK,EAAAA,IAEAkE,SAAAuJ,EAAAC,MAAA3E,GAAA3E,EAEA,aAAAkG,EAAAvB,GAEA3E,EAEA,qCAAAkG,EAAAtK,EAAAA,EAEAoE,GACA,SACA,MAAAA,GACA,YACA,0BACA,SACA,KACA,KACA,6DC1KA,YAiBA,SAAAZ,GAAAwJ,EAAAoB,GAEAA,IACAA,EAAAC,EAAArF,SAEA,KADA,GAAAiC,GAAAjI,KAAA2G,iBAAA2E,EAAA,EACAA,EAAArD,EAAA1K,QAAA,CACA,GAAAsJ,GAAAoB,EAAAqD,KAAA3L,UACAoG,EAAAc,EAAAsD,uBAAAC,GAAA,SAAAvD,EAAAd,KACA+E,EAAAL,EAAAC,MAAA3E,EAGA,IAAAc,EAAA9D,IAAA,CACA,GACApE,GAAAgE,EADAgG,EAAA9B,EAAAwD,gBAAA,SAAAxD,EAAA8B,OAEA,KAAAhK,EAAAqL,EAAAnD,EAAA1E,SAAAQ,EAAAC,OAAAD,KAAAhE,IAAApB,OAAA,CACA6N,EAAAG,MACA,KAAA,GAAAvO,GAAA,EAAAA,EAAA2F,EAAApF,SAAAP,EACAoO,EAAAlB,IAAA,EAAAO,EAAAe,OAAA7C,IAAAA,GAAAhG,EAAA3F,IACAkE,SAAA4J,EACAM,EAAAlB,IAAA,EAAAY,GAAA/E,GAAApH,EAAAgE,EAAA3F,KAEA6J,EAAAsD,aAAA3J,OAAA7B,EAAAgE,EAAA3F,IAAAoO,EAAAlB,IAAA,EAAA,GAAAqB,QAAAE,QAEAL,GAAAK,OAAA5E,EAAAsB,SAIA,IAAAtB,EAAA+D,SAAA,CACA,GAAAtB,GAAAU,EAAAnD,EAAA1E,KACA,IAAAmH,GAAAA,EAAA/L,OAGA,GAAAsJ,EAAAgE,QAAA3J,SAAAuJ,EAAAI,OAAA9E,GAAA,CACAqF,EAAAG,MAEA,KADA,GAAAvO,GAAA,EACAA,EAAAsM,EAAA/L,QACA6N,EAAArF,GAAAuD,EAAAtM,KACAoO,GAAAK,OAAA5E,EAAAsB,QAGA,CACA,GAAAnL,GAAA,CACA,IAAAkE,SAAA4J,EACA,KAAA9N,EAAAsM,EAAA/L,QACA6N,EAAAlB,IAAArD,EAAAsB,GAAA2C,GAAA/E,GAAAuD,EAAAtM,UAEA,MAAAA,EAAAsM,EAAA/L,QACAsJ,EAAAsD,aAAA3J,OAAA8I,EAAAtM,KAAAoO,EAAAlB,IAAArD,EAAAsB,GAAA,GAAAoD,QAAAE,cAMA,CACA,GAAA9M,GAAAqL,EAAAnD,EAAA1E,OAEA0E,EAAA6E,QAAA1B,EAAAnD,EAAA6E,OAAAvJ,QAAA0E,EAAA1E,OAEA0E,EAAA8E,UAAAzK,SAAAvC,KAAAkI,EAAA+E,KAAAzF,EAAA0F,QAAAlN,EAAAkI,EAAAG,cAAArI,IAAAkI,EAAAG,iBAEA9F,SAAA4J,EACAM,EAAAlB,IAAArD,EAAAsB,GAAA2C,GAAA/E,GAAApH,IAEAkI,EAAAsD,aAAA3J,OAAA7B,EAAAyM,EAAAG,QACAH,EAAAzF,KAAAkB,EAAA8E,SACAP,EAAAK,OAAA5E,EAAAsB,IAEAiD,EAAAU,WAKA,MAAAV,GAxFA3N,EAAAJ,QAAAmD,CAEA,IAAA4J,GAAArN,EAAA,IACAsO,EAAAtO,EAAA,IACA0N,EAAA1N,EAAA,IACAoJ,EAAApJ,EAAA,IACAoO,EAAAhF,EAAAgF,QA8FA3K,GAAAyK,SAAA,SAAAC,GAQA,IAAA,GADAlO,GALAiL,EAAAiD,EAAAvE,iBACAkC,EAAAqC,EAAA9D,iBACAhG,EAAA+E,EAAAhF,QAAA,IAAA,KACA,0BAGAnE,EAAA,EAAAA,EAAAiL,EAAA1K,SAAAP,EAAA,CACA,GAAA6J,GAAAoB,EAAAjL,GAAA2C,UACAoG,EAAAc,EAAAsD,uBAAAC,GAAA,SAAAvD,EAAAd,KACA+E,EAAAL,EAAAC,MAAA3E,GACAuB,EAAA6D,EAAAtE,EAAA1E,KAGA,IAAA0E,EAAA9D,IAAA,CACA,GAAA4F,GAAA9B,EAAAwD,gBAAA,SAAAxD,EAAA8B,QACAoD,EAAAtB,EAAAe,OAAA7C,EACAvH,GAEA,WAAAkG,GACA,YACA,oDAAAA,GACA,wBAAAyE,EAAApD,GAEAzH,SAAA4J,EAAA1J,EAEA,6BAAA0J,EAAA/E,EAAAuB,GAEAlG,EAEA,0DAAApE,EAAAsK,GAEAlG,EACA,KACA,iCAAAyF,EAAAsB,IACA,SAGAtB,GAAA+D,SAGA/D,EAAAgE,QAAA3J,SAAAuJ,EAAAI,OAAA9E,GAAA3E,EAEA,uBAAAkG,EAAAA,GACA,YACA,gCAAAA,GACA,eAAAvB,EAAAuB,GACA,eAAAT,EAAAsB,IACA,MAGA/G,EAEA,UAAAkG,GACA,gCAAAA,GACApG,SAAA4J,EAAA1J,EACA,0BAAAyF,EAAAsB,GAAA2C,EAAA/E,EAAAuB,GACAlG,EACA,uDAAApE,EAAAsK,EAAAT,EAAAsB,KAKAtB,EAAA6E,SACA7E,EAAA8E,WAEA9E,EAAA+E,KAAAxK,EACA,4CAAAkG,EAAAA,EAAAT,EAAAG,cACA5F,EACA,gCAAAkG,EAAAA,EAAAT,EAAAG,eAIA9F,SAAA4J,EAAA1J,EAEA,uBAAAyF,EAAAsB,GAAA2C,EAAA/E,EAAAuB,GAEAT,EAAA8E,SAAAvK,EAEA,oDAAApE,EAAAsK,EAAAT,EAAAsB,IAEA/G,EAEA,8DAAApE,EAAAsK,EAAAT,EAAAsB,KAIA,IAAA,GAAAnL,GAAA,EAAAA,EAAA6L,EAAAtL,SAAAP,EAAA,CACA,GAAAqK,GAAAwB,EAAA7L,GACAsK,EAAA6D,EAAA9D,EAAAlF,KACAf,GACA,eAAAkG,EAEA,KAAA,GADA0E,GAAA3E,EAAAV,iBACAhG,EAAA,EAAAA,EAAAqL,EAAAzO,SAAAoD,EAAA,CACA,GAAAkG,GAAAmF,EAAArL,GACAoF,EAAAc,EAAAsD,uBAAAC,GAAA,SAAAvD,EAAAd,KACA+E,EAAAL,EAAAC,MAAA3E,GACAuB,EAAA6D,EAAAtE,EAAA1E,KACAf,GACA,UAAAyF,EAAA1E,MAEAjB,SAAA4J,EAAA1J,EAEA,uBAAAyF,EAAAsB,GAAA2C,EAAA/E,EAAAuB,GAEAT,EAAA8E,SAAAvK,EAEA,oDAAA6G,EAAAT,QAAAX,GAAAS,EAAAT,EAAAsB,IAEA/G,EAEA,8DAAA6G,EAAAT,QAAAX,GAAAS,EAAAT,EAAAsB,IACA/G,EACA,UAEAA,EACA,KAGA,MAAAA,GACA,6DC9NA,YAoBA,SAAAgJ,GAAAjI,EAAAmH,EAAA2C,GACAC,EAAA5O,KAAA0C,KAAAmC,EAAA8J,GAMAjM,KAAAsJ,OAAAA,MAOAtJ,KAAAmM,EAAA,KAkCA,QAAAC,GAAAC,GAEA,MADAA,GAAAF,EAAA,KACAE,EArEA5O,EAAAJ,QAAA+M,CAEA,IAAA8B,GAAAnP,EAAA,IAEAuP,EAAAJ,EAAAK,OAAAnC,GAEAjE,EAAApJ,EAAA,IAEAqJ,EAAAD,EAAAC,CA4BAD,GAAAqG,MAAAF,GAQAG,YACAlF,IAAA,WAUA,MATAvH,MAAAmM,IACAnM,KAAAmM,KACAvJ,OAAAD,KAAA3C,KAAAsJ,QAAA1C,QAAA,SAAAzE,GACA,GAAAgG,GAAAnI,KAAAsJ,OAAAnH,EACA,IAAAnC,KAAAmM,EAAAhE,GACA,KAAAjL,OAAA,gBAAAiL,EAAA,OAAAnI,KACAA,MAAAmM,EAAAhE,GAAAhG,GACAnC,OAEAA,KAAAmM,MAsBA/B,EAAAsC,SAAA,SAAA9E,GACA,MAAA+E,SAAA/E,GAAAA,EAAA0B,SAUAc,EAAAwC,SAAA,SAAAzK,EAAAyF,GACA,MAAA,IAAAwC,GAAAjI,EAAAyF,EAAA0B,OAAA1B,EAAAqE,UAMAK,EAAAO,OAAA,WACA,OACAZ,QAAAjM,KAAAiM,QACA3C,OAAAtJ,KAAAsJ,SAYAgD,EAAAQ,IAAA,SAAA3K,EAAAgG,GACA,IAAAhC,EAAA4G,SAAA5K,GACA,KAAAiE,GAAA,OACA,KAAAD,EAAA6G,UAAA7E,IAAAA,EAAA,EACA,KAAA/B,GAAA,KAAA,yBACA,IAAAlF,SAAAlB,KAAAsJ,OAAAnH,GACA,KAAAjF,OAAA,mBAAAiF,EAAA,QAAAnC,KACA,IAAAkB,SAAAlB,KAAAiN,gBAAA9E,GACA,KAAAjL,OAAA,gBAAAiL,EAAA,OAAAnI,KAEA,OADAA,MAAAsJ,OAAAnH,GAAAgG,EACAiE,EAAApM,OAUAsM,EAAAY,OAAA,SAAA/K,GACA,IAAAgE,EAAA4G,SAAA5K,GACA,KAAAiE,GAAA,OACA,IAAAlF,SAAAlB,KAAAsJ,OAAAnH,GACA,KAAAjF,OAAA,IAAAiF,EAAA,sBAAAnC,KAEA,cADAA,MAAAsJ,OAAAnH,GACAiK,EAAApM,2CCzIA,YA2BA,SAAAmN,GAAAhL,EAAAgG,EAAApC,EAAA0D,EAAA8C,EAAAN,GASA,GARA9F,EAAAe,SAAAuC,IACAwC,EAAAxC,EACAA,EAAA8C,EAAArL,QACAiF,EAAAe,SAAAqF,KACAN,EAAAM,EACAA,EAAArL,QAEAgL,EAAA5O,KAAA0C,KAAAmC,EAAA8J,IACA9F,EAAA6G,UAAA7E,IAAAA,EAAA,EACA,KAAA/B,GAAA,KAAA,yBACA,KAAAD,EAAA4G,SAAAhH,GACA,KAAAK,GAAA,OACA,IAAAlF,SAAAqL,IAAApG,EAAA4G,SAAAR,GACA,KAAAnG,GAAA,SACA,IAAAlF,SAAAuI,IAAA,+BAAA7H,KAAA6H,EAAAA,EAAA2D,WAAAC,eACA,KAAAjH,GAAA,OAAA,sBAMApG,MAAAyJ,KAAAA,GAAA,aAAAA,EAAAA,EAAAvI,OAMAlB,KAAA+F,KAAAA,EAMA/F,KAAAmI,GAAAA,EAMAnI,KAAAuM,OAAAA,GAAArL,OAMAlB,KAAA2L,SAAA,aAAAlC,EAMAzJ,KAAAsN,UAAAtN,KAAA2L,SAMA3L,KAAA4K,SAAA,aAAAnB,EAMAzJ,KAAA+C,KAAA,EAMA/C,KAAAgK,QAAA,KAMAhK,KAAA0L,OAAA,KAMA1L,KAAAgH,aAAA,KAMAhH,KAAA4L,OAAAzF,EAAAoH,MAAArM,SAAAuJ,EAAAmB,KAAA7F,GAMA/F,KAAAmK,aAAA,KAMAnK,KAAAwN,eAAA,KAMAxN,KAAAyN,eAAA,KAOAzN,KAAA0N,EAAA,KA3IAjQ,EAAAJ,QAAA8P,CAEA,IAAAjB,GAAAnP,EAAA,IAEA4Q,EAAAzB,EAAAK,OAAAY,GAEAjH,EAAAnJ,EAAA,IACAqN,EAAArN,EAAA,IACA6Q,EAAA7Q,EAAA,IACA0N,EAAA1N,EAAA,IACAoJ,EAAApJ,EAAA,IAEAqJ,EAAAD,EAAAC,CAkIAD,GAAAqG,MAAAmB,GAQA9C,QACAtD,IAAAoG,EAAAE,SAAA,WAGA,MAFA,QAAA7N,KAAA0N,IACA1N,KAAA0N,EAAA1N,KAAA8N,UAAA,aAAA,GACA9N,KAAA0N,MAeAC,EAAAI,UAAA,SAAA5L,EAAAxD,EAAAqP,GAGA,MAFA,WAAA7L,IACAnC,KAAA0N,EAAA,MACAxB,EAAAvI,UAAAoK,UAAAzQ,KAAA0C,KAAAmC,EAAAxD,EAAAqP,IAQAb,EAAAT,SAAA,SAAA9E,GACA,MAAA+E,SAAA/E,GAAA1G,SAAA0G,EAAAO,KAUAgF,EAAAP,SAAA,SAAAzK,EAAAyF,GACA,MAAA1G,UAAA0G,EAAAe,QACAiF,EAAAhB,SAAAzK,EAAAyF,GACA,GAAAuF,GAAAhL,EAAAyF,EAAAO,GAAAP,EAAA7B,KAAA6B,EAAA6B,KAAA7B,EAAA2E,OAAA3E,EAAAqE,UAMA0B,EAAAd,OAAA,WACA,OACApD,KAAA,aAAAzJ,KAAAyJ,MAAAzJ,KAAAyJ,MAAAvI,OACA6E,KAAA/F,KAAA+F,KACAoC,GAAAnI,KAAAmI,GACAoE,OAAAvM,KAAAuM,OACAN,QAAAjM,KAAAiM,UASA0B,EAAAhO,QAAA,WACA,GAAAK,KAAAiO,SACA,MAAAjO,KAEA,IAAAkO,GAAAzD,EAAA0D,SAAAnO,KAAA+F,KAGA,IAAA7E,SAAAgN,EAAA,CACA,GAAAD,GAAAjO,KAAAoO,OAAAC,OAAArO,KAAA+F,KACA,IAAAkI,YAAA/H,GACAlG,KAAAmK,aAAA8D,EACAC,EAAA,SACA,CAAA,KAAAD,YAAA7D,IAIA,KAAAlN,OAAA,4BAAA8C,KAAA+F,KAHA/F,MAAAmK,aAAA8D,EACAC,EAAA,GAMA,GAAAI,EAaA,OAZAtO,MAAA+C,IACA/C,KAAAgH,gBACAhH,KAAA4K,SACA5K,KAAAgH,gBACAhH,KAAAiM,SAAA/K,UAAAoN,EAAAtO,KAAAiM,QAAA,SACAjM,KAAAgH,aAAAsH,EAEAtO,KAAAgH,aAAAkH,EAEAlO,KAAA4L,OACA5L,KAAAgH,aAAAb,EAAAoH,KAAAgB,UAAAvO,KAAAgH,eAEAkF,EAAAvI,UAAAhE,QAAArC,KAAA0C,OAUA2N,EAAAa,YAAA,SAAA7P,EAAAsN,GACA,GAAAA,EAAA,CACA,GAAAjM,KAAAmK,uBAAAC,IAAA6B,EAAA,OAAApL,OACA,MAAAb,MAAAmK,aAAA8C,gBAAAtO,EACA,IAAAqB,KAAA4L,MAAAK,EAAAL,KACA,MAAAK,GAAAL,OAAA6C,OACA,gBAAA9P,GACAA,EACAwH,EAAAoH,KAAAgB,UAAA5P,GAAA+P,WACAvI,EAAAoH,KAAAgB,UAAA5P,EAAA,MAAAqB,KAAA+F,KAAA3F,OAAA,IAAAgN,WAEA,MAAAzO,gEC9QA,YAwBA,SAAAiP,GAAAzL,EAAAgG,EAAAQ,EAAA5C,EAAAkG,GAEA,GADAkB,EAAA7P,KAAA0C,KAAAmC,EAAAgG,EAAApC,EAAAkG,IACA9F,EAAA4G,SAAApE,GACA,KAAAxC,GAAAC,EAAA,UAMApG,MAAA2I,QAAAA,EAMA3I,KAAAqK,gBAAA,KAGArK,KAAA+C,KAAA,EAzCAtF,EAAAJ,QAAAuQ,CAEA,IAAAT,GAAApQ,EAAA,IAEA4Q,EAAAR,EAAAxJ,UAEAgL,EAAAxB,EAAAZ,OAAAqB,GAEAxD,EAAArN,EAAA,IACA0N,EAAA1N,EAAA,IACAoJ,EAAApJ,EAAA,GAuCA6Q,GAAAlB,SAAA,SAAA9E,GACA,MAAAuF,GAAAT,SAAA9E,IAAA1G,SAAA0G,EAAAe,SAUAiF,EAAAhB,SAAA,SAAAzK,EAAAyF,GACA,MAAA,IAAAgG,GAAAzL,EAAAyF,EAAAO,GAAAP,EAAAe,QAAAf,EAAA7B,KAAA6B,EAAAqE,UAMA0C,EAAA9B,OAAA,WACA,OACAlE,QAAA3I,KAAA2I,QACA5C,KAAA/F,KAAA+F,KACAoC,GAAAnI,KAAAmI,GACAoE,OAAAvM,KAAAuM,OACAN,QAAAjM,KAAAiM,UAOA0C,EAAAhP,QAAA,WACA,GAAAK,KAAAiO,SACA,MAAAjO,KAGA,IAAA+L,GAAAtB,EAAAe,OAAAxL,KAAA2I,QACA,IAAAzH,SAAA6K,EAAA,CACA,GAAAkC,GAAAjO,KAAAoO,OAAAC,OAAArO,KAAA2I,QACA,MAAAsF,YAAA7D,IACA,KAAAlN,OAAA,8BAAA8C,KAAA2I,QACA3I,MAAAqK,gBAAA4D,EAGA,MAAAN,GAAAhO,QAAArC,KAAA0C,uDC9FA,YAcA,SAAAiG,GAAAM,GACA,GAAAA,EAEA,IAAA,GADA5D,GAAAC,OAAAD,KAAA4D,GACAvJ,EAAA,EAAAA,EAAA2F,EAAApF,SAAAP,EACAgD,KAAA2C,EAAA3F,IAAAuJ,EAAA5D,EAAA3F,IAjBAS,EAAAJ,QAAA4I,CAsBA,IAAA2I,GAAA3I,EAAAtC,SAeAiL,GAAAC,OAAA,SAAA5C,GACAA,IACAA,KACA,IAEAtJ,GAFAsF,EAAAjI,KAAA0G,MAAAuB,OACAL,IAEA,IAAAqE,EAAAkC,SAAA,CACAxL,IACA,KAAA,GAAAmM,KAAA9O,MACA2C,EAAAnD,KAAAsP,OAEAnM,GAAAC,OAAAD,KAAA3C,KACA,KAAA,GAAAgD,GAAAhG,EAAA,EAAAA,EAAA2F,EAAApF,SAAAP,EAAA,CACA,GAAA6J,GAAAoB,EAAAjF,EAAAL,EAAA3F,IACA2B,EAAAqB,KAAAgD,EACA,IAAA6D,EACA,GAAAA,EAAA+D,UACA,GAAAjM,GAAAA,EAAApB,OAAA,CAEA,IAAA,GADAwR,GAAA,GAAAjI,OAAAnI,EAAApB,QACAoD,EAAA,EAAAvD,EAAAuB,EAAApB,OAAAoD,EAAAvD,IAAAuD,EACAoO,EAAApO,GAAAkG,EAAA2H,YAAA7P,EAAAgC,GAAAsL,EACArE,GAAA5E,GAAA+L,OAGAnH,GAAA5E,GAAA6D,EAAA2H,YAAA7P,EAAAsN,OACAA,GAAA+C,aACApH,EAAA5E,GAAArE,GAEA,MAAAiJ,IAuBA3B,EAAAzF,OAAA,SAAAwJ,EAAAoB,GACA,MAAApL,MAAA0G,MAAAlG,OAAAwJ,EAAAoB,IASAnF,EAAAgJ,gBAAA,SAAAjF,EAAAoB,GACA,MAAApL,MAAA0G,MAAAuI,gBAAAjF,EAAAoB,IAUAnF,EAAAjF,OAAA,SAAA0I,GACA,MAAA1J,MAAA0G,MAAA1F,OAAA0I,IAUAzD,EAAAiJ,gBAAA,SAAAxF,GACA,MAAA1J,MAAA0G,MAAAwI,gBAAAxF,IAUAzD,EAAAkJ,OAAA,SAAAnF,GACA,MAAAhK,MAAA0G,MAAAyI,OAAAnF,6BCrIA,YAyBA,SAAAoF,GAAAjN,EAAA4D,EAAAsJ,EAAAC,EAAAC,EAAAC,EAAAvD,GAQA,GAPA9F,EAAAe,SAAAqI,IACAtD,EAAAsD,EACAA,EAAAC,EAAAtO,QACAiF,EAAAe,SAAAsI,KACAvD,EAAAuD,EACAA,EAAAtO,QAEA6E,IAAAI,EAAA4G,SAAAhH,GACA,KAAAK,GAAA,OACA,KAAAD,EAAA4G,SAAAsC,GACA,KAAAjJ,GAAA,cACA,KAAAD,EAAA4G,SAAAuC,GACA,KAAAlJ,GAAA,eAEA8F,GAAA5O,KAAA0C,KAAAmC,EAAA8J,GAMAjM,KAAA+F,KAAAA,GAAA,MAMA/F,KAAAqP,YAAAA,EAMArP,KAAAuP,gBAAAA,GAAArO,OAMAlB,KAAAsP,aAAAA,EAMAtP,KAAAwP,iBAAAA,GAAAtO,OAMAlB,KAAAyP,oBAAA,KAMAzP,KAAA0P,qBAAA,KAjFAjS,EAAAJ,QAAA+R,CAEA,IAAAlD,GAAAnP,EAAA,IAEA4S,EAAAzD,EAAAK,OAAA6C,GAEAlJ,EAAAnJ,EAAA,IACAoJ,EAAApJ,EAAA,IAEAqJ,EAAAD,EAAAC,CAgFAgJ,GAAA1C,SAAA,SAAA9E,GACA,MAAA+E,SAAA/E,GAAA1G,SAAA0G,EAAAyH,cAUAD,EAAAxC,SAAA,SAAAzK,EAAAyF,GACA,MAAA,IAAAwH,GAAAjN,EAAAyF,EAAA7B,KAAA6B,EAAAyH,YAAAzH,EAAA0H,aAAA1H,EAAA2H,cAAA3H,EAAA4H,eAAA5H,EAAAqE,UAMA0D,EAAA9C,OAAA,WACA,OACA9G,KAAA,QAAA/F,KAAA+F,MAAA/F,KAAA+F,MAAA7E,OACAmO,YAAArP,KAAAqP,YACAE,cAAAvP,KAAAuP,cACAD,aAAAtP,KAAAsP,aACAE,eAAAxP,KAAAwP,eACAvD,QAAAjM,KAAAiM,UAOA0D,EAAAhQ,QAAA,WACA,GAAAK,KAAAiO,SACA,MAAAjO,KACA,IAAAiO,GAAAjO,KAAAoO,OAAAC,OAAArO,KAAAqP,YACA,MAAApB,GAAAA,YAAA/H,IACA,KAAAhJ,OAAA,8BAAA8C,KAAAqP,YAGA,IAFArP,KAAAyP,oBAAAxB,EACAA,EAAAjO,KAAAoO,OAAAC,OAAArO,KAAAsP,gBACArB,GAAAA,YAAA/H,IACA,KAAAhJ,OAAA,+BAAA8C,KAAAqP,YAEA,OADArP,MAAA0P,qBAAAzB,EACA/B,EAAAvI,UAAAhE,QAAArC,KAAA0C,iDCrIA,YA0BA,SAAA4P,GAAAzN,EAAA8J,GACAC,EAAA5O,KAAA0C,KAAAmC,EAAA8J,GAMAjM,KAAA6H,OAAA3G,OAOAlB,KAAA6P,EAAA,KAGA,QAAAzD,GAAA0D,GAEA,MADAA,GAAAD,EAAA,KACAC,EA8DA,QAAAC,GAAAhB,GACA,GAAAA,GAAAA,EAAAxR,OAAA,CAGA,IAAA,GADAyS,MACAhT,EAAA,EAAAA,EAAA+R,EAAAxR,SAAAP,EACAgT,EAAAjB,EAAA/R,GAAAmF,MAAA4M,EAAA/R,GAAA6P,QACA,OAAAmD,IAhHAvS,EAAAJ,QAAAuS,CAEA,IAAA1D,GAAAnP,EAAA,IAEAkT,EAAA/D,EAAAK,OAAAqD,GAEAxF,EAAArN,EAAA,IACAmJ,EAAAnJ,EAAA,IACAoQ,EAAApQ,EAAA,IACAmT,EAAAnT,EAAA,IACAoJ,EAAApJ,EAAA,IAEAqJ,EAAAD,EAAAC,EAEA+J,GAAA/F,EAAAlE,EAAAgK,EAAA/C,EAAAyC,GACAQ,EAAA,UAAAD,EAAApN,IAAA,SAAAsD,GAAA,MAAAA,GAAAlE,OAAAE,KAAA,KAgCA8D,GAAAqG,MAAAyD,GAQAI,aACA9I,IAAA,WACA,MAAAvH,MAAA6P,IAAA7P,KAAA6P,EAAA1J,EAAAmK,QAAAtQ,KAAA6H,aAWA+H,EAAAlD,SAAA,SAAA9E,GACA,MAAA+E,SAAA/E,IACAA,EAAAK,SACAL,EAAA0B,QACApI,SAAA0G,EAAAO,KACAP,EAAAP,QACAO,EAAA2I,SACArP,SAAA0G,EAAAyH,cAWAO,EAAAhD,SAAA,SAAAzK,EAAAyF,GACA,MAAA,IAAAgI,GAAAzN,EAAAyF,EAAAqE,SAAAuE,QAAA5I,EAAAC,SAMAoI,EAAApD,OAAA,WACA,OACAZ,QAAAjM,KAAAiM,QACApE,OAAAkI,EAAA/P,KAAAyQ,oBAmBAb,EAAAG,YAAAA,EAOAE,EAAAO,QAAA,SAAAE,GACA,GAAAC,GAAA3Q,IASA,OARA0Q,IACA9N,OAAAD,KAAA+N,GAAA9J,QAAA,SAAAgK,GAEA,IAAA,GADA/I,GAAA6I,EAAAE,GACAjQ,EAAA,EAAAA,EAAAwP,EAAA5S,SAAAoD,EACA,GAAAwP,EAAAxP,GAAA+L,SAAA7E,GACA,MAAA8I,GAAA7D,IAAAqD,EAAAxP,GAAAiM,SAAAgE,EAAA/I,GACA,MAAAzB,GAAA,UAAAwK,EAAA,YAAAR,KAEApQ,MAQAiQ,EAAA1I,IAAA,SAAApF,GACA,MAAAjB,UAAAlB,KAAA6H,OACA,KACA7H,KAAA6H,OAAA1F,IAAA,MAUA8N,EAAAnD,IAAA,SAAA+D,GACA,IAAAA,GAAAV,EAAA3I,QAAAqJ,EAAArK,aAAA,EACA,KAAAJ,GAAA,SAAAgK,EACA,IAAAS,YAAA1D,IAAAjM,SAAA2P,EAAAtE,OACA,KAAAnG,GAAA,SAAA,6CACA,IAAApG,KAAA6H,OAEA,CACA,GAAAnG,GAAA1B,KAAAuH,IAAAsJ,EAAA1O,KACA,IAAAT,EAAA,CACA,KAAAA,YAAAkO,IAAAiB,YAAAjB,KAAAlO,YAAAwE,IAAAxE,YAAAwO,GAUA,KAAAhT,OAAA,mBAAA2T,EAAA1O,KAAA,QAAAnC,KAPA,KAAA,GADA6H,GAAAnG,EAAA+O,iBACAzT,EAAA,EAAAA,EAAA6K,EAAAtK,SAAAP,EACA6T,EAAA/D,IAAAjF,EAAA7K,GACAgD,MAAAkN,OAAAxL,GACA1B,KAAA6H,SACA7H,KAAA6H,WACAgJ,EAAAC,WAAApP,EAAAuK,SAAA,QAZAjM,MAAA6H,SAmBA,OAFA7H,MAAA6H,OAAAgJ,EAAA1O,MAAA0O,EACAA,EAAAE,MAAA/Q,MACAoM,EAAApM,OAUAiQ,EAAA/C,OAAA,SAAA2D,GACA,KAAAA,YAAA3E,IACA,KAAA9F,GAAA,SAAA,qBACA,IAAAyK,EAAAzC,SAAApO,OAAAA,KAAA6H,OACA,KAAA3K,OAAA2T,EAAA,uBAAA7Q,KAKA,cAJAA,MAAA6H,OAAAgJ,EAAA1O,MACAS,OAAAD,KAAA3C,KAAA6H,QAAAtK,SACAyC,KAAA6H,OAAA3G,QACA2P,EAAAG,SAAAhR,MACAoM,EAAApM,OASAiQ,EAAAgB,OAAA,SAAA9M,EAAAyD,GACAzB,EAAA4G,SAAA5I,GACAA,EAAAA,EAAA+M,MAAA,KACApK,MAAAC,QAAA5C,KACAyD,EAAAzD,EACAA,EAAAjD,OAEA,IAAAiQ,GAAAnR,IACA,IAAAmE,EACA,KAAAA,EAAA5G,OAAA,GAAA,CACA,GAAA6T,GAAAjN,EAAAkN,OACA,IAAAF,EAAAtJ,QAAAsJ,EAAAtJ,OAAAuJ,IAEA,GADAD,EAAAA,EAAAtJ,OAAAuJ,KACAD,YAAAvB,IACA,KAAA1S,OAAA,iDAEAiU,GAAArE,IAAAqE,EAAA,GAAAvB,GAAAwB,IAIA,MAFAxJ,IACAuJ,EAAAX,QAAA5I,GACAuJ,GAOAlB,EAAAqB,WAAA,WAEA,IADA,GAAAzJ,GAAA7H,KAAAyQ,iBAAAzT,EAAA,EACAA,EAAA6K,EAAAtK,QACAsK,EAAA7K,YAAA4S,GACA/H,EAAA7K,KAAAsU,aAEAzJ,EAAA7K,KAAA2C,SACA,OAAAuM,GAAAvI,UAAAhE,QAAArC,KAAA0C,OASAiQ,EAAA5B,OAAA,SAAAlK,EAAAoN,GACA,GAAApL,EAAA4G,SAAA5I,GAAA,CACA,IAAAA,EAAA5G,OACA,MAAA,KACA4G,GAAAA,EAAA+M,MAAA,SACA,KAAA/M,EAAA5G,OACA,MAAA,KAEA,IAAA,KAAA4G,EAAA,GACA,MAAAnE,MAAAwR,UAAAnD,OAAAlK,EAAAiB,MAAA,GAEA,IAAAqM,GAAAzR,KAAAuH,IAAApD,EAAA,GACA,OAAAsN,KAAA,IAAAtN,EAAA5G,QAAAkU,YAAA7B,KAAA6B,EAAAA,EAAApD,OAAAlK,EAAAiB,MAAA,IAAA,KACAqM,EAEA,OAAAzR,KAAAoO,QAAAmD,EACA,KACAvR,KAAAoO,OAAAC,OAAAlK,IAUA8L,EAAAyB,WAAA,SAAAvN,GACA,GAAAsN,GAAAzR,KAAAqO,OAAAlK,EACA,MAAAsN,YAAAvL,IACA,KAAAhJ,OAAA,eACA,OAAAuU,IAUAxB,EAAA0B,cAAA,SAAAxN,GACA,GAAAsN,GAAAzR,KAAAqO,OAAAlK,EACA,MAAAsN,YAAAvB,IACA,KAAAhT,OAAA,kBACA,OAAAuU,gECvSA,YAkBA,SAAAvF,GAAA/J,EAAA8J,GACA,IAAA9F,EAAA4G,SAAA5K,GACA,KAAAiE,GAAA,OACA,IAAA6F,IAAA9F,EAAAe,SAAA+E,GACA,KAAA7F,GAAA,UAAA,YAMApG,MAAAiM,QAAAA,EAMAjM,KAAAmC,KAAAA,EAMAnC,KAAAoO,OAAA,KAMApO,KAAAiO,UAAA,EAiDA,QAAA1B,GAAA/F,GACA,GAAA7C,GAAA6C,EAAA7C,UAAAf,OAAAoD,OAAAhG,KAAA2D,UAGA,OAFAA,GAAA6C,YAAAA,EACAA,EAAA+F,OAAAA,EACA5I,EAlGAlG,EAAAJ,QAAA6O,EAEAA,EAAAK,OAAAA,CAEA,IAAAqF,GAAA7U,EAAA,IACAoJ,EAAApJ,EAAA,IAEAqJ,EAAAD,EAAAC,EA0CAyL,EAAA3F,EAAAvI,SAEAwC,GAAAqG,MAAAqF,GAQAC,MACAvK,IAAA,WAEA,IADA,GAAA4J,GAAAnR,KACA,OAAAmR,EAAA/C,QACA+C,EAAAA,EAAA/C,MACA,OAAA+C,KAUAY,UACAxK,IAAAsK,EAAAG,YAAA,WAGA,IAFA,GAAA7N,IAAAnE,KAAAmC,MACAgP,EAAAnR,KAAAoO,OACA+C,GACAhN,EAAA8N,QAAAd,EAAAhP,MACAgP,EAAAA,EAAA/C,MAEA,OAAAjK,GAAA9B,KAAA,SAwBAwP,EAAAhF,OAAA,WACA,KAAA3P,UAQA2U,EAAAd,MAAA,SAAA3C,GACApO,KAAAoO,QAAApO,KAAAoO,SAAAA,GACApO,KAAAoO,OAAAlB,OAAAlN,MACAA,KAAAoO,OAAAA,EACApO,KAAAiO,UAAA,CACA,IAAA6D,GAAA1D,EAAAoD,SACAM,aAAAF,IACAE,EAAAI,EAAAlS,OAQA6R,EAAAb,SAAA,SAAA5C,GACA,GAAA0D,GAAA1D,EAAAoD,SACAM,aAAAF,IACAE,EAAAK,EAAAnS,MACAA,KAAAoO,OAAA,KACApO,KAAAiO,UAAA,GAOA4D,EAAAlS,QAAA,WACA,GAAAK,KAAAiO,SACA,MAAAjO,KACA,IAAA8R,GAAA9R,KAAAwR,SAGA,OAFAM,aAAAF,KACA5R,KAAAiO,UAAA,GACAjO,MAQA6R,EAAA/D,UAAA,SAAA3L,GACA,GAAAnC,KAAAiM,QACA,MAAAjM,MAAAiM,QAAA9J,IAWA0P,EAAA9D,UAAA,SAAA5L,EAAAxD,EAAAqP,GAGA,MAFAA,IAAAhO,KAAAiM,SAAA/K,SAAAlB,KAAAiM,QAAA9J,MACAnC,KAAAiM,UAAAjM,KAAAiM,aAAA9J,GAAAxD,GACAqB,MASA6R,EAAAf,WAAA,SAAA7E,EAAA+B,GAKA,MAJA/B,IACArJ,OAAAD,KAAAsJ,GAAArF,QAAA,SAAAzE,GACAnC,KAAA+N,UAAA5L,EAAA8J,EAAA9J,GAAA6L,IACAhO,MACAA,MAOA6R,EAAAzE,SAAA,WACA,MAAApN,MAAAwG,YAAArE,KAAA,IAAAnC,KAAAgS,mDCnMA,YAqBA,SAAAI,GAAAjQ,EAAAkQ,EAAApG,GAMA,GALAnF,MAAAC,QAAAsL,KACApG,EAAAoG,EACAA,EAAAnR,QAEAgL,EAAA5O,KAAA0C,KAAAmC,EAAA8J,GACAoG,IAAAvL,MAAAC,QAAAsL,GACA,KAAAjM,GAAA,aAAA,WAMApG,MAAAsS,OAAAtS,KAAAmC,KAAAoQ,UAAA,EAAA,GAAAC,cAAAxS,KAAAmC,KAAAoQ,UAAA,GAMAvS,KAAAqH,MAAAgL,MAOArS,KAAAyS,KAoDA,QAAAC,GAAArL,GACAA,EAAA+G,QACA/G,EAAAoL,EAAA7L,QAAA,SAAAC,GACAA,EAAAuH,QACA/G,EAAA+G,OAAAtB,IAAAjG,KAtGApJ,EAAAJ,QAAA+U,CAEA,IAAAlG,GAAAnP,EAAA,IAEA4V,EAAAzG,EAAAK,OAAA6F,GAEAjF,EAAApQ,EAAA,IACAoJ,EAAApJ,EAAA,IAEAqJ,EAAAD,EAAAC,CA8CAD,GAAAmB,KAAAqL,EAAA,eACApL,IAAA,WACA,MAAAvH,MAAAyS,KASAL,EAAA1F,SAAA,SAAA9E,GACA,MAAA+E,SAAA/E,EAAAP,QAUA+K,EAAAxF,SAAA,SAAAzK,EAAAyF,GACA,MAAA,IAAAwK,GAAAjQ,EAAAyF,EAAAP,MAAAO,EAAAqE,UAMA0G,EAAA9F,OAAA,WACA,OACAxF,MAAArH,KAAAqH,MACA4E,QAAAjM,KAAAiM,UAwBA0G,EAAA7F,IAAA,SAAAjG,GACA,KAAAA,YAAAsG,IACA,KAAA/G,GAAA,QAAA,UAOA,OANAS,GAAAuH,QACAvH,EAAAuH,OAAAlB,OAAArG,GACA7G,KAAAqH,MAAA7H,KAAAqH,EAAA1E,MACAnC,KAAAyS,EAAAjT,KAAAqH,GACAA,EAAA6E,OAAA1L,KACA0S,EAAA1S,MACAA,MAQA2S,EAAAzF,OAAA,SAAArG,GACA,KAAAA,YAAAsG,IACA,KAAA/G,GAAA,QAAA,UACA,IAAAwM,GAAA5S,KAAAyS,EAAAjL,QAAAX,EACA,IAAA+L,EAAA,EACA,KAAA1V,OAAA2J,EAAA,uBAAA7G,KAQA,OAPAA,MAAAyS,EAAAzO,OAAA4O,EAAA,GACAA,EAAA5S,KAAAqH,MAAAG,QAAAX,EAAA1E,MACAyQ,GAAA,GACA5S,KAAAqH,MAAArD,OAAA4O,EAAA,GACA/L,EAAAuH,QACAvH,EAAAuH,OAAAlB,OAAArG,GACAA,EAAA6E,OAAA,KACA1L,MAMA2S,EAAA5B,MAAA,SAAA3C,GACAlC,EAAAvI,UAAAoN,MAAAzT,KAAA0C,KAAAoO,GACAsE,EAAA1S,OAMA2S,EAAA3B,SAAA,SAAA5C,GACApO,KAAAyS,EAAA7L,QAAA,SAAAC,GACAA,EAAAuH,QACAvH,EAAAuH,OAAAlB,OAAArG,KAEAqF,EAAAvI,UAAAqN,SAAA1T,KAAA0C,KAAAoO,8CCjKA,YAoBA,SAAAyE,GAAAC,GACA,MAAA,QAAAA,EAAA,KAAAA,EAAAzF,cAqBA,QAAA0F,GAAAvQ,EAAAsP,GAuBA,QAAAkB,GAAAF,EAAA3Q,GACA,MAAAjF,OAAA,YAAAiF,GAAA,SAAA,KAAA2Q,EAAA,WAAAG,EAAA5R,OAAA,KAGA,QAAA6R,KACA,GACAJ,GADAxJ,IAEA,GAAA,CACA,GAAA,OAAAwJ,EAAAK,MAAA,MAAAL,EACA,KAAAE,GAAAF,EACAxJ,GAAA9J,KAAA2T,KACAC,EAAAN,GACAA,EAAAO,UACA,MAAAP,GAAA,MAAAA,EACA,OAAAxJ,GAAAjH,KAAA,IAGA,QAAAiR,GAAAC,GACA,GAAAT,GAAAK,GACA,QAAAN,EAAAC,IACA,IAAA,IACA,IAAA,IAEA,MADAtT,GAAAsT,GACAI,GACA,KAAA,OACA,OAAA,CACA,KAAA,QACA,OAAA,EAEA,IACA,MAAAM,GAAAV,GACA,MAAAvW,GACA,GAAAgX,GAAAE,EAAA7R,KAAAkR,GACA,MAAAA,EACA,MAAAE,GAAAF,EAAA,UAIA,QAAAY,KACA,GAAAjT,GAAAkT,EAAAR,KACAzS,EAAAD,CAIA,OAHA2S,GAAA,MAAA,KACA1S,EAAAiT,EAAAR,MACAC,EAAA,MACA3S,EAAAC,GAGA,QAAA8S,GAAAV,GACA,GAAAc,GAAA,CACA,OAAAd,EAAA1S,OAAA,KACAwT,GAAA,EACAd,EAAAA,EAAAP,UAAA,GAEA,IAAAsB,GAAAhB,EAAAC,EACA,QAAAe,GACA,IAAA,MAAA,MAAAD,IAAArV,EAAAA,EACA,KAAA,MAAA,MAAAD,IACA,KAAA,IAAA,MAAA,GAEA,GAAA,gBAAAsD,KAAAkR,GACA,MAAAc,GAAAE,SAAAhB,EAAA,GACA,IAAA,kBAAAlR,KAAAiS,GACA,MAAAD,GAAAE,SAAAhB,EAAA,GACA,IAAA,YAAAlR,KAAAkR,GACA,MAAAc,GAAAE,SAAAhB,EAAA,EACA,IAAA,gDAAAlR,KAAAiS,GACA,MAAAD,GAAAG,WAAAjB,EACA,MAAAE,GAAAF,EAAA,UAGA,QAAAa,GAAAb,EAAAkB,GACA,GAAAH,GAAAhB,EAAAC,EACA,QAAAe,GACA,IAAA,MAAA,MAAA,EACA,KAAA,MAAA,MAAA,UACA,KAAA,IAAA,MAAA,GAEA,GAAA,MAAAf,EAAA1S,OAAA,KAAA4T,EACA,KAAAhB,GAAAF,EAAA,KACA,IAAA,kBAAAlR,KAAAkR,GACA,MAAAgB,UAAAhB,EAAA,GACA,IAAA,oBAAAlR,KAAAiS,GACA,MAAAC,UAAAhB,EAAA,GACA,IAAA,cAAAlR,KAAAkR,GACA,MAAAgB,UAAAhB,EAAA,EACA,MAAAE,GAAAF,EAAA,MAGA,QAAAmB,KACA,GAAA/S,SAAAgT,EACA,KAAAlB,GAAA,UAEA,IADAkB,EAAAf,KACAM,EAAA7R,KAAAsS,GACA,KAAAlB,GAAAkB,EAAA,OACA/C,GAAAA,EAAAF,OAAAiD,GACAd,EAAA,KAGA,QAAAe,KACA,GACAC,GADAtB,EAAAO,GAEA,QAAAP,GACA,IAAA,OACAsB,EAAAC,IAAAA,MACAlB,GACA,MACA,KAAA,SACAA,GAEA,SACAiB,EAAAE,IAAAA,MAGAxB,EAAAI,IACAE,EAAA,KACAgB,EAAA5U,KAAAsT,GAGA,QAAAyB,KACAnB,EAAA,KACAoB,EAAA3B,EAAAK,IACA,IAAAuB,EACA,KAAA,SAAAA,EAAA,UAAAjN,QAAAgN,GAAA,EACA,KAAAxB,GAAAwB,EAAA,SACAE,GAAAF,IAAAC,EACArB,EAAA,KAGA,QAAAuB,GAAAvG,EAAA0E,GACA,OAAAA,GAEA,IAAA,SAGA,MAFA8B,GAAAxG,EAAA0E,GACAM,EAAA,MACA,CAEA,KAAA,UAEA,MADAyB,GAAAzG,EAAA0E,IACA,CAEA,KAAA,OAEA,MADAgC,GAAA1G,EAAA0E,IACA,CAEA,KAAA,UAEA,MADAiC,GAAA3G,EAAA0E,IACA,CAEA,KAAA,SAEA,MADAkC,GAAA5G,EAAA0E,IACA,EAEA,OAAA,EAGA,QAAA+B,GAAAzG,EAAA0E,GACA,GAAA3Q,GAAAgR,GACA,KAAA8B,EAAArT,KAAAO,GACA,KAAA6Q,GAAA7Q,EAAA,YACA,IAAA4D,GAAA,GAAAG,GAAA/D,EACA,IAAAiR,EAAA,KAAA,GAAA,CACA,KAAA,OAAAN,EAAAK,MAAA,CACA,GAAAU,GAAAhB,EAAAC,EACA,KAAA6B,EAAA5O,EAAA+M,GAEA,OAAAe,GACA,IAAA,MACAqB,EAAAnP,EAAA8N,EACA,MACA,KAAA,WACA,IAAA,WACA,IAAA,WACAsB,EAAApP,EAAA8N,EACA,MACA,KAAA,QACAuB,EAAArP,EAAA8N,EACA,MACA,KAAA,cACA9N,EAAAsP,aAAAtP,EAAAsP,gBAAA7V,KAAAkU,EAAA3N,EAAA8N,GACA,MACA,KAAA,YACA9N,EAAAuP,WAAAvP,EAAAuP,cAAA9V,KAAAkU,EAAA3N,EAAA8N,GACA,MACA,SACA,IAAAa,IAAAjB,EAAA7R,KAAAkR,GACA,KAAAE,GAAAF,EACAtT,GAAAsT,GACAqC,EAAApP,EAAA,aAIAqN,EAAA,KAAA,OAEAA,GAAA,IACAhF,GAAAtB,IAAA/G,GAGA,QAAAoP,GAAA/G,EAAA3E,EAAA8C,GACA,GAAAxG,GAAAoN,GACA,KAAAM,EAAA7R,KAAAmE,GACA,KAAAiN,GAAAjN,EAAA,OACA,IAAA5D,GAAAgR,GACA,KAAA8B,EAAArT,KAAAO,GACA,KAAA6Q,GAAA7Q,EAAA,OACAA,GAAAoT,EAAApT,GACAiR,EAAA,IACA,IAAAjL,GAAAwL,EAAAR,KACAtM,EAAA2O,EAAA,GAAArI,GAAAhL,EAAAgG,EAAApC,EAAA0D,EAAA8C,GACA1F,GAAA+D,UACA/D,EAAAkH,UAAA,SAAA2G,GAAA,GACAtG,EAAAtB,IAAAjG,GAGA,QAAAqO,GAAA9G,GACAgF,EAAA,IACA,IAAAzK,GAAAwK,GACA,IAAAjS,SAAAuJ,EAAAe,OAAA7C,GACA,KAAAqK,GAAArK,EAAA,OACAyK,GAAA,IACA,IAAAqC,GAAAtC,GACA,KAAAM,EAAA7R,KAAA6T,GACA,KAAAzC,GAAAyC,EAAA,OACArC,GAAA,IACA,IAAAjR,GAAAgR,GACA,KAAA8B,EAAArT,KAAAO,GACA,KAAA6Q,GAAA7Q,EAAA,OACAA,GAAAoT,EAAApT,GACAiR,EAAA,IACA,IAAAjL,GAAAwL,EAAAR,KACAtM,EAAA2O,EAAA,GAAA5H,GAAAzL,EAAAgG,EAAAQ,EAAA8M,GACArH,GAAAtB,IAAAjG,GAGA,QAAAuO,GAAAhH,EAAA0E,GACA,GAAA3Q,GAAAgR,GACA,KAAA8B,EAAArT,KAAAO,GACA,KAAA6Q,GAAA7Q,EAAA,OACAA,GAAAoT,EAAApT,EACA,IAAAkF,GAAA,GAAA+K,GAAAjQ,EACA,IAAAiR,EAAA,KAAA,GAAA,CACA,KAAA,OAAAN,EAAAK,MACA,WAAAL,GACA8B,EAAAvN,EAAAyL,GACAM,EAAA,OAEA5T,EAAAsT,GACAqC,EAAA9N,EAAA,YAGA+L,GAAA,KAAA,OAEAA,GAAA,IACAhF,GAAAtB,IAAAzF,GAGA,QAAAyN,GAAA1G,EAAA0E,GACA,GAAA3Q,GAAAgR,GACA,KAAA8B,EAAArT,KAAAO,GACA,KAAA6Q,GAAA7Q,EAAA,OACA,IAAAmH,MACA+C,EAAA,GAAAjC,GAAAjI,EAAAmH,EACA,IAAA8J,EAAA,KAAA,GAAA,CACA,KAAA,OAAAN,EAAAK,MACA,WAAAN,EAAAC,GACA8B,EAAAvI,GAEAqJ,EAAArJ,EAAAyG,EAEAM,GAAA,KAAA,OAEAA,GAAA,IACAhF,GAAAtB,IAAAT,GAGA,QAAAqJ,GAAAtH,EAAA0E,GACA,IAAAmC,EAAArT,KAAAkR,GACA,KAAAE,GAAAF,EAAA,OACA,IAAA3Q,GAAA2Q,CACAM,GAAA,IACA,IAAAzU,GAAAgV,EAAAR,KAAA,EACA/E,GAAA9E,OAAAnH,GAAAxD,EACA6W,MAGA,QAAAZ,GAAAxG,EAAA0E,GACA,GAAA6C,GAAAvC,EAAA,KAAA,GACAjR,EAAAgR,GACA,KAAAM,EAAA7R,KAAAO,GACA,KAAA6Q,GAAA7Q,EAAA,OACAwT,KACAvC,EAAA,KACAjR,EAAA,IAAAA,EAAA,IACA2Q,EAAAO,IACAuC,EAAAhU,KAAAkR,KACA3Q,GAAA2Q,EACAK,MAGAC,EAAA,KACAyC,EAAAzH,EAAAjM,GAGA,QAAA0T,GAAAzH,EAAAjM,GACA,GAAAiR,EAAA,KAAA,GACA,KAAA,OAAAN,EAAAK,MAAA,CACA,IAAA8B,EAAArT,KAAAkR,GACA,KAAAE,GAAAF,EAAA,OACA3Q,GAAAA,EAAA,IAAA2Q,EACAM,EAAA,KAAA,GACArF,EAAAK,EAAAjM,EAAAmR,GAAA,IAEAuC,EAAAzH,EAAAjM,OAGA4L,GAAAK,EAAAjM,EAAAmR,GAAA,IAIA,QAAAvF,GAAAK,EAAAjM,EAAAxD,GACAyP,EAAAL,UACAK,EAAAL,UAAA5L,EAAAxD,GAEAyP,EAAAjM,GAAAxD,EAGA,QAAA6W,GAAApH,GACA,GAAAgF,EAAA,KAAA,GAAA,CACA,EACAwB,GAAAxG,EAAA,gBACAgF,EAAA,KAAA,GACAA,GAAA,KAGA,MADAA,GAAA,KACAhF,EAGA,QAAA2G,GAAA3G,EAAA0E,GAEA,GADAA,EAAAK,KACA8B,EAAArT,KAAAkR,GACA,KAAAE,GAAAF,EAAA,eACA,IAAA3Q,GAAA2Q,EACAgD,EAAA,GAAA5F,GAAA/N,EACA,IAAAiR,EAAA,KAAA,GAAA,CACA,KAAA,OAAAN,EAAAK,MAAA,CACA,GAAAU,GAAAhB,EAAAC,EACA,QAAAe,GACA,IAAA,SACAe,EAAAkB,EAAAjC,GACAT,EAAA,IACA,MACA,KAAA,MACA2C,EAAAD,EAAAjC,EACA,MACA,SACA,KAAAb,GAAAF,IAGAM,EAAA,KAAA,OAEAA,GAAA,IACAhF,GAAAtB,IAAAgJ,GAGA,QAAAC,GAAA3H,EAAA0E,GACA,GAAA/M,GAAA+M,EACA3Q,EAAAgR,GACA,KAAA8B,EAAArT,KAAAO,GACA,KAAA6Q,GAAA7Q,EAAA,OACA,IAAAkN,GAAAE,EACAD,EAAAE,CACA4D,GAAA,IACA,IAAA4C,EAGA,IAFA5C,EAAA4C,EAAA,UAAA,KACAzG,GAAA,IACAkE,EAAA7R,KAAAkR,EAAAK,KACA,KAAAH,GAAAF,EAKA,IAJAzD,EAAAyD,EACAM,EAAA,KAAAA,EAAA,WAAAA,EAAA,KACAA,EAAA4C,GAAA,KACAxG,GAAA,IACAiE,EAAA7R,KAAAkR,EAAAK,KACA,KAAAH,GAAAF,EACAxD,GAAAwD,EACAM,EAAA,IACA,IAAA6C,GAAA,GAAA7G,GAAAjN,EAAA4D,EAAAsJ,EAAAC,EAAAC,EAAAC,EACA,IAAA4D,EAAA,KAAA,GAAA,CACA,KAAA,OAAAN,EAAAK,MAAA,CACA,GAAAU,GAAAhB,EAAAC,EACA,QAAAe,GACA,IAAA,SACAe,EAAAqB,EAAApC,GACAT,EAAA,IACA,MACA,SACA,KAAAJ,GAAAF,IAGAM,EAAA,KAAA,OAEAA,GAAA,IACAhF,GAAAtB,IAAAmJ,GAGA,QAAAjB,GAAA5G,EAAA0E,GACA,GAAAoD,GAAA/C,GACA,KAAAM,EAAA7R,KAAAsU,GACA,KAAAlD,GAAAkD,EAAA,YACA,IAAA9C,EAAA,KAAA,GAAA,CACA,KAAA,OAAAN,EAAAK,MAAA,CACA,GAAAU,GAAAhB,EAAAC,EACA,QAAAe,GACA,IAAA,WACA,IAAA,WACA,IAAA,WACAsB,EAAA/G,EAAAyF,EAAAqC,EACA,MACA,SACA,IAAAxB,IAAAjB,EAAA7R,KAAAkR,GACA,KAAAE,GAAAF,EACAtT,GAAAsT,GACAqC,EAAA/G,EAAA,WAAA8H,IAIA9C,EAAA,KAAA,OAEAA,GAAA,KA/bAtB,IACAA,EAAA,GAAAF,GAEA,IAOAsC,GACAI,EACAD,EACAG,EAVAvB,EAAAkD,EAAA3T,GACA2Q,EAAAF,EAAAE,KACA3T,EAAAyT,EAAAzT,KACA6T,EAAAJ,EAAAI,KACAD,EAAAH,EAAAG,KAEAgD,GAAA,EAKA1B,GAAA,CAEA5C,KACAA,EAAA,GAAAF,GAkbA,KAhbA,GA+aAkB,GA/aA3B,EAAAW,EAgbA,QAAAgB,EAAAK,MAAA,CACA,GAAAU,GAAAhB,EAAAC,EACA,QAAAe,GAEA,IAAA,UACA,IAAAuC,EACA,KAAApD,GAAAF,EACAmB,IACA,MAEA,KAAA,SACA,IAAAmC,EACA,KAAApD,GAAAF,EACAqB,IACA,MAEA,KAAA,SACA,IAAAiC,EACA,KAAApD,GAAAF,EACAyB,IACA,MAEA,KAAA,SACA,IAAA6B,EACA,KAAApD,GAAAF,EACA8B,GAAAzD,EAAA2B,GACAM,EAAA,IACA,MAEA,SACA,GAAAuB,EAAAxD,EAAA2B,GAAA,CACAsD,GAAA,CACA,UAEA,KAAApD,GAAAF,IAIA,OACAuD,QAAAnC,EACAI,QAAAA,EACAD,YAAAA,EACAG,OAAAA,EACA1C,KAAAA,GAzhBArU,EAAAJ,QAAA0V,CAEA,IAAAoD,GAAApZ,EAAA,IACA6U,EAAA7U,EAAA,IACAmJ,EAAAnJ,EAAA,IACAoQ,EAAApQ,EAAA,IACA6Q,EAAA7Q,EAAA,IACAqV,EAAArV,EAAA,IACAqN,EAAArN,EAAA,IACAmT,EAAAnT,EAAA,IACAqS,EAAArS,EAAA,IACA0N,EAAA1N,EAAA,IACAoJ,EAAApJ,EAAA,IACAwY,EAAApP,EAAAoP,UAEAN,EAAA,2BACAxB,EAAA,mCACAmC,EAAA,2HClBA,YAWA,SAAAU,GAAA1M,EAAA2M,GACA,MAAAC,YAAA,uBAAA5M,EAAAG,IAAA,OAAAwM,GAAA,GAAA,MAAA3M,EAAAjE,KASA,QAAAkE,GAAAlM,GAMAqC,KAAAyF,IAAA9H,EAMAqC,KAAA+J,IAAA,EAMA/J,KAAA2F,IAAAhI,EAAAJ,OAwBA,QAAAkZ,GAAAtO,EAAA2C,GACA9K,KAAAmI,GAAAA,EACAnI,KAAA8K,SAAAA,EAuEA,QAAA4L,KACA,GAAAC,GAAA,EAAAC,EAAA,EACA5Z,EAAA,EAAA4D,EAAA,CACA,IAAAZ,KAAA2F,IAAA3F,KAAA+J,IAAA,EAAA,CACA,IAAA/M,EAAA,EAAAA,EAAA,IAAAA,EAGA,GAFA4D,EAAAZ,KAAAyF,IAAAzF,KAAA+J,OACA4M,IAAA,IAAA/V,IAAA,EAAA5D,EACA4D,EAAA,IACA,MAAA,IAAAiW,GAAAF,IAAA,EAAAC,IAAA,EAKA,IAHAhW,EAAAZ,KAAAyF,IAAAzF,KAAA+J,OACA4M,IAAA,IAAA/V,IAAA,GACAgW,IAAA,IAAAhW,IAAA,EACAA,EAAA,IACA,MAAA,IAAAiW,GAAAF,IAAA,EAAAC,IAAA,EACA,KAAA5Z,EAAA,EAAAA,EAAA,IAAAA,EAGA,GAFA4D,EAAAZ,KAAAyF,IAAAzF,KAAA+J,OACA6M,IAAA,IAAAhW,IAAA,EAAA5D,EAAA,EACA4D,EAAA,IACA,MAAA,IAAAiW,GAAAF,IAAA,EAAAC,IAAA,OAEA,CACA,IAAA5Z,EAAA,EAAAA,EAAA,IAAAA,EAAA,CACA,GAAAgD,KAAA+J,KAAA/J,KAAA2F,IACA,KAAA2Q,GAAAtW,KAGA,IAFAY,EAAAZ,KAAAyF,IAAAzF,KAAA+J,OACA4M,IAAA,IAAA/V,IAAA,EAAA5D,EACA4D,EAAA,IACA,MAAA,IAAAiW,GAAAF,IAAA,EAAAC,IAAA,GAEA,GAAA5W,KAAA+J,KAAA/J,KAAA2F,IACA,KAAA2Q,GAAAtW,KAIA,IAHAY,EAAAZ,KAAAyF,IAAAzF,KAAA+J,OACA4M,IAAA,IAAA/V,IAAA,GACAgW,IAAA,IAAAhW,IAAA,EACAA,EAAA,IACA,MAAA,IAAAiW,GAAAF,IAAA,EAAAC,IAAA,EACA,KAAA5Z,EAAA,EAAAA,EAAA,IAAAA,EAAA,CACA,GAAAgD,KAAA+J,KAAA/J,KAAA2F,IACA,KAAA2Q,GAAAtW,KAGA,IAFAY,EAAAZ,KAAAyF,IAAAzF,KAAA+J,OACA6M,IAAA,IAAAhW,IAAA,EAAA5D,EAAA,EACA4D,EAAA,IACA,MAAA,IAAAiW,GAAAF,IAAA,EAAAC,IAAA,IAGA,KAAA1Z,OAAA,2BAGA,QAAA4Z,KACA,MAAAJ,GAAApZ,KAAA0C,MAAA+W,SAGA,QAAAC,KACA,MAAAN,GAAApZ,KAAA0C,MAAA0O,WAGA,QAAAuI,KACA,MAAAP,GAAApZ,KAAA0C,MAAA+W,QAAA,GAGA,QAAAG,KACA,MAAAR,GAAApZ,KAAA0C,MAAA0O,UAAA,GAGA,QAAAyI,KACA,MAAAT,GAAApZ,KAAA0C,MAAAoX,WAAAL,SAGA,QAAAM,KACA,MAAAX,GAAApZ,KAAA0C,MAAAoX,WAAA1I,WAkCA,QAAA4I,GAAA7R,EAAA/E,GACA,MAAA+E,GAAA/E,EAAA,GACA+E,EAAA/E,EAAA,IAAA,EACA+E,EAAA/E,EAAA,IAAA,GACA+E,EAAA/E,EAAA,IAAA,GAwBA,QAAA6W,KACA,GAAAvX,KAAA+J,IAAA,EAAA/J,KAAA2F,IACA,KAAA2Q,GAAAtW,KAAA,EACA,OAAA,IAAA6W,GAAAS,EAAAtX,KAAAyF,IAAAzF,KAAA+J,KAAA,GAAAuN,EAAAtX,KAAAyF,IAAAzF,KAAA+J,KAAA,IAGA,QAAAyN,KACA,MAAAD,GAAAja,KAAA0C,MAAA+W,QAAA,GAGA,QAAAU,KACA,MAAAF,GAAAja,KAAA0C,MAAA0O,UAAA,GAGA,QAAAgJ,KACA,MAAAH,GAAAja,KAAA0C,MAAAoX,WAAAL,SAGA,QAAAY,KACA,MAAAJ,GAAAja,KAAA0C,MAAAoX,WAAA1I,WAoOA,QAAAkJ,GAAAja,GACAka,GACAA,IACAhO,EAAAvM,KAAA0C,KAAArC,GAkCA,QAAAma,GAAArS,EAAAhF,EAAAC,GACA,MAAA+E,GAAAsS,UAAAtX,EAAAC,GAGA,QAAAsX,GAAAvS,EAAAhF,EAAAC,GACA,MAAA+E,GAAA2H,SAAA,OAAA3M,EAAAC,GAyBA,QAAAuX,KACA9R,EAAAoH,MACA2K,EAAAC,MAAArB,EACAoB,EAAAE,OAAAnB,EACAiB,EAAAG,OAAAlB,EACAe,EAAAI,QAAAd,EACAU,EAAAK,SAAAb,IAEAQ,EAAAC,MAAAnB,EACAkB,EAAAE,OAAAlB,EACAgB,EAAAG,OAAAhB,EACAa,EAAAI,QAAAb,EACAS,EAAAK,SAAAZ,GAjlBAla,EAAAJ,QAAAwM,EAEAA,EAAA+N,aAAAA,CAEA,IAAAzR,GAAApJ,EAAA,IACAyb,EAAAzb,EAAA,GACA8Z,EAAA1Q,EAAA0Q,SACAnR,EAAAS,EAAAT,KACA+S,EAAA,mBAAAC,YAAAA,WAAA5R,KAsCA+C,GAAA7D,OAAA,SAAArI;AACA,MAAA,KAAAwI,EAAAwS,QAAAxS,EAAAwS,OAAAC,SAAAjb,IAAAia,GAAA/N,GAAAlM,GAIA,IAAAua,GAAArO,EAAAlG,SAEAuU,GAAAW,EAAAJ,EAAA9U,UAAAmV,UAAAL,EAAA9U,UAAAyB,MAkBA8S,EAAAhO,IAAA,WACA,GAAAlK,KAAA+J,KAAA/J,KAAA2F,IACA,KAAA2Q,GAAAtW,KACA,OAAA,IAAAyW,GAAAzW,KAAAyF,IAAAzF,KAAA+J,OAAA,EAAA,EAAA/J,KAAAyF,IAAAzF,KAAA+J,SAOAmO,EAAAa,MAAA,WAEA,GAAAC,GAAAhZ,KAAAyF,IAAAzF,KAAA+J,OACApL,EAAA,IAAAqa,CAyBA,IAxBAA,EAAA,MAEAA,EAAAhZ,KAAAyF,IAAAzF,KAAA+J,OACApL,IAAA,IAAAqa,IAAA,EACAA,EAAA,MAEAA,EAAAhZ,KAAAyF,IAAAzF,KAAA+J,OACApL,IAAA,IAAAqa,IAAA,GACAA,EAAA,MAEAA,EAAAhZ,KAAAyF,IAAAzF,KAAA+J,OACApL,IAAA,IAAAqa,IAAA,GACAA,EAAA,MAEAA,EAAAhZ,KAAAyF,IAAAzF,KAAA+J,OACApL,GAAAqa,GAAA,GACAA,EAAA,MAEAhZ,KAAA+J,KAAA,OAMA/J,KAAA+J,IAAA/J,KAAA2F,IAEA,KADA3F,MAAA+J,IAAA/J,KAAA2F,IACA2Q,EAAAtW,KAEA,OAAArB,IAOAuZ,EAAA5N,OAAA,WACA,MAAAtK,MAAA+Y,UAAA,GAOAb,EAAAe,OAAA,WACA,GAAAta,GAAAqB,KAAA+Y,OACA,OAAApa,KAAA,IAAA,EAAAA,IAyGAuZ,EAAAgB,KAAA,WACA,MAAA,KAAAlZ,KAAA+Y,SAcAb,EAAAiB,QAAA,WACA,GAAAnZ,KAAA+J,IAAA,EAAA/J,KAAA2F,IACA,KAAA2Q,GAAAtW,KAAA,EACA,OAAAsX,GAAAtX,KAAAyF,IAAAzF,KAAA+J,KAAA,IAOAmO,EAAAkB,SAAA,WACA,GAAAza,GAAAqB,KAAAmZ,SACA,OAAAxa,KAAA,IAAA,EAAAA,GA2CA,IAAA0a,GAAA,mBAAAC,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAE,EAAA,GAAAd,YAAAa,EAAA5b,OAEA,OADA4b,GAAA,IAAA,EACAC,EAAA,GACA,SAAA/T,EAAAsE,GAKA,MAJAyP,GAAA,GAAA/T,EAAAsE,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAwP,EAAA,IAEA,SAAA9T,EAAAsE,GAKA,MAJAyP,GAAA,GAAA/T,EAAAsE,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAwP,EAAA,OAGA,SAAA9T,EAAAsE,GACA,MAAAyO,GAAA9a,KAAA+H,EAAAsE,GAAA,EAAA,GAAA,GAQAmO,GAAAuB,MAAA,WACA,GAAAzZ,KAAA+J,IAAA,EAAA/J,KAAA2F,IACA,KAAA2Q,GAAAtW,KAAA,EACA,IAAArB,GAAA0a,EAAArZ,KAAAyF,IAAAzF,KAAA+J,IAEA,OADA/J,MAAA+J,KAAA,EACApL,EAGA,IAAA+a,GAAA,mBAAAC,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAH,EAAA,GAAAd,YAAAkB,EAAAjc,OAEA,OADAic,GAAA,IAAA,EACAJ,EAAA,GACA,SAAA/T,EAAAsE,GASA,MARAyP,GAAA,GAAA/T,EAAAsE,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACA6P,EAAA,IAEA,SAAAnU,EAAAsE,GASA,MARAyP,GAAA,GAAA/T,EAAAsE,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACAyP,EAAA,GAAA/T,EAAAsE,EAAA,GACA6P,EAAA,OAGA,SAAAnU,EAAAsE,GACA,MAAAyO,GAAA9a,KAAA+H,EAAAsE,GAAA,EAAA,GAAA,GAQAmO,GAAA2B,OAAA,WACA,GAAA7Z,KAAA+J,IAAA,EAAA/J,KAAA2F,IACA,KAAA2Q,GAAAtW,KAAA,EACA,IAAArB,GAAA+a,EAAA1Z,KAAAyF,IAAAzF,KAAA+J,IAEA,OADA/J,MAAA+J,KAAA,EACApL,GAOAuZ,EAAA4B,MAAA,WACA,GAAAvc,GAAAyC,KAAA+Y,UAAA,EACAtY,EAAAT,KAAA+J,IACArJ,EAAAV,KAAA+J,IAAAxM,CACA,IAAAmD,EAAAV,KAAA2F,IACA,KAAA2Q,GAAAtW,KAAAzC,EAEA,OADAyC,MAAA+J,KAAAxM,EACAkD,IAAAC,EACA,GAAAV,MAAAyF,IAAAe,YAAA,GACAxG,KAAA6Y,EAAAvb,KAAA0C,KAAAyF,IAAAhF,EAAAC,IAOAwX,EAAAhY,OAAA,WACA,GAAA4Z,GAAA9Z,KAAA8Z,OACA,OAAApU,GAAAhI,KAAAoc,EAAA,EAAAA,EAAAvc,SAQA2a,EAAA9E,KAAA,SAAA7V,GACA,GAAA2D,SAAA3D,GACA,EACA,IAAAyC,KAAA+J,KAAA/J,KAAA2F,IACA,KAAA2Q,GAAAtW,YACA,IAAAA,KAAAyF,IAAAzF,KAAA+J,YACA,CACA,GAAA/J,KAAA+J,IAAAxM,EAAAyC,KAAA2F,IACA,KAAA2Q,GAAAtW,KAAAzC,EACAyC,MAAA+J,KAAAxM,EAEA,MAAAyC,OAQAkY,EAAAlN,SAAA,SAAAF,GACA,OAAAA,GACA,IAAA,GACA9K,KAAAoT,MACA,MACA,KAAA,GACApT,KAAAoT,KAAA,EACA,MACA,KAAA,GACApT,KAAAoT,KAAApT,KAAAsK,SACA,MACA,KAAA,GACA,OAAA,CACA,GAAAJ,GAAAlK,KAAAkK,KACA,IAAA,IAAAA,EAAAY,SACA,KACA9K,MAAAgL,SAAAd,EAAAY,UAEA,KACA,KAAA,GACA9K,KAAAoT,KAAA,EACA,MACA,SACA,KAAAlW,OAAA,sBAAA4N,GAEA,MAAA9K,OAQAkY,EAAApM,MAAA,SAAAnO,GASA,MARAA,IACAqC,KAAAyF,IAAA9H,EACAqC,KAAA2F,IAAAhI,EAAAJ,SAEAyC,KAAAyF,IAAA,KACAzF,KAAA2F,IAAA,GAEA3F,KAAA+J,IAAA,EACA/J,MAQAkY,EAAA6B,OAAA,SAAApc,GACA,GAAAqc,GAAAha,KAAA+J,IACA/J,KAAA6Y,EAAAvb,KAAA0C,KAAAyF,IAAAzF,KAAA+J,KACA/J,KAAAyF,GAEA,OADAzF,MAAA8L,MAAAnO,GACAqc,EAIA,IAAAnC,GAAA,WACA,IAAA1R,EAAAwS,OACA,KAAAzb,OAAA,0BACA+c,GAAApB,EAAA1S,EAAAwS,OAAAhV,UAAAyB,MACA8U,EAAA/T,EAAAwS,OAAAhV,UAAAoU,UACAD,EACAE,EACAH,GAAA,GAiBAoC,EAAArC,EAAAjU,UAAAf,OAAAoD,OAAA6D,EAAAlG,UAEAsW,GAAAzT,YAAAoR,EAEA,mBAAA0B,gBAIAW,EAAAR,MAAA,WACA,GAAAzZ,KAAA+J,IAAA,EAAA/J,KAAA2F,IACA,KAAA2Q,GAAAtW,KAAA,EACA,IAAArB,GAAAqB,KAAAyF,IAAA0U,YAAAna,KAAA+J,KAAA,EAEA,OADA/J,MAAA+J,KAAA,EACApL,IAGA,mBAAAgb,gBAIAM,EAAAJ,OAAA,WACA,GAAA7Z,KAAA+J,IAAA,EAAA/J,KAAA2F,IACA,KAAA2Q,GAAAtW,KAAA,EACA,IAAArB,GAAAqB,KAAAyF,IAAA2U,aAAApa,KAAA+J,KAAA,EAEA,OADA/J,MAAA+J,KAAA,EACApL,GAGA,IAAAub,EAaAD,GAAA/Z,OAAA,WACA,GAAA3C,GAAAyC,KAAA+Y,UAAA,EACAtY,EAAAT,KAAA+J,IACArJ,EAAAV,KAAA+J,IAAAxM,CACA,IAAAmD,EAAAV,KAAA2F,IACA,KAAA2Q,GAAAtW,KAAAzC,EAEA,OADAyC,MAAA+J,KAAAxM,EACA2c,EAAAla,KAAAyF,IAAAhF,EAAAC,IAMAuZ,EAAAF,OAAA,SAAApc,GACA,GAAAqc,GAAAha,KAAA+J,IAAA/J,KAAAyF,IAAAL,MAAApF,KAAA+J,KAAA/J,KAAAyF,GAEA,OADAzF,MAAA8L,MAAAnO,GACAqc,GAmBAnQ,EAAAwQ,EAAApC,EAEAA,sCCxlBA,YAkBA,SAAArG,GAAA3F,GACA2D,EAAAtS,KAAA0C,KAAA,GAAAiM,GAMAjM,KAAAsa,YAMAta,KAAAua,SA0BA,QAAAC,MAuJA,QAAAC,GAAA5T,GACA,GAAA6T,GAAA7T,EAAAuH,OAAAC,OAAAxH,EAAA0F,OACA,IAAAmO,EAAA,CACA,GAAAC,GAAA,GAAAxN,GAAAtG,EAAAmL,cAAAnL,EAAAsB,GAAAtB,EAAAd,KAAAc,EAAA4C,MAAAvI,QAAA2F,EAAAoF,QAIA,OAHA0O,GAAAlN,eAAA5G,EACAA,EAAA2G,eAAAmN,EACAD,EAAA5N,IAAA6N,IACA,EAEA,OAAA,EAxNAld,EAAAJ,QAAAuU,CAEA,IAAAhC,GAAA7S,EAAA,IAEA6d,EAAAhL,EAAArD,OAAAqF,GAEAzE,EAAApQ,EAAA,IACAoJ,EAAApJ,EAAA,IACA4K,EAAA5K,EAAA,GA+BA6U,GAAAhF,SAAA,SAAAhF,EAAAkK,GAGA,MAFAA,KACAA,EAAA,GAAAF,IACAE,EAAAhB,WAAAlJ,EAAAqE,SAAAuE,QAAA5I,EAAAC,SAWA+S,EAAAC,YAAA1U,EAAA0U,YAWAD,EAAAE,KAAA,QAAAA,GAAAC,EAAA3W,GAMA,QAAA2V,GAAAla,EAAAiS,GACA,GAAA1N,EAAA,CAEA,GAAA4W,GAAA5W,CACAA,GAAA,KACA4W,EAAAnb,EAAAiS,IAMA,QAAAmJ,GAAAF,EAAAvY,GACA,IAGA,GAFA2D,EAAA4G,SAAAvK,IAAA,MAAAA,EAAApC,OAAA,KACAoC,EAAAa,KAAA0P,MAAAvQ,IACA2D,EAAA4G,SAAAvK,GAEA,CACA,GAAA0Y,GAAAne,EAAA,IAAAyF,EAAA2Y,EACAD,GAAA5G,SACA4G,EAAA5G,QAAA1N,QAAA,SAAAzE,GACA+B,EAAAiX,EAAAN,YAAAE,EAAA5Y,MAEA+Y,EAAA7G,aACA6G,EAAA7G,YAAAzN,QAAA,SAAAzE,GACA+B,EAAAiX,EAAAN,YAAAE,EAAA5Y,IAAA,SATAgZ,GAAArK,WAAAtO,EAAAyJ,SAAAuE,QAAAhO,EAAAqF,QAYA,MAAAhI,GAEA,WADAka,GAAAla,GAGAub,GAAAC,GACAtB,EAAA,KAAAoB,GAIA,QAAAjX,GAAA6W,EAAAO,GAGA,GAAAC,GAAAR,EAAAvT,QAAA,mBACA,IAAA+T,GAAA,EAAA,CACA,GAAAC,GAAAT,EAAAxI,UAAAgJ,EACAC,KAAA7T,KACAoT,EAAAS,GAIA,KAAAL,EAAAZ,MAAA/S,QAAAuT,IAAA,GAAA,CAKA,GAHAI,EAAAZ,MAAA/a,KAAAub,GAGAA,IAAApT,GAUA,YATAyT,EACAH,EAAAF,EAAApT,EAAAoT,OAEAM,EACAI,WAAA,aACAJ,EACAJ,EAAAF,EAAApT,EAAAoT,OAOA,IAAAK,EAAA,CACA,GAAA5Y,EACA,KACAA,EAAA2D,EAAA9B,GAAAqX,aAAAX,GAAA3N,SAAA,QACA,MAAAvN,GAGA,YAFAyb,GACAvB,EAAAla,IAGAob,EAAAF,EAAAvY,SAEA6Y,EACAlV,EAAAjC,MAAA6W,EAAA,SAAAlb,EAAA2C,GAEA,KADA6Y,EACAjX,EAEA,MAAAvE,QACAyb,GACAvB,EAAAla,QAGAob,GAAAF,EAAAvY,MA7FA,GAAA2Y,GAAAnb,IACA,KAAAoE,EACA,MAAA+B,GAAAhH,UAAA2b,EAAAK,EAAAJ,EAWA,IAAAK,GAAAhX,IAAAoW,EAoFAa,EAAA,CAUA,OANAlV,GAAA4G,SAAAgO,KACAA,GAAAA,IACAA,EAAAnU,QAAA,SAAAmU,GACA7W,EAAAiX,EAAAN,YAAA,GAAAE,MAGAK,EACAD,OACAE,GACAtB,EAAA,KAAAoB,KAqBAP,EAAAe,SAAA,SAAAZ,GACA,MAAA/a,MAAA8a,KAAAC,EAAAP,IA4BAI,EAAA1I,EAAA,SAAArB,GAEA,GAAA+K,GAAA5b,KAAAsa,SAAAlV,OACApF,MAAAsa,WAEA,KADA,GAAAtd,GAAA,EACAA,EAAA4e,EAAAre,QACAkd,EAAAmB,EAAA5e,IACA4e,EAAA5X,OAAAhH,EAAA,KAEAA,CAGA,IAFAgD,KAAAsa,SAAAsB,EAEA/K,YAAA1D,IAAAjM,SAAA2P,EAAAtE,SAAAsE,EAAArD,iBAAAiN,EAAA5J,IAAA7Q,KAAAsa,SAAA9S,QAAAqJ,GAAA,EACA7Q,KAAAsa,SAAA9a,KAAAqR,OACA,IAAAA,YAAAjB,GAAA,CACA,GAAA/H,GAAAgJ,EAAAJ,gBACA,KAAAzT,EAAA,EAAAA,EAAA6K,EAAAtK,SAAAP,EACAgD,KAAAkS,EAAArK,EAAA7K,MAUA4d,EAAAzI,EAAA,SAAAtB,GACA,GAAAA,YAAA1D,GAAA,CAEA,GAAAjM,SAAA2P,EAAAtE,SAAAsE,EAAArD,eAAA,CACA,GAAAoF,GAAA5S,KAAAsa,SAAA9S,QAAAqJ,EACA+B,IAAA,GACA5S,KAAAsa,SAAAtW,OAAA4O,EAAA,GAGA/B,EAAArD,iBACAqD,EAAArD,eAAAY,OAAAlB,OAAA2D,EAAArD,gBACAqD,EAAArD,eAAA,UAEA,IAAAqD,YAAAjB,GAEA,IAAA,GADA/H,GAAAgJ,EAAAJ,iBACAzT,EAAA,EAAAA,EAAA6K,EAAAtK,SAAAP,EACAgD,KAAAmS,EAAAtK,EAAA7K,KAOA4d,EAAAxN,SAAA,WACA,MAAApN,MAAAwG,YAAArE,4DCrRA,YAMA,IAAA0Z,GAAAxe,CAEAwe,GAAA3L,QAAAnT,EAAA,kCCRA,YAcA,SAAAmT,GAAA4L,GACAtY,EAAAlG,KAAA0C,MAMAA,KAAA+b,KAAAD,EApBAre,EAAAJ,QAAA6S,CAEA,IAAA/J,GAAApJ,EAAA,IACAyG,EAAA2C,EAAA3C,aAqBAwY,EAAA9L,EAAAvM,UAAAf,OAAAoD,OAAAxC,EAAAG,UACAqY,GAAAxV,YAAA0J,EAOA8L,EAAAtb,IAAA,SAAAub,GAOA,MANAjc,MAAA+b,OACAE,GACAjc,KAAA+b,KAAA,KAAA,KAAA,MACA/b,KAAA+b,KAAA,KACA/b,KAAAiE,KAAA,OAAAH,OAEA9D,oCCxCA,YAsBA,SAAAkQ,GAAA/N,EAAA8J,GACA2D,EAAAtS,KAAA0C,KAAAmC,EAAA8J,GAMAjM,KAAAuQ,WAOAvQ,KAAAkc,EAAA,KAmBA,QAAA9P,GAAA0J,GAEA,MADAA,GAAAoG,EAAA,KACApG,EAxDArY,EAAAJ,QAAA6S,CAEA,IAAAN,GAAA7S,EAAA,IAEAkT,EAAAL,EAAAjM,UAEAqY,EAAApM,EAAArD,OAAA2D,GAEAd,EAAArS,EAAA,IACAoJ,EAAApJ,EAAA,IACA8e,EAAA9e,EAAA,GA4BAoJ,GAAAqG,MAAAwP,GAQAG,cACA5U,IAAA,WACA,MAAAvH,MAAAkc,IAAAlc,KAAAkc,EAAA/V,EAAAmK,QAAAtQ,KAAAuQ,cAgBAL,EAAAxD,SAAA,SAAA9E,GACA,MAAA+E,SAAA/E,GAAAA,EAAA2I,UAUAL,EAAAtD,SAAA,SAAAzK,EAAAyF,GACA,GAAAkO,GAAA,GAAA5F,GAAA/N,EAAAyF,EAAAqE,QAKA,OAJArE,GAAA2I,SACA3N,OAAAD,KAAAiF,EAAA2I,SAAA3J,QAAA,SAAAwV,GACAtG,EAAAhJ,IAAAsC,EAAAxC,SAAAwP,EAAAxU,EAAA2I,QAAA6L,OAEAtG,GAMAkG,EAAAnP,OAAA,WACA,GAAAwP,GAAApM,EAAApD,OAAAvP,KAAA0C,KACA,QACAiM,QAAAoQ,GAAAA,EAAApQ,SAAA/K,OACAqP,QAAAX,EAAAG,YAAA/P,KAAAsc,uBACAzU,OAAAwU,GAAAA,EAAAxU,QAAA3G,SAOA8a,EAAAzU,IAAA,SAAApF,GACA,MAAA8N,GAAA1I,IAAAjK,KAAA0C,KAAAmC,IAAAnC,KAAAuQ,QAAApO,IAAA,MAMA6Z,EAAA1K,WAAA,WAEA,IAAA,GADAf,GAAAvQ,KAAAsc,kBACAtf,EAAA,EAAAA,EAAAuT,EAAAhT,SAAAP,EACAuT,EAAAvT,GAAA2C,SACA,OAAAsQ,GAAAtQ,QAAArC,KAAA0C,OAMAgc,EAAAlP,IAAA,SAAA+D,GACA,GAAA7Q,KAAAuH,IAAAsJ,EAAA1O,MACA,KAAAjF,OAAA,mBAAA2T,EAAA1O,KAAA,QAAAnC,KACA,OAAA6Q,aAAAzB,IACApP,KAAAuQ,QAAAM,EAAA1O,MAAA0O,EACAA,EAAAzC,OAAApO,KACAoM,EAAApM,OAEAiQ,EAAAnD,IAAAxP,KAAA0C,KAAA6Q,IAMAmL,EAAA9O,OAAA,SAAA2D,GACA,GAAAA,YAAAzB,GAAA,CACA,GAAApP,KAAAuQ,QAAAM,EAAA1O,QAAA0O,EACA,KAAA3T,OAAA2T,EAAA,uBAAA7Q,KAGA,cAFAA,MAAAuQ,QAAAM,EAAA1O,MACA0O,EAAAzC,OAAA,KACAhC,EAAApM,MAEA,MAAAiQ,GAAA/C,OAAA5P,KAAA0C,KAAA6Q,IA6BAmL,EAAAhW,OAAA,SAAA8V,EAAAS,EAAAC,GACA,GAAAC,GAAA,GAAAZ,GAAA3L,QAAA4L,EAsCA,OArCA9b,MAAAsc,kBAAA1V,QAAA,SAAAqP,GACAwG,EAAAxG,EAAA9T,KAAAoQ,UAAA,EAAA,GAAAlF,cAAA4I,EAAA9T,KAAAoQ,UAAA,IAAA,SAAAmK,EAAAtY,GACA,GAAAqY,EAAAV,KAAA,CAEA,IAAAW,EACA,KAAAvW,GAAAC,EAAA,UAAA,WACA6P,GAAAtW,SACA,IAAAgd,EACA,KACAA,GAAAJ,GAAAtG,EAAAxG,oBAAAR,gBAAAyN,IAAAzG,EAAAxG,oBAAAjP,OAAAkc,IAAA3C,SACA,MAAAla,GAEA,YADA,kBAAA+c,eAAAA,cAAAnB,YAAA,WAAArX,EAAAvE,KAKAic,EAAA7F,EAAA0G,EAAA,SAAA9c,EAAAgd,GACA,GAAAhd,EAEA,MADA4c,GAAAxY,KAAA,QAAApE,EAAAoW,GACA7R,EAAAA,EAAAvE,GAAAqB,MAEA,IAAA,OAAA2b,EAEA,WADAJ,GAAA/b,KAAA,EAGA,IAAAoc,EACA,KACAA,EAAAN,GAAAvG,EAAAvG,qBAAAR,gBAAA2N,IAAA5G,EAAAvG,qBAAA1O,OAAA6b,GACA,MAAAE,GAEA,MADAN,GAAAxY,KAAA,QAAA8Y,EAAA9G,GACA7R,EAAAA,EAAA,QAAA2Y,GAAA7b,OAGA,MADAub,GAAAxY,KAAA,OAAA6Y,EAAA7G,GACA7R,EAAAA,EAAA,KAAA0Y,GAAA5b,aAIAub,mDC/MA,YAOA,SAAAO,GAAA9a,GACA,MAAAA,GAAAE,QAAA,UAAA,SAAAc,EAAAC,GACA,OAAAA,GACA,IAAA,KACA,IAAA,GACA,MAAAA,EACA,KAAA,IACA,MAAA,IACA,SACA,MAAAA,MAqBA,QAAAgT,GAAA3T,GAkBA,QAAAwQ,GAAAiK,GACA,MAAA/f,OAAA,WAAA+f,EAAA,UAAA5b,EAAA,KAQA,QAAA6R,KACA,GAAAgK,GAAA,MAAAC,EAAAC,EAAAC,CACAH,GAAAI,UAAA1f,EAAA,CACA,IAAA2f,GAAAL,EAAAM,KAAAhb,EACA,KAAA+a,EACA,KAAAvK,GAAA,SAIA,OAHApV,GAAAsf,EAAAI,UACA9d,EAAA2d,GACAA,EAAA,KACAH,EAAAO,EAAA,IASA,QAAAnd,GAAA2J,GACA,MAAAvH,GAAApC,OAAA2J,GAQA,QAAAoJ,KACA,GAAAsK,EAAAlgB,OAAA,EACA,MAAAkgB,GAAApM,OACA,IAAA8L,EACA,MAAAjK,IACA,IAAAwK,GACAhc,EACAic,CACA,GAAA,CACA,GAAA/f,IAAAL,EACA,MAAA,KAEA,KADAmgB,GAAA,EACA,KAAA9b,KAAA+b,EAAAvd,EAAAxC,KAGA,GAFA,OAAA+f,KACAtc,IACAzD,IAAAL,EACA,MAAA,KAEA,IAAA,MAAA6C,EAAAxC,GAAA,CACA,KAAAA,IAAAL,EACA,KAAAyV,GAAA,UACA,IAAA,MAAA5S,EAAAxC,GAAA,CACA,KAAA,OAAAwC,IAAAxC,IACA,GAAAA,IAAAL,EACA,MAAA,QACAK,IACAyD,EACAqc,GAAA,MACA,CAAA,GAAA,OAAAC,EAAAvd,EAAAxC,IAYA,MAAA,GAXA,GAAA,CAGA,GAFA,OAAA+f,KACAtc,IACAzD,IAAAL,EACA,MAAA,KACAmE,GAAAic,EACAA,EAAAvd,EAAAxC,SACA,MAAA8D,GAAA,MAAAic,KACA/f,EACA8f,GAAA,UAIAA,EAEA,IAAA9f,IAAAL,EACA,MAAA,KACA,IAAAmD,GAAA9C,CACAggB,GAAAN,UAAA,CACA,IAAAO,GAAAD,EAAAhc,KAAAxB,EAAAM,KACA,KAAAmd,EACA,KAAAnd,EAAAnD,IAAAqgB,EAAAhc,KAAAxB,EAAAM,OACAA,CACA,IAAAoS,GAAAtQ,EAAA+P,UAAA3U,EAAAA,EAAA8C,EAGA,OAFA,MAAAoS,GAAA,MAAAA,IACAqK,EAAArK,GACAA,EASA,QAAAtT,GAAAsT,GACA2K,EAAAje,KAAAsT,GAQA,QAAAO,KACA,IAAAoK,EAAAlgB,OAAA,CACA,GAAAuV,GAAAK,GACA,IAAA,OAAAL,EACA,MAAA,KACAtT,GAAAsT,GAEA,MAAA2K,GAAA,GAWA,QAAArK,GAAA0K,EAAAxQ,GACA,GAAAyQ,GAAA1K,IACA2K,EAAAD,IAAAD,CACA,IAAAE,EAEA,MADA7K,MACA,CAEA,KAAA7F,EACA,KAAA0F,GAAA,UAAA+K,EAAA,OAAAD,EAAA,aACA,QAAA,EAxJAtb,EAAAA,EAAA4K,UAEA,IAAAxP,GAAA,EACAL,EAAAiF,EAAAjF,OACA8D,EAAA,EAEAoc,KAEAN,EAAA,IAmJA,QACA9b,KAAA,WAAA,MAAAA,IACA8R,KAAAA,EACAE,KAAAA,EACA7T,KAAAA,EACA4T,KAAAA,GAtMA3V,EAAAJ,QAAA8Y,CAEA,IAAAyH,GAAA,uBACAP,EAAA,kCACAD,EAAA,2DCLA,YA8BA,SAAAlX,GAAA/D,EAAA8J,GACA2D,EAAAtS,KAAA0C,KAAAmC,EAAA8J,GAMAjM,KAAAiI,UAMAjI,KAAA6I,OAAA3H,OAMAlB,KAAAqV,WAAAnU,OAMAlB,KAAAsV,SAAApU,OAOAlB,KAAAie,EAAA,KAOAje,KAAAyS,EAAA,KAOAzS,KAAAke,EAAA,KAOAle,KAAAme,EAAA,KAOAne,KAAAoe,EAAA,KAiFA,QAAAhS,GAAArG,GAIA,MAHAA,GAAAkY,EAAAlY,EAAA0M,EAAA1M,EAAAoY,EAAApY,EAAAqY,EAAA,WACArY,GAAAvF,aACAuF,GAAA/E,OACA+E,EA9KAtI,EAAAJ,QAAA6I,CAEA,IAAA0J,GAAA7S,EAAA,IAEAkT,EAAAL,EAAAjM,UAEA0a,EAAAzO,EAAArD,OAAArG,GAEAkE,EAAArN,EAAA,IACAqV,EAAArV,EAAA,IACAoQ,EAAApQ,EAAA,IACAmT,EAAAnT,EAAA,IACA+I,EAAA/I,EAAA,IACAkJ,EAAAlJ,EAAA,IACA8M,EAAA9M,EAAA,IACAsO,EAAAtO,EAAA,IACAoJ,EAAApJ,EAAA,IACAyD,EAAAzD,EAAA,IACAiE,EAAAjE,EAAA,IACAoS,EAAApS,EAAA,GAyEAoJ,GAAAqG,MAAA6R,GAQAC,YACA/W,IAAA,WACA,GAAAvH,KAAAie,EACA,MAAAje,MAAAie,CACAje,MAAAie,IAEA,KAAA,GADAM,GAAA3b,OAAAD,KAAA3C,KAAAiI,QACAjL,EAAA,EAAAA,EAAAuhB,EAAAhhB,SAAAP,EAAA,CACA,GAAA6J,GAAA7G,KAAAiI,OAAAsW,EAAAvhB,IACAmL,EAAAtB,EAAAsB,EACA,IAAAnI,KAAAie,EAAA9V,GACA,KAAAjL,OAAA,gBAAAiL,EAAA,OAAAnI,KACAA,MAAAie,EAAA9V,GAAAtB,EAEA,MAAA7G,MAAAie,IAUAO,aACAjX,IAAA,WACA,MAAAvH,MAAAyS,IAAAzS,KAAAyS,EAAAtM,EAAAmK,QAAAtQ,KAAAiI,WAUAwW,qBACAlX,IAAA,WACA,MAAAvH,MAAAke,IAAAle,KAAAke,EAAAle,KAAA2G,iBAAA+X,OAAA,SAAA7X,GAAA,MAAAA,GAAA+D,cAUA+T,aACApX,IAAA,WACA,MAAAvH,MAAAme,IAAAne,KAAAme,EAAAhY,EAAAmK,QAAAtQ,KAAA6I,WASAxC,MACAkB,IAAA,WACA,MAAAvH,MAAAoe,IAAApe,KAAAoe,EAAAtY,EAAAE,OAAAhG,MAAAwG,cAEAiB,IAAA,SAAApB,GACA,GAAAA,KAAAA,EAAA1C,oBAAAsC,IACA,KAAAE,GAAAC,EAAA,OAAA,wBACApG,MAAAoe,EAAA/X,MAiBAH,EAAAwG,SAAA,SAAA9E,GACA,MAAA+E,SAAA/E,GAAAA,EAAAK,QAGA,IAAAkI,IAAA/F,EAAAlE,EAAAiH,EAAA+C,EAQAhK,GAAA0G,SAAA,SAAAzK,EAAAyF,GACA,GAAA7B,GAAA,GAAAG,GAAA/D,EAAAyF,EAAAqE,QA0BA,OAzBAlG,GAAAsP,WAAAzN,EAAAyN,WACAtP,EAAAuP,SAAA1N,EAAA0N,SACA1N,EAAAK,QACArF,OAAAD,KAAAiF,EAAAK,QAAArB,QAAA,SAAAgY,GACA7Y,EAAA+G,IAAAK,EAAAP,SAAAgS,EAAAhX,EAAAK,OAAA2W,OAEAhX,EAAAiB,QACAjG,OAAAD,KAAAiF,EAAAiB,QAAAjC,QAAA,SAAAiY,GACA9Y,EAAA+G,IAAAsF,EAAAxF,SAAAiS,EAAAjX,EAAAiB,OAAAgW,OAEAjX,EAAAC,QACAjF,OAAAD,KAAAiF,EAAAC,QAAAjB,QAAA,SAAAgK,GAEA,IAAA,GADA/I,GAAAD,EAAAC,OAAA+I,GACA5T,EAAA,EAAAA,EAAAmT,EAAA5S,SAAAP,EACA,GAAAmT,EAAAnT,GAAA0P,SAAA7E,GAEA,WADA9B,GAAA+G,IAAAqD,EAAAnT,GAAA4P,SAAAgE,EAAA/I,GAIA,MAAA3K,OAAA,4BAAA6I,EAAA,KAAA6K,KAEAhJ,EAAAyN,YAAAzN,EAAAyN,WAAA9X,SACAwI,EAAAsP,WAAAzN,EAAAyN,YACAzN,EAAA0N,UAAA1N,EAAA0N,SAAA/X,SACAwI,EAAAuP,SAAA1N,EAAA0N,UACAvP,GAMAsY,EAAAxR,OAAA,WACA,GAAAwP,GAAApM,EAAApD,OAAAvP,KAAA0C,KACA,QACAiM,QAAAoQ,GAAAA,EAAApQ,SAAA/K,OACA2H,OAAA+G,EAAAG,YAAA/P,KAAAoH,kBACAa,OAAA2H,EAAAG,YAAA/P,KAAA2G,iBAAA+X,OAAA,SAAA1O,GAAA,OAAAA,EAAAvC,sBACA4H,WAAArV,KAAAqV,YAAArV,KAAAqV,WAAA9X,OAAAyC,KAAAqV,WAAAnU,OACAoU,SAAAtV,KAAAsV,UAAAtV,KAAAsV,SAAA/X,OAAAyC,KAAAsV,SAAApU,OACA2G,OAAAwU,GAAAA,EAAAxU,QAAA3G,SAOAmd,EAAA/M,WAAA,WAEA,IADA,GAAArJ,GAAAjI,KAAA2G,iBAAA3J,EAAA,EACAA,EAAAiL,EAAA1K,QACA0K,EAAAjL,KAAA2C,SACA,IAAAkJ,GAAA7I,KAAAoH,gBACA,KADApK,EAAA,EACAA,EAAA6L,EAAAtL,QACAsL,EAAA7L,KAAA2C,SACA,OAAAsQ,GAAAtQ,QAAArC,KAAA0C,OAMAqe,EAAA9W,IAAA,SAAApF,GACA,MAAA8N,GAAA1I,IAAAjK,KAAA0C,KAAAmC,IAAAnC,KAAAiI,QAAAjI,KAAAiI,OAAA9F,IAAAnC,KAAA6I,QAAA7I,KAAA6I,OAAA1G,IAAA,MAUAkc,EAAAvR,IAAA,SAAA+D,GACA,GAAA7Q,KAAAuH,IAAAsJ,EAAA1O,MACA,KAAAjF,OAAA,mBAAA2T,EAAA1O,KAAA,QAAAnC,KACA,IAAA6Q,YAAA1D,IAAAjM,SAAA2P,EAAAtE,OAAA,CAIA,GAAAvM,KAAA2J,gBAAAkH,EAAA1I,IACA,KAAAjL,OAAA,gBAAA2T,EAAA1I,GAAA,OAAAnI,KAMA,OALA6Q,GAAAzC,QACAyC,EAAAzC,OAAAlB,OAAA2D,GACA7Q,KAAAiI,OAAA4I,EAAA1O,MAAA0O,EACAA,EAAA7G,QAAAhK,KACA6Q,EAAAE,MAAA/Q,MACAoM,EAAApM,MAEA,MAAA6Q,aAAAuB,IACApS,KAAA6I,SACA7I,KAAA6I,WACA7I,KAAA6I,OAAAgI,EAAA1O,MAAA0O,EACAA,EAAAE,MAAA/Q,MACAoM,EAAApM,OAEAiQ,EAAAnD,IAAAxP,KAAA0C,KAAA6Q,IAUAwN,EAAAnR,OAAA,SAAA2D,GACA,GAAAA,YAAA1D,IAAAjM,SAAA2P,EAAAtE,OAAA,CAEA,GAAAvM,KAAAiI,OAAA4I,EAAA1O,QAAA0O,EACA,KAAA3T,OAAA2T,EAAA,uBAAA7Q,KAGA,cAFAA,MAAAiI,OAAA4I,EAAA1O,MACA0O,EAAA7G,QAAA,KACAoC,EAAApM,MAEA,MAAAiQ,GAAA/C,OAAA5P,KAAA0C,KAAA6Q,IAQAwN,EAAArY,OAAA,SAAAO,GACA,MAAA,KAAAvG,KAAAiK,WAAA1D,IASA8X,EAAA7d,OAAA,SAAAwJ,EAAAoB,GACA,OAAApL,KAAAQ,OAAA2F,EAAAhF,QAAAoC,UACA/C,EAAAyK,SAAAjL,MAAAsC,IAAAtC,KAAAgS,cAAA,WACA3G,OAAAA,EACAZ,MAAAzK,KAAA2G,iBAAA5D,IAAA,SAAA+b,GAAA,MAAAA,GAAA3U,eACAhE,KAAAA,IAEA3F,GACAlD,KAAA0C,KAAAgK,EAAAoB,IASAiT,EAAApP,gBAAA,SAAAjF,EAAAoB,GACA,MAAApL,MAAAQ,OAAAwJ,EAAAoB,GAAAA,EAAAzF,IAAAyF,EAAAG,OAAAH,GAAAK,UASA4S,EAAArd,OAAA,SAAA0I,EAAAnM,GACA,OAAAyC,KAAAgB,OAAAmF,EAAAhF,QAAAoC,UACAvC,EAAAiK,SAAAjL,MAAAsC,IAAAtC,KAAAgS,cAAA,WACAnI,OAAAA,EACAY,MAAAzK,KAAA2G,iBAAA5D,IAAA,SAAA+b,GAAA,MAAAA,GAAA3U,eACAhE,KAAAA,IAEAnF,GACA1D,KAAA0C,KAAA0J,EAAAnM,IAQA8gB,EAAAnP,gBAAA,SAAAxF,GAEA,MADAA,GAAAA,YAAAG,GAAAH,EAAAG,EAAA7D,OAAA0D,GACA1J,KAAAgB,OAAA0I,EAAAA,EAAAY,WAQA+T,EAAAlP,OAAA,SAAAnF,GACA,OAAAhK,KAAAmP,OAAAhJ,EAAAhF,QAAAoC,UACA4L,EAAAlE,SAAAjL,MAAAsC,IAAAtC,KAAAgS,cAAA,WACAvH,MAAAzK,KAAA2G,iBAAA5D,IAAA,SAAA+b,GAAA,MAAAA,GAAA3U,eACAhE,KAAAA,IAEAgJ,GACA7R,KAAA0C,KAAAgK,0GCnYA,YA4BA,SAAA+U,GAAAzV,EAAA1L,GACA,GAAAZ,GAAA,EAAAJ,IAEA,KADAgB,GAAA,EACAZ,EAAAsM,EAAA/L,QAAAX,EAAAD,EAAAK,EAAAY,IAAA0L,EAAAtM,IACA,OAAAJ,GA1BA,GAAA6N,GAAApN,EAEA8I,EAAApJ,EAAA,IAEAJ,GACA,SACA,QACA,QACA,SACA,SACA,UACA,WACA,QACA,SACA,SACA,UACA,WACA,OACA,SACA,QAcA8N,GAAAC,MAAAqU,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAOAtU,EAAA0D,SAAA4Q,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACA5Y,EAAAc,aAOAwD,EAAAmB,KAAAmT,GACA,EACA,EACA,EACA,EACA,GACA,GAMAtU,EAAAe,OAAAuT,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GAMAtU,EAAAI,OAAAkU,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,kCC/HA,YA8CA,SAAAC,GAAA7a,GACA,MAAA,wBAAAvC,KAAAuC,GAWA,QAAA8a,GAAA9a,GACAA,EAAAA,EAAA/B,QAAA,MAAA,KACAA,QAAA,UAAA,IACA,IAAA8c,GAAA/a,EAAA+M,MAAA,KACApS,EAAAkgB,EAAA7a,GACAgb,EAAA,EACArgB,KACAqgB,EAAAD,EAAA7N,QAAA,IACA,KAAA,GAAArU,GAAA,EAAAA,EAAAkiB,EAAA3hB,QACA,OAAA2hB,EAAAliB,GACAA,EAAA,EACAkiB,EAAAlb,SAAAhH,EAAA,GACA8B,EACAogB,EAAAlb,OAAAhH,EAAA,KAEAA,EACA,MAAAkiB,EAAAliB,GACAkiB,EAAAlb,OAAAhH,EAAA,KAEAA,CAEA,OAAAmiB,GAAAD,EAAA7c,KAAA,KAzEA,GAAA8D,GAAA9I,CAEA8I,GAAAhH,UAAApC,EAAA,GACAoJ,EAAAhF,QAAApE,EAAA,GACAoJ,EAAAjC,MAAAnH,EAAA,GACAoJ,EAAA9B,GAAAtH,EAAA,GAOAoJ,EAAAmK,QAAA,SAAAO,GACA,IAAAA,EACA,QAIA,KAAA,GAHA0N,GAAA3b,OAAAD,KAAAkO,GACAtT,EAAAghB,EAAAhhB,OACAwR,EAAA,GAAAjI,OAAAvJ,GACAP,EAAA,EAAAA,EAAAO,IAAAP,EACA+R,EAAA/R,GAAA6T,EAAA0N,EAAAvhB,GACA,OAAA+R,IAUA5I,EAAAC,EAAA,SAAAjE,EAAAid,GACA,MAAAC,WAAAld,EAAA,aAAAid,GAAA,cAaAjZ,EAAA6Y,eAAAA,EAgCA7Y,EAAA8Y,cAAAA,EASA9Y,EAAA0U,YAAA,SAAAyE,EAAAC,EAAAC,GAGA,MAFAA,KACAD,EAAAN,EAAAM,IACAP,EAAAO,GACAA,GACAC,IACAF,EAAAL,EAAAK,IACAA,EAAAA,EAAAld,QAAA,kBAAA,IACAkd,EAAA/hB,OAAA0hB,EAAAK,EAAA,IAAAC,GAAAA,IAUApZ,EAAAM,MAAA,SAAAgZ,EAAAhe,EAAAuM,GACA,GAAAvM,EAEA,IAAA,GADAkB,GAAAC,OAAAD,KAAAlB,GACAzE,EAAA,EAAAA,EAAA2F,EAAApF,SAAAP,EACAkE,SAAAue,EAAA9c,EAAA3F,KAAAgR,IACAyR,EAAA9c,EAAA3F,IAAAyE,EAAAkB,EAAA3F,IAEA,OAAAyiB,IAQAtZ,EAAAgF,SAAA,SAAA7D,GACA,MAAA,KAAAA,EAAAlF,QAAA,MAAA,QAAAA,QAAA,KAAA,OAAA,MAQA+D,EAAAoP,UAAA,SAAArT,GACA,MAAAA,GAAAqQ,UAAA,EAAA,GACArQ,EAAAqQ,UAAA,GACAnQ,QAAA,uBAAA,SAAAc,EAAAC,GAAA,MAAAA,GAAAqP,iBAQArM,EAAAuZ,WAAA,SAAAxd,GACA,MAAAA,GAAAqQ,UAAA,EAAA,GACArQ,EAAAqQ,UAAA,GACAnQ,QAAA,sBAAA,SAAAc,EAAAC,GAAA,MAAA,IAAAA,EAAAkK,iBAQAlH,EAAAwZ,UAAA,SAAAta,GAEA,MADAA,GAAAA,GAAA,EACAc,EAAAwS,OACAxS,EAAAwS,OAAAiH,aAAAzZ,EAAAwS,OAAAiH,YAAAva,IAAA,GAAAc,GAAAwS,OAAAtT,GACA,IAAA,mBAAAqT,aAAAA,YAAA5R,OAAAzB,GAGA,IAAAwa,GAAA9iB,EAAA,GAEAoJ,GAAA3C,aAAAzG,EAAA,GAGAoJ,EAAAM,MAAAN,EAAA0Z,GAEA1Z,EAAAkU,EAAA,WACAwF,EAAAtS,KAAApH,EAAAoH,wDC1KA,YAuBA,SAAAsJ,GAAAF,EAAAC,GAMA5W,KAAA2W,GAAAA,EAMA3W,KAAA4W,GAAAA,EAjCAnZ,EAAAJ,QAAAwZ,CAEA,IAAA1Q,GAAApJ,EAAA,IAmCA+iB,EAAAjJ,EAAAlT,UAOAoc,EAAAlJ,EAAAkJ,KAAA,GAAAlJ,GAAA,EAAA,EAEAkJ,GAAArR,SAAA,WAAA,MAAA,IACAqR,EAAAC,SAAAD,EAAA3I,SAAA,WAAA,MAAApX,OACA+f,EAAAxiB,OAAA,WAAA,MAAA,IAOAsZ,EAAAoJ,WAAA,SAAAthB,GACA,GAAA,IAAAA,EACA,MAAAohB,EACA,IAAAnM,GAAAjV,EAAA,CACAA,GAAAH,KAAAM,IAAAH,EACA,IAAAgY,GAAAhY,IAAA,EACAiY,GAAAjY,EAAAgY,GAAA,aAAA,CAUA,OATA/C,KACAgD,GAAAA,IAAA,EACAD,GAAAA,IAAA,IACAA,EAAA,aACAA,EAAA,IACAC,EAAA,aACAA,EAAA,KAGA,GAAAC,GAAAF,EAAAC,IAQAC,EAAAqJ,KAAA,SAAAvhB,GACA,aAAAA,IACA,IAAA,SACA,MAAAkY,GAAAoJ,WAAAthB,EACA,KAAA,SACA,IAAAwH,EAAAoH,KAIA,MAAAsJ,GAAAoJ,WAAAnM,SAAAnV,EAAA,IAHAA,GAAAwH,EAAAoH,KAAA4S,WAAAxhB,GAKA,OAAAA,EAAAyhB,KAAAzhB,EAAA0hB,OAAA,GAAAxJ,GAAAlY,EAAAyhB,MAAA,EAAAzhB,EAAA0hB,OAAA,IAAAN,GAQAD,EAAApR,SAAA,SAAA4R,GACA,OAAAA,GAAAtgB,KAAA4W,KAAA,IACA5W,KAAA2W,IAAA3W,KAAA2W,GAAA,IAAA,EACA3W,KAAA4W,IAAA5W,KAAA4W,KAAA,EACA5W,KAAA2W,KACA3W,KAAA4W,GAAA5W,KAAA4W,GAAA,IAAA,KACA5W,KAAA2W,GAAA,WAAA3W,KAAA4W,KAEA5W,KAAA2W,GAAA,WAAA3W,KAAA4W,IAQAkJ,EAAA/I,OAAA,SAAAuJ,GACA,MAAAna,GAAAoH,KACA,GAAApH,GAAAoH,KAAAvN,KAAA2W,GAAA3W,KAAA4W,GAAA0J,IACAF,IAAApgB,KAAA2W,GAAA0J,KAAArgB,KAAA4W,GAAA0J,SAAA3T,QAAA2T,IAGA,IAAArf,GAAAJ,OAAA8C,UAAA1C,UAOA4V,GAAA0J,SAAA,SAAAC,GACA,MAAA,IAAA3J,IACA5V,EAAA3D,KAAAkjB,EAAA,GACAvf,EAAA3D,KAAAkjB,EAAA,IAAA,EACAvf,EAAA3D,KAAAkjB,EAAA,IAAA,GACAvf,EAAA3D,KAAAkjB,EAAA,IAAA,MAAA,GAEAvf,EAAA3D,KAAAkjB,EAAA,GACAvf,EAAA3D,KAAAkjB,EAAA,IAAA,EACAvf,EAAA3D,KAAAkjB,EAAA,IAAA,GACAvf,EAAA3D,KAAAkjB,EAAA,IAAA,MAAA,IAQAV,EAAAW,OAAA,WACA,MAAA5f,QAAAC,aACA,IAAAd,KAAA2W,GACA3W,KAAA2W,KAAA,EAAA,IACA3W,KAAA2W,KAAA,GAAA,IACA3W,KAAA2W,KAAA,GAAA,IACA,IAAA3W,KAAA4W,GACA5W,KAAA4W,KAAA,EAAA,IACA5W,KAAA4W,KAAA,GAAA,IACA5W,KAAA4W,KAAA,GAAA,MAQAkJ,EAAAE,SAAA,WACA,GAAAU,GAAA1gB,KAAA4W,IAAA,EAGA,OAFA5W,MAAA4W,KAAA5W,KAAA4W,IAAA,EAAA5W,KAAA2W,KAAA,IAAA+J,KAAA,EACA1gB,KAAA2W,IAAA3W,KAAA2W,IAAA,EAAA+J,KAAA,EACA1gB,MAOA8f,EAAA1I,SAAA,WACA,GAAAsJ,KAAA,EAAA1gB,KAAA2W,GAGA,OAFA3W,MAAA2W,KAAA3W,KAAA2W,KAAA,EAAA3W,KAAA4W,IAAA,IAAA8J,KAAA,EACA1gB,KAAA4W,IAAA5W,KAAA4W,KAAA,EAAA8J,KAAA,EACA1gB,MAOA8f,EAAAviB,OAAA,WACA,GAAAojB,GAAA3gB,KAAA2W,GACAiK,GAAA5gB,KAAA2W,KAAA,GAAA3W,KAAA4W,IAAA,KAAA,EACAiK,EAAA7gB,KAAA4W,KAAA,EACA,OAAA,KAAAiK,EACA,IAAAD,EACAD,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,GAAA,GAAA,EAAA,EACAC,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,GAAA,GAAA,EAAA,EAEAC,EAAA,IAAA,EAAA,+CCvMA,YAEA,IAAA1a,GAAA9I,EAEAwZ,EAAA1Q,EAAA0Q,SAAA9Z,EAAA,GAEAoJ,GAAAlG,OAAAlD,EAAA,GACAoJ,EAAAT,KAAA3I,EAAA,GACAoJ,EAAAjB,KAAAnI,EAAA,EAOA,IAAA+jB,GAAA3a,EAAA2a,OAAAnU,QAAAoU,EAAA9F,SAAA8F,EAAA9F,QAAA+F,UAAAD,EAAA9F,QAAA+F,SAAAC,KASA,IAFA9a,EAAAwS,OAAA,KAEAmI,EACA,IAAA3a,EAAAwS,OAAA5b,EAAA,UAAA4b,OAAA,MAAApc,IASA,GAFA4J,EAAAoH,KAAAwT,EAAAG,SAAAH,EAAAG,QAAA3T,MAAA,MAEApH,EAAAoH,MAAAuT,EACA,IAAA3a,EAAAoH,KAAAxQ,EAAA,QAAA,MAAAR,IAQA4J,EAAA6G,UAAAyB,OAAAzB,WAAA,SAAArO,GACA,MAAA,gBAAAA,IAAAwiB,SAAAxiB,IAAAH,KAAAQ,MAAAL,KAAAA,GAQAwH,EAAA4G,SAAA,SAAApO,GACA,MAAA,gBAAAA,IAAAA,YAAAkC,SAQAsF,EAAAe,SAAA,SAAAvI,GACA,MAAAgO,SAAAhO,GAAA,gBAAAA,KAQAwH,EAAAwE,WAAA,SAAAhM,GACA,MAAAA,GACAkY,EAAAqJ,KAAAvhB,GAAA8hB,SACA,oBASAta,EAAAib,aAAA,SAAAZ,EAAAF,GACA,GAAAe,GAAAxK,EAAA0J,SAAAC,EACA,OAAAra,GAAAoH,KACApH,EAAAoH,KAAA+T,SAAAD,EAAA1K,GAAA0K,EAAAzK,GAAA0J,GACAe,EAAA3S,SAAA/B,QAAA2T,KASAna,EAAA0F,QAAA,SAAA/O,EAAA8D,GACA,MAAA,gBAAA9D,GACA,gBAAA8D,GACA9D,IAAA8D,GACA9D,EAAA+Z,EAAAoJ,WAAAnjB,IAAA6Z,KAAA/V,EAAAwf,KAAAtjB,EAAA8Z,KAAAhW,EAAAyf,KACA,gBAAAzf,IACAA,EAAAiW,EAAAoJ,WAAArf,IAAA+V,KAAA7Z,EAAAsjB,KAAAxf,EAAAgW,KAAA9Z,EAAAujB,KACAvjB,EAAAsjB,MAAAxf,EAAAwf,KAAAtjB,EAAAujB,OAAAzf,EAAAyf,MASAla,EAAAqG,MAAA,SAAA+U,EAAAC,GACA5e,OAAAD,KAAA6e,GAAA5a,QAAA,SAAA5D,GACAmD,EAAAmB,KAAAia,EAAAve,EAAAwe,EAAAxe,OAWAmD,EAAAmB,KAAA,SAAAia,EAAAve,EAAAye,GACA,GAAAC,MAAA,GACAC,EAAA3e,EAAAuP,UAAA,EAAA,GAAAC,cAAAxP,EAAAuP,UAAA,EACAkP,GAAAla,MACAga,EAAA,MAAAI,GAAAF,EAAAla,KACAka,EAAAha,MACA8Z,EAAA,MAAAI,GAAAD,EACA,SAAA/iB,GACA8iB,EAAAha,IAAAnK,KAAA0C,KAAArB,GACAqB,KAAAgD,GAAArE,GAEA8iB,EAAAha,KACAia,EACAxgB,SAAAugB,EAAA9iB,QACA4iB,EAAAve,GAAAye,EAAA9iB,OAEAiE,OAAAgf,eAAAL,EAAAve,EAAAye,IAQAtb,EAAAc,WAAArE,OAAAif,WAMA1b,EAAAgB,YAAAvE,OAAAif,mMC1JA,YAQA,SAAAC,GAAAjb,EAAAiX,GACA,MAAA,2BAAAjX,EAAAmL,cAAA,KAAA8L,GAAAjX,EAAA+D,UAAA,UAAAkT,EAAA,KAAAjX,EAAA9D,KAAA,WAAA+a,EAAA,MAAAjX,EAAA8B,QAAA,IAAA,IAAA,aAGA,QAAAoZ,GAAAlb,EAAAlI,GACA,OAAAkI,EAAAd,MACA,IAAA,SACA,IAAA,QACA,GAAA,gBAAApH,GACA,MAAAmjB,GAAAjb,EAAA,SACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WACA,IAAAmG,EAAArO,GACA,MAAAmjB,GAAAjb,EAAA,UACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WACA,KAAAmG,EAAArO,IAAAA,GAAAqO,EAAArO,EAAAyhB,MAAApT,EAAArO,EAAA0hB,OACA,MAAAyB,GAAAjb,EAAA,eACA,MACA,KAAA,OACA,GAAA,iBAAAlI,GACA,MAAAmjB,GAAAjb,EAAA,UACA,MACA,KAAA,SACA,IAAAV,EAAA4G,SAAApO,GACA,MAAAmjB,GAAAjb,EAAA,SACA,MACA,KAAA,QACA,KAAAlI,GAAA,gBAAAA,GAAApB,QAAA4I,EAAA4G,SAAApO,IACA,MAAAmjB,GAAAjb,EAAA,SACA,MACA,SACA,GAAAA,EAAAsD,uBAAAC,IACA,GAAA,gBAAAvD,GAAAsD,aAAA8C,gBAAAtO,GACA,MAAAmjB,GAAAjb,EAAA,kBACA,IAAAA,EAAAsD,uBAAAjE,GAAA,CACA,GAAA8b,GAAAnb,EAAAsD,aAAAgF,OAAAxQ,EACA,IAAAqjB,EACA,MAAAA,IAIA,MAAA,MAGA,QAAAC,GAAApb,EAAAlI,GACA,OAAAkI,EAAA8B,SACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WACA,GAAA,mBAAA/G,KAAAjD,GACA,MAAA,KAEA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WACA,GAAA,qBAAAiD,KAAAjD,GACA,MAAAmjB,GAAAjb,EAAA,cACA,MACA,KAAA,OACA,GAAA,mBAAAjF,KAAAjD,GACA,MAAAmjB,GAAAjb,EAAA,eAGA,MAAA,MAUA,QAAAsI,GAAAnF,GAKA,IAHA,GAEAgY,GAFA/Z,EAAAjI,KAAA2G,iBACA3J,EAAA,EAEAA,EAAAiL,EAAA1K,QAAA,CACA,GAAAsJ,GAAAoB,EAAAjL,KAAA2C,UACAhB,EAAAqL,EAAAnD,EAAA1E,KAGA,IAAA0E,EAAA9D,KAEA,GAAA7B,SAAAvC,EAAA,CACA,IAAAwH,EAAAe,SAAAvI,GACA,MAAAmjB,GAAAjb,EAAA,SAEA,KAAA,GADAlE,GAAAC,OAAAD,KAAAhE,GACAgC,EAAA,EAAAA,EAAAgC,EAAApF,SAAAoD,EAAA,CACA,GAAAqhB,EAAAC,EAAApb,EAAAlE,EAAAhC,IACA,MAAAqhB,EACA,IAAAA,EAAAD,EAAAlb,EAAAlI,EAAAgE,EAAAhC,KACA,MAAAqhB,SAKA,IAAAnb,EAAA+D,UAEA,GAAA1J,SAAAvC,EAAA,CACA,IAAAmI,MAAAC,QAAApI,GACA,MAAAmjB,GAAAjb,EAAA,QACA,KAAA,GAAAlG,GAAA,EAAAA,EAAAhC,EAAApB,SAAAoD,EACA,GAAAqhB,EAAAD,EAAAlb,EAAAlI,EAAAgC,IACA,MAAAqhB,QAIA,KAAAnb,EAAA8E,UAAAzK,SAAAvC,KAEAqjB,EAAAD,EAAAlb,EAAAlI,IACA,MAAAqjB,GAIA,MAAA,MAIA,QAAAE,GAAA9gB,EAAAyF,EAAAsb,EAAAC,GAEA,OAAAvb,EAAAd,MACA,IAAA,SACA,IAAA,QAAA3E,EACA,2BAAAghB,GACA,WAAAN,EAAAjb,EAAA,UACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAzF,EACA,0BAAAghB,GACA,WAAAN,EAAAjb,EAAA,WACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAzF,EACA,iFAAAghB,EAAAA,EAAAA,EAAAA,GACA,WAAAN,EAAAjb,EAAA,gBACA,MACA,KAAA,OAAAzF,EACA,4BAAAghB,GACA,WAAAN,EAAAjb,EAAA,WACA,MACA,KAAA,SAAAzF,EACA,yBAAAghB,GACA,WAAAN,EAAAjb,EAAA,UACA,MACA,KAAA,QAAAzF,EACA,4DAAAghB,EAAAA,EAAAA,GACA,WAAAN,EAAAjb,EAAA,UACA,MACA,SACA,GAAAA,EAAAsD,uBAAAC,GAAA,CAAAhJ,EACA,cAAAghB,GACA,YACA,WAAAN,EAAAjb,EAAA,cAEA,KAAA,GADAyC,GAAAnD,EAAAmK,QAAAzJ,EAAAsD,aAAAb,QACA3I,EAAA,EAAAA,EAAA2I,EAAA/L,SAAAoD,EAAAS,EACA,WAAAkI,EAAA3I,GACAS,GACA,SACA,SACAyF,GAAAsD,uBAAAjE,IAAA9E,EACA,UACA,6BAAA+gB,EAAAC,GACA,aAOA,QAAAC,GAAAjhB,EAAAyF,EAAAub,GAEA,OAAAvb,EAAA8B,SACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAvH,EACA,2DAAAghB,GACA,WAAAN,EAAAjb,EAAA,oBACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAzF,EACA,sCAAAghB,GACA,WAAAN,EAAAjb,EAAA,eACA,MACA,KAAA,OAAAzF,EACA,mCAAAghB,GACA,WAAAN,EAAAjb,EAAA,iBA1NApJ,EAAAJ,QAAA8R,CAEA,IAAA/E,GAAArN,EAAA,IACAmJ,EAAAnJ,EAAA,IACAoJ,EAAApJ,EAAA,IACAiQ,EAAA7G,EAAA6G,SAmOAmC,GAAAlE,SAAA,SAAAC,GAKA,IAAA,GAHAjD,GAAAiD,EAAAvE,iBACAvF,EAAA+E,EAAAhF,QAAA,KAEAnE,EAAA,EAAAA,EAAAiL,EAAA1K,SAAAP,EAAA,CACA,GAAA6J,GAAAoB,EAAAjL,GAAA2C,UACA2H,EAAAnB,EAAAgF,SAAAtE,EAAA1E,KAGA0E,GAAA9D,KAAA3B,EACA,uBAAAkG,GACA,0BAAAA,GACA,WAAAwa,EAAAjb,EAAA,WACA,yBAAAS,GACA,gCACA+a,EAAAjhB,EAAAyF,EAAA,QACAqb,EAAA9gB,EAAAyF,EAAA7J,EAAA,IAAAsK,EAAA,UACAlG,EACA,KACA,MAGAyF,EAAA+D,UAAAxJ,EACA,uBAAAkG,GACA,0BAAAA,GACA,WAAAwa,EAAAjb,EAAA,UACA,iCAAAS,GACA4a,EAAA9gB,EAAAyF,EAAA7J,EAAA,IAAAsK,EAAA,OAAAlG,EACA,KACA,OAIAyF,EAAA8E,UAAAvK,EACA,uBAAAkG,GACA4a,EAAA9gB,EAAAyF,EAAA7J,EAAA,IAAAsK,GACAT,EAAA8E,UAAAvK,EACA,MAGA,MAAAA,GACA,0DCnRA,YAuBA,SAAAkhB,GAAAljB,EAAAmjB,EAAA5c,GAMA3F,KAAAZ,GAAAA,EAMAY,KAAAuiB,IAAAA,EAMAviB,KAAA2F,IAAAA,EAMA3F,KAAAmT,KAAA,KAKA,QAAAqP,MAYA,QAAAC,GAAArX,EAAA+H,GAMAnT,KAAAoW,KAAAhL,EAAAgL,KAMApW,KAAA0iB,KAAAtX,EAAAsX,KAMA1iB,KAAA2F,IAAAyF,EAAAzF,IAMA3F,KAAAmT,KAAAA,EAUA,QAAA9H,KAMArL,KAAA2F,IAAA,EAMA3F,KAAAoW,KAAA,GAAAkM,GAAAE,EAAA,EAAA,GAMAxiB,KAAA0iB,KAAA1iB,KAAAoW,KAMApW,KAAA2iB,OAAA,KAgDA,QAAAC,GAAAL,EAAA9c,EAAAsE,GACAtE,EAAAsE,GAAA,IAAAwY,EAaA,QAAAM,GAAAN,EAAA9c,EAAAsE,GACA,KAAAwY,EAAA,KACA9c,EAAAsE,KAAA,IAAAwY,EAAA,IACAA,KAAA,CAEA9c,GAAAsE,GAAAwY,EAyCA,QAAAO,GAAAP,EAAA9c,EAAAsE,GAEA,KAAAwY,EAAA3L,IACAnR,EAAAsE,KAAA,IAAAwY,EAAA5L,GAAA,IACA4L,EAAA5L,IAAA4L,EAAA5L,KAAA,EAAA4L,EAAA3L,IAAA,MAAA,EACA2L,EAAA3L,MAAA,CAEA,MAAA2L,EAAA5L,GAAA,KACAlR,EAAAsE,KAAA,IAAAwY,EAAA5L,GAAA,IACA4L,EAAA5L,GAAA4L,EAAA5L,KAAA,CAEAlR,GAAAsE,KAAAwY,EAAA5L,GA2CA,QAAAoM,GAAAR,EAAA9c,EAAAsE,GACAtE,EAAAsE,KAAA,IAAAwY,EACA9c,EAAAsE,KAAAwY,IAAA,EAAA,IACA9c,EAAAsE,KAAAwY,IAAA,GAAA,IACA9c,EAAAsE,GAAAwY,IAAA,GAuOA,QAAAS,KACA3X,EAAA/N,KAAA0C,MAmBA,QAAAijB,GAAAV,EAAA9c,EAAAsE,GACAtE,EAAAyd,aAAAX,EAAAxY,GAAA,GAWA,QAAAoZ,GAAAZ,EAAA9c,EAAAsE,GACAtE,EAAA2d,cAAAb,EAAAxY,GAAA,GAWA,QAAAsZ,GAAAd,EAAA9c,EAAAsE,GACAwY,EAAAhlB,QACAglB,EAAAe,KAAA7d,EAAAsE,EAAA,EAAAwY,EAAAhlB,QApjBAE,EAAAJ,QAAAgO,EAEAA,EAAA2X,aAAAA,CAEA,IAAA7c,GAAApJ,EAAA,IACAyb,EAAAzb,EAAA,GACA8Z,EAAA1Q,EAAA0Q,SACA5W,EAAAkG,EAAAlG,OACAyF,EAAAS,EAAAT,KACA+S,EAAA,mBAAAC,YAAAA,WAAA5R,KAwCAuE,GAAAiX,GAAAA,EAyCAjX,EAAAoX,MAAAA,EA4CApX,EAAArF,OAAA,WACA,MAAA,KAAAG,EAAAwS,QAAAqK,GAAA3X,IAQAA,EAAAlG,MAAA,SAAAE,GACA,MAAA,IAAAoT,GAAApT,IAIAoT,IAAA3R,QACAuE,EAAAlG,MAAAgB,EAAAjB,KAAAmG,EAAAlG,MAAAsT,EAAA9U,UAAAmV,UAAAL,EAAA9U,UAAAyB,OAGA,IAAAme,GAAAlY,EAAA1H,SASA4f,GAAA/jB,KAAA,SAAAJ,EAAAuG,EAAA4c,GACA,GAAAiB,GAAA,GAAAlB,GAAAljB,EAAAmjB,EAAA5c,EAIA,OAHA3F,MAAA0iB,KAAAvP,KAAAqQ,EACAxjB,KAAA0iB,KAAAc,EACAxjB,KAAA2F,KAAAA,EACA3F,MAaAujB,EAAArZ,IAAA,SAAA/B,EAAA2C,GACA,MAAA9K,MAAAR,KAAAojB,EAAA,EAAAza,GAAA,EAAA,EAAA2C,IAgBAyY,EAAAjZ,OAAA,SAAA3L,GAEA,MADAA,MAAA,EACAA,EAAA,IACAqB,KAAAR,KAAAojB,EAAA,EAAAjkB,GACAqB,KAAAR,KAAAqjB,EACAlkB,EAAA,MAAA,EACAA,EAAA,QAAA,EACAA,EAAA,UAAA,EACA,EACAA,IASA4kB,EAAAxK,MAAA,SAAApa,GACA,MAAAA,GAAA,EACAqB,KAAAR,KAAAsjB,EAAA,GAAAjM,EAAAoJ,WAAAthB,IACAqB,KAAAsK,OAAA3L,IAQA4kB,EAAAtK,OAAA,SAAAta,GACA,MAAAqB,MAAAsK,OAAA3L,GAAA,EAAAA,GAAA,KAuBA4kB,EAAAnL,OAAA,SAAAzZ,GACA,GAAA0iB,GAAAxK,EAAAqJ,KAAAvhB,EACA,OAAAqB,MAAAR,KAAAsjB,EAAAzB,EAAA9jB,SAAA8jB,IAUAkC,EAAApL,MAAAoL,EAAAnL,OAQAmL,EAAAlL,OAAA,SAAA1Z,GACA,GAAA0iB,GAAAxK,EAAAqJ,KAAAvhB,GAAAqhB,UACA,OAAAhgB,MAAAR,KAAAsjB,EAAAzB,EAAA9jB,SAAA8jB,IAQAkC,EAAArK,KAAA,SAAAva,GACA,MAAAqB,MAAAR,KAAAojB,EAAA,EAAAjkB,EAAA,EAAA,IAeA4kB,EAAApK,QAAA,SAAAxa,GACA,MAAAqB,MAAAR,KAAAujB,EAAA,EAAApkB,IAAA,IAQA4kB,EAAAnK,SAAA,SAAAza,GACA,MAAAqB,MAAAR,KAAAujB,EAAA,EAAApkB,GAAA,EAAAA,GAAA,KASA4kB,EAAAjL,QAAA,SAAA3Z,GACA,GAAA0iB,GAAAxK,EAAAqJ,KAAAvhB,EACA,OAAAqB,MAAAR,KAAAujB,EAAA,EAAA1B,EAAA1K,IAAAnX,KAAAujB,EAAA,EAAA1B,EAAAzK,KASA2M,EAAAhL,SAAA,SAAA5Z,GACA,GAAA0iB,GAAAxK,EAAAqJ,KAAAvhB,GAAAqhB,UACA,OAAAhgB,MAAAR,KAAAujB,EAAA,EAAA1B,EAAA1K,IAAAnX,KAAAujB,EAAA,EAAA1B,EAAAzK,IAGA,IAAA6M,GAAA,mBAAAnK,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAE,EAAA,GAAAd,YAAAa,EAAA5b,OAEA,OADA4b,GAAA,IAAA,EACAC,EAAA,GACA,SAAA+I,EAAA9c,EAAAsE,GACAwP,EAAA,GAAAgJ,EACA9c,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,GAAAyP,EAAA,IAEA,SAAA+I,EAAA9c,EAAAsE,GACAwP,EAAA,GAAAgJ,EACA9c,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,GAAAyP,EAAA,OAGA,SAAA+I,EAAA9c,EAAAsE,GACAyO,EAAA9Z,MAAA+G,EAAA8c,EAAAxY,GAAA,EAAA,GAAA,GASAwZ,GAAA9J,MAAA,SAAA9a,GACA,MAAAqB,MAAAR,KAAAikB,EAAA,EAAA9kB,GAGA,IAAA+kB,GAAA,mBAAA/J,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAH,EAAA,GAAAd,YAAAkB,EAAAjc,OAEA,OADAic,GAAA,IAAA,EACAJ,EAAA,GACA,SAAA+I,EAAA9c,EAAAsE,GACA6P,EAAA,GAAA2I,EACA9c,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,GAAAyP,EAAA,IAEA,SAAA+I,EAAA9c,EAAAsE,GACA6P,EAAA,GAAA2I,EACA9c,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,KAAAyP,EAAA,GACA/T,EAAAsE,GAAAyP,EAAA,OAGA,SAAA+I,EAAA9c,EAAAsE,GACAyO,EAAA9Z,MAAA+G,EAAA8c,EAAAxY,GAAA,EAAA,GAAA,GASAwZ,GAAA1J,OAAA,SAAAlb,GACA,MAAAqB,MAAAR,KAAAkkB,EAAA,EAAA/kB,GAGA,IAAAglB,GAAAlL,EAAA9U,UAAA8D,IACA,SAAA8a,EAAA9c,EAAAsE,GACAtE,EAAAgC,IAAA8a,EAAAxY,IAEA,SAAAwY,EAAA9c,EAAAsE,GACA,IAAA,GAAA/M,GAAA,EAAAA,EAAAulB,EAAAhlB,SAAAP,EACAyI,EAAAsE,EAAA/M,GAAAulB,EAAAvlB,GAQAumB,GAAAzJ,MAAA,SAAAnb,GACA,GAAAgH,GAAAhH,EAAApB,SAAA,CACA,IAAA,gBAAAoB,IAAAgH,EAAA,CACA,GAAAF,GAAA4F,EAAAlG,MAAAQ,EAAA1F,EAAA1C,OAAAoB,GACAsB,GAAAe,OAAArC,EAAA8G,EAAA,GACA9G,EAAA8G,EAEA,MAAAE,GACA3F,KAAAsK,OAAA3E,GAAAnG,KAAAmkB,EAAAhe,EAAAhH,GACAqB,KAAAR,KAAAojB,EAAA,EAAA,IAQAW,EAAArjB,OAAA,SAAAvB,GACA,GAAAgH,GAAAD,EAAAnI,OAAAoB,EACA,OAAAgH,GACA3F,KAAAsK,OAAA3E,GAAAnG,KAAAkG,EAAAhH,MAAAiH,EAAAhH,GACAqB,KAAAR,KAAAojB,EAAA,EAAA,IAQAW,EAAAhY,KAAA,WAIA,MAHAvL,MAAA2iB,OAAA,GAAAF,GAAAziB,KAAAA,KAAA2iB,QACA3iB,KAAAoW,KAAApW,KAAA0iB,KAAA,GAAAJ,GAAAE,EAAA,EAAA,GACAxiB,KAAA2F,IAAA,EACA3F,MAOAujB,EAAAzX,MAAA,WAUA,MATA9L,MAAA2iB,QACA3iB,KAAAoW,KAAApW,KAAA2iB,OAAAvM,KACApW,KAAA0iB,KAAA1iB,KAAA2iB,OAAAD,KACA1iB,KAAA2F,IAAA3F,KAAA2iB,OAAAhd,IACA3F,KAAA2iB,OAAA3iB,KAAA2iB,OAAAxP,OAEAnT,KAAAoW,KAAApW,KAAA0iB,KAAA,GAAAJ,GAAAE,EAAA,EAAA,GACAxiB,KAAA2F,IAAA,GAEA3F,MAQAujB,EAAA9X,OAAA,SAAAtD,GACA,GAAAiO,GAAApW,KAAAoW,KACAsM,EAAA1iB,KAAA0iB,KACA/c,EAAA3F,KAAA2F,GAQA,OAPA3F,MAAA8L,QACA5K,SAAAiH,GACAnI,KAAAkK,IAAA/B,EAAA,GACAnI,KAAAsK,OAAA3E,GACA3F,KAAA0iB,KAAAvP,KAAAiD,EAAAjD,KACAnT,KAAA0iB,KAAAA,EACA1iB,KAAA2F,KAAAA,EACA3F,MAOAujB,EAAAxJ,OAAA,WACA,GAAA3D,GAAApW,KAAAoW,KAAAjD,KACA1N,EAAAzF,KAAAwG,YAAArB,MAAAnF,KAAA2F,IACA3F,MAAA8L,OAEA,KADA,GAAA/B,GAAA,EACAqM,GACAA,EAAAhX,GAAAgX,EAAAmM,IAAA9c,EAAAsE,GACAA,GAAAqM,EAAAzQ,IACAyQ,EAAAA,EAAAjD,IAEA,OAAA1N,IAmBAud,EAAA7d,MAAA,SAAAE,GAIA,MAHA2d,GAAA7d,MAAAgB,EAAAwS,OAAAiH,YACAzZ,EAAAwS,OAAAiH,YACA,SAAAva,GAAA,MAAA,IAAAc,GAAAwS,OAAAtT,IACA2d,EAAA7d,MAAAE,GAIA,IAAAue,GAAAZ,EAAArf,UAAAf,OAAAoD,OAAAqF,EAAA1H,UACAigB,GAAApd,YAAAwc,EAMA,mBAAA1J,gBAIAsK,EAAAnK,MAAA,SAAA9a,GACA,MAAAqB,MAAAR,KAAAyjB,EAAA,EAAAtkB,KAOA,mBAAAgb,gBAIAiK,EAAA/J,OAAA,SAAAlb,GACA,MAAAqB,MAAAR,KAAA2jB,EAAA,EAAAxkB,KAWAilB,EAAA9J,MAAA,SAAAnb,GACA,gBAAAA,KACAA,EAAAwH,EAAAwS,OAAAuH,MAAA/Z,EAAAwS,OAAAuH,KAAAvhB,EAAA,WAAA,GAAAwH,GAAAwS,OAAAha,EAAA,UACA,IAAAgH,GAAAhH,EAAApB,SAAA,CACA,OAAAoI,GACA3F,KAAAsK,OAAA3E,GAAAnG,KAAA6jB,EAAA1d,EAAAhH,GACAqB,KAAAR,KAAAojB,EAAA,EAAA,GAGA,IAAAiB,GAAA,WACA,MAAA1d,GAAAwS,QAAAxS,EAAAwS,OAAAhV,UAAAmgB,UACA,SAAAvB,EAAA9c,EAAAsE,GACAwY,EAAAhlB,OAAA,GACAmI,EAAAhH,MAAA6jB,EAAA9c,EAAAsE,GAEAtE,EAAAqe,UAAAvB,EAAAxY,IAEA,SAAAwY,EAAA9c,EAAAsE,GACAwY,EAAAhlB,OAAA,GACAmI,EAAAhH,MAAA6jB,EAAA9c,EAAAsE,GAEAtE,EAAA/G,MAAA6jB,EAAAxY,MAUA6Z,GAAA1jB,OAAA,SAAAvB,GACA,GAAAgH,GAAAhH,EAAApB,OAAA,GACAmI,EAAAnI,OAAAoB,GACAwH,EAAAwS,OAAAoL,WAAAplB,EACA,OAAAgH,GACA3F,KAAAsK,OAAA3E,GAAAnG,KAAAqkB,EAAAle,EAAAhH,GACAqB,KAAAR,KAAAojB,EAAA,EAAA,mDChmBA,YAmBA,SAAA9H,GAAAC,EAAAjJ,EAAA1N,GAMA,MALA,kBAAA0N,IACA1N,EAAA0N,EACAA,EAAA,GAAA/J,GAAA6J,MACAE,IACAA,EAAA,GAAA/J,GAAA6J,MACAE,EAAAgJ,KAAAC,EAAA3W,GAmCA,QAAAuX,GAAAZ,EAAAjJ,GAGA,MAFAA,KACAA,EAAA,GAAA/J,GAAA6J,MACAE,EAAA6J,SAAAZ,GAsDA,QAAA9C,KACA9R,EAAAkU,IACAxQ,EAAAwQ,IAtHA,GAAAtS,GAAAgZ,EAAAhZ,SAAA1K,CAkDA0K,GAAA+S,KAAAA,EAeA/S,EAAA4T,SAAAA,EAOA5T,EAAAic,SAGAjc,EAAAoO,SAAApZ,EAAA,IACAgL,EAAAgL,MAAAhW,EAAA,IAGAgL,EAAAsD,OAAAtO,EAAA,IACAgL,EAAAib,aAAAjb,EAAAsD,OAAA2X,YACA,IAAAnZ,GACA9B,EAAA8B,OAAA9M,EAAA,GACAgL,GAAA6P,aAAA7P,EAAA8B,OAAA+N,aACA7P,EAAAvH,OAAAzD,EAAA,IACAgL,EAAA/G,OAAAjE,EAAA,IACAgL,EAAAoH,OAAApS,EAAA,IAGAgL,EAAAmE,iBAAAnP,EAAA,IACAgL,EAAA6H,UAAA7S,EAAA,IACAgL,EAAA6J,KAAA7U,EAAA,IACAgL,EAAAqC,KAAArN,EAAA,IACAgL,EAAA7B,KAAAnJ,EAAA,IACAgL,EAAAoF,MAAApQ,EAAA,IACAgL,EAAAqK,MAAArV,EAAA,IACAgL,EAAA6F,SAAA7Q,EAAA,IACAgL,EAAAmI,QAAAnT,EAAA,IACAgL,EAAAqH,OAAArS,EAAA,IAGAgL,EAAAjC,MAAA/I,EAAA,IACAgL,EAAA9B,QAAAlJ,EAAA,IAGAgL,EAAA0C,MAAA1N,EAAA,IACAgL,EAAAJ,OAAA5K,EAAA,IACAgL,EAAA8T,IAAA9e,EAAA,GACA,IAAAoJ,GACA4B,EAAA5B,KAAApJ,EAAA,GACAgL,GAAAkQ,UAAAA,EAYA,kBAAAhH,SAAAA,OAAAgT,KACAhT,QAAA,QAAA,SAAA1D,GAKA,MAJAA,KACAxF,EAAA5B,KAAAoH,KAAAA,EACA0K,KAEAlQ","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === '=')\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = [];\r\n\r\n// Base64 decoding table\r\nvar s64 = [];\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(2);\r\nvar fs        = require(7);\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @name fs\r\n * @memberof util\r\n * @type {Object}\r\n */\r\n/**/\r\ntry { module.exports = eval([\"req\",\"uire\"].join(\"\"))(\"fs\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var string = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            string[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            string[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            string[i++] = 0xD800 + (t >> 10);\r\n            string[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            string[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n    }\r\n    return String.fromCharCode.apply(String, string.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(17),\r\n    Type    = require(29),\r\n    util    = require(31);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n * @abstract\r\n */\r\nfunction Class(type) {\r\n    return Class.create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = function create(type, ctor) {\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw _TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) { // eslint-disable-line wrap-iife\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n    \r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.getFieldsArray().forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue)\r\n            ? util.emptyObject\r\n            : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.setCtor(ctor);\r\n\r\n    return prototype;\r\n};\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = decode;\r\n\r\nvar Enum    = require(14),\r\n    Reader  = require(23),\r\n    types   = require(30),\r\n    util    = require(31);\r\n\r\n/**\r\n * General purpose message decoder.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Populated runtime message\r\n * @this Type\r\n * @property {GenerateDecoder} generate Generates a type specific decoder\r\n */\r\nfunction decode(readerOrBuffer, length) {\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.getFieldsById(),\r\n        reader  = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new (this.getCtor())();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.tag(),\r\n            field    = fields[tag.id].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                    length  = reader.uint32();\r\n                var map = message[field.name] = {};\r\n                if (length) {\r\n                    length += reader.pos;\r\n                    var ks = [], vs = [];\r\n                    while (reader.pos < length) {\r\n                        if (reader.tag().id === 1)\r\n                            ks[ks.length] = reader[keyType]();\r\n                        else if (types.basic[type] !== undefined)\r\n                            vs[vs.length] = reader[type]();\r\n                        else\r\n                            vs[vs.length] = field.resolvedType.decode(reader, reader.uint32());\r\n                    }\r\n                    for (var i = 0; i < ks.length; ++i)\r\n                        map[typeof ks[i] === \"object\" ? util.longToHash(ks[i]) : ks[i]] = vs[i];\r\n                }\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] && message[field.name].length ? message[field.name] : message[field.name] = [];\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && tag.wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values[values.length] = reader[type]();\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] !== undefined)\r\n                    values[values.length] = reader[type]();\r\n                else\r\n                    values[values.length] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] !== undefined)\r\n                message[field.name] = reader[type]();\r\n              else\r\n                message[field.name] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(tag.wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @typedef GenerateDecoder\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\ndecode.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.tag()\")\r\n        (\"switch(t.id){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"var n=r.uint32(),o={}\")\r\n                (\"if(n){\")\r\n                    (\"n+=r.pos\")\r\n                    (\"var k=[],v=[]\")\r\n                    (\"while(r.pos<n){\")\r\n                        (\"if(r.tag().id===1)\")\r\n                            (\"k[k.length]=r.%s()\", keyType);\r\n\r\n                        if (types.basic[type] !== undefined) gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=r.%s()\", type);\r\n\r\n                        else gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=types[%d].decode(r,r.uint32())\", i, i);\r\n                    gen\r\n                    (\"}\")\r\n                    (\"for(var i=0;i<k.length;++i)\")\r\n                        (\"o[typeof(k[i])===\\\"object\\\"?util.longToHash(k[i]):k[i]]=v[i]\")\r\n                (\"}\")\r\n                (\"m%s=o\", prop);\r\n\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s&&m%s.length?m%s:m%s=[]\", prop, prop, prop, prop);\r\n\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n                (\"if(t.wireType===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s[m%s.length]=r.%s()\", prop, prop, type)\r\n                (\"}else\");\r\n            }\r\n\r\n            if (types.basic[type] !== undefined) gen\r\n\r\n                    (\"m%s[m%s.length]=r.%s()\", prop, prop, type);\r\n\r\n            else gen\r\n\r\n                    (\"m%s[m%s.length]=types[%d].decode(r,r.uint32())\", prop, prop, i, i);\r\n\r\n        } else if (types.basic[type] !== undefined) { gen\r\n\r\n                (\"m%s=r.%s()\", prop, type);\r\n\r\n        } else { gen\r\n\r\n                (\"m%s=types[%d].decode(r,r.uint32())\", prop, i, i);\r\n\r\n        } gen\r\n                (\"break\");\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t.wireType)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = encode;\r\n\r\nvar Enum     = require(14),\r\n    Writer   = require(35),\r\n    types    = require(30),\r\n    util     = require(31);\r\nvar safeProp = util.safeProp;\r\n\r\n/**\r\n * General purpose message encoder.\r\n * @param {Message|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n * @this Type\r\n * @property {GenerateEncoder} generate Generates a type specific encoder\r\n */\r\nfunction encode(message, writer) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer.create();\r\n    var fields = this.getFieldsArray(), fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            var value, keys;\r\n            if ((value = message[field.name]) && (keys = Object.keys(value)).length) {\r\n                writer.fork();\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    writer.tag(1, types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType !== undefined)\r\n                        writer.tag(2, wireType)[type](value[keys[i]]);\r\n                    else\r\n                        field.resolvedType.encode(value[keys[i]], writer.tag(2,2).fork()).ldelim();\r\n                }\r\n                writer.ldelim(field.id);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    writer.fork();\r\n                    var i = 0;\r\n                    while (i < values.length)\r\n                        writer[type](values[i++]);\r\n                    writer.ldelim(field.id);\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType !== undefined)\r\n                        while (i < values.length)\r\n                            writer.tag(field.id, wireType)[type](values[i++]);\r\n                    else\r\n                        while (i < values.length)\r\n                            field.resolvedType.encode(values[i++], writer.tag(field.id,2).fork()).ldelim();\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name];\r\n            if (\r\n                field.partOf && message[field.partOf.name] === field.name\r\n                ||\r\n                (field.required || value !== undefined) && (field.long ? util.longNeq(value, field.defaultValue) : value !== field.defaultValue)\r\n            ) {\r\n                if (wireType !== undefined)\r\n                    writer.tag(field.id, wireType)[type](value);\r\n                else {\r\n                    field.resolvedType.encode(value, writer.fork());\r\n                    if (writer.len || field.required)\r\n                        writer.ldelim(field.id);\r\n                    else\r\n                        writer.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates an {@link Encoder|encoder} specific to the specified message type.\r\n * @typedef GenerateEncoder\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\nencode.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.getFieldsArray();\r\n    var oneofs = mtype.getOneofsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    var i;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = safeProp(field.name);\r\n        \r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType     = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                keyWireType = types.mapKey[keyType];\r\n            gen\r\n\r\n    (\"if(m%s){\", prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0,ks=Object.keys(m%s);i<ks.length;++i){\", prop)\r\n            (\"w.tag(1,%d).%s(ks[i])\", keyWireType, keyType);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n            (\"w.tag(2,%d).%s(m%s[ks[i]])\", wireType, type, prop);\r\n\r\n            else gen\r\n            \r\n            (\"types[%d].encode(m%s[ks[i]],w.tag(2,2).fork()).ldelim()\", i, prop);\r\n\r\n            gen\r\n        (\"}\")\r\n        (\"w.len&&w.ldelim(%d)||w.reset()\", field.id)\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim(%d)\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.tag(%d,%d).%s(m%s[i])\", field.id, wireType, type, prop);\r\n                else gen\r\n            (\"types[%d].encode(m%s[i],w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(m%s!==undefined&&util.longNeq(m%s,%j))\", prop, prop, field.defaultValue);\r\n                else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n        (\"w.tag(%d,%d).%s(m%s)\", field.id, wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n        (\"types[%d].encode(m%s,w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n        \r\n            else gen\r\n\r\n        (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", i, prop, field.id);\r\n    \r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i],\r\n            prop  = safeProp(oneof.name);\r\n        gen\r\n        (\"switch(m%s){\", prop);\r\n        var oneofFields = oneof.getFieldsArray();\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type],\r\n                prop     = safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n                (\"w.tag(%d,%d).%s(m%s)\", field.id, wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n                (\"types[%d].encode(m%s,w.tag(%d,2).fork()).ldelim()\", fields.indexOf(field), prop, field.id);\r\n        \r\n            else gen\r\n\r\n                (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", fields.indexOf(field), prop, field.id);\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");        \r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(20);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nvar util = require(31);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(20);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nvar Type      = require(29),\r\n    Enum      = require(14),\r\n    MapField  = require(16),\r\n    types     = require(30),\r\n    util      = require(31);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object} [rule=\"optional\"] Field rule\r\n * @param {string|Object} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined)\r\n        return MapField.fromJSON(name, json);\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options[\"default\"]) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n    \r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Message#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (this.resolvedType instanceof Enum && options[\"enum\"] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        else if (this.long && options.long)\r\n            return options.long === Number\r\n                ? typeof value === \"number\"\r\n                ? value\r\n                : util.Long.fromValue(value).toNumber()\r\n                : util.Long.fromValue(value, this.type.charAt(0) === \"u\").toString();\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(15);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nvar Enum    = require(14),\r\n    types   = require(30),\r\n    util    = require(31);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * \r\n * This method should be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @extends {Object}\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @abstract\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {*} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {*} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @param {boolean} [options.defaults=false] Also sets default values on the resulting object\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    if (!options)\r\n        options = {};\r\n    var fields = this.$type.fields,\r\n        json   = {};\r\n    var keys;\r\n    if (options.defaults) {\r\n        keys = [];\r\n        for (var k in this) // eslint-disable-line guard-for-in\r\n            keys.push(k);\r\n    } else\r\n        keys = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && value.length) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (!options.fieldsOnly)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(20);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nvar Type = require(29),\r\n    util = require(31);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (type && !util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    this.resolvedResponseType = resolved;\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(20);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nvar Enum    = require(14),\r\n    Type    = require(29),\r\n    Field   = require(15),\r\n    Service = require(27),\r\n    util    = require(31);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\nvar nestedTypes = [ Enum, Type, Service, Field, Namespace ],\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson)\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw _TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found instanceof Namespace && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path);\r\n    if (!(found instanceof Type))\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path);\r\n    if (!(found instanceof Service))\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.extend = extend;\r\n\r\nvar Root = require(24),\r\n    util = require(31);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Lets the specified constructor extend this class.\r\n * @memberof ReflectionObject\r\n * @param {*} constructor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this ReflectionObject\r\n */\r\nfunction extend(constructor) {\r\n    var prototype = constructor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = constructor;\r\n    constructor.extend = extend;\r\n    return prototype;\r\n}\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Constructor name, space, full name\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    return this.constructor.name + \" \" + this.getFullName();\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(20);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nvar Field = require(15),\r\n    util  = require(31);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = this.name.substring(0, 1).toUpperCase() + this.name.substring(1);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nutil.prop(OneOfPrototype, \"fieldsArray\", {\r\n    get: function getFieldsArray() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fieldsArray.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize  = require(28),\r\n    Root      = require(24),\r\n    Type      = require(29),\r\n    Field     = require(15),\r\n    MapField  = require(16),\r\n    OneOf     = require(21),\r\n    Enum      = require(14),\r\n    Service   = require(27),\r\n    Method    = require(18),\r\n    types     = require(30),\r\n    util      = require(31);\r\nvar camelCase = util.camelCase;\r\n\r\nvar nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n/**/\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} [root] Root to populate\r\n * @returns {ParserResult} Parser result\r\n */\r\nfunction parse(source, root) {\r\n    /* eslint-disable callback-return */\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    function illegal(token, name) {\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"min\": return 1;\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        var p3;\r\n        if ([ \"proto2\", p3 = \"proto3\" ].indexOf(syntax) < 0)\r\n            throw illegal(syntax, \"syntax\");\r\n        isProto3 = syntax === p3;\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        name = camelCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\")\r\n                    parseOption(enm);\r\n                else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (!nameRe.test(token))\r\n                    throw illegal(token, \"name\");\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util      = require(33),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = function create(buffer) {\r\n    return new (util.Buffer && util.Buffer.isBuffer(buffer) && BufferReader || Reader)(buffer);\r\n};\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice;\r\n\r\n/**\r\n * Tag read.\r\n * @constructor\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @ignore\r\n */\r\nfunction Tag(id, wireType) {\r\n    this.id = id;\r\n    this.wireType = wireType;\r\n}\r\n\r\n/**\r\n * Reads a tag.\r\n * @returns {{id: number, wireType: number}} Field id and wire type\r\n */\r\nReaderPrototype.tag = function read_tag() {\r\n    if (this.pos >= this.len)\r\n        throw indexOutOfRange(this);\r\n    return new Tag(this.buf[this.pos] >>> 3, this.buf[this.pos++] & 7);\r\n};\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    // 1 byte\r\n    var octet = this.buf[this.pos++],\r\n        value = octet & 127;\r\n    if (octet > 127) { // false if octet is undefined (pos >= len)\r\n        // 2 bytes\r\n        octet = this.buf[this.pos++];\r\n        value |= (octet & 127) << 7;\r\n        if (octet > 127) {\r\n            // 3 bytes\r\n            octet = this.buf[this.pos++];\r\n            value |= (octet & 127) << 14;\r\n            if (octet > 127) {\r\n                // 4 bytes\r\n                octet = this.buf[this.pos++];\r\n                value |= (octet & 127) << 21;\r\n                if (octet > 127) {\r\n                    // 5 bytes\r\n                    octet = this.buf[this.pos++];\r\n                    value |= octet << 28;\r\n                    if (octet > 127) {\r\n                        // 6..10 bytes (sign extended)\r\n                        this.pos += 5;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (this.pos > this.len) {\r\n        this.pos = this.len;\r\n        throw indexOutOfRange(this);\r\n    }\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    return this.int32() >>> 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.int32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    var lo = 0, hi = 0,\r\n        i  = 0, b  = 0;\r\n    if (this.len - this.pos > 9) { // fast route\r\n        for (i = 0; i < 4; ++i) {\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.int32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return buf[end - 4]\r\n         | buf[end - 3] << 8\r\n         | buf[end - 2] << 16\r\n         | buf[end - 1] << 24;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                var tag = this.tag();\r\n                if (tag.wireType === 4)\r\n                    break;\r\n                this.skipType(tag.wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    if (!util.Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n    readStringBuffer = util.Buffer.prototype.utf8Slice // around forever, but not present in browser buffer\r\n        ? readStringBuffer_utf8Slice\r\n        : readStringBuffer_toString;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nif (typeof Float32Array === \"undefined\") // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nif (typeof Float64Array === \"undefined\") // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\nvar readStringBuffer;\r\n\r\nfunction readStringBuffer_utf8Slice(buf, start, end) {\r\n    return buf.utf8Slice(start, end); // fastest\r\n}\r\n\r\nfunction readStringBuffer_toString(buf, start, end) {\r\n    return buf.toString(\"utf8\", start, end); // 2nd, again assertions\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return readStringBuffer(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(19);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nvar Field  = require(15),\r\n    util   = require(31),\r\n    common = require(11);\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.resolvePath;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, callback) {\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                var parsed = require(22)(source, self);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Promise<Root>} Promise\r\n * @variation 2\r\n */\r\n// function load(filename:string):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename) {\r\n    return this.load(filename, SYNC);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.toString = function toString() {\r\n    return this.constructor.name;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(26);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(31);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(19);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nvar Method = require(18),\r\n    util   = require(31),\r\n    rpc    = require(25);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl RPC implementation ({@link RPCImpl|see})\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[method.name.substring(0, 1).toLowerCase() + method.name.substring(1)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited && method.resolvedRequestType.encodeDelimited(request) || method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" && setImmediate || setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited && method.resolvedResponseType.decodeDelimited(responseData) || method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n/**/\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(19);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nvar Enum      = require(14),\r\n    OneOf     = require(21),\r\n    Field     = require(15),\r\n    Service   = require(27),\r\n    Class     = require(10),\r\n    Message   = require(17),\r\n    Reader    = require(23),\r\n    Writer    = require(35),\r\n    util      = require(31);\r\nvar encode    = require(13),\r\n    decode    = require(12),\r\n    verify    = require(34);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object|*} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new (this.getCtor())(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return (this.encode = util.codegen.supported\r\n        ? encode.generate(this).eof(this.getFullName() + \"$encode\", {\r\n              Writer : Writer,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : encode\r\n    ).call(this, message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return (this.decode = util.codegen.supported\r\n        ? decode.generate(this).eof(this.getFullName() + \"$decode\", {\r\n              Reader : Reader,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : decode\r\n    ).call(this, readerOrBuffer, length);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return (this.verify = util.codegen.supported\r\n        ? verify.generate(this).eof(this.getFullName() + \"$verify\", {\r\n              types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util  : util\r\n          })\r\n        : verify\r\n    ).call(this, message);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(31);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = exports;\r\n\r\nutil.asPromise = require(2);\r\nutil.codegen   = require(4);\r\nutil.fetch     = require(6);\r\nutil.fs        = require(7);\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @memberof util\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\nfunction isAbsolutePath(path) {\r\n    return /^(?:\\/|[a-zA-Z0-9]+:)/.test(path);\r\n}\r\n\r\nutil.isAbsolutePath = isAbsolutePath;\r\n\r\n/**\r\n * Normalizes the specified path.\r\n * @memberof util\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\nfunction normalizePath(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts = path.split(\"/\");\r\n    var abs = isAbsolutePath(path);\r\n    var prefix = \"\";\r\n    if (abs)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (abs)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n}\r\n\r\nutil.normalizePath = normalizePath;\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path that was used to fetch the origin file\r\n * @param {string} importPath Import path specified in the origin file\r\n * @param {boolean} [alreadyNormalized] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the imported file\r\n */\r\nutil.resolvePath = function resolvePath(originPath, importPath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        importPath = normalizePath(importPath);\r\n    if (isAbsolutePath(importPath))\r\n        return importPath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalizePath(originPath);\r\n    originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\");\r\n    return originPath.length ? normalizePath(originPath + \"/\" + importPath) : importPath;\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts a string to camel case notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Converts a string to underscore notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.underScore = function underScore(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) { return \"_\" + $1.toLowerCase(); });\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe && util.Buffer.allocUnsafe(size) || new util.Buffer(size)\r\n        : new (typeof Uint8Array !== \"undefined\" && Uint8Array || Array)(size);\r\n};\r\n\r\nvar runtime = require(33);\r\n\r\nutil.EventEmitter = require(5);\r\n\r\n// Merge in runtime utility\r\nutil.merge(util, runtime);\r\n\r\nutil._configure = function configure() {\r\n    runtime.Long = util.Long;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(31);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    switch (typeof value) {\r\n        case \"number\":\r\n            return LongBits.fromNumber(value);\r\n        case \"string\":\r\n            if (util.Long)\r\n                value = util.Long.fromString(value);\r\n                // fallthrough\r\n            else\r\n                return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return (value.low || value.high) && new LongBits(value.low >>> 0, value.high >>> 0) || zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo, this.hi, unsigned)\r\n        : { low: this.lo, high: this.hi, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nvar LongBits = util.LongBits = require(\"./longbits\");\r\n\r\nutil.base64 = require(\"@protobufjs/base64\");\r\nutil.utf8   = require(\"@protobufjs/utf8\");\r\nutil.pool   = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nvar isNode = util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Buffer = null;\r\n\r\nif (isNode)\r\n    try { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || null;\r\n\r\nif (!util.Long && isNode)\r\n    try { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === \"object\");\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === \"number\"\r\n         ? typeof b === \"number\"\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === \"number\"\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ie8 = !-[1,];\r\n    var ucKey = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n    if (descriptor.get)\r\n        target[\"get\" + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target[\"set\" + ucKey] = ie8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (ie8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze([]);\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze({});\r\n","\"use strict\";\r\nmodule.exports = verify;\r\n\r\nvar Enum      = require(14),\r\n    Type      = require(29),\r\n    util      = require(31);\r\nvar isInteger = util.isInteger;\r\n\r\nfunction invalid(field, expected) {\r\n    return \"invalid value for field \" + field.getFullName() + \" (\" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected)\";\r\n}\r\n\r\nfunction verifyValue(field, value) {\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\":\r\n            if (typeof value !== \"number\")\r\n                return invalid(field, \"number\");\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (!isInteger(value))\r\n                return invalid(field, \"integer\");\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (!(isInteger(value) || value && isInteger(value.low) && isInteger(value.high)))\r\n                return invalid(field, \"integer|Long\");\r\n            break;\r\n        case \"bool\":\r\n            if (typeof value !== \"boolean\")\r\n                return invalid(field, \"boolean\");\r\n            break;\r\n        case \"string\":\r\n            if (!util.isString(value))\r\n                return invalid(field, \"string\");\r\n            break;\r\n        case \"bytes\":\r\n            if (!(value && typeof value.length === \"number\" || util.isString(value)))\r\n                return invalid(field, \"buffer\");\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) {\r\n                if (typeof field.resolvedType.getValuesById()[value] !== \"number\")\r\n                    return invalid(field, \"enum value\");\r\n            } else if (field.resolvedType instanceof Type) {\r\n                var reason = field.resolvedType.verify(value);\r\n                if (reason)\r\n                    return reason;\r\n            }\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction verifyKey(field, value) {\r\n    switch (field.keyType) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (/^[\\x00-\\xff]{8}$/.test(value)) // eslint-disable-line no-control-regex\r\n                return null;\r\n            // fallthrough\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (/^-?(?:0|[1-9]\\d*)$/.test(value))\r\n                return invalid(field, \"integer key\");\r\n            break;\r\n        case \"bool\":\r\n            if (/^true|false|0|1$/.test(value))\r\n                return invalid(field, \"boolean key\");\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * General purpose message verifier.\r\n * @param {Message|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n * @this {Type}\r\n * @property {GenerateVerifier} generate Generates a type specific verifier\r\n */\r\nfunction verify(message) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    var fields = this.getFieldsArray(),\r\n        i = 0,\r\n        reason;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        // map fields\r\n        if (field.map) {\r\n\r\n            if (value !== undefined) {\r\n                if (!util.isObject(value))\r\n                    return invalid(field, \"object\");\r\n                var keys = Object.keys(value);\r\n                for (var j = 0; j < keys.length; ++j) {\r\n                    if (reason = verifyKey(field, keys[j])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n                    if (reason = verifyValue(field, value[keys[j]])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n                }\r\n            }\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            if (value !== undefined) {\r\n                if (!Array.isArray(value))\r\n                    return invalid(field, \"array\");\r\n                for (var j = 0; j < value.length; ++j)\r\n                    if (reason = verifyValue(field, value[j])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n            }\r\n\r\n        // required or present fields\r\n        } else if (field.required || value !== undefined) {\r\n\r\n            if (reason = verifyValue(field, value)) // eslint-disable-line no-cond-assign\r\n                return reason;\r\n        }\r\n\r\n    }\r\n    return null;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\": gen\r\n            (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                (\"return%j\", invalid(field, \"number\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.isInteger(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!(util.isInteger(%s)||%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                (\"return%j\", invalid(field, \"integer|Long\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                (\"return%j\", invalid(field, \"boolean\"));\r\n            break;\r\n        case \"string\": gen\r\n            (\"if(!util.isString(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"string\"));\r\n            break;\r\n        case \"bytes\": gen\r\n            (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                (\"return%j\", invalid(field, \"buffer\"));\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) { gen\r\n                (\"switch(%s){\", ref)\r\n                    (\"default:\")\r\n                        (\"return%j\", invalid(field, \"enum value\"));\r\n                var values = util.toArray(field.resolvedType.values);\r\n                for (var j = 0; j < values.length; ++j) gen\r\n                    (\"case %d:\", values[j]);\r\n                gen\r\n                        (\"break\")\r\n                (\"}\");\r\n            } else if (field.resolvedType instanceof Type) { gen\r\n                (\"var r;\")\r\n                (\"if(r=types[%d].verify(%s))\", fieldIndex, ref)\r\n                    (\"return r\");\r\n            }\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @typedef GenerateVerifier\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\nverify.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!util.isObject(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(m%s)\", prop)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!Array.isArray(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<m%s.length;++i){\", prop);\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) gen\r\n            (\"if(m%s!==undefined){\", prop);\r\n                genVerifyValue(gen, field, i, \"m\" + prop);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util      = require(33),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {*} val Value to write\r\n * @param {number} len Value byte length\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, val, len) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {?Writer.Op}\r\n     */\r\n    this.next = null;\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @param {State} next Next state entry\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer, next) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = next;\r\n}\r\n\r\nWriter.State = State;\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = function create() {\r\n    return new (util.Buffer && BufferWriter || Writer);\r\n};\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new ArrayImpl(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (ArrayImpl !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    var op = new Op(fn, val, len);\r\n    this.tail.next = op;\r\n    this.tail = op;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\n/**\r\n * Writes a tag.\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.tag = function write_tag(id, wireType) {\r\n    return this.push(writeByte, 1, id << 3 | wireType & 7);\r\n};\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value >>>= 0;\r\n    return value < 128\r\n        ? this.push(writeByte, 1, value)\r\n        : this.push(writeVarint32,\r\n              value < 16384     ? 2\r\n            : value < 2097152   ? 3\r\n            : value < 268435456 ? 4\r\n            :                     5\r\n        , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32(value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    // tends to deoptimize. stays optimized when using bits directly.\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#}, {@link Writer#reset} or {@link Writer#finish} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this, this.states);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend as a tag where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (id !== undefined)\r\n        this.tag(id, 2);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of write operations and frees all resources.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len);\r\n    this.reset();\r\n    var pos = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    BufferWriter.alloc = util.Buffer.allocUnsafe\r\n        ? util.Buffer.allocUnsafe\r\n        : function allocUnsafeNew(size) { return new util.Buffer(size); };\r\n    return BufferWriter.alloc(size);\r\n};\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(val, buf, pos) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float32Array === \"undefined\") // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(val, buf, pos) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float64Array === \"undefined\") // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(val, buf, pos) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = util.Buffer.from && util.Buffer.from(value, \"base64\") || new util.Buffer(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nvar writeStringBuffer = (function() { // eslint-disable-line wrap-iife\r\n    return util.Buffer && util.Buffer.prototype.utf8Write // around forever, but not present in browser buffer\r\n        ? function writeString_buffer_utf8Write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.utf8Write(val, pos);\r\n        }\r\n        : function writeString_buffer_write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.write(val, pos);\r\n        };\r\n    // Note that the plain JS encoder is faster for short strings, probably because of redundant assertions.\r\n    // For a raw utf8Write, the breaking point is about 20 characters, for write it is around 40 characters.\r\n    // Unfortunately, this does not translate 1:1 to real use cases, hence the common \"good enough\" limit of 40.\r\n})();\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = value.length < 40\r\n        ? utf8.length(value)\r\n        : util.Buffer.byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = protobuf.Writer.BufferWriter;\r\n               var Reader =\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = protobuf.Reader.BufferReader;\r\nprotobuf.encode           = require(\"./encode\");\r\nprotobuf.decode           = require(\"./decode\");\r\nprotobuf.verify           = require(\"./verify\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\n                 var util =\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    util._configure();\r\n    Reader._configure();\r\n}\r\n\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}