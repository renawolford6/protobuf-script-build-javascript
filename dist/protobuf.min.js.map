{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/converter.js","src/converters.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/base64/index.js","src/util/codegen/index.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/writer_buffer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","undefined","listeners","splice","emit","extend","ctor","keys","Object","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","replace","isAbsolute","test","normalize","parts","split","absolute","prefix","shift","join","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","offset","buf","utf8","string","len","c","charCodeAt","read","buffer","start","end","chunk","String","fromCharCode","write","c1","c2","Class","type","Type","TypeError","MessageCtor","properties","Message","util","merge","$type","fieldsArray","forEach","field","name","Array","isArray","defaultValue","emptyArray","isObject","long","emptyObject","oneofsArray","oneof","defineProperty","get","indexOf","set","value","common","json","nested","google","protobuf","Any","fields","type_url","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","genConvert","fieldIndex","prop","resolvedType","Enum","sprintf","charAt","converter","mtype","gen","codegen","convert","safeProp","repeated","converters","typeOrCtor","options","fieldsOnly","enums","defaults","longs","defaultLow","defaultHigh","unsigned","longNe","low","high","Number","LongBits","from","toNumber","Long","fromNumber","toString","fromValue","bytes","base64","encode","Buffer","isBuffer","message","fromString","newBuffer","decode","decoder","group","ref","map","resolvedKeyType","types","basic","packed","genEncodeType","encoder","wireType","mapKey","partOf","required","oneofFields","j","ReflectionObject","valuesById","self","key","val","parseInt","EnumPrototype","className","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","toLowerCase","optional","extensionField","declaringField","_packed","FieldPrototype","MapField","defineProperties","getOption","setOption","ifNotSet","resolved","typeDefault","parent","lookup","freeze","MapFieldPrototype","MessagePrototype","asJSON","object","writer","encodeDelimited","readerOrBuffer","decodeDelimited","verify","source","impl","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","_nestedArray","_clearProperties","clearCache","namespace","arrayToJSON","array","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","nestedJson","ns","nestedName","getEnum","prev","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","root","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","fullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","_fieldsArray","addFieldsToParent","OneOfPrototype","index","fieldName","isName","token","isTypeRef","isFqTypeRef","lower","camelCase","str","substring","$0","$1","toUpperCase","parse","illegal","filename","tn","line","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","readRange","parseId","sign","tokenLower","Infinity","NaN","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","parseMapField","parseField","parseOneOf","extensions","reserved","parseGroup","applyCase","parseInlineOptions","lcFirst","ucFirst","valueType","enm","parseEnumField","custom","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","keepCase","package","indexOutOfRange","reader","writeLength","RangeError","pos","Reader","readLongVarint","bits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","BufferReader","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","exponent","mantissa","Math","pow","float","readDouble","Float64Array","f64","double","skipType","_configure","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","initParser","load","finish","cb","process","JSON","parsed","sync","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","methodsArray","methodName","inherited","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","stack","repeat","curr","delimRe","delim","expected","actual","equals","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","Writer","verifier","fieldsById","names","repeatedFieldsArray","filter","oneOfName","setup","fld","eof","fork","ldelim","bake","dst","src","allocUnsafe","p","ceil","b64","s64","b","invalidEncoding","level","indent","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","scope","verbose","console","log","Function","concat","format","arg","stringify","supported","LongBitsPrototype","zero","zzEncode","zeroHash","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","utf8Write","encoding","dcodeIO","isFinite","floor","longToHash","longFromHash","fromBits","arrayNe","invalid","genVerifyValue","genVerifyKey","Op","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength","roots","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(5);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(18),\r\n    util    = require(33);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(31);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        /* istanbul ignore next */\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) {\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.fieldsArray.forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.oneofsArray.forEach(function(oneof) {\r\n        Object.defineProperty(prototype, oneof.resolve().name, {\r\n            get: function() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object.<string,*>} google/protobuf/any.proto Any\r\n * @property {Object.<string,*>} google/protobuf/duration.proto Duration\r\n * @property {Object.<string,*>} google/protobuf/empty.proto Empty\r\n * @property {Object.<string,*>} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object.<string,*>} google/protobuf/timestamp.proto Timestamp\r\n * @property {Object.<string,*>} google/protobuf/wrappers.proto Wrappers\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});","\"use strict\";\r\nmodule.exports = converter;\r\n\r\nvar Enum       = require(15),\r\n    converters = require(12),\r\n    util       = require(33);\r\n\r\nvar sprintf    = util.codegen.sprintf;\r\n\r\nfunction genConvert(field, fieldIndex, prop) {\r\n    if (field.resolvedType)\r\n        return field.resolvedType instanceof Enum\r\n             ? sprintf(\"f.enums(s%s,%d,types[%d].values,o)\", prop, 0, fieldIndex)\r\n             : sprintf(\"types[%d].convert(s%s,f,o)\", fieldIndex, prop);\r\n    switch (field.type) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            return sprintf(\"f.longs(s%s,%d,%d,%j,o)\", prop, 0, 0, field.type.charAt(0) === \"u\");\r\n        case \"bytes\":\r\n            return sprintf(\"f.bytes(s%s,%j,o)\", prop, Array.prototype.slice.call(field.defaultValue));\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Generates a conveter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @param {function} generateField Field generator\r\n * @returns {Codegen} Codegen instance\r\n * @property {ConverterImpl} json Converter implementation producing JSON\r\n * @property {ConverterImpl} message Converter implementation producing runtime messages\r\n */\r\nfunction converter(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"s\", \"f\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d=f.create(s,this,o)\");\r\n    if (fields.length) { gen\r\n    (\"if(d){\");\r\n        var convert;\r\n        fields.forEach(function(field, i) {\r\n            var prop = util.safeProp(field.resolve().name);\r\n            if (field.repeated) { gen\r\n        (\"if(s%s&&s%s.length){\", prop, prop)\r\n            (\"d%s=[]\", prop)\r\n            (\"for(var i=0;i<s%s.length;++i)\", prop);\r\n                if (convert = genConvert(field, i, prop + \"[i]\")) gen\r\n                (\"d%s.push(%s)\", prop, convert);\r\n                else gen\r\n                (\"d%s.push(s%s[i])\", prop, prop);\r\n                gen\r\n        (\"}else if(o.defaults||o.arrays)\")\r\n            (\"d%s=[]\", prop);\r\n            } else if (convert = genConvert(field, i, prop)) gen\r\n        (\"d%s=%s\", prop, convert);\r\n            else gen\r\n        (\"if(d%s===undefined&&o.defaults)\", prop)\r\n            (\"d%s=%j\", prop, field.defaultValue);\r\n        });\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nutil.merge(converter, converters);\r\n\r\n/**\r\n * A converter implementation as used by {@link Type#convert} respectively {@link Message.convert}.\r\n * @typedef ConverterImpl\r\n * @type {Object}\r\n * @property {ConverterCreate} create Function for creating a new destination object\r\n * @property {ConverterEnums} enums Function for converting enum values\r\n * @property {ConverterLongs} longs Function for converting long values\r\n * @property {ConverterBytes} bytes Function for converting bytes values\r\n */\r\n\r\n/**\r\n * A function for creating a new destination object.\r\n * @typedef ConverterCreate\r\n * @type {function}\r\n * @param {Message|Object} value Source object or message\r\n * @param {Function} typeOrCtor Reflected type or message constructor\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Destination object or message\r\n */\r\n\r\n/**\r\n * A function for converting enum values.\r\n * @typedef ConverterEnums\r\n * @type {function}\r\n * @param {number|string} value Actual value\r\n * @param {number} defaultValue Default value\r\n * @param {Object.<string,number>} values Possible values\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {number|string} Converted value\r\n */\r\n\r\n/**\r\n * A function for converting long values.\r\n * @typedef ConverterLongs\r\n * @type {function}\r\n * @param {number|string|Long} value Actual value\r\n * @param {Long} defaultValue Default value\r\n * @param {boolean} unsigned Whether unsigned or not\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {number|string|Long} Converted value\r\n */\r\n\r\n/**\r\n * A function for converting bytes values.\r\n * @typedef ConverterBytes\r\n * @type {function}\r\n * @param {string|number[]|Uint8Array} value Actual value\r\n * @param {number[]} defaultValue Default value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {string|number[]|Uint8Array} Converted value \r\n */\r\n","\"use strict\";\r\nvar converters = exports;\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * JSON conversion options as used by {@link Message#asJSON}.\r\n * @typedef JSONConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n * @property {*} [longs] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @property {*} [enums=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Converter implementation producing JSON.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.json = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        return options.fieldsOnly\r\n            ? {}\r\n            : util.merge({}, value);\r\n    },\r\n    enums: function(value, defaultValue, values, options) {\r\n        if (!options.defaults) {\r\n            if (value === undefined || value === defaultValue)\r\n                return undefined;\r\n        } else if (value === undefined)\r\n            value = defaultValue;\r\n        return options.enums === String && typeof value === \"number\"\r\n            ? values[value]\r\n            : value;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned, options) {\r\n        if (!value) {\r\n            if (options.defaults)\r\n                value = { low: defaultLow, high: defaultHigh };\r\n            else\r\n                return undefined;\r\n        } else if (!util.longNe(value, defaultLow, defaultHigh) && !options.defaults)\r\n            return undefined;\r\n        if (options.longs === Number)\r\n            return typeof value === \"number\"\r\n                ? value\r\n                : util.LongBits.from(value).toNumber(unsigned);\r\n        if (options.longs === String) {\r\n            if (typeof value === \"number\")\r\n                return util.Long.fromNumber(value, unsigned).toString();\r\n            value = util.Long.fromValue(value); // has no unsigned option\r\n            value.unsigned = unsigned;\r\n            return value.toString();\r\n        }\r\n        return value;\r\n    },\r\n    bytes: function(value, defaultValue, options) {\r\n        if (!value) {\r\n            if (options.defaults)\r\n                value = defaultValue;\r\n            else\r\n                return undefined;\r\n        } else if (!value.length && !options.defaults)\r\n            return undefined;\r\n        return options.bytes === String\r\n            ? util.base64.encode(value, 0, value.length)\r\n            : options.bytes === Array\r\n            ? Array.prototype.slice.call(value)\r\n            : options.bytes === util.Buffer && !util.Buffer.isBuffer(value)\r\n            ? util.Buffer.from(value) // polyfilled\r\n            : value;\r\n    }\r\n};\r\n\r\n/**\r\n * Message conversion options as used by {@link Message.from} and {@link Type#from}.\r\n * @typedef MessageConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n */\r\n// Note that options.defaults and options.arrays also affect the message converter.\r\n// As defaults are already on the prototype, usage is not recommended and thus undocumented.\r\n\r\n/**\r\n * Converter implementation producing runtime messages.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.message = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        // can't use instanceof Type here because converters are also part of the minimal runtime\r\n        return new (typeOrCtor.ctor ? typeOrCtor.ctor : typeOrCtor)(options.fieldsOnly ? undefined : value);\r\n    },\r\n    enums: function(value, defaultValue, values) {\r\n        if (typeof value === \"string\")\r\n            return values[value];\r\n        return value | 0;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned) {\r\n        if (typeof value === \"string\")\r\n            return util.Long.fromString(value, unsigned);\r\n        if (typeof value === \"number\")\r\n            return util.Long.fromNumber(value, unsigned);\r\n        return value;\r\n    },\r\n    bytes: function(value/*, defaultValue*/) {\r\n        if (util.Buffer)\r\n            return util.Buffer.isBuffer(value)\r\n                ? value\r\n                : util.Buffer.from(value, \"base64\"); // polyfilled\r\n        if (typeof value === \"string\") {\r\n            var buf = util.newBuffer(util.base64.length(value));\r\n            util.base64.decode(value, buf, 0);\r\n            return buf;\r\n        }\r\n        return value instanceof util.Array\r\n            ? value\r\n            : new util.Array(value);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.ctor)\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packed\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(32),\r\n    util     = require(33);\r\n\r\nfunction genEncodeType(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var oneofs = mtype.oneofsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(%s&&%s!==util.emptyObject){\", ref, ref)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length){\", ref, ref)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s){\", ref)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genEncodeType(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&util.longNe(%s,%d,%d))\", ref, ref, ref, field.defaultValue.low, field.defaultValue.high);\r\n                else if (field.bytes) gen\r\n    (\"if(%s&&%s.length\" + (field.defaultValue.length ? \"&&util.arrayNe(%s,%j)\" : \"\") + \")\", ref, ref, ref, Array.prototype.slice.call(field.defaultValue));\r\n                else gen\r\n    (\"if(%s!==undefined&&%s!==%j)\", ref, ref, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genEncodeType(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i];\r\n        gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        var oneofFields = oneof.fieldsArray;\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType === undefined)\r\n                genEncodeType(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    var self = this;\r\n    Object.keys(values || {}).forEach(function(key) {\r\n        var val;\r\n        if (typeof values[key] === \"number\")\r\n            val = values[key];\r\n        else {\r\n            val = parseInt(key, 10);\r\n            key = values[key];\r\n        }\r\n        self.valuesById[self.values[key] = val] = key;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(15),\r\n    types     = require(32),\r\n    util      = require(33);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nObject.defineProperties(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: function() {\r\n            // defaults to packed=true if not explicity set to false\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(17);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        if (!Type)\r\n            Type = require(31);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            typeDefault = 0;\r\n        /* istanbul ignore next */\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved, determine the default value\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else {\r\n        if (this.options && this.options[\"default\"] !== undefined) {\r\n            this.defaultValue = this.options[\"default\"];\r\n            if (this.resolvedType instanceof Enum && typeof this.defaultValue === \"string\")\r\n                this.defaultValue = this.resolvedType.values[this.defaultValue] || 0;\r\n        } else\r\n            this.defaultValue = typeDefault;\r\n\r\n        if (this.long) {\r\n            this.defaultValue = util.Long.fromNumber(this.defaultValue, this.type.charAt(0) === \"u\");\r\n            if (Object.freeze)\r\n                Object.freeze(this.defaultValue); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n        } else if (this.bytes && typeof this.defaultValue === \"string\") {\r\n            var buf;\r\n            if (util.base64.test(this.defaultValue))\r\n                util.base64.decode(this.defaultValue, buf = util.newBuffer(util.base64.length(this.defaultValue)), 0);\r\n            else\r\n                util.utf8.write(this.defaultValue, buf = util.newBuffer(util.utf8.length(this.defaultValue)), 0);\r\n            this.defaultValue = buf;\r\n        }\r\n    }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(16);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar converters = require(12);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {JSONConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    return this.$type.convert(this, converters.json, options);\r\n};\r\n\r\n/**\r\n * Creates a message from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Options\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = function from(object, options) {\r\n    return this.$type.convert(object, converters.message, options);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Converts an object or runtime message of this type.\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\nMessage.convert = function convert(source, impl, options) {\r\n    return this.$type.convert(source, impl, options);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(31),\r\n    util = require(33);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(15),\r\n    Field   = require(16),\r\n    util    = require(33);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(31);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(29);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\nObject.defineProperties(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName + \" must be JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object must be \" + nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object must be an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            /* istanbul ignore next */\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(31);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(29);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.nestedArray;\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name Namespace#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(31);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(29);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(33);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(21);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(16);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(OneOfPrototype, \"fieldsArray\", {\r\n    get: function() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize  = require(30),\r\n    Root      = require(26),\r\n    Type      = require(31),\r\n    Field     = require(16),\r\n    MapField  = require(17),\r\n    OneOf     = require(22),\r\n    Enum      = require(15),\r\n    Service   = require(29),\r\n    Method    = require(19),\r\n    types     = require(32),\r\n    util      = require(33);\r\n\r\nfunction isName(token) {\r\n    return /^[a-zA-Z_][a-zA-Z_0-9]*$/.test(token);\r\n}\r\n\r\nfunction isTypeRef(token) {\r\n    return /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction isFqTypeRef(token) {\r\n    return /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object.<string,*>}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object.<string,*>}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        root = new Root();\r\n        options = root || {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : camelCase;\r\n\r\n    function illegal(token, name) {\r\n        var filename = parse.filename;\r\n        parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && isTypeRef(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"max\": return 536870911;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!isTypeRef(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        isProto3 = syntax === \"proto3\";\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    default:\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (lower(type) === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        if (!isTypeRef(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable.\r\n        if (field.repeated && types.packed[type] !== undefined && !isProto3)\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        skip(\"{\");\r\n        while ((token = next()) !== \"}\") {\r\n            switch (token = lower(token)) {\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        }\r\n        skip(\";\", true);\r\n        parent.add(type).add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var enm = new Enum(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.add(name, value);\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (isFqTypeRef(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n\r\n                /* istanbul ignore next */\r\n                if (!isName(token))\r\n                    throw illegal(token, \"name\");\r\n\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(reference))\r\n            throw illegal(reference, \"reference\");\r\n\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {ParserResult} Parser result\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(37);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(25);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\nvar Reader = require(24);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(20);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(16),\r\n    util   = require(33);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>|*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    // note that `json` actually must be of type `Object.<string,*>` but TypeScript\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\nvar initParser = function() {\r\n    try { // excluded in noparse builds\r\n        parse  = require(23);\r\n        common = require(10);\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    initParser = null;\r\n};\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (initParser)\r\n        initParser();\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(28);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(33);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(20);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(19),\r\n    util   = require(33),\r\n    rpc    = require(27);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nObject.defineProperties(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.methodsArray.forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n\r\n            /* istanbul ignore next */\r\n            if (!request)\r\n                throw TypeError(\"request must not be null\");\r\n\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object.<string,*>} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n/**/\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type;\r\n\r\nvar Namespace = require(20);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(22),\r\n    Field     = require(16),\r\n    Service   = require(29),\r\n    Class     = require(9),\r\n    Message   = require(18),\r\n    Reader    = require(24),\r\n    Writer    = require(39),\r\n    util      = require(33),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(38),\r\n    converter = require(11);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.fieldsArray.filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Conversion options\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.from = function from(object, options) {\r\n    return this.convert(object, converter.message, options);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = this.fieldsArray.map(function(fld) { return fld.resolve().resolvedType; });\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.convert = converter(this).eof(fullName + \"$convert\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Converts an object or runtime message.\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\nTypePrototype.convert = function convert_setup(source, impl, options) {\r\n    return this.setup().convert(source, impl, options); // overrides this method\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(33);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(37);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(35);\r\nutil.EventEmitter = require(2);\r\nutil.extend       = require(3);\r\nutil.fetch        = require(4);\r\nutil.path         = require(6);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    return object ? Object.values ? Object.values(object) : Object.keys(object).map(function(key) {\r\n        return object[key];\r\n    }) : [];\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"./base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    /* istanbul ignore next */\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n\r\n/**\r\n * Tests if two arrays are not equal.\r\n * @param {Array.<*>} a Array 1\r\n * @param {Array.<*>} b Array 2\r\n * @returns {boolean} `true` if not equal, otherwise `false`\r\n */\r\nutil.arrayNe = function arrayNe(a, b) {\r\n    if (a.length === b.length)\r\n        for (var i = 0; i < a.length; ++i)\r\n            if (a[i] !== b[i])\r\n                return true;\r\n    return false;\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(33);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.fullName.substring(1) + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e;\")\r\n            (\"if(e=types[%d].verify(%s))\", fieldIndex, ref)\r\n                (\"return e\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(37);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(40);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset()\r\n        .uint32(len)\r\n        .tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\nvar Writer = require(39);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(37);\r\n\r\nvar utf8   = util.utf8,\r\n    Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        val.copy(buf, pos, 0, val.length);\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser (if not excluded)\r\ntry {\r\n    protobuf.tokenize     = require(\"./tokenize\");\r\n    protobuf.parse        = require(\"./parse\");\r\n    protobuf.common       = require(\"./common\");\r\n} catch (e) {} // eslint-disable-line no-empty\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = require(\"./writer_buffer\");\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = require(\"./reader_buffer\");\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n/* istanbul ignore next */\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}