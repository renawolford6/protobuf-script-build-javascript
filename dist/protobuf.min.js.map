{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/converter.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/index-light.js","src/index-minimal.js","src/index","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/minimal.js","src/verifier.js","src/writer.js","src/writer_buffer.js"],"names":["global","undefined","e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","ctor","Type","TypeError","util","Message","constructor","merge","$type","fieldsArray","_fieldsArray","isArray","defaultValue","emptyArray","isObject","long","emptyObject","ctorProperties","oneofsArray","_oneofsArray","get","oneOfGetter","oneof","set","oneOfSetter","defineProperties","create","common","json","nested","google","protobuf","Any","fields","type_url","id","value","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","genValuePartial_fromObject","field","fieldIndex","prop","resolvedType","Enum","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","safeProp","toObject","repeatedFields","mapFields","otherFields","valuesById","low","high","unsigned","toNumber","bytes","decoder","group","ref","types","basic","compat","packed","genTypePartial","encoder","partOf","wireType","mapKey","required","indexOf","options","ReflectionObject","comments","className","testJSON","fromJSON","toJSON","add","comment","isString","isInteger","remove","val","Field","extend","toLowerCase","optional","message","Long","extensionField","declaringField","_packed","MapField","defineProperty","getOption","setOption","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","load","filename","root","Root","loadSync","build","verifier","Namespace","OneOf","Service","Method","configure","Reader","_configure","roots","Writer","BufferWriter","BufferReader","rpc","define","amd","tokenize","parse","resolvedKeyType","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","arrayToJSON","array","obj","_nestedArray","clearCache","namespace","initNestedTypes","methods","addJSON","toArray","nestedArray","nestedJson","ns","names","getEnum","setOptions","onAdd","onRemove","ptr","part","resolveAll","filterType","parentAlreadyChecked","found","lookupType","lookupService","lookupEnum","unshift","_handleAdd","_handleRemove","toString","fieldNames","addFieldsToParent","index","self","isName","token","isTypeRef","isFqTypeRef","lower","camelCase","substring","toUpperCase","illegal","tn","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","readRange","parseId","sign","tokenLower","Infinity","NaN","parseInt","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","cmnt","parseMapField","parseField","parseOneOf","extensions","reserved","parseGroup","applyCase","trailingLine","parseInlineOptions","fieldName","lcFirst","ucFirst","valueType","enm","parseEnumValue","custom","parseOptionValue","service","parseMethod","method","reference","head","keepCase","package","indexOutOfRange","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","int64","uint64","sint64","fixed64","sfixed64","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","exponent","mantissa","pow","float","readDouble","Float64Array","f64","double","skipType","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","resolvePath","finish","cb","sync","process","parsed","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","isNode","exposeRe","newDeferred","_parse","_common","rpcImpl","requestDelimited","responseDelimited","rpcCall","requestCtor","responseCtor","request","response","endedByRPC","_methodsArray","inherited","methodsArray","rpcService","m","q","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","setComment","commentType","commentLine","lines","trim","commentText","stack","repeat","curr","isComment","delimRe","delim","expected","actual","equals","ret","0","_fieldsById","_ctor","fieldsById","filter","setup","fork","ldelim","bake","zero","zzEncode","zeroHash","fromString","fromHash","hash","toHash","mask","part0","part1","part2","versions","node","Number","isFinite","utf8Write","encoding","allocUnsafe","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","dst","fieldMap","lazyResolve","lazyTypes","longs","enums","invalid","genVerifyValue","genVerifyKey","Op","noop","State","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(6);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted\r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(21),\r\n    util    = require(36);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction Class(type, ctor) {\r\n    if (!Type)\r\n        Type = require(34);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        // create named constructor functions (codegen is required anyway)\r\n        ctor = util.codegen(\"p\")(\"return c.call(this,p)\").eof(type.name, {\r\n            c: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    (ctor.prototype = new Message()).constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    ctor.prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    var i = 0;\r\n    for (; i < /* initializes */ type.fieldsArray.length; ++i) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        ctor.prototype[type._fieldsArray[i].name] = Array.isArray(type._fieldsArray[i].resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(type._fieldsArray[i].defaultValue) && !type._fieldsArray[i].long\r\n              ? util.emptyObject\r\n              : type._fieldsArray[i].defaultValue;\r\n    }\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    var ctorProperties = {};\r\n    for (i = 0; i < /* initializes */ type.oneofsArray.length; ++i)\r\n        ctorProperties[type._oneofsArray[i].resolve().name] = {\r\n            get: util.oneOfGetter(type._oneofsArray[i].oneof),\r\n            set: util.oneOfSetter(type._oneofsArray[i].oneof)\r\n        };\r\n    if (i)\r\n        Object.defineProperties(ctor.prototype, ctorProperties);\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return ctor.prototype;\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @function\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = Class;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object.<string,*>} google/protobuf/any.proto Any\r\n * @property {Object.<string,*>} google/protobuf/duration.proto Duration\r\n * @property {Object.<string,*>} google/protobuf/empty.proto Empty\r\n * @property {Object.<string,*>} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object.<string,*>} google/protobuf/timestamp.proto Timestamp\r\n * @property {Object.<string,*>} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n * \r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/field_mask.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(15),\r\n    util = require(36);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low,d%s.high).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low,m%s.high).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        otherFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (fields[i].resolve().repeated)\r\n            repeatedFields.push(fields[i]);\r\n        else if (fields[i].map)\r\n            mapFields.push(fields[i]);\r\n        else\r\n            otherFields.push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0, field; i < otherFields.length; ++i) {\r\n            var field = otherFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    for (i = 0, field; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m%s!==undefined&&m%s!==null&&m.hasOwnProperty(%j)){\", prop, prop, field.name);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, i, prop);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(35),\r\n    util    = require(36);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(35),\r\n    util     = require(36);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray,\r\n        oneofs = mtype.oneofsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve();\r\n        if (field.partOf) // see below for oneofs\r\n            continue;\r\n        var type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length&&m.hasOwnProperty(%j)){\", ref, ref, field.name)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n                else if (field.bytes) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j))\", ref, field.name);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i]; gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        for (var j = 0; j < /* initializes */ oneof.fieldsArray.length; ++j) {\r\n            var field    = oneof._fieldsArray[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name); gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n    \r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id\");\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    this.comments[name] = comment || null;\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(15),\r\n    types = require(35),\r\n    util  = require(36);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(20);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n\r\n        /* istanbul ignore if */\r\n        if (!Type)\r\n            Type = require(34);\r\n\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(18);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(14);\r\nprotobuf.decoder          = require(13);\r\nprotobuf.verifier         = require(39);\r\nprotobuf.converter        = require(12);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(24);\r\nprotobuf.Namespace        = require(23);\r\nprotobuf.Root             = require(29);\r\nprotobuf.Enum             = require(15);\r\nprotobuf.Type             = require(34);\r\nprotobuf.Field            = require(16);\r\nprotobuf.OneOf            = require(25);\r\nprotobuf.MapField         = require(20);\r\nprotobuf.Service          = require(32);\r\nprotobuf.Method           = require(22);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(10);\r\nprotobuf.Message          = require(21);\r\n\r\n// Utility\r\nprotobuf.types            = require(35);\r\nprotobuf.util             = require(36);\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n * \r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n * \r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(40);\r\nprotobuf.BufferWriter = require(41);\r\nprotobuf.Reader       = require(27);\r\nprotobuf.BufferReader = require(28);\r\n\r\n// Utility\r\nprotobuf.util         = require(38);\r\nprotobuf.rpc          = require(30);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n// assumes that loading \"long\" / define itself is asynchronous so that other builds can safely\r\n// continue populating `protobuf`. will see a BOOM eventually if this assumption is wrong:\r\n/* istanbul ignore next */\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"full\";\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(33);\r\nprotobuf.parse            = require(26);\r\nprotobuf.common           = require(11);\r\n\r\nprotobuf.Root._configure(protobuf.parse, protobuf.common);\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(16);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(35),\r\n    util    = require(36);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar Type = require(34),\r\n    util = require(36);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n    /* istanbul ignore if */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore if */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum    = require(15),\r\n    Field   = require(16),\r\n    util    = require(36);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar initNestedTypes = function() {\r\n    Type    = require(34);\r\n    Service = require(32);\r\n    initNestedTypes = null;\r\n};\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @memberof Namespace\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        if (initNestedTypes)\r\n            initNestedTypes();\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i)\r\n            ns.add( // most to least likely\r\n                ( Type.testJSON(nested = nestedJson[names[i]])\r\n                ? Type.fromJSON\r\n                : Enum.testJSON(nested)\r\n                ? Enum.fromJSON\r\n                : Service.testJSON(nested)\r\n                ? Service.fromJSON\r\n                : Field.testJSON(nested) // only valid is an extension field\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (initNestedTypes)\r\n        initNestedTypes();\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterType || found instanceof filterType)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (initNestedTypes)\r\n        initNestedTypes();\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (initNestedTypes)\r\n        initNestedTypes();\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(36);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(29);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Root)\r\n        Root = require(29);\r\n\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Root)\r\n        Root = require(29);\r\n\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(16);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(OneOf.prototype, \"fieldsArray\", {\r\n    get: function() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof._fieldsArray.length; ++i)\r\n            if (!oneof._fieldsArray[i].parent)\r\n                oneof.parent.add(oneof._fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this._fieldsArray.length; ++i)\r\n        if ((field = this._fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(33),\r\n    Root      = require(29),\r\n    Type      = require(34),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    OneOf     = require(25),\r\n    Enum      = require(15),\r\n    Service   = require(32),\r\n    Method    = require(22),\r\n    types     = require(35),\r\n    util      = require(36);\r\n\r\nfunction isName(token) {\r\n    return /^[a-zA-Z_][a-zA-Z_0-9]*$/.test(token);\r\n}\r\n\r\nfunction isTypeRef(token) {\r\n    return /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction isFqTypeRef(token) {\r\n    return /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object.<string,*>}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object.<string,*>}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name) {\r\n        var filename = parse.filename;\r\n        parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        /* istanbul ignore next */\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && isTypeRef(token))\r\n                return token;\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"max\": return 536870911;\r\n            case \"0\": return 0;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        /* istanbul ignore else */\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        /* istanbul ignore next */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        isProto3 = syntax === \"proto3\";\r\n        /* istanbul ignore next */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        type.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var field = new Field(name, parseId(next()), type, rule, extend),\r\n            trailingLine = tn.line();\r\n        field.comment = cmnt();\r\n        parseInlineOptions(field);\r\n        if (!field.comment)\r\n            field.comment = cmnt(trailingLine);\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable.\r\n        if (field.repeated && types.packed[type] !== undefined && !isProto3)\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        type.comment = cmnt();\r\n        var field = new Field(fieldName, id, name, rule);\r\n        skip(\"{\");\r\n        while ((token = next()) !== \"}\") {\r\n            switch (token = lower(token)) {\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        }\r\n        skip(\";\", true);\r\n        parent.add(type).add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var field = new MapField(name, parseId(next()), keyType, valueType),\r\n            trailingLine = tn.line();\r\n        field.comment = cmnt();\r\n        parseInlineOptions(field);\r\n        if (!field.comment)\r\n            field.comment = cmnt(trailingLine);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        var oneof = new OneOf(name),\r\n            trailingLine = tn.line();\r\n        oneof.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else {\r\n            skip(\";\");\r\n            if (!oneof.comment)\r\n                oneof.comment = cmnt(trailingLine);\r\n        }\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var enm = new Enum(name);\r\n        enm.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumValue(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            trailingLine = tn.line();\r\n        parent.add(name, value, cmnt());\r\n        parseInlineOptions({}); // skips enum value options\r\n        if (!parent.comments[name])\r\n            parent.comments[name] = cmnt(trailingLine);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (isFqTypeRef(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\r\n            /* istanbul ignore next */\r\n            do {\r\n                if (!isName(token = next()))\r\n                    throw illegal(token, \"name\");\r\n                if (peek() === \"{\")\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n                else {\r\n                    skip(\":\");\r\n                    setOption(parent, name + \".\" + token, readValue(true));\r\n                }\r\n            } while (!skip(\"}\", true));\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var name = token;\r\n        var service = new Service(name);\r\n        service.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream),\r\n            trailingLine = tn.line();\r\n        method.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else {\r\n            skip(\";\");\r\n            if (!method.comment)\r\n                method.comment = cmnt(trailingLine);\r\n        }\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(reference))\r\n            throw illegal(reference, \"reference\");\r\n\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(38);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        /* istanbul ignore next */\r\n        if (!BufferReader)\r\n            BufferReader = require(28);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        Reader.prototype.int64 = read_int64_long;\r\n        Reader.prototype.uint64 = read_uint64_long;\r\n        Reader.prototype.sint64 = read_sint64_long;\r\n        Reader.prototype.fixed64 = read_fixed64_long;\r\n        Reader.prototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        Reader.prototype.int64 = read_int64_number;\r\n        Reader.prototype.uint64 = read_uint64_number;\r\n        Reader.prototype.sint64 = read_sint64_number;\r\n        Reader.prototype.fixed64 = read_fixed64_number;\r\n        Reader.prototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(27);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(38);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(16),\r\n    Enum    = require(15),\r\n    util    = require(36);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @function\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nRoot.testJSON = Namespace.testJSON;\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore next */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        fetch(self.resolvePath(filename, parsed.imports[i]));\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        fetch(self.resolvePath(filename, parsed.weakImports[i]), true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore next */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued)\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0; i < filename.length; ++i)\r\n        fetch(self.resolvePath(\"\", filename[i]));\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field) {\r\n        if (object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n            this.deferred.push(object);\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    } else if (object instanceof Enum && exposeRe.test(object.name))\r\n        object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            /* istanbul ignore else */\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n    } else if (object instanceof Enum && exposeRe.test(object.name))\r\n        delete object.parent[object.name]; // unexpose enum values\r\n};\r\n\r\nRoot._configure = function(_parse, _common) {\r\n    parse = _parse;\r\n    common = _common;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(31);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(38);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n * \r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of an {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n * \r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(\"error\", err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(22),\r\n    util   = require(36),\r\n    rpc    = require(30);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return Namespace.prototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst(this._methodsArray[i].resolve().name)] = util.codegen(\"r\",\"c\")(\"return this.rpcCall(m,q,s,r,c)\").eof(util.lcFirst(this._methodsArray[i].name), {\r\n            m: this._methodsArray[i],\r\n            q: this._methodsArray[i].resolvedRequestType.ctor,\r\n            s: this._methodsArray[i].resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @ignore\r\n */\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            default:\r\n                return unescape.map[$1] || \"\";\r\n        }\r\n    });\r\n}\r\n\r\nunescape.map = {\r\n    \"0\": \"\\0\",\r\n    \"r\": \"\\r\",\r\n    \"n\": \"\\n\",\r\n    \"t\": \"\\t\"\r\n};\r\n\r\ntokenize.unescape = unescape;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object.<string,*>} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {function(number=):?string} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n * @property {function(string):string} unescape Unescapes a string\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        var lines = source\r\n            .substring(start, end)\r\n            .split(/\\n/g);\r\n        for (var i = 0; i < lines.length; ++i)\r\n            lines[i] = lines[i].replace(/ *[*/]+ */, \"\").trim();\r\n        commentText = lines\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isComment;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    isComment = charAt(start = offset + 1) === \"/\";\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 1);\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    isComment = charAt(start = offset + 1) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            throw illegal(\"comment\");\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 2);\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        // offset !== length if we got here\r\n\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        line: function() {\r\n            return line;\r\n        },\r\n        cmnt: function(trailingLine) {\r\n            var ret;\r\n            if (trailingLine === undefined)\r\n                ret = commentLine === line - 1 && commentText || null;\r\n            else {\r\n                if (!commentText)\r\n                    peek();\r\n                ret = commentLine === trailingLine && commentType === \"/\" && commentText || null;\r\n            }\r\n            if (ret) {\r\n                commentType = commentText = null;\r\n                commentLine = 0;\r\n            }\r\n            return ret;\r\n        }\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(25),\r\n    Field     = require(16),\r\n    Service   = require(32),\r\n    Class     = require(10),\r\n    Message   = require(21),\r\n    Reader    = require(27),\r\n    Writer    = require(40),\r\n    util      = require(36),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(39),\r\n    converter = require(12);\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(Field.fromJSON(names[i], json.fields[names[i]]));\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( Field.testJSON(nested)\r\n                ? Field.fromJSON\r\n                : Type.testJSON(nested)\r\n                ? Type.fromJSON\r\n                : Enum.testJSON(nested)\r\n                ? Enum.fromJSON\r\n                : Service.testJSON(nested)\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            /* istanbul ignore next */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return Namespace.prototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        /* istanbul ignore next */\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        /* istanbul ignore next */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        /* istanbul ignore next */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.from = Type.prototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(36);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(38);\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(7);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(38);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\nutil.asPromise    = require(1);\r\nutil.base64       = require(2);\r\nutil.EventEmitter = require(4);\r\nutil.inquire      = require(6);\r\nutil.utf8         = require(9);\r\nutil.pool         = require(8);\r\nutil.LongBits     = require(37);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {};\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util.Buffer.allocUnsafe(sizeOrArray) // polyfilled\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util.Buffer.from(sizeOrArray) // polyfilled\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(36);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9][0-9]*)$/.test(%s))\", ref) // it's important not to use any literals here that might be confused with short variable names by pbjs' beautify\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(38);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        /* istanbul ignore next */\r\n        if (!BufferWriter)\r\n            BufferWriter = require(41);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (typeof value === \"string\") {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(40);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(38);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n"],"sourceRoot":"."}