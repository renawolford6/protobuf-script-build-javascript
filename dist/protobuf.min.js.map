{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/converter.js","src/converters.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/codegen/index.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/writer_buffer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","undefined","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","keys","Object","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","replace","isAbsolute","test","normalize","parts","split","absolute","prefix","shift","join","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","Type","TypeError","MessageCtor","properties","Message","util","merge","$type","getFieldsArray","forEach","field","name","isArray","defaultValue","emptyArray","isObject","long","emptyObject","getOneofsArray","oneof","prop","get","indexOf","set","value","setCtor","_TypeError","common","json","nested","google","protobuf","Any","fields","type_url","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","genConvert","fieldIndex","resolvedType","Enum","sprintf","converter","mtype","gen","codegen","convert","safeProp","repeated","converters","typeOrCtor","options","fieldsOnly","enums","defaults","longs","defaultLow","defaultHigh","unsigned","longNe","low","high","Number","LongBits","from","toNumber","Long","fromNumber","toString","fromValue","bytes","Buffer","isBuffer","message","getCtor","fromString","newBuffer","decoder","group","ref","map","resolvedKeyType","types","basic","packed","genEncodeType","encoder","wireType","mapKey","partOf","required","ucName","oneofFields","ReflectionObject","valuesById","self","key","val","parseInt","EnumPrototype","className","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","toLowerCase","optional","extensionField","declaringField","_packed","FieldPrototype","MapField","props","isPacked","getOption","setOption","ifNotSet","resolved","typeDefault","parent","lookup","freeze","MapFieldPrototype","MessagePrototype","asJSON","object","writer","encodeDelimited","readerOrBuffer","decodeDelimited","verify","source","impl","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","_nestedArray","_clearProperties","clearCache","namespace","arrayToJSON","array","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","getEnum","prev","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","getRoot","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucFirst","_fieldsArray","addFieldsToParent","OneOfPrototype","index","fieldName","isName","token","isTypeRef","isFqTypeRef","lower","camelCase","str","substring","$0","$1","toUpperCase","parse","illegal","filename","tn","line","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","readRange","parseId","sign","tokenLower","Infinity","NaN","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","parseMapField","parseField","parseOneOf","extensions","reserved","parseGroup","applyCase","parseInlineOptions","lcFirst","valueType","enm","parseEnumField","custom","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","keepCase","package","indexOutOfRange","reader","writeLength","RangeError","pos","Reader","readLongVarint","bits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","BufferReader","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","exponent","mantissa","pow","float","readDouble","Float64Array","f64","double","skipType","_configure","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","initParser","load","finish","cb","process","JSON","parsed","sync","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","methodsArray","methodName","inherited","getMethodsArray","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","stack","repeat","curr","delimRe","delim","expected","actual","equals","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","Writer","verifier","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","oneOfName","getFieldsById","setup","fld","eof","fork","ldelim","bake","description","dst","src","allocUnsafe","level","indent","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","scope","verbose","console","log","Function","concat","format","arg","stringify","supported","LongBitsPrototype","zero","zzEncode","zeroHash","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","isIE8","utf8Write","encoding","dcodeIO","isFinite","floor","longToHash","longFromHash","fromBits","target","descriptors","descriptor","ucKey","defineProperty","invalid","genVerifyValue","genVerifyKey","Op","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength","roots","amd"],"mappings":";;;;;;CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCAA,YAWA,SAAAK,GAAAC,EAAAC,GAEA,IAAA,GADAC,MACAb,EAAA,EAAAA,EAAAc,UAAAP,QACAM,EAAAE,KAAAD,UAAAd,KACA,IAAAgB,IAAA,CACA,OAAA,IAAAC,SAAA,SAAAC,EAAAC,GACAN,EAAAE,KAAA,SAAAK,GACA,GAAAJ,EAEA,GADAA,GAAA,EACAI,EACAD,EAAAC,OACA,CAEA,IAAA,GADAC,MACArB,EAAA,EAAAA,EAAAc,UAAAP,QACAc,EAAAN,KAAAD,UAAAd,KACAkB,GAAAI,MAAA,KAAAD,KAIA,KACAV,EAAAW,MAAAV,GAAAW,KAAAV,GACA,MAAAO,GACAJ,IACAA,GAAA,EACAG,EAAAC,OAlCAX,EAAAJ,QAAAK,0BCDA,YAOA,IAAAc,GAAAnB,CAOAmB,GAAAjB,OAAA,SAAAkB,GACA,GAAAC,GAAAD,EAAAlB,MACA,KAAAmB,EACA,MAAA,EAEA,KADA,GAAAjC,GAAA,IACAiC,EAAA,EAAA,GAAA,MAAAD,EAAAE,OAAAD,MACAjC,CACA,OAAAmC,MAAAC,KAAA,EAAAJ,EAAAlB,QAAA,EAAAd,EAUA,KAAA,GANAqC,GAAA,GAAAC,OAAA,IAGAC,EAAA,GAAAD,OAAA,KAGA/B,EAAA,EAAAA,EAAA,IACAgC,EAAAF,EAAA9B,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,EAAAA,EAAA,GAAA,IAAAA,GASAwB,GAAAS,OAAA,SAAAC,EAAAC,EAAAC,GAKA,IAJA,GAGA5C,GAHAiC,KACAzB,EAAA,EACAqC,EAAA,EAEAF,EAAAC,GAAA,CACA,GAAAE,GAAAJ,EAAAC,IACA,QAAAE,GACA,IAAA,GACAZ,EAAAzB,KAAA8B,EAAAQ,GAAA,GACA9C,GAAA,EAAA8C,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAZ,EAAAzB,KAAA8B,EAAAtC,EAAA8C,GAAA,GACA9C,GAAA,GAAA8C,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAZ,EAAAzB,KAAA8B,EAAAtC,EAAA8C,GAAA,GACAb,EAAAzB,KAAA8B,EAAA,GAAAQ,GACAD,EAAA,GAUA,MANAA,KACAZ,EAAAzB,KAAA8B,EAAAtC,GACAiC,EAAAzB,GAAA,GACA,IAAAqC,IACAZ,EAAAzB,EAAA,GAAA,KAEAuC,OAAAC,aAAAlB,MAAAiB,OAAAd,GAGA,IAAAgB,GAAA,kBAUAjB,GAAAkB,OAAA,SAAAjB,EAAAS,EAAAS,GAIA,IAAA,GADAnD,GAFA2C,EAAAQ,EACAN,EAAA,EAEArC,EAAA,EAAAA,EAAAyB,EAAAlB,QAAA,CACA,GAAAqC,GAAAnB,EAAAoB,WAAA7C,IACA,IAAA,KAAA4C,GAAAP,EAAA,EACA,KACA,IAAAS,UAAAF,EAAAZ,EAAAY,IACA,KAAA1C,OAAAuC,EACA,QAAAJ,GACA,IAAA,GACA7C,EAAAoD,EACAP,EAAA,CACA,MACA,KAAA,GACAH,EAAAS,KAAAnD,GAAA,GAAA,GAAAoD,IAAA,EACApD,EAAAoD,EACAP,EAAA,CACA,MACA,KAAA,GACAH,EAAAS,MAAA,GAAAnD,IAAA,GAAA,GAAAoD,IAAA,EACApD,EAAAoD,EACAP,EAAA,CACA,MACA,KAAA,GACAH,EAAAS,MAAA,EAAAnD,IAAA,EAAAoD,EACAP,EAAA,GAIA,GAAA,IAAAA,EACA,KAAAnC,OAAAuC,EACA,OAAAE,GAAAR,2BCtHA,YASA,SAAAY,KAOAxB,KAAAyB,KAfAvC,EAAAJ,QAAA0C,CAmBA,IAAAE,GAAAF,EAAAG,SASAD,GAAAE,GAAA,SAAAC,EAAAzC,EAAAC,GAKA,OAJAW,KAAAyB,EAAAI,KAAA7B,KAAAyB,EAAAI,QAAArC,MACAJ,GAAAA,EACAC,IAAAA,GAAAW,OAEAA,MASA0B,EAAAI,IAAA,SAAAD,EAAAzC,GACA,GAAAmC,SAAAM,EACA7B,KAAAyB,SAEA,IAAAF,SAAAnC,EACAY,KAAAyB,EAAAI,UAGA,KAAA,GADAE,GAAA/B,KAAAyB,EAAAI,GACApD,EAAA,EAAAA,EAAAsD,EAAA/C,QACA+C,EAAAtD,GAAAW,KAAAA,EACA2C,EAAAC,OAAAvD,EAAA,KAEAA,CAGA,OAAAuB,OASA0B,EAAAO,KAAA,SAAAJ,GACA,GAAAE,GAAA/B,KAAAyB,EAAAI,EACA,IAAAE,EAAA,CAGA,IAFA,GAAAjC,MACArB,EAAA,EACAA,EAAAc,UAAAP,QACAc,EAAAN,KAAAD,UAAAd,KACA,KAAAA,EAAA,EAAAA,EAAAsD,EAAA/C,QACA+C,EAAAtD,GAAAW,GAAAW,MAAAgC,EAAAtD,KAAAY,IAAAS,GAEA,MAAAE,+BC7EA,YAUA,SAAAkC,GAAAC,GAGA,IAAA,GADAC,GAAAC,OAAAD,KAAApC,MACAvB,EAAA,EAAAA,EAAA2D,EAAApD,SAAAP,EACA0D,EAAAC,EAAA3D,IAAAuB,KAAAoC,EAAA3D,GAEA,IAAAkD,GAAAQ,EAAAR,UAAAU,OAAAC,OAAAtC,KAAA2B,UAEA,OADAA,GAAAY,YAAAJ,EACAR,EAjBAzC,EAAAJ,QAAAoD,0BCDA,YAwBA,SAAAM,GAAAC,EAAAC,GACA,MAAAA,GAEAC,GAAAA,EAAAC,SACAD,EAAAC,SAAAH,EAAA,OAAA,SAAA5C,EAAAgD,GACA,MAAAhD,IAAA,mBAAAiD,gBACAC,EAAAN,EAAAC,GACAA,EAAA7C,EAAAgD,KAEAE,EAAAN,EAAAC,GAPAvD,EAAAqD,EAAAxC,KAAAyC,GAUA,QAAAM,GAAAN,EAAAC,GACA,GAAAM,GAAA,GAAAF,eACAE,GAAAC,mBAAA,WACA,MAAA,KAAAD,EAAAE,WACA,IAAAF,EAAAG,QAAA,MAAAH,EAAAG,OACAT,EAAA,KAAAM,EAAAI,cACAV,EAAA/D,MAAA,UAAAqE,EAAAG,SACA5B,QAKAyB,EAAAK,KAAA,MAAAZ,GACAO,EAAAM,OAhDApE,EAAAJ,QAAA0D,CAEA,IAAArD,GAAAX,EAAA,GACA+E,EAAA/E,EAAA,GAEAmE,EAAAY,EAAA,sDCNA,YASA,SAAAA,SAAAC,YACA,IACA,GAAAC,KAAAC,KAAA,QAAAC,QAAA,IAAA,OAAAH,WACA,IAAAC,MAAAA,IAAAzE,QAAAqD,OAAAD,KAAAqB,KAAAzE,QACA,MAAAyE,KACA,MAAAzF,IACA,MAAA,MAdAkB,OAAAJ,QAAAyE,gCCDA,YAOA,IAAAd,GAAA3D,EAEA8E,EAMAnB,EAAAmB,WAAA,SAAAnB,GACA,MAAA,eAAAoB,KAAApB,IAGAqB,EAMArB,EAAAqB,UAAA,SAAArB,GACAA,EAAAA,EAAAkB,QAAA,MAAA,KACAA,QAAA,UAAA,IACA,IAAAI,GAAAtB,EAAAuB,MAAA,KACAC,EAAAL,EAAAnB,GACAyB,EAAA,EACAD,KACAC,EAAAH,EAAAI,QAAA,IACA,KAAA,GAAA1F,GAAA,EAAAA,EAAAsF,EAAA/E,QACA,OAAA+E,EAAAtF,GACAA,EAAA,EACAsF,EAAA/B,SAAAvD,EAAA,GACAwF,EACAF,EAAA/B,OAAAvD,EAAA,KAEAA,EACA,MAAAsF,EAAAtF,GACAsF,EAAA/B,OAAAvD,EAAA,KAEAA,CAEA,OAAAyF,GAAAH,EAAAK,KAAA,KAUA3B,GAAA9C,QAAA,SAAA0E,EAAAC,EAAAC,GAGA,MAFAA,KACAD,EAAAR,EAAAQ,IACAV,EAAAU,GACAA,GACAC,IACAF,EAAAP,EAAAO,KACAA,EAAAA,EAAAV,QAAA,kBAAA,KAAA3E,OAAA8E,EAAAO,EAAA,IAAAC,GAAAA,4BC/DA,YA8BA,SAAAE,GAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAD,GAAA,KACAE,EAAAD,IAAA,EACAE,EAAA,KACA1D,EAAAwD,CACA,OAAA,UAAAD,GACA,GAAAA,EAAA,GAAAA,EAAAE,EACA,MAAAJ,GAAAE,EACAvD,GAAAuD,EAAAC,IACAE,EAAAL,EAAAG,GACAxD,EAAA,EAEA,IAAA2D,GAAAL,EAAA3F,KAAA+F,EAAA1D,EAAAA,GAAAuD,EAGA,OAFA,GAAAvD,IACAA,GAAA,EAAAA,GAAA,GACA2D,GA5CA7F,EAAAJ,QAAA0F,0BCDA,YAOA,IAAAQ,GAAAlG,CAOAkG,GAAAhG,OAAA,SAAAkB,GAGA,IAAA,GAFA+E,GAAA,EACA5D,EAAA,EACA5C,EAAA,EAAAA,EAAAyB,EAAAlB,SAAAP,EACA4C,EAAAnB,EAAAoB,WAAA7C,GACA4C,EAAA,IACA4D,GAAA,EACA5D,EAAA,KACA4D,GAAA,EACA,SAAA,MAAA5D,IAAA,SAAA,MAAAnB,EAAAoB,WAAA7C,EAAA,OACAA,EACAwG,GAAA,GAEAA,GAAA,CAEA,OAAAA,IAUAD,EAAAE,KAAA,SAAAvE,EAAAC,EAAAC,GACA,GAAAoE,GAAApE,EAAAD,CACA,IAAAqE,EAAA,EACA,MAAA,EAKA,KAJA,GAGAhH,GAHA8F,EAAA,KACAoB,KACA1G,EAAA,EAEAmC,EAAAC,GACA5C,EAAA0C,EAAAC,KACA3C,EAAA,IACAkH,EAAA1G,KAAAR,EACAA,EAAA,KAAAA,EAAA,IACAkH,EAAA1G,MAAA,GAAAR,IAAA,EAAA,GAAA0C,EAAAC,KACA3C,EAAA,KAAAA,EAAA,KACAA,IAAA,EAAAA,IAAA,IAAA,GAAA0C,EAAAC,OAAA,IAAA,GAAAD,EAAAC,OAAA,EAAA,GAAAD,EAAAC,MAAA,MACAuE,EAAA1G,KAAA,OAAAR,GAAA,IACAkH,EAAA1G,KAAA,OAAA,KAAAR,IAEAkH,EAAA1G,MAAA,GAAAR,IAAA,IAAA,GAAA0C,EAAAC,OAAA,EAAA,GAAAD,EAAAC,KACAnC,EAAA,QACAsF,IAAAA,OAAAvE,KAAAwB,OAAAC,aAAAlB,MAAAiB,OAAAmE,IACA1G,EAAA,EAGA,OAAAsF,IACAtF,GACAsF,EAAAvE,KAAAwB,OAAAC,aAAAlB,MAAAiB,OAAAmE,EAAAT,MAAA,EAAAjG,KACAsF,EAAAK,KAAA,KAEA3F,EAAAuC,OAAAC,aAAAlB,MAAAiB,OAAAmE,EAAAT,MAAA,EAAAjG,IAAA,IAUAuG,EAAAI,MAAA,SAAAlF,EAAAS,EAAAS,GAIA,IAAA,GAFAiE,GACAC,EAFA1E,EAAAQ,EAGA3C,EAAA,EAAAA,EAAAyB,EAAAlB,SAAAP,EACA4G,EAAAnF,EAAAoB,WAAA7C,GACA4G,EAAA,IACA1E,EAAAS,KAAAiE,EACAA,EAAA,MACA1E,EAAAS,KAAAiE,GAAA,EAAA,IACA1E,EAAAS,KAAA,GAAAiE,EAAA,KACA,SAAA,MAAAA,IAAA,SAAA,OAAAC,EAAApF,EAAAoB,WAAA7C,EAAA,MACA4G,EAAA,QAAA,KAAAA,IAAA,KAAA,KAAAC,KACA7G,EACAkC,EAAAS,KAAAiE,GAAA,GAAA,IACA1E,EAAAS,KAAAiE,GAAA,GAAA,GAAA,IACA1E,EAAAS,KAAAiE,GAAA,EAAA,GAAA,IACA1E,EAAAS,KAAA,GAAAiE,EAAA,MAEA1E,EAAAS,KAAAiE,GAAA,GAAA,IACA1E,EAAAS,KAAAiE,GAAA,EAAA,GAAA,IACA1E,EAAAS,KAAA,GAAAiE,EAAA,IAGA,OAAAjE,GAAAR,4BCvGA,YAgBA,SAAA2E,GAAAC,GACA,MAAAlD,GAAAkD,GAUA,QAAAlD,GAAAkD,EAAArD,GAKA,GAJAsD,IACAA,EAAAjH,EAAA,OAGAgH,YAAAC,IACA,KAAAC,GAAA,OAAA,SAEA,IAAAvD,GAEA,GAAA,kBAAAA,GACA,KAAAuD,GAAA,OAAA,kBAEAvD,GAAA,SAAAwD,GACA,MAAA,UAAAC,GACAD,EAAA5G,KAAAiB,KAAA4F,KAEAC,EAGA1D,GAAAI,YAAAgD,CAGA,IAAA5D,GAAAQ,EAAAR,UAAA,GAAAkE,EA4CA,OA3CAlE,GAAAY,YAAAJ,EAGA2D,EAAAC,MAAA5D,EAAA0D,GAAA,GAGA1D,EAAA6D,MAAAR,EACA7D,EAAAqE,MAAAR,EAGAA,EAAAS,iBAAAC,QAAA,SAAAC,GAIAxE,EAAAwE,EAAAC,MAAA5F,MAAA6F,QAAAF,EAAAxG,UAAA2G,cACAR,EAAAS,WACAT,EAAAU,SAAAL,EAAAG,gBAAAH,EAAAM,KACAX,EAAAY,YACAP,EAAAG,eAIAd,EAAAmB,iBAAAT,QAAA,SAAAU,GACAd,EAAAe,KAAAlF,EAAAiF,EAAAjH,UAAAyG,MACAU,IAAA,WAEA,IAAA,GAAA1E,GAAAC,OAAAD,KAAApC,MAAAvB,EAAA2D,EAAApD,OAAA,EAAAP,GAAA,IAAAA,EACA,GAAAmI,EAAAA,MAAAG,QAAA3E,EAAA3D,KAAA,EACA,MAAA2D,GAAA3D,IAGAuI,IAAA,SAAAC,GACA,IAAA,GAAA7E,GAAAwE,EAAAA,MAAAnI,EAAA,EAAAA,EAAA2D,EAAApD,SAAAP,EACA2D,EAAA3D,KAAAwI,SACAjH,MAAAoC,EAAA3D,SAOA+G,EAAA0B,QAAA/E,GAEAR,EA7FAzC,EAAAJ,QAAAyG,CAEA,IAGAE,GAHAI,EAAArH,EAAA,IACAsH,EAAAtH,EAAA,IAIAkH,EAAAI,EAAAqB,CAyFA5B,GAAAjD,OAAAA,EAGAiD,EAAA5D,UAAAkE,4CCpGA,YAiBA,SAAAuB,GAAAhB,EAAAiB,GACA,QAAAxD,KAAAuC,KACAA,EAAA,mBAAAA,EAAA,SACAiB,GAAAC,QAAAC,QAAAD,QAAAE,UAAAF,OAAAD,QAEAD,EAAAhB,GAAAiB,EApBAnI,EAAAJ,QAAAsI,EA6BAA,EAAA,OACAK,KACAC,QACAC,UACAnC,KAAA,SACAoC,GAAA,GAEAX,OACAzB,KAAA,QACAoC,GAAA,MAMA,IAAAC,EAEAT,GAAA,YACAU,SAAAD,GACAH,QACAK,SACAvC,KAAA,QACAoC,GAAA,GAEAI,OACAxC,KAAA,QACAoC,GAAA,OAMAR,EAAA,aACAa,UAAAJ,IAGAT,EAAA,SACAc,OACAR,aAIAN,EAAA,UACAe,QACAT,QACAA,QACAU,QAAA,SACA5C,KAAA,QACAoC,GAAA,KAIAS,OACAC,QACAC,MACA3B,OAAA,YAAA,cAAA,cAAA,YAAA,cAAA,eAGAc,QACAc,WACAhD,KAAA,YACAoC,GAAA,GAEAa,aACAjD,KAAA,SACAoC,GAAA,GAEAc,aACAlD,KAAA,SACAoC,GAAA,GAEAe,WACAnD,KAAA,OACAoC,GAAA,GAEAgB,aACApD,KAAA,SACAoC,GAAA,GAEAiB,WACArD,KAAA,YACAoC,GAAA,KAIAkB,WACAC,QACAC,WAAA,IAGAC,WACAvB,QACAqB,QACAG,KAAA,WACA1D,KAAA,QACAoC,GAAA,OAMAR,EAAA,YACA+B,aACAzB,QACAT,OACAzB,KAAA,SACAoC,GAAA,KAIAwB,YACA1B,QACAT,OACAzB,KAAA,QACAoC,GAAA,KAIAyB,YACA3B,QACAT,OACAzB,KAAA,QACAoC,GAAA,KAIA0B,aACA5B,QACAT,OACAzB,KAAA,SACAoC,GAAA,KAIA2B,YACA7B,QACAT,OACAzB,KAAA,QACAoC,GAAA,KAIA4B,aACA9B,QACAT,OACAzB,KAAA,SACAoC,GAAA,KAIA6B,WACA/B,QACAT,OACAzB,KAAA,OACAoC,GAAA,KAIA8B,aACAhC,QACAT,OACAzB,KAAA,SACAoC,GAAA,KAIA+B,YACAjC,QACAT,OACAzB,KAAA,QACAoC,GAAA,gCCzMA,YASA,SAAAgC,GAAAzD,EAAA0D,EAAAhD,GACA,GAAAV,EAAA2D,aACA,MAAA3D,GAAA2D,uBAAAC,GACAC,EAAA,qCAAAnD,EAAA,EAAAgD,GACAG,EAAA,6BAAAH,EAAAhD,EACA,QAAAV,EAAAX,MACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WACA,MAAAwE,GAAA,0BAAAnD,EAAA,EAAA,EAAA,MAAAV,EAAAX,KAAApF,OAAA,GACA,KAAA,QACA,MAAA4J,GAAA,oBAAAnD,EAAAV,EAAAG,cAEA,MAAA,MAWA,QAAA2D,GAAAC,GAEA,GAAAxC,GAAAwC,EAAAjE,iBACAkE,EAAArE,EAAAsE,QAAA,IAAA,IAAA,KACA,UACA,QACA,2BACA,IAAA1C,EAAA1I,OAAA,CAAAmL,EACA,SACA,IAAAE,EACA3C,GAAAxB,QAAA,SAAAC,EAAA1H,GACA,GAAAoI,GAAAf,EAAAwE,SAAAnE,EAAAxG,UAAAyG,KACAD,GAAAoE,UAAAJ,EACA,uBAAAtD,EAAAA,GACA,SAAAA,GACA,gCAAAA,IACAwD,EAAAT,EAAAzD,EAAA1H,EAAAoI,EAAA,QAAAsD,EACA,eAAAtD,EAAAwD,GACAF,EACA,mBAAAtD,EAAAA,GACAsD,EACA,kCACA,SAAAtD,KACAwD,EAAAT,EAAAzD,EAAA1H,EAAAoI,IAAAsD,EACA,SAAAtD,EAAAwD,GACAF,EACA,kCAAAtD,GACA,SAAAA,EAAAV,EAAAG,gBAEA6D,EACA,KAEA,MAAAA,GACA,YAnEAjL,EAAAJ,QAAAmL,CAEA,IAAAF,GAAAvL,EAAA,IACAgM,EAAAhM,EAAA,IACAsH,EAAAtH,EAAA,IAEAwL,EAAAlE,EAAAsE,QAAAJ,OAiEAlE,GAAAC,MAAAkE,EAAAO,6CCxEA,YACA,IAAAA,GAAA1L,EAEAgH,EAAAtH,EAAA,GAwBAgM,GAAAnD,MACA/E,OAAA,SAAA2E,EAAAwD,EAAAC,GACA,MAAAzD,GAEAyD,EAAAC,cAEA7E,EAAAC,SAAAkB,GAHA,MAKA2D,MAAA,SAAA3D,EAAAX,EAAAyC,EAAA2B,GACA,GAAAA,EAAAG,SAGAtJ,SAAA0F,IACAA,EAAAX,OAHA,IAAA/E,SAAA0F,GAAAA,IAAAX,EACA,MAGA,OAAAoE,GAAAE,QAAA5J,QAAA,gBAAAiG,GACA8B,EAAA9B,GACAA,GAEA6D,MAAA,SAAA7D,EAAA8D,EAAAC,EAAAC,EAAAP,GACA,GAAAzD,GAKA,IAAAnB,EAAAoF,OAAAjE,EAAA8D,EAAAC,KAAAN,EAAAG,SACA,WANA,CACA,IAAAH,EAAAG,SAGA,MAFA5D,IAAAkE,IAAAJ,EAAAK,KAAAJ,GAKA,MAAAN,GAAAI,QAAAO,OACA,gBAAApE,GACAA,EACAnB,EAAAwF,SAAAC,KAAAtE,GAAAuE,SAAAP,GACAP,EAAAI,QAAA9J,OACA,gBAAAiG,GACAnB,EAAA2F,KAAAC,WAAAzE,EAAAgE,GAAAU,YACA1E,EAAAnB,EAAA2F,KAAAG,UAAA3E,GACAA,EAAAgE,SAAAA,EACAhE,EAAA0E,YAEA1E,GAEA4E,MAAA,SAAA5E,EAAAX,EAAAoE,GACA,GAAAzD,GAKA,IAAAA,EAAAjI,SAAA0L,EAAAG,SACA,WANA,CACA,IAAAH,EAAAG,SAGA,MAFA5D,GAAAX,EAKA,MAAAoE,GAAAmB,QAAA7K,OACA8E,EAAA7F,OAAAS,OAAAuG,EAAA,EAAAA,EAAAjI,QACA0L,EAAAmB,QAAArL,MACAA,MAAAmB,UAAA+C,MAAA3F,KAAAkI,GACAyD,EAAAmB,QAAA/F,EAAAgG,QAAAhG,EAAAgG,OAAAC,SAAA9E,GAEAA,EADAnB,EAAAgG,OAAAP,KAAAtE,KAkBAuD,EAAAwB,SACA1J,OAAA,SAAA2E,EAAAwD,EAAAC,GACA,MAAAzD,GAGA,IAAAwD,EAAAwB,QAAAxB,EAAAwB,UAAAxB,GAAAC,EAAAC,WAAApJ,OAAA0F,GAFA,MAIA2D,MAAA,SAAA3D,EAAAX,EAAAyC,GACA,MAAA,gBAAA9B,GACA8B,EAAA9B,GACA,EAAAA,GAEA6D,MAAA,SAAA7D,EAAA8D,EAAAC,EAAAC,GACA,MAAA,gBAAAhE,GACAnB,EAAA2F,KAAAS,WAAAjF,EAAAgE,GACA,gBAAAhE,GACAnB,EAAA2F,KAAAC,WAAAzE,EAAAgE,GACAhE,GAEA4E,MAAA,SAAA5E,GACA,GAAAnB,EAAAgG,OACA,MAAAhG,GAAAgG,OAAAC,SAAA9E,GACAA,EACAnB,EAAAgG,OAAAP,KAAAtE,EAAA,SACA,IAAA,gBAAAA,GAAA,CACA,GAAAlC,GAAAe,EAAAqG,UAAArG,EAAA7F,OAAAjB,OAAAiI,GAEA,OADAnB,GAAA7F,OAAAkB,OAAA8F,EAAAlC,EAAA,GACAA,EAEA,MAAAkC,aAAAnB,GAAAtF,MACAyG,EACA,GAAAnB,GAAAtF,MAAAyG,mCChIA,YAYA,SAAAmF,GAAAlC,GAEA,GAAAxC,GAAAwC,EAAAjE,iBACAkE,EAAArE,EAAAsE,QAAA,IAAA,KACA,8BACA,sBACA,2DACA,mBACA,mBACAF,GAAAmC,OAAAlC,EACA,iBACA,SACAA,EACA,iBAEA,KAAA,GAAA1L,GAAA,EAAAA,EAAAiJ,EAAA1I,SAAAP,EAAA,CACA,GAAA0H,GAAAuB,EAAAjJ,GAAAkB,UACA6F,EAAAW,EAAA2D,uBAAAC,GAAA,SAAA5D,EAAAX,KACA8G,EAAA,IAAAxG,EAAAwE,SAAAnE,EAAAC,KAKA,IAJA+D,EACA,WAAAhE,EAAAyB,IAGAzB,EAAAoG,IAAA,CAEA,GAAAnE,GAAAjC,EAAAqG,gBAAA,SAAArG,EAAAiC,OACA+B,GACA,kBACA,4BAAAmC,GACA,QAAAA,GACA,eAAAlE,GACA,2BACA,wBACA,WACA7G,SAAAkL,EAAAC,MAAAlH,GAAA2E,EACA,uCAAAmC,EAAA7N,GACA0L,EACA,eAAAmC,EAAA9G,OAGAW,GAAAoE,UAAAJ,EAEA,uBAAAmC,EAAAA,GACA,QAAAA,GAGAnG,EAAAwG,QAAApL,SAAAkL,EAAAE,OAAAnH,IAAA2E,EACA,kBACA,2BACA,mBACA,kBAAAmC,EAAA9G,GACA,SAGAjE,SAAAkL,EAAAC,MAAAlH,GAAA2E,EAAAhE,EAAA2D,aAAAuC,MACA,+BACA,0CAAAC,EAAA7N,GACA0L,EACA,kBAAAmC,EAAA9G,IAGAjE,SAAAkL,EAAAC,MAAAlH,GAAA2E,EAAAhE,EAAA2D,aAAAuC,MACA,yBACA,oCAAAC,EAAA7N,GACA0L,EACA,YAAAmC,EAAA9G,EACA2E,GACA,SAGA,MAAAA,GACA,YACA,mBACA,SACA,KACA,KACA,YAvFAjL,EAAAJ,QAAAsN,CAEA,IAAArC,GAAAvL,EAAA,IACAiO,EAAAjO,EAAA,IACAsH,EAAAtH,EAAA,8CCLA,YAOA,SAAAoO,GAAAzC,EAAAhE,EAAA0D,EAAAyC,GACA,MAAAnG,GAAA2D,aAAAuC,MACAlC,EAAA,+CAAAN,EAAAyC,GAAAnG,EAAAyB,IAAA,EAAA,KAAA,GAAAzB,EAAAyB,IAAA,EAAA,KAAA,GACAuC,EAAA,oDAAAN,EAAAyC,GAAAnG,EAAAyB,IAAA,EAAA,KAAA,GAQA,QAAAiF,GAAA3C,GASA,IAAA,GADAzL,GAAA6N,EANA5E,EAAAwC,EAAAjE,iBACAqC,EAAA4B,EAAAvD,iBACAwD,EAAArE,EAAAsE,QAAA,IAAA,KACA,UACA,qBAGA3L,EAAA,EAAAA,EAAAiJ,EAAA1I,SAAAP,EAAA,CACA,GAAA0H,GAAAuB,EAAAjJ,GAAAkB,UACA6F,EAAAW,EAAA2D,uBAAAC,GAAA,SAAA5D,EAAAX,KACAsH,EAAAL,EAAAC,MAAAlH,EAIA,IAHA8G,EAAA,IAAAxG,EAAAwE,SAAAnE,EAAAC,MAGAD,EAAAoG,IAAA,CACA,GAAAnE,GAAAjC,EAAAqG,gBAAA,SAAArG,EAAAiC,OACA+B,GACA,iCAAAmC,EAAAA,GACA,mDAAAA,GACA,4CAAAnG,EAAAyB,IAAA,EAAA,KAAA,EAAA,EAAA6E,EAAAM,OAAA3E,GAAAA,GACA7G,SAAAuL,EAAA3C,EACA,oEAAA1L,EAAA6N,GACAnC,EACA,qCAAA,GAAA2C,EAAAtH,EAAA8G,GACAnC,EACA,KACA,SAGAhE,GAAAoE,SAGApE,EAAAwG,QAAApL,SAAAkL,EAAAE,OAAAnH,GAAA2E,EAEA,qBAAAmC,EAAAA,GACA,uBAAAnG,EAAAyB,IAAA,EAAA,KAAA,GACA,+BAAA0E,GACA,cAAA9G,EAAA8G,GACA,aAAAnG,EAAAyB,IACA,MAGAuC,EAEA,UAAAmC,GACA,+BAAAA,GACA/K,SAAAuL,EACAF,EAAAzC,EAAAhE,EAAA1H,EAAA6N,EAAA,OACAnC,EACA,0BAAAhE,EAAAyB,IAAA,EAAAkF,KAAA,EAAAtH,EAAA8G,GACAnC,EACA,MAKAhE,EAAA6G,SACA7G,EAAA8G,WAEA9G,EAAAM,KACA0D,EACA,uDAAAmC,EAAAA,EAAAA,EAAAnG,EAAAG,aAAA6E,IAAAhF,EAAAG,aAAA8E,MACAjB,EACA,8BAAAmC,EAAAA,EAAAnG,EAAAG,eAIA/E,SAAAuL,EACAF,EAAAzC,EAAAhE,EAAA1H,EAAA6N,GACAnC,EACA,uBAAAhE,EAAAyB,IAAA,EAAAkF,KAAA,EAAAtH,EAAA8G,IAIA,IAAA,GAAA7N,GAAA,EAAAA,EAAA6J,EAAAtJ,SAAAP,EAAA,CACA,GAAAmI,GAAA0B,EAAA7J,EACA0L,GACA,cAAA,QAAAvD,EAAAsG,OAAA,KAEA,KAAA,GADAC,GAAAvG,EAAAX,iBACAnF,EAAA,EAAAA,EAAAqM,EAAAnO,SAAA8B,EAAA,CACA,GAAAqF,GAAAgH,EAAArM,GACA0E,EAAAW,EAAA2D,uBAAAC,GAAA,SAAA5D,EAAAX,KACAsH,EAAAL,EAAAC,MAAAlH,EACA8G,GAAA,IAAAxG,EAAAwE,SAAAnE,EAAAC,MACA+D,EACA,UAAAhE,EAAAC,MAEA7E,SAAAuL,EACAF,EAAAzC,EAAAhE,EAAAuB,EAAAX,QAAAZ,GAAAmG,GACAnC,EACA,uBAAAhE,EAAAyB,IAAA,EAAAkF,KAAA,EAAAtH,EAAA8G,GAEAnC,EACA,UAEAA,EACA,KAGA,MAAAA,GACA,YAvHAjL,EAAAJ,QAAA+N,CAEA,IAAA9C,GAAAvL,EAAA,IACAiO,EAAAjO,EAAA,IACAsH,EAAAtH,EAAA,8CCLA,YAsBA,SAAAuL,GAAA3D,EAAA2C,EAAA2B,GACA0C,EAAArO,KAAAiB,KAAAoG,EAAAsE,GAMA1K,KAAAqN,cAMArN,KAAA+I,OAAA1G,OAAAC,OAAAtC,KAAAqN,WAMA,IAAAC,GAAAtN,IACAqC,QAAAD,KAAA2G,OAAA7C,QAAA,SAAAqH,GACA,GAAAC,EACA,iBAAAzE,GAAAwE,GACAC,EAAAzE,EAAAwE,IAEAC,EAAAC,SAAAF,EAAA,IACAA,EAAAxE,EAAAwE,IAEAD,EAAAD,WAAAC,EAAAvE,OAAAwE,GAAAC,GAAAD,IAjDArO,EAAAJ,QAAAiL,CAEA,IAAAqD,GAAA5O,EAAA,IAEAkP,EAAAN,EAAAlL,OAAA6H,EAEAA,GAAA4D,UAAA,MAEA,IAAA7H,GAAAtH,EAAA,IAEAkH,EAAAI,EAAAqB,CAgDA4C,GAAA6D,SAAA,SAAAvG,GACA,MAAAwG,SAAAxG,GAAAA,EAAA0B,SAUAgB,EAAA+D,SAAA,SAAA1H,EAAAiB,GACA,MAAA,IAAA0C,GAAA3D,EAAAiB,EAAA0B,OAAA1B,EAAAqD,UAMAgD,EAAAK,OAAA,WACA,OACArD,QAAA1K,KAAA0K,QACA3B,OAAA/I,KAAA+I,SAYA2E,EAAAM,IAAA,SAAA5H,EAAAwB,GAGA,IAAA9B,EAAAmI,SAAA7H,GACA,KAAAV,GAAA,OAEA,KAAAI,EAAAoI,UAAAtG,IAAAA,EAAA,EACA,KAAAlC,GAAA,KAAA,yBAEA,IAAAnE,SAAAvB,KAAA+I,OAAA3C,GACA,KAAAzH,OAAA,mBAAAyH,EAAA,QAAApG,KAEA,IAAAuB,SAAAvB,KAAAqN,WAAAzF,GACA,KAAAjJ,OAAA,gBAAAiJ,EAAA,OAAA5H,KAGA,OADAA,MAAAqN,WAAArN,KAAA+I,OAAA3C,GAAAwB,GAAAxB,EACApG,MAUA0N,EAAAS,OAAA,SAAA/H,GACA,IAAAN,EAAAmI,SAAA7H,GACA,KAAAV,GAAA,OACA,IAAA8H,GAAAxN,KAAA+I,OAAA3C,EACA,IAAA7E,SAAAiM,EACA,KAAA7O,OAAA,IAAAyH,EAAA,sBAAApG,KAGA,cAFAA,MAAAqN,WAAAG,SACAxN,MAAA+I,OAAA3C,GACApG,0CC9HA,YA8BA,SAAAoO,GAAAhI,EAAAwB,EAAApC,EAAA0D,EAAAhH,EAAAwI,GAWA,GAVA5E,EAAAU,SAAA0C,IACAwB,EAAAxB,EACAA,EAAAhH,EAAAX,QACAuE,EAAAU,SAAAtE,KACAwI,EAAAxI,EACAA,EAAAX,QAEA6L,EAAArO,KAAAiB,KAAAoG,EAAAsE,IAGA5E,EAAAoI,UAAAtG,IAAAA,EAAA,EACA,KAAAlC,GAAA,KAAA,yBAEA,KAAAI,EAAAmI,SAAAzI,GACA,KAAAE,GAAA,OAEA,IAAAnE,SAAAW,IAAA4D,EAAAmI,SAAA/L,GACA,KAAAwD,GAAA,SAEA,IAAAnE,SAAA2H,IAAA,+BAAArF,KAAAqF,EAAAA,EAAAyC,WAAA0C,eACA,KAAA3I,GAAA,OAAA,sBAMA1F,MAAAkJ,KAAAA,GAAA,aAAAA,EAAAA,EAAA3H,OAMAvB,KAAAwF,KAAAA,EAMAxF,KAAA4H,GAAAA,EAMA5H,KAAAkC,OAAAA,GAAAX,OAMAvB,KAAAiN,SAAA,aAAA/D,EAMAlJ,KAAAsO,UAAAtO,KAAAiN,SAMAjN,KAAAuK,SAAA,aAAArB,EAMAlJ,KAAAuM,KAAA,EAMAvM,KAAAgM,QAAA,KAMAhM,KAAAgN,OAAA,KAMAhN,KAAAsG,aAAA,KAMAtG,KAAAyG,OAAAX,EAAA2F,MAAAlK,SAAAkL,EAAAhG,KAAAjB,GAMAxF,KAAA6L,MAAA,UAAArG,EAMAxF,KAAA8J,aAAA,KAMA9J,KAAAuO,eAAA,KAMAvO,KAAAwO,eAAA,KAOAxO,KAAAyO,EAAA,KAzJAvP,EAAAJ,QAAAsP,CAEA,IAAAhB,GAAA5O,EAAA,IAEAkQ,EAAAtB,EAAAlL,OAAAkM,EAEAA,GAAAT,UAAA,OAEA,IAIAlI,GACAkJ,EALA5E,EAAAvL,EAAA,IACAiO,EAAAjO,EAAA,IACAsH,EAAAtH,EAAA,IAKAkH,EAAAI,EAAAqB,CA6IArB,GAAA8I,MAAAF,GAQA/B,QACA7F,IAAA4H,EAAAG,SAAA,WAIA,MAFA,QAAA7O,KAAAyO,IACAzO,KAAAyO,EAAAzO,KAAA8O,UAAA,aAAA,GACA9O,KAAAyO,MAeAC,EAAAK,UAAA,SAAA3I,EAAAa,EAAA+H,GAGA,MAFA,WAAA5I,IACApG,KAAAyO,EAAA,MACArB,EAAAzL,UAAAoN,UAAAhQ,KAAAiB,KAAAoG,EAAAa,EAAA+H,IAQAZ,EAAAR,SAAA,SAAAvG,GACA,MAAAwG,SAAAxG,GAAA9F,SAAA8F,EAAAO,KAUAwG,EAAAN,SAAA,SAAA1H,EAAAiB,GACA,MAAA9F,UAAA8F,EAAAe,SACAuG,IACAA,EAAAnQ,EAAA,KACAmQ,EAAAb,SAAA1H,EAAAiB,IAEA,GAAA+G,GAAAhI,EAAAiB,EAAAO,GAAAP,EAAA7B,KAAA6B,EAAA6B,KAAA7B,EAAAnF,OAAAmF,EAAAqD,UAMAgE,EAAAX,OAAA,WACA,OACA7E,KAAA,aAAAlJ,KAAAkJ,MAAAlJ,KAAAkJ,MAAA3H,OACAiE,KAAAxF,KAAAwF,KACAoC,GAAA5H,KAAA4H,GACA1F,OAAAlC,KAAAkC,OACAwI,QAAA1K,KAAA0K,UASAgE,EAAA/O,QAAA,WACA,GAAAK,KAAAiP,SACA,MAAAjP,KAEA,IAAAkP,GAAAzC,EAAA5B,SAAA7K,KAAAwF,KAGA,IAAAjE,SAAA2N,EAGA,GAFAzJ,IACAA,EAAAjH,EAAA,KACAwB,KAAA8J,aAAA9J,KAAAmP,OAAAC,OAAApP,KAAAwF,KAAAC,GACAyJ,EAAA,SACA,CAAA,KAAAlP,KAAA8J,aAAA9J,KAAAmP,OAAAC,OAAApP,KAAAwF,KAAAuE,IAIA,KAAApL,OAAA,4BAAAqB,KAAAwF,KAHA0J,GAAA,EA0BA,MAnBAlP,MAAAuM,IACAvM,KAAAsG,gBACAtG,KAAAuK,SACAvK,KAAAsG,iBAEAtG,KAAA0K,SAAAnJ,SAAAvB,KAAA0K,QAAA,SACA1K,KAAAsG,aAAAtG,KAAA0K,QAAA,QACA1K,KAAA8J,uBAAAC,IAAA,gBAAA/J,MAAAsG,eACAtG,KAAAsG,aAAAtG,KAAA8J,aAAAf,OAAA/I,KAAAsG,eAAA,IAEAtG,KAAAsG,aAAA4I,EAEAlP,KAAAyG,OACAzG,KAAAsG,aAAAR,EAAA2F,KAAAC,WAAA1L,KAAAsG,aAAA,MAAAtG,KAAAwF,KAAApF,OAAA,IACAiC,OAAAgN,QACAhN,OAAAgN,OAAArP,KAAAsG,gBAIA8G,EAAAzL,UAAAhC,QAAAZ,KAAAiB,mECjRA,YAyBA,SAAA2O,GAAAvI,EAAAwB,EAAAQ,EAAA5C,EAAAkF,GAIA,GAHA0D,EAAArP,KAAAiB,KAAAoG,EAAAwB,EAAApC,EAAAkF,IAGA5E,EAAAmI,SAAA7F,GACA,KAAAtC,GAAAqB,EAAA,UAMAnH,MAAAoI,QAAAA,EAMApI,KAAAwM,gBAAA,KAGAxM,KAAAuM,KAAA,EA5CArN,EAAAJ,QAAA6P,CAEA,IAAAP,GAAA5P,EAAA,IAEAkQ,EAAAN,EAAAzM,UAEA2N,EAAAlB,EAAAlM,OAAAyM,EAEAA,GAAAhB,UAAA,UAEA,IAAAlB,GAAAjO,EAAA,IACAsH,EAAAtH,EAAA,GAyCAmQ,GAAAf,SAAA,SAAAvG,GACA,MAAA+G,GAAAR,SAAAvG,IAAA9F,SAAA8F,EAAAe,SAUAuG,EAAAb,SAAA,SAAA1H,EAAAiB,GACA,MAAA,IAAAsH,GAAAvI,EAAAiB,EAAAO,GAAAP,EAAAe,QAAAf,EAAA7B,KAAA6B,EAAAqD,UAMA4E,EAAAvB,OAAA,WACA,OACA3F,QAAApI,KAAAoI,QACA5C,KAAAxF,KAAAwF,KACAoC,GAAA5H,KAAA4H,GACA1F,OAAAlC,KAAAkC,OACAwI,QAAA1K,KAAA0K,UAOA4E,EAAA3P,QAAA,WACA,GAAAK,KAAAiP,SACA,MAAAjP,KAGA,IAAAuB,SAAAkL,EAAAM,OAAA/M,KAAAoI,SACA,KAAAzJ,OAAA,qBAAAqB,KAAAoI,QAEA,OAAAsG,GAAA/O,QAAAZ,KAAAiB,iDC5FA,YAcA,SAAA6F,GAAAD,GACA,GAAAA,EAEA,IAAA,GADAxD,GAAAC,OAAAD,KAAAwD,GACAnH,EAAA,EAAAA,EAAA2D,EAAApD,SAAAP,EACAuB,KAAAoC,EAAA3D,IAAAmH,EAAAxD,EAAA3D,IAjBAS,EAAAJ,QAAA+G,CAEA,IAAA2E,GAAAhM,EAAA,IA2BA+Q,EAAA1J,EAAAlE,SAcA4N,GAAAC,OAAA,SAAA9E,GACA,MAAA1K,MAAAgG,MAAAqE,QAAArK,KAAAwK,EAAAnD,KAAAqD,IASA7E,EAAA0F,KAAA,SAAAkE,EAAA/E,GACA,MAAA1K,MAAAgG,MAAAqE,QAAAoF,EAAAjF,EAAAwB,QAAAtB,IASA7E,EAAAnF,OAAA,SAAAsL,EAAA0D,GACA,MAAA1P,MAAAgG,MAAAtF,OAAAsL,EAAA0D,IASA7J,EAAA8J,gBAAA,SAAA3D,EAAA0D,GACA,MAAA1P,MAAAgG,MAAA2J,gBAAA3D,EAAA0D,IAUA7J,EAAA1E,OAAA,SAAAyO,GACA,MAAA5P,MAAAgG,MAAA7E,OAAAyO,IAUA/J,EAAAgK,gBAAA,SAAAD,GACA,MAAA5P,MAAAgG,MAAA6J,gBAAAD,IAUA/J,EAAAiK,OAAA,SAAA9D,GACA,MAAAhM,MAAAgG,MAAA8J,OAAA9D,IAUAnG,EAAAwE,QAAA,SAAA0F,EAAAC,EAAAtF,GACA,MAAA1K,MAAAgG,MAAAqE,QAAA0F,EAAAC,EAAAtF,kCCvHA,YA2BA,SAAAuF,GAAA7J,EAAAZ,EAAA0K,EAAAC,EAAAC,EAAAC,EAAA3F,GAYA,GAVA5E,EAAAU,SAAA4J,IACA1F,EAAA0F,EACAA,EAAAC,EAAA9O,QAEAuE,EAAAU,SAAA6J,KACA3F,EAAA2F,EACAA,EAAA9O,QAIAiE,IAAAM,EAAAmI,SAAAzI,GACA,KAAAE,GAAA,OAEA,KAAAI,EAAAmI,SAAAiC,GACA,KAAAxK,GAAA,cAEA,KAAAI,EAAAmI,SAAAkC,GACA,KAAAzK,GAAA,eAEA0H,GAAArO,KAAAiB,KAAAoG,EAAAsE,GAMA1K,KAAAwF,KAAAA,GAAA,MAMAxF,KAAAkQ,YAAAA,EAMAlQ,KAAAoQ,gBAAAA,GAAA7O,OAMAvB,KAAAmQ,aAAAA,EAMAnQ,KAAAqQ,iBAAAA,GAAA9O,OAMAvB,KAAAsQ,oBAAA,KAMAtQ,KAAAuQ,qBAAA,KAzFArR,EAAAJ,QAAAmR,CAEA,IAAA7C,GAAA5O,EAAA,IAEAgS,EAAApD,EAAAlL,OAAA+N,EAEAA,GAAAtC,UAAA,QAEA,IAAAlI,GAAAjH,EAAA,IACAsH,EAAAtH,EAAA,IAEAkH,EAAAI,EAAAqB,CAsFA8I,GAAArC,SAAA,SAAAvG,GACA,MAAAwG,SAAAxG,GAAA9F,SAAA8F,EAAA6I,cAUAD,EAAAnC,SAAA,SAAA1H,EAAAiB,GACA,MAAA,IAAA4I,GAAA7J,EAAAiB,EAAA7B,KAAA6B,EAAA6I,YAAA7I,EAAA8I,aAAA9I,EAAA+I,cAAA/I,EAAAgJ,eAAAhJ,EAAAqD,UAMA8F,EAAAzC,OAAA,WACA,OACAvI,KAAA,QAAAxF,KAAAwF,MAAAxF,KAAAwF,MAAAjE,OACA2O,YAAAlQ,KAAAkQ,YACAE,cAAApQ,KAAAoQ,eAAA7O,OACA4O,aAAAnQ,KAAAmQ,aACAE,eAAArQ,KAAAqQ,gBAAA9O,OACAmJ,QAAA1K,KAAA0K,UAOA8F,EAAA7Q,QAAA,WACA,GAAAK,KAAAiP,SACA,MAAAjP,KAGA,MAAAA,KAAAsQ,oBAAAtQ,KAAAmP,OAAAC,OAAApP,KAAAkQ,YAAAzK,IACA,KAAA9G,OAAA,8BAAAqB,KAAAkQ,YAEA,MAAAlQ,KAAAuQ,qBAAAvQ,KAAAmP,OAAAC,OAAApP,KAAAmQ,aAAA1K,IACA,KAAA9G,OAAA,+BAAAqB,KAAAkQ,YAEA,OAAA9C,GAAAzL,UAAAhC,QAAAZ,KAAAiB,iDC7IA,YAmBA,SAAAyQ,KAGAhL,IACAA,EAAAjH,EAAA,KAEAkS,IACAA,EAAAlS,EAAA,KAEAmS,GAAA5G,EAAAtE,EAAAiL,EAAAtC,EAAAwC,GACAC,EAAA,UAAAF,EAAApE,IAAA,SAAApK,GAAA,MAAAA,GAAAiE,OAAAhC,KAAA,MAaA,QAAAwM,GAAAxK,EAAAsE,GACA0C,EAAArO,KAAAiB,KAAAoG,EAAAsE,GAMA1K,KAAAsH,OAAA/F,OAOAvB,KAAA8Q,EAAA,KAOA9Q,KAAA+Q,KAGA,QAAAC,GAAAC,GACAA,EAAAH,EAAA,IACA,KAAA,GAAArS,GAAA,EAAAA,EAAAwS,EAAAF,EAAA/R,SAAAP,QACAwS,GAAAA,EAAAF,EAAAtS,GAEA,OADAwS,GAAAF,KACAE,EA8DA,QAAAC,GAAAC,GACA,GAAAA,GAAAA,EAAAnS,OAAA,CAGA,IAAA,GADAoS,MACA3S,EAAA,EAAAA,EAAA0S,EAAAnS,SAAAP,EACA2S,EAAAD,EAAA1S,GAAA2H,MAAA+K,EAAA1S,GAAAsP,QACA,OAAAqD,IA1IAlS,EAAAJ,QAAA8R,CAEA,IAAAxD,GAAA5O,EAAA,IAEA6S,EAAAjE,EAAAlL,OAAA0O,EAEAA,GAAAjD,UAAA,WAEA,IAIAlI,GACAiL,EAEAC,EACAE,EARA9G,EAAAvL,EAAA,IACA4P,EAAA5P,EAAA,IACAsH,EAAAtH,EAAA,IAqBAkH,EAAAI,EAAAqB,CA0CArB,GAAA8I,MAAAyC,GAQAC,aACAxK,IAAA,WACA,MAAA9G,MAAA8Q,IAAA9Q,KAAA8Q,EAAAhL,EAAAyL,QAAAvR,KAAAsH,aAWAsJ,EAAAhD,SAAA,SAAAvG,GACA,MAAAwG,SAAAxG,IACAA,EAAAK,SACAL,EAAA0B,QACAxH,SAAA8F,EAAAO,KACAP,EAAAT,QACAS,EAAAmK,SACAjQ,SAAA8F,EAAA6I,cAWAU,EAAA9C,SAAA,SAAA1H,EAAAiB,GACA,MAAA,IAAAuJ,GAAAxK,EAAAiB,EAAAqD,SAAA+G,QAAApK,EAAAC,SAMA+J,EAAAtD,OAAA,WACA,OACArD,QAAA1K,KAAA0K,QACApD,OAAA4J,EAAAlR,KAAA0R,oBAmBAd,EAAAM,YAAAA,EAOAG,EAAAI,QAAA,SAAAE,GACA,GAAAC,GAAA5R,IAYA,OAXA2R,KACAhB,GACAF,IACApO,OAAAD,KAAAuP,GAAAzL,QAAA,SAAA2L,GAEA,IAAA,GADAvK,GAAAqK,EAAAE,GACA/Q,EAAA,EAAAA,EAAA6P,EAAA3R,SAAA8B,EACA,GAAA6P,EAAA7P,GAAA8M,SAAAtG,GACA,MAAAsK,GAAA5D,IAAA2C,EAAA7P,GAAAgN,SAAA+D,EAAAvK,GACA,MAAA5B,GAAA,UAAAmM,EAAA,YAAAhB,MAGA7Q,MAQAqR,EAAAvK,IAAA,SAAAV,GACA,MAAA7E,UAAAvB,KAAAsH,OACA,KACAtH,KAAAsH,OAAAlB,IAAA,MAUAiL,EAAAS,QAAA,SAAA1L,GACA,GAAApG,KAAAsH,QAAAtH,KAAAsH,OAAAlB,YAAA2D,GACA,MAAA/J,MAAAsH,OAAAlB,GAAA2C,MACA,MAAApK,OAAA,iBAUA0S,EAAArD,IAAA,SAAAyB,GAKA,GAJAkB,GACAF,KAGAhB,GAAAkB,EAAA5J,QAAA0I,EAAAlN,aAAA,EACA,KAAAmD,GAAA,SAAAmL,EAEA,IAAApB,YAAArB,IAAA7M,SAAAkO,EAAAvN,OACA,KAAAwD,GAAA,SAAA,6CAEA,IAAA1F,KAAAsH,OAEA,CACA,GAAAyK,GAAA/R,KAAA8G,IAAA2I,EAAArJ,KACA,IAAA2L,EAAA,CAEA,KAAAA,YAAAnB,IAAAnB,YAAAmB,KAAAmB,YAAAtM,IAAAsM,YAAArB,GAYA,KAAA/R,OAAA,mBAAA8Q,EAAArJ,KAAA,QAAApG,KATA,KAAA,GADAsH,GAAAyK,EAAAL,iBACAjT,EAAA,EAAAA,EAAA6I,EAAAtI,SAAAP,EACAgR,EAAAzB,IAAA1G,EAAA7I,GACAuB,MAAAmO,OAAA4D,GACA/R,KAAAsH,SACAtH,KAAAsH,WACAmI,EAAAuC,WAAAD,EAAArH,SAAA,QAbA1K,MAAAsH,SAsBA,OAFAtH,MAAAsH,OAAAmI,EAAArJ,MAAAqJ,EACAA,EAAAwC,MAAAjS,MACAgR,EAAAhR,OAUAqR,EAAAlD,OAAA,SAAAsB,GAGA,KAAAA,YAAArC,IACA,KAAA1H,GAAA,SAAA,qBAEA,IAAA+J,EAAAN,SAAAnP,OAAAA,KAAAsH,OACA,KAAA3I,OAAA8Q,EAAA,uBAAAzP,KAMA,cAJAA,MAAAsH,OAAAmI,EAAArJ,MACA/D,OAAAD,KAAApC,KAAAsH,QAAAtI,SACAgB,KAAAsH,OAAA/F,QACAkO,EAAAyC,SAAAlS,MACAgR,EAAAhR,OASAqR,EAAAc,OAAA,SAAA1P,EAAA4E,GACAvB,EAAAmI,SAAAxL,GACAA,EAAAA,EAAAuB,MAAA,KACAxD,MAAA6F,QAAA5D,KACA4E,EAAA5E,EACAA,EAAAlB,OAEA,IAAA6Q,GAAApS,IACA,IAAAyC,EACA,KAAAA,EAAAzD,OAAA,GAAA,CACA,GAAAqT,GAAA5P,EAAA0B,OACA,IAAAiO,EAAA9K,QAAA8K,EAAA9K,OAAA+K,IAEA,GADAD,EAAAA,EAAA9K,OAAA+K,KACAD,YAAAxB,IACA,KAAAjS,OAAA,iDAEAyT,GAAApE,IAAAoE,EAAA,GAAAxB,GAAAyB,IAIA,MAFAhL,IACA+K,EAAAX,QAAApK,GACA+K,GAMAf,EAAA1R,QAAA,WAEA8F,IACAA,EAAAjH,EAAA,KAEAkS,IACAjL,EAAAjH,EAAA,IAMA,KAAA,GADA8I,GAAAtH,KAAA0R,iBACAjT,EAAA,EAAAA,EAAA6I,EAAAtI,SAAAP,EACA,GAAA,SAAAoF,KAAAyD,EAAA7I,GAAA2H,MAAA,CACA,GAAAkB,EAAA7I,YAAAgH,IAAA6B,EAAA7I,YAAAiS,GACA1Q,KAAAsH,EAAA7I,GAAA2H,MAAAkB,EAAA7I,OACA,CAAA,KAAA6I,EAAA7I,YAAAsL,IAGA,QAFA/J,MAAAsH,EAAA7I,GAAA2H,MAAAkB,EAAA7I,GAAAsK,OAGA/I,KAAA+Q,EAAAvR,KAAA8H,EAAA7I,GAAA2H,MAGA,MAAAgH,GAAAzL,UAAAhC,QAAAZ,KAAAiB,OAOAqR,EAAAiB,WAAA,WAEA,IADA,GAAAhL,GAAAtH,KAAA0R,iBAAAjT,EAAA,EACAA,EAAA6I,EAAAtI,QACAsI,EAAA7I,YAAAmS,GACAtJ,EAAA7I,KAAA6T,aAEAhL,EAAA7I,KAAAkB,SACA,OAAA0R,GAAA1R,QAAAZ,KAAAiB,OAUAqR,EAAAjC,OAAA,SAAA3M,EAAA8P,EAAAC,GAKA,GAJA,iBAAAD,KACAC,EAAAD,EACAA,EAAAhR,QAEAuE,EAAAmI,SAAAxL,IAAAA,EAAAzD,OACAyD,EAAAA,EAAAuB,MAAA,SACA,KAAAvB,EAAAzD,OACA,MAAA,KAEA,IAAA,KAAAyD,EAAA,GACA,MAAAzC,MAAAyS,UAAArD,OAAA3M,EAAAiC,MAAA,GAAA6N,EAEA,IAAAG,GAAA1S,KAAA8G,IAAArE,EAAA,GACA,OAAAiQ,IAAA,IAAAjQ,EAAAzD,UAAAuT,GAAAG,YAAAH,KAAAG,YAAA9B,KAAA8B,EAAAA,EAAAtD,OAAA3M,EAAAiC,MAAA,GAAA6N,GAAA,IACAG,EAEA,OAAA1S,KAAAmP,QAAAqD,EACA,KACAxS,KAAAmP,OAAAC,OAAA3M,EAAA8P,IAqBAlB,EAAAsB,WAAA,SAAAlQ,GAGAgD,IACAA,EAAAjH,EAAA,IAEA,IAAAkU,GAAA1S,KAAAoP,OAAA3M,EAAAgD,EACA,KAAAiN,EACA,KAAA/T,OAAA,eACA,OAAA+T,IAUArB,EAAAuB,cAAA,SAAAnQ,GAGAiO,IACAA,EAAAlS,EAAA,IAEA,IAAAkU,GAAA1S,KAAAoP,OAAA3M,EAAAiO,EACA,KAAAgC,EACA,KAAA/T,OAAA,kBACA,OAAA+T,IAUArB,EAAAwB,WAAA,SAAApQ,GACA,GAAAiQ,GAAA1S,KAAAoP,OAAA3M,EAAAsH,EACA,KAAA2I,EACA,KAAA/T,OAAA,eACA,OAAA+T,GAAA3J,oECjaA,YAoBA,SAAAqE,GAAAhH,EAAAsE,GAGA,IAAA5E,EAAAmI,SAAA7H,GACA,KAAAV,GAAA,OAEA,IAAAgF,IAAA5E,EAAAU,SAAAkE,GACA,KAAAhF,GAAA,UAAA,YAMA1F,MAAA0K,QAAAA,EAMA1K,KAAAoG,KAAAA,EAMApG,KAAAmP,OAAA,KAMAnP,KAAAiP,UAAA,EAlDA/P,EAAAJ,QAAAsO,CAEA,IAAAtH,GAAAtH,EAAA,GAEA4O,GAAAO,UAAA,mBACAP,EAAAlL,OAAA4D,EAAA5D,MAEA,IAAA4Q,GAEApN,EAAAI,EAAAqB,EA6CA4L,EAAA3F,EAAAzL,SAEAmE,GAAA8I,MAAAmE,GAQAC,MACAlM,IAAA,WAEA,IADA,GAAAsL,GAAApS,KACA,OAAAoS,EAAAjD,QACAiD,EAAAA,EAAAjD,MACA,OAAAiD,KAUAa,UACAnM,IAAAiM,EAAAG,YAAA,WAGA,IAFA,GAAAzQ,IAAAzC,KAAAoG,MACAgM,EAAApS,KAAAmP,OACAiD,GACA3P,EAAA0Q,QAAAf,EAAAhM,MACAgM,EAAAA,EAAAjD,MAEA,OAAA1M,GAAA2B,KAAA,SAUA2O,EAAAhF,OAAA,WACA,KAAApP,UAQAoU,EAAAd,MAAA,SAAA9C,GACAnP,KAAAmP,QAAAnP,KAAAmP,SAAAA,GACAnP,KAAAmP,OAAAhB,OAAAnO,MACAA,KAAAmP,OAAAA,EACAnP,KAAAiP,UAAA,CACA,IAAA+D,GAAA7D,EAAAsD,SACAK,KACAA,EAAAtU,EAAA,KACAwU,YAAAF,IACAE,EAAAI,EAAApT,OAQA+S,EAAAb,SAAA,SAAA/C,GACA,GAAA6D,GAAA7D,EAAAsD,SACAK,KACAA,EAAAtU,EAAA,KACAwU,YAAAF,IACAE,EAAAK,EAAArT,MACAA,KAAAmP,OAAA,KACAnP,KAAAiP,UAAA,GAOA8D,EAAApT,QAAA,WACA,GAAAK,KAAAiP,SACA,MAAAjP,KACA,IAAAgT,GAAAhT,KAAAyS,SAKA,OAJAK,KACAA,EAAAtU,EAAA,KACAwU,YAAAF,KACA9S,KAAAiP,UAAA,GACAjP,MAQA+S,EAAAjE,UAAA,SAAA1I,GACA,GAAApG,KAAA0K,QACA,MAAA1K,MAAA0K,QAAAtE,IAWA2M,EAAAhE,UAAA,SAAA3I,EAAAa,EAAA+H,GAGA,MAFAA,IAAAhP,KAAA0K,SAAAnJ,SAAAvB,KAAA0K,QAAAtE,MACApG,KAAA0K,UAAA1K,KAAA0K,aAAAtE,GAAAa,GACAjH,MASA+S,EAAAf,WAAA,SAAAtH,EAAAsE,GAKA,MAJAtE,IACArI,OAAAD,KAAAsI,GAAAxE,QAAA,SAAAE,GACApG,KAAA+O,UAAA3I,EAAAsE,EAAAtE,GAAA4I,IACAhP,MACAA,MAOA+S,EAAApH,SAAA,WACA,GAAAgC,GAAA3N,KAAAuC,YAAAoL,UACAsF,EAAAjT,KAAAkT,aACA,OAAAD,GAAAjU,OACA2O,EAAA,IAAAsF,EACAtF,uCCpMA,YAuBA,SAAA2F,GAAAlN,EAAAmN,EAAA7I,GAQA,GAPAlK,MAAA6F,QAAAkN,KACA7I,EAAA6I,EACAA,EAAAhS,QAEA6L,EAAArO,KAAAiB,KAAAoG,EAAAsE,GAGA6I,IAAA/S,MAAA6F,QAAAkN,GACA,KAAA7N,GAAA,aAAA,WAMA1F,MAAAkN,OAAApH,EAAA0N,QAAAxT,KAAAoG,MAMApG,KAAA4G,MAAA2M,MAOAvT,KAAAyT,KAoDA,QAAAC,GAAA9M,GACAA,EAAAuI,QACAvI,EAAA6M,EAAAvN,QAAA,SAAAC,GACAA,EAAAgJ,QACAvI,EAAAuI,OAAAnB,IAAA7H,KA1GAjH,EAAAJ,QAAAwU,CAEA,IAAAlG,GAAA5O,EAAA,IAEAmV,EAAAvG,EAAAlL,OAAAoR,EAEAA,GAAA3F,UAAA,OAEA,IAAAS,GAAA5P,EAAA,IACAsH,EAAAtH,EAAA,IAEAkH,EAAAI,EAAAqB,CAgDArB,GAAAe,KAAA8M,EAAA,eACA7M,IAAA,WACA,MAAA9G,MAAAyT,KASAH,EAAA1F,SAAA,SAAAvG,GACA,MAAAwG,SAAAxG,EAAAT,QAUA0M,EAAAxF,SAAA,SAAA1H,EAAAiB,GACA,MAAA,IAAAiM,GAAAlN,EAAAiB,EAAAT,MAAAS,EAAAqD,UAMAiJ,EAAA5F,OAAA,WACA,OACAnH,MAAA5G,KAAA4G,MACA8D,QAAA1K,KAAA0K,UAyBAiJ,EAAA3F,IAAA,SAAA7H,GAGA,KAAAA,YAAAiI,IACA,KAAA1I,GAAA,QAAA,UAQA,OANAS,GAAAgJ,QACAhJ,EAAAgJ,OAAAhB,OAAAhI,GACAnG,KAAA4G,MAAApH,KAAA2G,EAAAC,MACApG,KAAAyT,EAAAjU,KAAA2G,GACAA,EAAA6G,OAAAhN,KACA0T,EAAA1T,MACAA,MAQA2T,EAAAxF,OAAA,SAAAhI,GAGA,KAAAA,YAAAiI,IACA,KAAA1I,GAAA,QAAA,UAEA,IAAAkO,GAAA5T,KAAAyT,EAAA1M,QAAAZ,EAEA,IAAAyN,EAAA,EACA,KAAAjV,OAAAwH,EAAA,uBAAAnG,KASA,OAPAA,MAAAyT,EAAAzR,OAAA4R,EAAA,GACAA,EAAA5T,KAAA4G,MAAAG,QAAAZ,EAAAC,MACAwN,GAAA,GACA5T,KAAA4G,MAAA5E,OAAA4R,EAAA,GACAzN,EAAAgJ,QACAhJ,EAAAgJ,OAAAhB,OAAAhI,GACAA,EAAA6G,OAAA,KACAhN,MAMA2T,EAAA1B,MAAA,SAAA9C,GACA/B,EAAAzL,UAAAsQ,MAAAlT,KAAAiB,KAAAmP,EACA,IAAA7B,GAAAtN,IAEAA,MAAA4G,MAAAV,QAAA,SAAA2N,GACA,GAAA1N,GAAAgJ,EAAArI,IAAA+M,EACA1N,KAAAA,EAAA6G,SACA7G,EAAA6G,OAAAM,EACAA,EAAAmG,EAAAjU,KAAA2G,MAIAuN,EAAA1T,OAMA2T,EAAAzB,SAAA,SAAA/C,GACAnP,KAAAyT,EAAAvN,QAAA,SAAAC,GACAA,EAAAgJ,QACAhJ,EAAAgJ,OAAAhB,OAAAhI,KAEAiH,EAAAzL,UAAAuQ,SAAAnT,KAAAiB,KAAAmP,8CCxLA,YAeA,SAAA2E,GAAAC,GACA,MAAA,2BAAAlQ,KAAAkQ,GAGA,QAAAC,GAAAD,GACA,MAAA,mCAAAlQ,KAAAkQ,GAGA,QAAAE,GAAAF,GACA,MAAA,iCAAAlQ,KAAAkQ,GAGA,QAAAG,GAAAH,GACA,MAAA,QAAAA,EAAA,KAAAA,EAAA1F,cAGA,QAAA8F,GAAAC,GACA,MAAAA,GAAAC,UAAA,EAAA,GACAD,EAAAC,UAAA,GACA1Q,QAAA,uBAAA,SAAA2Q,EAAAC,GAAA,MAAAA,GAAAC,gBA8BA,QAAAC,GAAA1E,EAAAiD,EAAAtI,GA4BA,QAAAgK,GAAAX,EAAA3N,GACA,GAAAuO,GAAAF,EAAAE,QAEA,OADAF,GAAAE,SAAA,KACAhW,MAAA,YAAAyH,GAAA,SAAA,KAAA2N,EAAA,OAAAY,EAAAA,EAAA,KAAA,IAAA,QAAAC,EAAAC,OAAA,KAGA,QAAAC,KACA,GACAf,GADAhL,IAEA,GAAA,CACA,GAAA,OAAAgL,EAAAgB,MAAA,MAAAhB,EACA,KAAAW,GAAAX,EACAhL,GAAAvJ,KAAAuV,KACAC,EAAAjB,GACAA,EAAAkB,UACA,MAAAlB,GAAA,MAAAA,EACA,OAAAhL,GAAA3E,KAAA,IAGA,QAAA8Q,GAAAC,GACA,GAAApB,GAAAgB,GACA,QAAAb,EAAAH,IACA,IAAA,IACA,IAAA,IAEA,MADAvU,GAAAuU,GACAe,GACA,KAAA,OACA,OAAA,CACA,KAAA,QACA,OAAA,EAEA,IACA,MAAAM,GAAArB,GACA,MAAA/V,GACA,GAAAmX,GAAAnB,EAAAD,GACA,MAAAA,EACA,MAAAW,GAAAX,EAAA,UAIA,QAAAsB,KACA,GAAAzU,GAAA0U,EAAAP,KACAlU,EAAAD,CAIA,OAHAoU,GAAA,MAAA,KACAnU,EAAAyU,EAAAP,MACAC,EAAA,MACApU,EAAAC,GAGA,QAAAuU,GAAArB,GACA,GAAAwB,GAAA,CACA,OAAAxB,EAAA3T,OAAA,KACAmV,GAAA,EACAxB,EAAAA,EAAAM,UAAA,GAEA,IAAAmB,GAAAtB,EAAAH,EACA,QAAAyB,GACA,IAAA,MAAA,MAAAD,IAAAE,EAAAA,EACA,KAAA,MAAA,MAAAC,IACA,KAAA,IAAA,MAAA,GAEA,GAAA,gBAAA7R,KAAAkQ,GACA,MAAAwB,GAAA9H,SAAAsG,EAAA,GACA,IAAA,kBAAAlQ,KAAA2R,GACA,MAAAD,GAAA9H,SAAAsG,EAAA,GACA,IAAA,YAAAlQ,KAAAkQ,GACA,MAAAwB,GAAA9H,SAAAsG,EAAA,EACA,IAAA,gDAAAlQ,KAAA2R,GACA,MAAAD,GAAAI,WAAA5B,EACA,MAAAW,GAAAX,EAAA,UAGA,QAAAuB,GAAAvB,EAAA6B,GACA,GAAAJ,GAAAtB,EAAAH,EACA,QAAAyB,GACA,IAAA,MAAA,MAAA,UACA,KAAA,IAAA,MAAA,GAEA,GAAA,MAAAzB,EAAA3T,OAAA,KAAAwV,EACA,KAAAlB,GAAAX,EAAA,KACA,IAAA,kBAAAlQ,KAAAkQ,GACA,MAAAtG,UAAAsG,EAAA,GACA,IAAA,oBAAAlQ,KAAA2R,GACA,MAAA/H,UAAAsG,EAAA,GACA,IAAA,cAAAlQ,KAAAkQ,GACA,MAAAtG,UAAAsG,EAAA,EACA,MAAAW,GAAAX,EAAA,MAGA,QAAA8B,KACA,GAAAtU,SAAAuU,EACA,KAAApB,GAAA,UAEA,IADAoB,EAAAf,KACAf,EAAA8B,GACA,KAAApB,GAAAoB,EAAA,OACA1D,IAAAA,GAAAD,OAAA2D,GACAd,EAAA,KAGA,QAAAe,KACA,GACAC,GADAjC,EAAAkB,GAEA,QAAAlB,GACA,IAAA,OACAiC,EAAAC,IAAAA,MACAlB,GACA,MACA,KAAA,SACAA,GAEA,SACAiB,EAAAE,IAAAA,MAGAnC,EAAAe,IACAE,EAAA,KACAgB,EAAAxW,KAAAuU,GAGA,QAAAoC,KAIA,GAHAnB,EAAA,KACAoB,EAAAlC,EAAAY,KACAuB,GAAA,WAAAD,GACAC,IAAA,WAAAD,EACA,KAAA1B,GAAA0B,EAAA,SACApB,GAAA,KAGA,QAAAsB,GAAAnH,EAAA4E,GACA,OAAAA,GAEA,IAAA,SAGA,MAFAwC,GAAApH,EAAA4E,GACAiB,EAAA,MACA,CAEA,KAAA,UAEA,MADAwB,GAAArH,EAAA4E,IACA,CAEA,KAAA,OAEA,MADA0C,GAAAtH,EAAA4E,IACA,CAEA,KAAA,UAEA,MADA2C,GAAAvH,EAAA4E,IACA,CAEA,KAAA,SAEA,MADA4C,GAAAxH,EAAA4E,IACA,EAEA,OAAA,EAGA,QAAAyC,GAAArH,EAAA4E,GACA,GAAA3N,GAAA2O,GACA,KAAAjB,EAAA1N,GACA,KAAAsO,GAAAtO,EAAA,YACA,IAAAZ,GAAA,GAAAC,GAAAW,EACA,IAAA4O,EAAA,KAAA,GAAA,CACA,KAAA,OAAAjB,EAAAgB,MAAA,CACA,GAAAS,GAAAtB,EAAAH,EACA,KAAAuC,EAAA9Q,EAAAuO,GAEA,OAAAyB,GAEA,IAAA,MACAoB,EAAApR,EAAAgQ,EACA,MAEA,KAAA,WACA,IAAA,WACA,IAAA,WACAqB,EAAArR,EAAAgQ,EACA,MAEA,KAAA,QACAsB,EAAAtR,EAAAgQ,EACA,MAEA,KAAA,cACAhQ,EAAAuR,aAAAvR,EAAAuR,gBAAAvX,KAAA6V,EAAA7P,EAAAgQ,GACA,MAEA,KAAA,YACAhQ,EAAAwR,WAAAxR,EAAAwR,cAAAxX,KAAA6V,EAAA7P,EAAAgQ,GACA,MAEA,SACA,IAAAa,KAAArC,EAAAD,GACA,KAAAW,GAAAX,EACAvU,GAAAuU,GACA8C,EAAArR,EAAA,aAIAwP,EAAA,KAAA,OAEAA,GAAA,IACA7F,GAAAnB,IAAAxI,GAGA,QAAAqR,GAAA1H,EAAAjG,EAAAhH,GACA,GAAAsD,GAAAuP,GACA,IAAA,UAAAb,EAAA1O,GAEA,WADAyR,GAAA9H,EAAAjG,EAGA,KAAA8K,EAAAxO,GACA,KAAAkP,GAAAlP,EAAA,OACA,IAAAY,GAAA2O,GACA,KAAAjB,EAAA1N,GACA,KAAAsO,GAAAtO,EAAA,OACAA,GAAA8Q,GAAA9Q,GACA4O,EAAA,IACA,IAAApN,GAAA0N,EAAAP,KACA5O,EAAAgR,EAAA,GAAA/I,GAAAhI,EAAAwB,EAAApC,EAAA0D,EAAAhH,GAGAiE,GAAAoE,UAAAhJ,SAAAkL,EAAAE,OAAAnH,KAAA6Q,IACAlQ,EAAA4I,UAAA,UAAA,GAAA,GACAI,EAAAnB,IAAA7H,GAGA,QAAA8Q,GAAA9H,EAAAjG,GACA,GAAA9C,GAAA2O,GACA,KAAAjB,EAAA1N,GACA,KAAAsO,GAAAtO,EAAA,OACA,IAAAyN,GAAA/N,EAAAsR,QAAAhR,EACAA,KAAAyN,IACAzN,EAAAN,EAAA0N,QAAApN,IACA4O,EAAA,IACA,IAAApN,GAAA0N,EAAAP,KACAvP,EAAA,GAAAC,GAAAW,EACAZ,GAAA6G,OAAA,CACA,IAAAlG,GAAA,GAAAiI,GAAAyF,EAAAjM,EAAAxB,EAAA8C,EAEA,KADA8L,EAAA,KACA,OAAAjB,GAAAgB,MACA,OAAAhB,GAAAG,EAAAH,KACA,IAAA,SACAwC,EAAA/Q,EAAAuO,IACAiB,EAAA,IACA,MACA,KAAA,WACA,IAAA,WACA,IAAA,WACA6B,EAAArR,EAAAuO,GACA,MAGA,SACA,KAAAW,GAAAX,IAGAiB,EAAA,KAAA,GACA7F,EAAAnB,IAAAxI,GAAAwI,IAAA7H,GAGA,QAAAyQ,GAAAzH,GACA6F,EAAA,IACA,IAAA5M,GAAA2M,GAGA,IAAAxT,SAAAkL,EAAAM,OAAA3E,GACA,KAAAsM,GAAAtM,EAAA,OACA4M,GAAA,IACA,IAAAqC,GAAAtC,GAEA,KAAAf,EAAAqD,GACA,KAAA3C,GAAA2C,EAAA,OACArC,GAAA,IACA,IAAA5O,GAAA2O,GAEA,KAAAjB,EAAA1N,GACA,KAAAsO,GAAAtO,EAAA,OAEAA,GAAA8Q,GAAA9Q,GACA4O,EAAA,IACA,IAAApN,GAAA0N,EAAAP,KACA5O,EAAAgR,EAAA,GAAAxI,GAAAvI,EAAAwB,EAAAQ,EAAAiP,GACAlI,GAAAnB,IAAA7H,GAGA,QAAA2Q,GAAA3H,EAAA4E,GACA,GAAA3N,GAAA2O,GAGA,KAAAjB,EAAA1N,GACA,KAAAsO,GAAAtO,EAAA,OAEAA,GAAA8Q,GAAA9Q,EACA,IAAAQ,GAAA,GAAA0M,GAAAlN,EACA,IAAA4O,EAAA,KAAA,GAAA,CACA,KAAA,OAAAjB,EAAAgB,MACA,WAAAhB,GACAwC,EAAA3P,EAAAmN,GACAiB,EAAA,OAEAxV,EAAAuU,GACA8C,EAAAjQ,EAAA,YAGAoO,GAAA,KAAA,OAEAA,GAAA,IACA7F,GAAAnB,IAAApH,GAGA,QAAA6P,GAAAtH,EAAA4E,GACA,GAAA3N,GAAA2O,GAGA,KAAAjB,EAAA1N,GACA,KAAAsO,GAAAtO,EAAA,OAEA,IAAAkR,GAAA,GAAAvN,GAAA3D,EACA,IAAA4O,EAAA,KAAA,GAAA,CACA,KAAA,OAAAjB,EAAAgB,MACA,WAAAb,EAAAH,IACAwC,EAAAe,EAAAvD,GACAiB,EAAA,MAEAuC,EAAAD,EAAAvD,EAEAiB,GAAA,KAAA,OAEAA,GAAA,IACA7F,GAAAnB,IAAAsJ,GAGA,QAAAC,GAAApI,EAAA4E,GAGA,IAAAD,EAAAC,GACA,KAAAW,GAAAX,EAAA,OAEA,IAAA3N,GAAA2N,CACAiB,GAAA,IACA,IAAA/N,GAAAqO,EAAAP,KAAA,EACA5F,GAAAnB,IAAA5H,EAAAa,GACAkQ,MAGA,QAAAZ,GAAApH,EAAA4E,GACA,GAAAyD,GAAAxC,EAAA,KAAA,GACA5O,EAAA2O,GAGA,KAAAf,EAAA5N,GACA,KAAAsO,GAAAtO,EAAA,OAEAoR,KACAxC,EAAA,KACA5O,EAAA,IAAAA,EAAA,IACA2N,EAAAkB,IACAhB,EAAAF,KACA3N,GAAA2N,EACAgB,MAGAC,EAAA,KACAyC,EAAAtI,EAAA/I,GAGA,QAAAqR,GAAAtI,EAAA/I,GACA,GAAA4O,EAAA,KAAA,GACA,KAAA,OAAAjB,GAAAgB,MAAA,CAGA,IAAAjB,EAAAC,IACA,KAAAW,GAAAX,GAAA,OAEA3N,GAAAA,EAAA,IAAA2N,GACAiB,EAAA,KAAA,GACAjG,EAAAI,EAAA/I,EAAA8O,GAAA,IAEAuC,EAAAtI,EAAA/I,OAGA2I,GAAAI,EAAA/I,EAAA8O,GAAA,IAIA,QAAAnG,GAAAI,EAAA/I,EAAAa,GACAkI,EAAAJ,UACAI,EAAAJ,UAAA3I,EAAAa,GAEAkI,EAAA/I,GAAAa,EAGA,QAAAkQ,GAAAhI,GACA,GAAA6F,EAAA,KAAA,GAAA,CACA,EACAuB,GAAApH,EAAA,gBACA6F,EAAA,KAAA,GACAA,GAAA,KAGA,MADAA,GAAA,KACA7F,EAGA,QAAAuH,GAAAvH,EAAA4E,GAIA,GAHAA,EAAAgB,KAGAjB,EAAAC,GACA,KAAAW,GAAAX,EAAA,eAEA,IAAA3N,GAAA2N,EACA2D,EAAA,GAAAhH,GAAAtK,EACA,IAAA4O,EAAA,KAAA,GAAA,CACA,KAAA,OAAAjB,EAAAgB,MAAA,CACA,GAAAS,GAAAtB,EAAAH,EACA,QAAAyB,GACA,IAAA,SACAe,EAAAmB,EAAAlC,GACAR,EAAA,IACA,MACA,KAAA,MACA2C,EAAAD,EAAAlC,EACA,MAGA,SACA,KAAAd,GAAAX,IAGAiB,EAAA,KAAA,OAEAA,GAAA,IACA7F,GAAAnB,IAAA0J,GAGA,QAAAC,GAAAxI,EAAA4E,GACA,GAAAvO,GAAAuO,EACA3N,EAAA2O,GAGA,KAAAjB,EAAA1N,GACA,KAAAsO,GAAAtO,EAAA,OACA,IAAA8J,GAAAE,EACAD,EAAAE,CACA2E,GAAA,IACA,IAAA4C,EAIA,IAHA5C,EAAA4C,EAAA,UAAA,KACAxH,GAAA,IAEA4D,EAAAD,EAAAgB,KACA,KAAAL,GAAAX,EAMA,IALA7D,EAAA6D,EACAiB,EAAA,KAAAA,EAAA,WAAAA,EAAA,KACAA,EAAA4C,GAAA,KACAvH,GAAA,IAEA2D,EAAAD,EAAAgB,KACA,KAAAL,GAAAX,EAEA5D,GAAA4D,EACAiB,EAAA,IACA,IAAA6C,GAAA,GAAA5H,GAAA7J,EAAAZ,EAAA0K,EAAAC,EAAAC,EAAAC,EACA,IAAA2E,EAAA,KAAA,GAAA,CACA,KAAA,OAAAjB,EAAAgB,MAAA,CACA,GAAAS,GAAAtB,EAAAH,EACA,QAAAyB,GACA,IAAA,SACAe,EAAAsB,EAAArC,GACAR,EAAA,IACA,MAGA,SACA,KAAAN,GAAAX,IAGAiB,EAAA,KAAA,OAEAA,GAAA,IACA7F,GAAAnB,IAAA6J,GAGA,QAAAlB,GAAAxH,EAAA4E,GACA,GAAA+D,GAAA/C,GAGA,KAAAf,EAAA8D,GACA,KAAApD,GAAAoD,EAAA,YAEA,IAAA9C,EAAA,KAAA,GAAA,CACA,KAAA,OAAAjB,EAAAgB,MAAA,CACA,GAAAS,GAAAtB,EAAAH,EACA,QAAAyB,GACA,IAAA,WACA,IAAA,WACA,IAAA,WACAqB,EAAA1H,EAAAqG,EAAAsC,EACA,MACA,SAEA,IAAAzB,KAAArC,EAAAD,GACA,KAAAW,GAAAX,EACAvU,GAAAuU,GACA8C,EAAA1H,EAAA,WAAA2I,IAIA9C,EAAA,KAAA,OAEAA,GAAA,KAthBAhC,YAAAF,GAGApI,IACAA,OAHAsI,EAAA,GAAAF,GACApI,EAAAsI,MAIA,IAOA8C,GACAI,EACAD,EACAG,EAVAxB,EAAAmD,EAAAhI,GACAgF,EAAAH,EAAAG,KACAvV,EAAAoV,EAAApV,KACAyV,EAAAL,EAAAK,KACAD,EAAAJ,EAAAI,KAEAgD,GAAA,EAKA3B,IAAA,CAEArD,KACAA,EAAA,GAAAF,GAsgBA,KApgBA,GAmgBAiB,IAngBA3B,GAAAY,EAEAkE,GAAAxM,EAAAuN,SAAA,SAAA7R,GAAA,MAAAA,IAAA+N,EAkgBA,QAAAJ,GAAAgB,MAAA,CACA,GAAAS,IAAAtB,EAAAH,GACA,QAAAyB,IAEA,IAAA,UAEA,IAAAwC,EACA,KAAAtD,GAAAX,GACA8B,IACA,MAEA,KAAA,SAEA,IAAAmC,EACA,KAAAtD,GAAAX,GACAgC,IACA,MAEA,KAAA,SAEA,IAAAiC,EACA,KAAAtD,GAAAX,GACAoC,IACA,MAEA,KAAA,SAEA,IAAA6B,EACA,KAAAtD,GAAAX,GACAwC,GAAAnE,GAAA2B,IACAiB,EAAA,IACA,MAEA,SACA,GAAAsB,EAAAlE,GAAA2B,IAAA,CACAiE,GAAA,CACA,UAGA,KAAAtD,GAAAX,KAKA,MADAU,GAAAE,SAAA,MAEAuD,QAAApC,EACAI,QAAAA,EACAD,YAAAA,EACAG,OAAAA,EACApD,KAAAA,GA5oBA9T,EAAAJ,QAAA2V,CAEA,IAAAsD,GAAAvZ,EAAA,IACAsU,EAAAtU,EAAA,IACAiH,EAAAjH,EAAA,IACA4P,EAAA5P,EAAA,IACAmQ,EAAAnQ,EAAA,IACA8U,EAAA9U,EAAA,IACAuL,EAAAvL,EAAA,IACAkS,EAAAlS,EAAA,IACAyR,EAAAzR,EAAA,IACAiO,EAAAjO,EAAA,IACAsH,EAAAtH,EAAA,8FCbA,YAWA,SAAA2Z,GAAAC,EAAAC,GACA,MAAAC,YAAA,uBAAAF,EAAAG,IAAA,OAAAF,GAAA,GAAA,MAAAD,EAAAnT,KASA,QAAAuT,GAAA7X,GAMAX,KAAA+E,IAAApE,EAMAX,KAAAuY,IAAA,EAMAvY,KAAAiF,IAAAtE,EAAA3B,OAqEA,QAAAyZ,KAEA,GAAAC,GAAA,GAAApN,GAAA,EAAA,GACA7M,EAAA,CACA,IAAAuB,KAAAiF,IAAAjF,KAAAuY,IAAA,EAAA,CACA,IAAA9Z,EAAA,EAAAA,EAAA,IAAAA,EAGA,GADAia,EAAAC,IAAAD,EAAAC,IAAA,IAAA3Y,KAAA+E,IAAA/E,KAAAuY,OAAA,EAAA9Z,KAAA,EACAuB,KAAA+E,IAAA/E,KAAAuY,OAAA,IACA,MAAAG,EAKA,IAFAA,EAAAC,IAAAD,EAAAC,IAAA,IAAA3Y,KAAA+E,IAAA/E,KAAAuY,OAAA,MAAA,EACAG,EAAAE,IAAAF,EAAAE,IAAA,IAAA5Y,KAAA+E,IAAA/E,KAAAuY,OAAA,KAAA,EACAvY,KAAA+E,IAAA/E,KAAAuY,OAAA,IACA,MAAAG,OACA,CACA,IAAAja,EAAA,EAAAA,EAAA,IAAAA,EAAA,CAEA,GAAAuB,KAAAuY,KAAAvY,KAAAiF,IACA,KAAAkT,GAAAnY,KAGA,IADA0Y,EAAAC,IAAAD,EAAAC,IAAA,IAAA3Y,KAAA+E,IAAA/E,KAAAuY,OAAA,EAAA9Z,KAAA,EACAuB,KAAA+E,IAAA/E,KAAAuY,OAAA,IACA,MAAAG,GAGA,GAAA1Y,KAAAuY,KAAAvY,KAAAiF,IACA,KAAAkT,GAAAnY,KAIA,IAFA0Y,EAAAC,IAAAD,EAAAC,IAAA,IAAA3Y,KAAA+E,IAAA/E,KAAAuY,OAAA,MAAA,EACAG,EAAAE,IAAAF,EAAAE,IAAA,IAAA5Y,KAAA+E,IAAA/E,KAAAuY,OAAA,KAAA,EACAvY,KAAA+E,IAAA/E,KAAAuY,OAAA,IACA,MAAAG,GAEA,GAAA1Y,KAAAiF,IAAAjF,KAAAuY,IAAA,GACA,IAAA9Z,EAAA,EAAAA,EAAA,IAAAA,EAGA,GADAia,EAAAE,IAAAF,EAAAE,IAAA,IAAA5Y,KAAA+E,IAAA/E,KAAAuY,OAAA,EAAA9Z,EAAA,KAAA,EACAuB,KAAA+E,IAAA/E,KAAAuY,OAAA,IACA,MAAAG,OAGA,KAAAja,EAAA,EAAAA,EAAA,IAAAA,EAAA,CAEA,GAAAuB,KAAAuY,KAAAvY,KAAAiF,IACA,KAAAkT,GAAAnY,KAGA,IADA0Y,EAAAE,IAAAF,EAAAE,IAAA,IAAA5Y,KAAA+E,IAAA/E,KAAAuY,OAAA,EAAA9Z,EAAA,KAAA,EACAuB,KAAA+E,IAAA/E,KAAAuY,OAAA,IACA,MAAAG,GAGA,KAAA/Z,OAAA,2BAGA,QAAAka,KACA,MAAAJ,GAAA1Z,KAAAiB,MAAA8Y,SAIA,QAAAC,KACA,MAAAN,GAAA1Z,KAAAiB,MAAAwL,WAGA,QAAAwN,KACA,MAAAP,GAAA1Z,KAAAiB,MAAA8Y,QAAA,GAIA,QAAAG,KACA,MAAAR,GAAA1Z,KAAAiB,MAAAwL,UAAA;CAGA,QAAA0N,KACA,MAAAT,GAAA1Z,KAAAiB,MAAAmZ,WAAAL,SAIA,QAAAM,KACA,MAAAX,GAAA1Z,KAAAiB,MAAAmZ,WAAA3N,WAkCA,QAAA6N,GAAAtU,EAAAlE,GACA,OAAAkE,EAAAlE,EAAA,GACAkE,EAAAlE,EAAA,IAAA,EACAkE,EAAAlE,EAAA,IAAA,GACAkE,EAAAlE,EAAA,IAAA,MAAA,EA2BA,QAAAyY,KAGA,GAAAtZ,KAAAuY,IAAA,EAAAvY,KAAAiF,IACA,KAAAkT,GAAAnY,KAAA,EAEA,OAAA,IAAAsL,GAAA+N,EAAArZ,KAAA+E,IAAA/E,KAAAuY,KAAA,GAAAc,EAAArZ,KAAA+E,IAAA/E,KAAAuY,KAAA,IAGA,QAAAgB,KACA,MAAAD,GAAAva,KAAAiB,MAAA8Y,QAAA,GAIA,QAAAU,KACA,MAAAF,GAAAva,KAAAiB,MAAAwL,UAAA,GAGA,QAAAiO,KACA,MAAAH,GAAAva,KAAAiB,MAAAmZ,WAAAL,SAIA,QAAAY,KACA,MAAAJ,GAAAva,KAAAiB,MAAAmZ,WAAA3N,WAyNA,QAAAmO,KAEA7T,EAAA2F,MACAmO,EAAAC,MAAAhB,EACAe,EAAAE,OAAAd,EACAY,EAAAG,OAAAb,EACAU,EAAAI,QAAAT,EACAK,EAAAK,SAAAR,IAEAG,EAAAC,MAAAd,EACAa,EAAAE,OAAAb,EACAW,EAAAG,OAAAX,EACAQ,EAAAI,QAAAR,EACAI,EAAAK,SAAAP,GA1fAxa,EAAAJ,QAAA0Z,CAEA,IAEA0B,GAFApU,EAAAtH,EAAA,IAIA8M,EAAAxF,EAAAwF,SACAtG,EAAAc,EAAAd,IAwCAwT,GAAAlW,OAAAwD,EAAAgG,OACA,SAAAnL,GAGA,MAFAuZ,KACAA,EAAA1b,EAAA,MACAga,EAAAlW,OAAA,SAAA3B,GACA,MAAA,IAAAuZ,GAAAvZ,KACAA,IAGA,SAAAA,GACA,MAAA,IAAA6X,GAAA7X,GAIA,IAAAiZ,GAAApB,EAAA7W,SAEAiY,GAAAO,EAAArU,EAAAtF,MAAAmB,UAAAyY,UAAAtU,EAAAtF,MAAAmB,UAAA+C,MAOAkV,EAAAS,OAAA,WACA,GAAApT,GAAA,UACA,OAAA,YACA,GAAAA,GAAA,IAAAjH,KAAA+E,IAAA/E,KAAAuY,QAAA,EAAAvY,KAAA+E,IAAA/E,KAAAuY,OAAA,IAAA,MAAAtR,EACA,IAAAA,GAAAA,GAAA,IAAAjH,KAAA+E,IAAA/E,KAAAuY,OAAA,KAAA,EAAAvY,KAAA+E,IAAA/E,KAAAuY,OAAA,IAAA,MAAAtR,EACA,IAAAA,GAAAA,GAAA,IAAAjH,KAAA+E,IAAA/E,KAAAuY,OAAA,MAAA,EAAAvY,KAAA+E,IAAA/E,KAAAuY,OAAA,IAAA,MAAAtR,EACA,IAAAA,GAAAA,GAAA,IAAAjH,KAAA+E,IAAA/E,KAAAuY,OAAA,MAAA,EAAAvY,KAAA+E,IAAA/E,KAAAuY,OAAA,IAAA,MAAAtR,EACA,IAAAA,GAAAA,GAAA,GAAAjH,KAAA+E,IAAA/E,KAAAuY,OAAA,MAAA,EAAAvY,KAAA+E,IAAA/E,KAAAuY,OAAA,IAAA,MAAAtR,EAGA,KAAAjH,KAAAuY,KAAA,GAAAvY,KAAAiF,IAEA,KADAjF,MAAAuY,IAAAvY,KAAAiF,IACAkT,EAAAnY,KAAA,GAEA,OAAAiH,OAQA2S,EAAAU,MAAA,WACA,MAAA,GAAAta,KAAAqa,UAOAT,EAAAW,OAAA,WACA,GAAAtT,GAAAjH,KAAAqa,QACA,OAAApT,KAAA,IAAA,EAAAA,GAAA,GAmHA2S,EAAAY,KAAA,WACA,MAAA,KAAAxa,KAAAqa,UAcAT,EAAAa,QAAA,WAGA,GAAAza,KAAAuY,IAAA,EAAAvY,KAAAiF,IACA,KAAAkT,GAAAnY,KAAA,EAEA,OAAAqZ,GAAArZ,KAAA+E,IAAA/E,KAAAuY,KAAA,IAOAqB,EAAAc,SAAA,WACA,GAAAzT,GAAAjH,KAAAya,SACA,OAAAxT,KAAA,IAAA,EAAAA,GAgDA,IAAA0T,GAAA,mBAAAC,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAE,EAAA,GAAAC,YAAAF,EAAAla,OAEA,OADAka,GAAA,IAAA,EACAC,EAAA,GACA,SAAA/V,EAAAwT,GAKA,MAJAuC,GAAA,GAAA/V,EAAAwT,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAsC,EAAA,IAGA,SAAA9V,EAAAwT,GAKA,MAJAuC,GAAA,GAAA/V,EAAAwT,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAsC,EAAA,OAIA,SAAA9V,EAAAwT,GACA,GAAAyC,GAAA3B,EAAAtU,EAAAwT,EAAA,GACAhD,EAAA,GAAAyF,GAAA,IAAA,EACAC,EAAAD,IAAA,GAAA,IACAE,EAAA,QAAAF,CACA,OAAA,OAAAC,EACAC,EACAxF,IACAH,GAAAE,EAAAA,GACA,IAAAwF,EACA,sBAAA1F,EAAA2F,EACA3F,EAAAlV,KAAA8a,IAAA,EAAAF,EAAA,MAAAC,EAAA,SAQAtB,GAAAwB,MAAA,WAGA,GAAApb,KAAAuY,IAAA,EAAAvY,KAAAiF,IACA,KAAAkT,GAAAnY,KAAA,EAEA,IAAAiH,GAAA0T,EAAA3a,KAAA+E,IAAA/E,KAAAuY,IAEA,OADAvY,MAAAuY,KAAA,EACAtR,EAGA,IAAAoU,GAAA,mBAAAC,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAR,EAAA,GAAAC,YAAAQ,EAAA5a,OAEA,OADA4a,GAAA,IAAA,EACAT,EAAA,GACA,SAAA/V,EAAAwT,GASA,MARAuC,GAAA,GAAA/V,EAAAwT,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAgD,EAAA,IAGA,SAAAxW,EAAAwT,GASA,MARAuC,GAAA,GAAA/V,EAAAwT,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAuC,EAAA,GAAA/V,EAAAwT,EAAA,GACAgD,EAAA,OAIA,SAAAxW,EAAAwT,GACA,GAAAI,GAAAU,EAAAtU,EAAAwT,EAAA,GACAK,EAAAS,EAAAtU,EAAAwT,EAAA,GACAhD,EAAA,GAAAqD,GAAA,IAAA,EACAqC,EAAArC,IAAA,GAAA,KACAsC,EAAA,YAAA,QAAAtC,GAAAD,CACA,OAAA,QAAAsC,EACAC,EACAxF,IACAH,GAAAE,EAAAA,GACA,IAAAwF,EACA,OAAA1F,EAAA2F,EACA3F,EAAAlV,KAAA8a,IAAA,EAAAF,EAAA,OAAAC,EAAA,kBAQAtB,GAAA4B,OAAA,WAGA,GAAAxb,KAAAuY,IAAA,EAAAvY,KAAAiF,IACA,KAAAkT,GAAAnY,KAAA,EAEA,IAAAiH,GAAAoU,EAAArb,KAAA+E,IAAA/E,KAAAuY,IAEA,OADAvY,MAAAuY,KAAA,EACAtR,GAOA2S,EAAA/N,MAAA,WACA,GAAA7M,GAAAgB,KAAAqa,SACAzZ,EAAAZ,KAAAuY,IACA1X,EAAAb,KAAAuY,IAAAvZ,CAGA,IAAA6B,EAAAb,KAAAiF,IACA,KAAAkT,GAAAnY,KAAAhB,EAGA,OADAgB,MAAAuY,KAAAvZ,EACA4B,IAAAC,EACA,GAAAb,MAAA+E,IAAAxC,YAAA,GACAvC,KAAAma,EAAApb,KAAAiB,KAAA+E,IAAAnE,EAAAC,IAOA+Y,EAAA1Z,OAAA,WACA,GAAA2L,GAAA7L,KAAA6L,OACA,OAAA7G,GAAAE,KAAA2G,EAAA,EAAAA,EAAA7M,SAQA4a,EAAA5E,KAAA,SAAAhW,GACA,GAAA,gBAAAA,GAAA,CAEA,GAAAgB,KAAAuY,IAAAvZ,EAAAgB,KAAAiF,IACA,KAAAkT,GAAAnY,KAAAhB,EACAgB,MAAAuY,KAAAvZ,MAEA,GAEA,IAAAgB,KAAAuY,KAAAvY,KAAAiF,IACA,KAAAkT,GAAAnY,YACA,IAAAA,KAAA+E,IAAA/E,KAAAuY,OAEA,OAAAvY,OAQA4Z,EAAA6B,SAAA,SAAA3O,GACA,OAAAA,GACA,IAAA,GACA9M,KAAAgV,MACA,MACA,KAAA,GACAhV,KAAAgV,KAAA,EACA,MACA,KAAA,GACAhV,KAAAgV,KAAAhV,KAAAqa,SACA,MACA,KAAA,GACA,OAAA,CACA,GAAA,KAAAvN,EAAA,EAAA9M,KAAAqa,UACA,KACAra,MAAAyb,SAAA3O,GAEA,KACA,KAAA,GACA9M,KAAAgV,KAAA,EACA,MAGA,SACA,KAAArW,OAAA,qBAAAmO,EAAA,cAAA9M,KAAAuY,KAEA,MAAAvY,OAoBAwY,EAAAkD,EAAA/B,EAEAA,wCCjgBA,YAiBA,SAAAO,GAAAvZ,GACA6X,EAAAzZ,KAAAiB,KAAAW,GAjBAzB,EAAAJ,QAAAob,CAEA,IAAA1B,GAAAha,EAAA,IAEAmd,EAAAzB,EAAAvY,UAAAU,OAAAC,OAAAkW,EAAA7W,UACAga,GAAApZ,YAAA2X,CAEA,IAAApU,GAAAtH,EAAA,GAaAsH,GAAAgG,SACA6P,EAAAxB,EAAArU,EAAAgG,OAAAnK,UAAA+C,OAKAiX,EAAAzb,OAAA,WACA,GAAA+E,GAAAjF,KAAAqa,QACA,OAAAra,MAAA+E,IAAA6W,UAAA5b,KAAAuY,IAAAvY,KAAAuY,IAAAlY,KAAAwb,IAAA7b,KAAAuY,IAAAtT,EAAAjF,KAAAiF,2CC7BA,YAsBA,SAAA6N,GAAApI,GACAkG,EAAA7R,KAAAiB,KAAA,GAAA0K,GAMA1K,KAAA8b,YAMA9b,KAAA+b,SA4BA,QAAAC,MA6LA,QAAAC,GAAA9V,GACA,GAAA+V,GAAA/V,EAAAgJ,OAAAC,OAAAjJ,EAAAjE,OACA,IAAAga,EAAA,CACA,GAAAC,GAAA,GAAA/N,GAAAjI,EAAA+M,cAAA/M,EAAAyB,GAAAzB,EAAAX,KAAAW,EAAA+C,MAAA3H,QAAA4E,EAAAuE,QAIA,OAHAyR,GAAA3N,eAAArI,EACAA,EAAAoI,eAAA4N,EACAD,EAAAlO,IAAAmO,IACA,EAEA,OAAA,EApQAjd,EAAAJ,QAAAgU,CAEA,IAAAlC,GAAApS,EAAA,IAEA4d,EAAAxL,EAAA1O,OAAA4Q,EAEAA,GAAAnF,UAAA,MAEA,IAGA8G,GACArN,EAJAgH,EAAA5P,EAAA,IACAsH,EAAAtH,EAAA,GAkCAsU,GAAAhF,SAAA,SAAAzG,EAAA2L,GAIA,MAFAA,KACAA,EAAA,GAAAF,IACAE,EAAAhB,WAAA3K,EAAAqD,SAAA+G,QAAApK,EAAAC,SAWA8U,EAAAC,YAAAvW,EAAArD,KAAA9C,OAMA,IAAA2c,GAAA,WACA,IACA7H,EAAAjW,EAAA,IACA4I,EAAA5I,EAAA,IACA,MAAAR,IACAse,EAAA,KAUAF,GAAAG,KAAA,QAAAA,GAAA5H,EAAAjK,EAAAhI,GAYA,QAAA8Z,GAAA3c,EAAAmT,GACA,GAAAtQ,EAAA,CAEA,GAAA+Z,GAAA/Z,CACAA,GAAA,KACA+Z,EAAA5c,EAAAmT,IAMA,QAAA0J,GAAA/H,EAAA5E,GACA,IAGA,GAFAjK,EAAAmI,SAAA8B,IAAA,MAAAA,EAAA3P,OAAA,KACA2P,EAAA4M,KAAAlI,MAAA1E,IACAjK,EAAAmI,SAAA8B,GAEA,CACA0E,EAAAE,SAAAA,CACA,IAAAiI,GAAAnI,EAAA1E,EAAAzC,EAAA5C,EACAkS,GAAA1G,SACA0G,EAAA1G,QAAAhQ,QAAA,SAAAE,GACA5D,EAAA8K,EAAA+O,YAAA1H,EAAAvO,MAEAwW,EAAA3G,aACA2G,EAAA3G,YAAA/P,QAAA,SAAAE,GACA5D,EAAA8K,EAAA+O,YAAA1H,EAAAvO,IAAA,SAVAkH,GAAA0E,WAAAjC,EAAArF,SAAA+G,QAAA1B,EAAAzI,QAaA,MAAAzH,GAEA,WADA2c,GAAA3c,GAGAgd,GAAAC,GACAN,EAAA,KAAAlP,GAIA,QAAA9K,GAAAmS,EAAAoI,GAGA,GAAAC,GAAArI,EAAAsI,YAAA,mBACA,IAAAD,GAAA,EAAA,CACA,GAAAE,GAAAvI,EAAAN,UAAA2I,EACAE,KAAA9V,KACAuN,EAAAuI,GAIA,KAAA5P,EAAAyO,MAAAhV,QAAA4N,IAAA,GAAA,CAKA,GAHArH,EAAAyO,MAAAvc,KAAAmV,GAGAA,IAAAvN,GAUA,YATAyV,EACAH,EAAA/H,EAAAvN,EAAAuN,OAEAmI,EACAK,WAAA,aACAL,EACAJ,EAAA/H,EAAAvN,EAAAuN,OAOA,IAAAkI,EAAA,CACA,GAAA9M,EACA,KACAA,EAAAjK,EAAAnD,GAAAya,aAAAzI,GAAAhJ,SAAA,QACA,MAAA9L,GAGA,YAFAkd,GACAP,EAAA3c,IAGA6c,EAAA/H,EAAA5E,SAEA+M,EACAhX,EAAAtD,MAAAmS,EAAA,SAAA9U,EAAAkQ,GAEA,KADA+M,EACApa,EAEA,MAAA7C,QACAkd,GACAP,EAAA3c,QAGA6c,GAAA/H,EAAA5E,MApGAuM,GACAA,IACA,kBAAA5R,KACAhI,EAAAgI,EACAA,EAAAnJ,OAEA,IAAA+L,GAAAtN,IACA,KAAA0C,EACA,MAAAoD,GAAA3G,UAAAod,EAAAjP,EAAAqH,EAWA,IAAAkI,GAAAna,IAAAsZ,EAqFAc,EAAA,CAUA,OANAhX,GAAAmI,SAAA0G,KACAA,GAAAA,IACAA,EAAAzO,QAAA,SAAAyO,GACAnS,EAAA8K,EAAA+O,YAAA,GAAA1H,MAGAkI,EACAvP,OACAwP,GACAN,EAAA,KAAAlP,KAgCA8O,EAAAiB,SAAA,SAAA1I,EAAAjK,GACA,MAAA1K,MAAAuc,KAAA5H,EAAAjK,EAAAsR,IAMAI,EAAA9J,WAAA,WACA,GAAAtS,KAAA8b,SAAA9c,OACA,KAAAL,OAAA,4BAAAqB,KAAA8b,SAAAvP,IAAA,SAAApG,GACA,MAAA,WAAAA,EAAAjE,OAAA,QAAAiE,EAAAgJ,OAAA+D,gBACA9O,KAAA,MACA,OAAAwM,GAAAjP,UAAA2Q,WAAAvT,KAAAiB,OA4BAoc,EAAAhJ,EAAA,SAAA3D,GAEA,GAAA6N,GAAAtd,KAAA8b,SAAApX,OACA1E,MAAA8b,WAEA,KADA,GAAArd,GAAA,EACAA,EAAA6e,EAAAte,QACAid,EAAAqB,EAAA7e,IACA6e,EAAAtb,OAAAvD,EAAA,KAEAA,CAGA,IAFAuB,KAAA8b,SAAAwB,EAEA7N,YAAArB,IAAA7M,SAAAkO,EAAAvN,SAAAuN,EAAAlB,iBAAA0N,EAAAxM,IAAAzP,KAAA8b,SAAA/U,QAAA0I,GAAA,EACAzP,KAAA8b,SAAAtc,KAAAiQ,OACA,IAAAA,YAAAmB,GAAA,CACA,GAAAtJ,GAAAmI,EAAAiC,gBACA,KAAAjT,EAAA,EAAAA,EAAA6I,EAAAtI,SAAAP,EACAuB,KAAAoT,EAAA9L,EAAA7I,MAUA2d,EAAA/I,EAAA,SAAA5D,GACA,GAAAA,YAAArB,GAAA,CAEA,GAAA7M,SAAAkO,EAAAvN,SAAAuN,EAAAlB,eAAA,CACA,GAAAqF,GAAA5T,KAAA8b,SAAA/U,QAAA0I,EACAmE,IAAA,GACA5T,KAAA8b,SAAA9Z,OAAA4R,EAAA,GAGAnE,EAAAlB,iBACAkB,EAAAlB,eAAAY,OAAAhB,OAAAsB,EAAAlB,gBACAkB,EAAAlB,eAAA,UAEA,IAAAkB,YAAAmB,GAEA,IAAA,GADAtJ,GAAAmI,EAAAiC,iBACAjT,EAAA,EAAAA,EAAA6I,EAAAtI,SAAAP,EACAuB,KAAAqT,EAAA/L,EAAA7I,2DCzTA,YAMA,IAAA8e,GAAAze,CAEAye,GAAA7M,QAAAlS,EAAA,kCCRA,YAcA,SAAAkS,GAAA8M,GACAhc,EAAAzC,KAAAiB,MAMAA,KAAAyd,KAAAD,EApBAte,EAAAJ,QAAA4R,CAEA,IAAA5K,GAAAtH,EAAA,IACAgD,EAAAsE,EAAAtE,aAqBAkc,EAAAhN,EAAA/O,UAAAU,OAAAC,OAAAd,EAAAG,UACA+b,GAAAnb,YAAAmO,EAOAgN,EAAA7c,IAAA,SAAA8c,GAOA,MANA3d,MAAAyd,OACAE,GACA3d,KAAAyd,KAAA,KAAA,KAAA,MACAzd,KAAAyd,KAAA,KACAzd,KAAAiC,KAAA,OAAAH,OAEA9B,oCCxCA,YAwBA,SAAA0Q,GAAAtK,EAAAsE,GACAkG,EAAA7R,KAAAiB,KAAAoG,EAAAsE,GAMA1K,KAAAwR,WAOAxR,KAAA4d,EAAA,KAmBA,QAAA5M,GAAA0G,GAEA,MADAA,GAAAkG,EAAA,KACAlG,EA1DAxY,EAAAJ,QAAA4R,CAEA,IAAAE,GAAApS,EAAA,IAEA6S,EAAAT,EAAAjP,UAEA+b,EAAA9M,EAAA1O,OAAAwO,EAEAA,GAAA/C,UAAA,SAEA,IAAAsC,GAAAzR,EAAA,IACAsH,EAAAtH,EAAA,IACA+e,EAAA/e,EAAA,GA4BAsH,GAAA8I,MAAA8O,GAQAG,cACA/W,IAAA,WACA,MAAA9G,MAAA4d,IAAA5d,KAAA4d,EAAA9X,EAAAyL,QAAAvR,KAAAwR,cAgBAd,EAAA9C,SAAA,SAAAvG,GACA,MAAAwG,SAAAxG,GAAAA,EAAAmK,UAUAd,EAAA5C,SAAA,SAAA1H,EAAAiB,GACA,GAAAqQ,GAAA,GAAAhH,GAAAtK,EAAAiB,EAAAqD,QAKA,OAJArD,GAAAmK,SACAnP,OAAAD,KAAAiF,EAAAmK,SAAAtL,QAAA,SAAA4X,GACApG,EAAA1J,IAAAiC,EAAAnC,SAAAgQ,EAAAzW,EAAAmK,QAAAsM,OAEApG,GAMAgG,EAAA3P,OAAA,WACA,GAAAgQ,GAAA1M,EAAAtD,OAAAhP,KAAAiB,KACA,QACA0K,QAAAqT,GAAAA,EAAArT,SAAAnJ,OACAiQ,QAAAZ,EAAAM,YAAAlR,KAAAge,uBACA1W,OAAAyW,GAAAA,EAAAzW,QAAA/F,SAOAmc,EAAA5W,IAAA,SAAAV,GACA,MAAAiL,GAAAvK,IAAA/H,KAAAiB,KAAAoG,IAAApG,KAAAwR,QAAApL,IAAA,MAMAsX,EAAApL,WAAA,WAEA,IAAA,GADAd,GAAAxR,KAAAge,kBACAvf,EAAA,EAAAA,EAAA+S,EAAAxS,SAAAP,EACA+S,EAAA/S,GAAAkB,SACA,OAAA0R,GAAA1R,QAAAZ,KAAAiB,OAMA0d,EAAA1P,IAAA,SAAAyB,GAEA,GAAAzP,KAAA8G,IAAA2I,EAAArJ,MACA,KAAAzH,OAAA,mBAAA8Q,EAAArJ,KAAA,QAAApG,KACA,OAAAyP,aAAAQ,IACAjQ,KAAAwR,QAAA/B,EAAArJ,MAAAqJ,EACAA,EAAAN,OAAAnP,KACAgR,EAAAhR,OAEAqR,EAAArD,IAAAjP,KAAAiB,KAAAyP,IAMAiO,EAAAvP,OAAA,SAAAsB,GACA,GAAAA,YAAAQ,GAAA,CAGA,GAAAjQ,KAAAwR,QAAA/B,EAAArJ,QAAAqJ,EACA,KAAA9Q,OAAA8Q,EAAA,uBAAAzP,KAIA,cAFAA,MAAAwR,QAAA/B,EAAArJ,MACAqJ,EAAAN,OAAA,KACA6B,EAAAhR,MAEA,MAAAqR,GAAAlD,OAAApP,KAAAiB,KAAAyP,IA6BAiO,EAAApb,OAAA,SAAAkb,EAAAS,EAAAC,GACA,GAAAC,GAAA,GAAAZ,GAAA7M,QAAA8M,EAyCA,OAxCAxd,MAAAge,kBAAA9X,QAAA,SAAA2R,GACAsG,EAAArY,EAAAsR,QAAAS,EAAAzR,OAAA,SAAAgY,EAAA1b,GACA,GAAAyb,EAAAV,KAAA,CAIA,IAAAW,EACA,KAAAtY,GAAAqB,EAAA,UAAA,WAEA0Q,GAAAlY,SACA,IAAA0e,EACA,KACAA,GAAAJ,EAAApG,EAAAvH,oBAAAX,gBAAAyO,GAAAvG,EAAAvH,oBAAA5P,OAAA0d,IAAA5B,SACA,MAAA3c,GAEA,YADA,kBAAAye,cAAAA,aAAAnB,YAAA,WAAAza,EAAA7C,KAKA2d,EAAA3F,EAAAwG,EAAA,SAAAxe,EAAA0e,GACA,GAAA1e,EAEA,MADAse,GAAAlc,KAAA,QAAApC,EAAAgY,GACAnV,EAAAA,EAAA7C,GAAA0B,MAEA,IAAA,OAAAgd,EAEA,WADAJ,GAAAtd,KAAA,EAGA,IAAA2d,EACA,KACAA,EAAAN,EAAArG,EAAAtH,qBAAAV,gBAAA0O,GAAA1G,EAAAtH,qBAAApP,OAAAod,GACA,MAAAE,GAEA,MADAN,GAAAlc,KAAA,QAAAwc,EAAA5G,GACAnV,EAAAA,EAAA,QAAA+b,GAAAld,OAGA,MADA4c,GAAAlc,KAAA,OAAAuc,EAAA3G,GACAnV,EAAAA,EAAA,KAAA8b,GAAAjd,aAIA4c,mDCxNA,YAOA,SAAAO,GAAAtK,GACA,MAAAA,GAAAzQ,QAAA,UAAA,SAAA2Q,EAAAC,GACA,OAAAA,GACA,IAAA,KACA,IAAA,GACA,MAAAA,EACA,KAAA,IACA,MAAA,IACA,SACA,MAAAA,MAqBA,QAAAwD,GAAAhI,GAmBA,QAAA2E,GAAAiK,GACA,MAAAhgB,OAAA,WAAAggB,EAAA,UAAA9J,EAAA,KAQA,QAAAC,KACA,GAAA8J,GAAA,MAAAC,EAAAC,EAAAC,CACAH,GAAAI,UAAA5d,EAAA,CACA,IAAA6d,GAAAL,EAAAM,KAAAnP,EACA,KAAAkP,EACA,KAAAvK,GAAA,SAIA,OAHAtT,GAAAwd,EAAAI,UACAxf,EAAAqf,GACAA,EAAA,KACAH,EAAAO,EAAA,IASA,QAAA7e,GAAAmY,GACA,MAAAxI,GAAA3P,OAAAmY,GAQA,QAAAxD,KACA,GAAAoK,EAAAngB,OAAA,EACA,MAAAmgB,GAAAhb,OACA,IAAA0a,EACA,MAAA/J,IACA,IAAAsK,GACArN,EACAsN,CACA,GAAA,CACA,GAAAje,IAAApC,EACA,MAAA,KAEA,KADAogB,GAAA,EACA,KAAAvb,KAAAwb,EAAAjf,EAAAgB,KAGA,GAFA,OAAAie,KACAxK,IACAzT,IAAApC,EACA,MAAA,KAEA,IAAA,MAAAoB,EAAAgB,GAAA,CACA,KAAAA,IAAApC,EACA,KAAA0V,GAAA,UACA,IAAA,MAAAtU,EAAAgB,GAAA,CACA,KAAA,OAAAhB,IAAAgB,IACA,GAAAA,IAAApC,EACA,MAAA,QACAoC,IACAyT,EACAuK,GAAA,MACA,CAAA,GAAA,OAAAC,EAAAjf,EAAAgB,IAYA,MAAA,GAXA,GAAA,CAGA,GAFA,OAAAie,KACAxK,IACAzT,IAAApC,EACA,MAAA,KACA+S,GAAAsN,EACAA,EAAAjf,EAAAgB,SACA,MAAA2Q,GAAA,MAAAsN,KACAje,EACAge,GAAA,UAIAA,EAEA,IAAAhe,IAAApC,EACA,MAAA,KACA,IAAA6B,GAAAO,CACAke,GAAAN,UAAA,CACA,IAAAO,GAAAD,EAAAzb,KAAAzD,EAAAS,KACA,KAAA0e,EACA,KAAA1e,EAAA7B,IAAAsgB,EAAAzb,KAAAzD,EAAAS,OACAA,CACA,IAAAkT,GAAAhE,EAAAsE,UAAAjT,EAAAA,EAAAP,EAGA,OAFA,MAAAkT,GAAA,MAAAA,IACA8K,EAAA9K,GACAA,EASA,QAAAvU,GAAAuU,GACAoL,EAAA3f,KAAAuU,GAQA,QAAAkB,KACA,IAAAkK,EAAAngB,OAAA,CACA,GAAA+U,GAAAgB,GACA,IAAA,OAAAhB,EACA,MAAA,KACAvU,GAAAuU,GAEA,MAAAoL,GAAA,GAWA,QAAAnK,GAAAwK,EAAAlR,GACA,GAAAmR,GAAAxK,IACAyK,EAAAD,IAAAD,CACA,IAAAE,EAEA,MADA3K,MACA,CAEA,KAAAzG,EACA,KAAAoG,GAAA,UAAA+K,EAAA,OAAAD,EAAA,aACA,QAAA,EAzJAzP,EAAAA,EAAApE,UAEA,IAAAvK,GAAA,EACApC,EAAA+Q,EAAA/Q,OACA6V,EAAA,EAEAsK,KAEAN,EAAA,IAoJA,QACAhK,KAAA,WAAA,MAAAA,IACAE,KAAAA,EACAE,KAAAA,EACAzV,KAAAA,EACAwV,KAAAA,GAvMA9V,EAAAJ,QAAAiZ,CAEA,IAAAuH,GAAA,uBACAP,EAAA,kCACAD,EAAA,2DCLA,YAiCA,SAAArZ,GAAAW,EAAAsE,GACAkG,EAAA7R,KAAAiB,KAAAoG,EAAAsE,GAMA1K,KAAA0H,UAMA1H,KAAAsI,OAAA/G,OAMAvB,KAAA+W,WAAAxV,OAMAvB,KAAAgX,SAAAzV,OAMAvB,KAAAqM,MAAA9K,OAOAvB,KAAA2f,EAAA,KAOA3f,KAAAyT,EAAA,KAOAzT,KAAA4f,EAAA,KAOA5f,KAAA6f,EAAA,KAOA7f,KAAA8f,EAAA,KAsFA,QAAA9O,GAAAxL,GAKA,MAJAA,GAAAma,EAAAna,EAAAiO,EAAAjO,EAAAqa,EAAAra,EAAAsa,EAAA,WACAta,GAAA9E,aACA8E,GAAArE,aACAqE,GAAAsK,OACAtK,EA7LAtG,EAAAJ,QAAA2G,CAEA,IAAAmL,GAAApS,EAAA,IAEA6S,EAAAT,EAAAjP,UAEAoe,EAAAnP,EAAA1O,OAAAuD,EAEAA,GAAAkI,UAAA,MAEA,IAAA5D,GAAAvL,EAAA,IACA8U,EAAA9U,EAAA,IACA4P,EAAA5P,EAAA,IACAkS,EAAAlS,EAAA,IACA+G,EAAA/G,EAAA,IACAqH,EAAArH,EAAA,IACAga,EAAAha,EAAA,IACAwhB,EAAAxhB,EAAA,IACAsH,EAAAtH,EAAA,IACAqO,EAAArO,EAAA,IACA4N,EAAA5N,EAAA,IACAyhB,EAAAzhB,EAAA,IACAyL,EAAAzL,EAAA,GA+EAsH,GAAA8I,MAAAmR,GAQAG,YACApZ,IAAA,WACA,GAAA9G,KAAA2f,EACA,MAAA3f,MAAA2f,CACA3f,MAAA2f,IAEA,KAAA,GADAQ,GAAA9d,OAAAD,KAAApC,KAAA0H,QACAjJ,EAAA,EAAAA,EAAA0hB,EAAAnhB,SAAAP,EAAA,CACA,GAAA0H,GAAAnG,KAAA0H,OAAAyY,EAAA1hB,IACAmJ,EAAAzB,EAAAyB,EAGA,IAAA5H,KAAA2f,EAAA/X,GACA,KAAAjJ,OAAA,gBAAAiJ,EAAA,OAAA5H,KAEAA,MAAA2f,EAAA/X,GAAAzB,EAEA,MAAAnG,MAAA2f,IAUAS,aACAtZ,IAAA,WACA,MAAA9G,MAAAyT,IAAAzT,KAAAyT,EAAA3N,EAAAyL,QAAAvR,KAAA0H,WAUA2Y,qBACAvZ,IAAA,WACA,MAAA9G,MAAA4f,IAAA5f,KAAA4f,EAAA5f,KAAAiG,iBAAAqa,OAAA,SAAAna,GAAA,MAAAA,GAAAoE,cAUAgW,aACAzZ,IAAA,WACA,MAAA9G,MAAA6f,IAAA7f,KAAA6f,EAAA/Z,EAAAyL,QAAAvR,KAAAsI,WASAnG,MACA2E,IAAA,WACA,MAAA9G,MAAA8f,IAAA9f,KAAA8f,EAAAva,EAAAjD,OAAAtC,MAAAuC,cAEAyE,IAAA,SAAA7E,GACA,GAAAA,KAAAA,EAAAR,oBAAAkE,IACA,KAAAC,GAAAqB,EAAA,OAAA,wBACAhF,GAAAoJ,OACApJ,EAAAoJ,KAAA1F,EAAA0F,MACAvL,KAAA8f,EAAA3d,MAkBAsD,EAAAmI,SAAA,SAAAvG,GACA,MAAAwG,SAAAxG,GAAAA,EAAAK,QAGA,IAAAiJ,IAAA5G,EAAAtE,EAAA2I,EAAAsC,EAQAjL,GAAAqI,SAAA,SAAA1H,EAAAiB,GACA,GAAA7B,GAAA,GAAAC,GAAAW,EAAAiB,EAAAqD,QA4BA,OA3BAlF,GAAAuR,WAAA1P,EAAA0P,WACAvR,EAAAwR,SAAA3P,EAAA2P,SACA3P,EAAAK,QACArF,OAAAD,KAAAiF,EAAAK,QAAAxB,QAAA,SAAA2N,GACArO,EAAAwI,IAAAI,EAAAN,SAAA+F,EAAAxM,EAAAK,OAAAmM,OAEAxM,EAAAiB,QACAjG,OAAAD,KAAAiF,EAAAiB,QAAApC,QAAA,SAAAsa,GACAhb,EAAAwI,IAAAsF,EAAAxF,SAAA0S,EAAAnZ,EAAAiB,OAAAkY,OAEAnZ,EAAAC,QACAjF,OAAAD,KAAAiF,EAAAC,QAAApB,QAAA,SAAA2L,GAEA,IAAA,GADAvK,GAAAD,EAAAC,OAAAuK,GACApT,EAAA,EAAAA,EAAAkS,EAAA3R,SAAAP,EACA,GAAAkS,EAAAlS,GAAAmP,SAAAtG,GAEA,WADA9B,GAAAwI,IAAA2C,EAAAlS,GAAAqP,SAAA+D,EAAAvK,GAIA,MAAA3I,OAAA,4BAAA6G,EAAA,KAAAqM,KAEAxK,EAAA0P,YAAA1P,EAAA0P,WAAA/X,SACAwG,EAAAuR,WAAA1P,EAAA0P,YACA1P,EAAA2P,UAAA3P,EAAA2P,SAAAhY,SACAwG,EAAAwR,SAAA3P,EAAA2P,UACA3P,EAAAgF,QACA7G,EAAA6G,OAAA,GACA7G,GAMAua,EAAAhS,OAAA,WACA,GAAAgQ,GAAA1M,EAAAtD,OAAAhP,KAAAiB,KACA,QACA0K,QAAAqT,GAAAA,EAAArT,SAAAnJ,OACA+G,OAAAsI,EAAAM,YAAAlR,KAAA2G,kBACAe,OAAAkJ,EAAAM,YAAAlR,KAAAiG,iBAAAqa,OAAA,SAAAlP,GAAA,OAAAA,EAAA5C,sBACAuI,WAAA/W,KAAA+W,YAAA/W,KAAA+W,WAAA/X,OAAAgB,KAAA+W,WAAAxV,OACAyV,SAAAhX,KAAAgX,UAAAhX,KAAAgX,SAAAhY,OAAAgB,KAAAgX,SAAAzV,OACA8K,MAAArM,KAAAqM,OAAA9K,OACA+F,OAAAyW,GAAAA,EAAAzW,QAAA/F,SAOAwe,EAAAzN,WAAA,WAEA,IADA,GAAA5K,GAAA1H,KAAAiG,iBAAAxH,EAAA,EACAA,EAAAiJ,EAAA1I,QACA0I,EAAAjJ,KAAAkB,SACA,IAAA2I,GAAAtI,KAAA2G,gBACA,KADAlI,EAAA,EACAA,EAAA6J,EAAAtJ,QACAsJ,EAAA7J,KAAAkB,SACA,OAAA0R,GAAA1R,QAAAZ,KAAAiB,OAMA+f,EAAAjZ,IAAA,SAAAV,GACA,MAAAiL,GAAAvK,IAAA/H,KAAAiB,KAAAoG,IAAApG,KAAA0H,QAAA1H,KAAA0H,OAAAtB,IAAApG,KAAAsI,QAAAtI,KAAAsI,OAAAlC,IAAA,MAUA2Z,EAAA/R,IAAA,SAAAyB,GACA,GAAAzP,KAAA8G,IAAA2I,EAAArJ,MACA,KAAAzH,OAAA,mBAAA8Q,EAAArJ,KAAA,QAAApG,KACA,IAAAyP,YAAArB,IAAA7M,SAAAkO,EAAAvN,OAAA,CAIA,GAAAlC,KAAAygB,gBAAAhR,EAAA7H,IACA,KAAAjJ,OAAA,gBAAA8Q,EAAA7H,GAAA,OAAA5H,KAMA,OALAyP,GAAAN,QACAM,EAAAN,OAAAhB,OAAAsB,GACAzP,KAAA0H,OAAA+H,EAAArJ,MAAAqJ,EACAA,EAAAzD,QAAAhM,KACAyP,EAAAwC,MAAAjS,MACAgR,EAAAhR,MAEA,MAAAyP,aAAA6D,IACAtT,KAAAsI,SACAtI,KAAAsI,WACAtI,KAAAsI,OAAAmH,EAAArJ,MAAAqJ,EACAA,EAAAwC,MAAAjS,MACAgR,EAAAhR,OAEAqR,EAAArD,IAAAjP,KAAAiB,KAAAyP,IAUAsQ,EAAA5R,OAAA,SAAAsB,GACA,GAAAA,YAAArB,IAAA7M,SAAAkO,EAAAvN,OAAA,CAEA,GAAAlC,KAAA0H,OAAA+H,EAAArJ,QAAAqJ,EACA,KAAA9Q,OAAA8Q,EAAA,uBAAAzP,KAGA,cAFAA,MAAA0H,OAAA+H,EAAArJ,MACAqJ,EAAAzD,QAAA,KACAgF,EAAAhR,MAEA,MAAAqR,GAAAlD,OAAApP,KAAAiB,KAAAyP,IAQAsQ,EAAAzd,OAAA,SAAAsD,GACA,MAAA,KAAA5F,KAAAiM,WAAArG,IASAma,EAAAxU,KAAA,SAAAkE,EAAA/E,GACA,MAAA1K,MAAAqK,QAAAoF,EAAAxF,EAAA+B,QAAAtB,IAOAqV,EAAAW,MAAA,WAGA,GAAAjU,GAAAzM,KAAAiG,iBAAAsG,IAAA,SAAAoU,GAAA,MAAAA,GAAAhhB,UAAAmK,cAmBA,OAlBA9J,MAAAU,OAAAmM,EAAA7M,MAAA4gB,IAAA5gB,KAAAkT,cAAA,WACA8M,OAAAA,EACAvT,MAAAA,EACA3G,KAAAA,IAEA9F,KAAAmB,OAAAiL,EAAApM,MAAA4gB,IAAA5gB,KAAAkT,cAAA,WACAsF,OAAAA,EACA/L,MAAAA,EACA3G,KAAAA,IAEA9F,KAAA8P,OAAAmQ,EAAAjgB,MAAA4gB,IAAA5gB,KAAAkT,cAAA,WACAzG,MAAAA,EACA3G,KAAAA,IAEA9F,KAAAqK,QAAAJ,EAAAjK,MAAA4gB,IAAA5gB,KAAAkT,cAAA,YACAzG,MAAAA,EACA3G,KAAAA,IAEA9F,MASA+f,EAAArf,OAAA,SAAAsL,EAAA0D,GACA,MAAA1P,MAAA0gB,QAAAhgB,OAAAsL,EAAA0D,IASAqQ,EAAApQ,gBAAA,SAAA3D,EAAA0D,GACA,MAAA1P,MAAAU,OAAAsL,EAAA0D,GAAAA,EAAAzK,IAAAyK,EAAAmR,OAAAnR,GAAAoR,UASAf,EAAA5e,OAAA,SAAAyO,EAAA5Q,GACA,MAAAgB,MAAA0gB,QAAAvf,OAAAyO,EAAA5Q,IAQA+gB,EAAAlQ,gBAAA,SAAAD,GAEA,MADAA,GAAAA,YAAA4I,GAAA5I,EAAA4I,EAAAlW,OAAAsN,GACA5P,KAAAmB,OAAAyO,EAAAA,EAAAyK,WAQA0F,EAAAjQ,OAAA,SAAA9D,GACA,MAAAhM,MAAA0gB,QAAA5Q,OAAA9D,IAUA+T,EAAA1V,QAAA,SAAA0F,EAAAC,EAAAtF,GACA,MAAA1K,MAAA0gB,QAAArW,QAAA0F,EAAAC,EAAAtF,gHCnbA,YA6BA,SAAAqW,GAAAhY,EAAA3H,GACA,GAAA3C,GAAA,EAAAJ,IAEA,KADA+C,GAAA,EACA3C,EAAAsK,EAAA/J,QAAAX,EAAAD,EAAAK,EAAA2C,IAAA2H,EAAAtK,IACA,OAAAJ,GA3BA,GAAAoO,GAAA3N,EAEAgH,EAAAtH,EAAA,IAEAJ,GACA,SACA,QACA,QACA,SACA,SACA,UACA,WACA,QACA,SACA,SACA,UACA,WACA,OACA,SACA,QACA,UA6BAqO,GAAAC,MAAAqU,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAuBAtU,EAAA5B,SAAAkW,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACAjb,EAAAS,WACA,OAYAkG,EAAAhG,KAAAsa,GACA,EACA,EACA,EACA,EACA,GACA,GAkBAtU,EAAAM,OAAAgU,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GAmBAtU,EAAAE,OAAAoU,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,kCC9LA,YAMA,IAAAjb,GAAA5G,EAAAJ,QAAAN,EAAA,GAEAsH,GAAA3G,UAAAX,EAAA,GACAsH,EAAAsE,QAAA5L,EAAA,IACAsH,EAAAtE,aAAAhD,EAAA,GACAsH,EAAA5D,OAAA1D,EAAA,GACAsH,EAAAtD,MAAAhE,EAAA,GACAsH,EAAArD,KAAAjE,EAAA,GAMAsH,EAAAnD,GAAAmD,EAAAvC,QAAA,MAOAuC,EAAAyL,QAAA,SAAA9B,GACA,IAAAA,EACA,QAIA,KAAA,GAHA0Q,GAAA9d,OAAAD,KAAAqN,GACAzQ,EAAAmhB,EAAAnhB,OACAmS,EAAA,GAAA3Q,OAAAxB,GACAP,EAAA,EAAAA,EAAAO,IAAAP,EACA0S,EAAA1S,GAAAgR,EAAA0Q,EAAA1hB,GACA,OAAA0S,IAUArL,EAAAqB,EAAA,SAAAf,EAAA4a,GACA,MAAAtb,WAAAU,EAAA,aAAA4a,GAAA,cAUAlb,EAAAC,MAAA,SAAAkb,EAAAC,EAAAlS,GACA,GAAAkS,EAEA,IAAA,GADA9e,GAAAC,OAAAD,KAAA8e,GACAziB,EAAA,EAAAA,EAAA2D,EAAApD,SAAAP,EACA8C,SAAA0f,EAAA7e,EAAA3D,KAAAuQ,IACAiS,EAAA7e,EAAA3D,IAAAyiB,EAAA9e,EAAA3D,IAEA,OAAAwiB,IAQAnb,EAAAwE,SAAA,SAAAzD,GACA,MAAA,KAAAA,EAAAlD,QAAA,MAAA,QAAAA,QAAA,KAAA,OAAA,MAQAmC,EAAAsR,QAAA,SAAAhD,GACA,MAAAA,GAAAhU,OAAA,GAAAiO,cAAA+F,EAAAC,UAAA,IAQAvO,EAAAqG,UAAA,SAAAxH,GAEA,MADAA,GAAAA,GAAA,EACAmB,EAAAgG,OACAhG,EAAAgG,OAAAqV,YAAAxc,GACA,IAAA,mBAAAoW,YAAAA,WAAAva,OAAAmE,4DC5FA,YAoBA,SAAAyF,KAmBA,QAAAD,KAGA,IAFA,GAAArK,MACArB,EAAA,EACAA,EAAAc,UAAAP,QACAc,EAAAN,KAAAD,UAAAd,KACA,IAAAoW,GAAA7K,EAAAjK,MAAA,KAAAD,GACAshB,EAAAC,CACA,IAAAH,EAAAliB,OAAA,CACA,GAAA+S,GAAAmP,EAAAA,EAAAliB,OAAA,EAGAsiB,GAAAzd,KAAAkO,GACAqP,IAAAC,EACAE,EAAA1d,KAAAkO,MACAqP,EAGAI,EAAA3d,KAAAkO,KAAAyP,EAAA3d,KAAAgR,IACAuM,IAAAC,EACAI,GAAA,GACAA,GAAAC,EAAA7d,KAAAkO,KACAqP,IAAAC,EACAI,GAAA,GAIAE,EAAA9d,KAAAgR,KACAuM,IAAAC,GAEA,IAAA5iB,EAAA,EAAAA,EAAA2iB,IAAA3iB,EACAoW,EAAA,KAAAA,CAEA,OADAqM,GAAA1hB,KAAAqV,GACA1K,EASA,QAAAiK,GAAAhO,GACA,MAAA,aAAAA,EAAAA,EAAAzC,QAAA,WAAA,KAAA,IAAA,IAAArE,EAAA8E,KAAA,MAAA,QAAA8c,EAAA9c,KAAA,MAAA,MAYA,QAAAwc,GAAAxa,EAAAwb,GACA,gBAAAxb,KACAwb,EAAAxb,EACAA,EAAA7E,OAEA,IAAAwO,GAAA5F,EAAAiK,IAAAhO,EACAgE,GAAAyX,SACAC,QAAAC,IAAA,oBAAAhS,EAAApM,QAAA,MAAA,MAAAA,QAAA,MAAA,MACA,IAAAvB,GAAAC,OAAAD,KAAAwf,IAAAA,MACA,OAAAI,UAAAjiB,MAAA,KAAAqC,EAAA6f,OAAA,UAAAlS,IAAAhQ,MAAA,KAAAqC,EAAAmK,IAAA,SAAAgB,GAAA,MAAAqU,GAAArU,MA7EA,IAAA,GAJAjO,MACA4hB,KACAG,EAAA,EACAI,GAAA,EACAhjB,EAAA,EAAAA,EAAAc,UAAAP,QACAM,EAAAE,KAAAD,UAAAd,KAwFA,OA9BA0L,GAAAiK,IAAAA,EA4BAjK,EAAAyW,IAAAA,EAEAzW,EAGA,QAAAH,GAAAkY,GAGA,IAFA,GAAApiB,MACArB,EAAA,EACAA,EAAAc,UAAAP,QACAc,EAAAN,KAAAD,UAAAd,KAEA,OADAA,GAAA,EACAyjB,EAAAve,QAAA,YAAA,SAAA2Q,EAAAC,GACA,GAAA4N,GAAAriB,EAAArB,IACA,QAAA8V,GACA,IAAA,IACA,MAAAoI,MAAAyF,UAAAD,EACA,SACA,MAAAnhB,QAAAmhB,MAhIAjjB,EAAAJ,QAAAsL,CAEA,IAAAkX,GAAA,QACAK,EAAA,SACAH,EAAA,KACAD,EAAA,kDACAG,EAAA,sCA+HAtX,GAAAJ,QAAAA,EACAI,EAAAiY,WAAA,CAAA,KAAAjY,EAAAiY,UAAA,IAAAjY,EAAA,IAAA,KAAA,cAAAwW,MAAA,EAAA,GAAA,MAAA5iB,IACAoM,EAAAyX,SAAA,2BCxIA,YAuBA,SAAAvW,GAAAqN,EAAAC,GAMA5Y,KAAA2Y,GAAAA,EAMA3Y,KAAA4Y,GAAAA,EAjCA1Z,EAAAJ,QAAAwM,CAEA,IAAAxF,GAAAtH,EAAA,IAmCA8jB,EAAAhX,EAAA3J,UAOA4gB,EAAAjX,EAAAiX,KAAA,GAAAjX,GAAA,EAAA,EAEAiX,GAAA/W,SAAA,WAAA,MAAA,IACA+W,EAAAC,SAAAD,EAAApJ,SAAA,WAAA,MAAAnZ,OACAuiB,EAAAvjB,OAAA,WAAA,MAAA,GAOA,IAAAyjB,GAAAnX,EAAAmX,SAAA,kBAOAnX,GAAAI,WAAA,SAAAzE,GACA,GAAA,IAAAA,EACA,MAAAsb,EACA,IAAAhN,GAAAtO,EAAA,CACAsO,KACAtO,GAAAA,EACA,IAAA0R,GAAA1R,IAAA,EACA2R,GAAA3R,EAAA0R,GAAA,aAAA,CAUA,OATApD,KACAqD,GAAAA,IAAA,EACAD,GAAAA,IAAA,IACAA,EAAA,aACAA,EAAA,IACAC,EAAA,aACAA,EAAA,KAGA,GAAAtN,GAAAqN,EAAAC,IAQAtN,EAAAC,KAAA,SAAAtE,GACA,GAAA,gBAAAA,GACA,MAAAqE,GAAAI,WAAAzE,EACA,IAAA,gBAAAA,GAAA,CAEA,IAAAnB,EAAA2F,KAGA,MAAAH,GAAAI,WAAA+B,SAAAxG,EAAA,IAFAA,GAAAnB,EAAA2F,KAAAS,WAAAjF,GAIA,MAAAA,GAAAkE,KAAAlE,EAAAmE,KAAA,GAAAE,GAAArE,EAAAkE,MAAA,EAAAlE,EAAAmE,OAAA,GAAAmX,GAQAD,EAAA9W,SAAA,SAAAP,GACA,IAAAA,GAAAjL,KAAA4Y,KAAA,GAAA,CACA,GAAAD,IAAA3Y,KAAA2Y,GAAA,IAAA,EACAC,GAAA5Y,KAAA4Y,KAAA,CAGA,OAFAD,KACAC,EAAAA,EAAA,IAAA,KACAD,EAAA,WAAAC,GAEA,MAAA5Y,MAAA2Y,GAAA,WAAA3Y,KAAA4Y,IAQA0J,EAAAxJ,OAAA,SAAA7N,GACA,MAAAnF,GAAA2F,KACA,GAAA3F,GAAA2F,KAAA,EAAAzL,KAAA2Y,GAAA,EAAA3Y,KAAA4Y,GAAA/K,QAAA5C,KAEAE,IAAA,EAAAnL,KAAA2Y,GAAAvN,KAAA,EAAApL,KAAA4Y,GAAA3N,SAAA4C,QAAA5C,IAGA,IAAA3J,GAAAN,OAAAW,UAAAL,UAOAgK,GAAAoX,SAAA,SAAAC,GACA,MAAAA,KAAAF,EACAF,EACA,GAAAjX,IACAhK,EAAAvC,KAAA4jB,EAAA,GACArhB,EAAAvC,KAAA4jB,EAAA,IAAA,EACArhB,EAAAvC,KAAA4jB,EAAA,IAAA,GACArhB,EAAAvC,KAAA4jB,EAAA,IAAA,MAAA,GAEArhB,EAAAvC,KAAA4jB,EAAA,GACArhB,EAAAvC,KAAA4jB,EAAA,IAAA,EACArhB,EAAAvC,KAAA4jB,EAAA,IAAA,GACArhB,EAAAvC,KAAA4jB,EAAA,IAAA,MAAA,IAQAL,EAAAM,OAAA,WACA,MAAA5hB,QAAAC,aACA,IAAAjB,KAAA2Y,GACA3Y,KAAA2Y,KAAA,EAAA,IACA3Y,KAAA2Y,KAAA,GAAA,IACA3Y,KAAA2Y,KAAA,GACA,IAAA3Y,KAAA4Y,GACA5Y,KAAA4Y,KAAA,EAAA,IACA5Y,KAAA4Y,KAAA,GAAA,IACA5Y,KAAA4Y,KAAA,KAQA0J,EAAAE,SAAA,WACA,GAAAK,GAAA7iB,KAAA4Y,IAAA,EAGA,OAFA5Y,MAAA4Y,KAAA5Y,KAAA4Y,IAAA,EAAA5Y,KAAA2Y,KAAA,IAAAkK,KAAA,EACA7iB,KAAA2Y,IAAA3Y,KAAA2Y,IAAA,EAAAkK,KAAA,EACA7iB,MAOAsiB,EAAAnJ,SAAA,WACA,GAAA0J,KAAA,EAAA7iB,KAAA2Y,GAGA,OAFA3Y,MAAA2Y,KAAA3Y,KAAA2Y,KAAA,EAAA3Y,KAAA4Y,IAAA,IAAAiK,KAAA,EACA7iB,KAAA4Y,IAAA5Y,KAAA4Y,KAAA,EAAAiK,KAAA,EACA7iB,MAOAsiB,EAAAtjB,OAAA,WACA,GAAA8jB,GAAA9iB,KAAA2Y,GACAoK,GAAA/iB,KAAA2Y,KAAA,GAAA3Y,KAAA4Y,IAAA,KAAA,EACAoK,EAAAhjB,KAAA4Y,KAAA,EACA,OAAA,KAAAoK,EACA,IAAAD,EACAD,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,QAAA,EAAA,EACAC,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,QAAA,EAAA,EACAC,EAAA,IAAA,EAAA,qEChNA,YAEA,IAAAld,MAAAhH,OAEAgH,MAAAwF,SAAA9M,QAAA,IACAsH,KAAA7F,OAAAzB,QAAA,GACAsH,KAAAvC,QAAA/E,QAAA,GACAsH,KAAAd,KAAAxG,QAAA,GACAsH,KAAAtB,KAAAhG,QAAA,GAOAsH,KAAAmd,OAAApV,QAAAqV,OAAAxG,SAAAwG,OAAAxG,QAAAyG,UAAAD,OAAAxG,QAAAyG,SAAAC,MAOAtd,KAAAud,OAAA,CAAA,KAAAvd,KAAAud,MAAA3f,KAAA,UAAA,MAAA1F,IAMA8H,KAAAgG,OAAA,WACA,IACA,GAAAA,GAAAhG,KAAAvC,QAAA,UAAAuI,MAGA,OAAAA,GAAAnK,UAAA2hB,WAIAxX,EAAAP,OACAO,EAAAP,KAAA,SAAAtE,EAAAsc,GAAA,MAAA,IAAAzX,GAAA7E,EAAAsc,KAGAzX,EAAAqV,cACArV,EAAAqV,YAAA,SAAAxc,GAAA,MAAA,IAAAmH,GAAAnH,KAEAmH,GAVA,KAaA,MAAA9N,GACA,MAAA,UAQA8H,KAAAtF,MAAA,mBAAAua,YAAAva,MAAAua,WAMAjV,KAAA2F,KAAAyX,OAAAM,SAAAN,OAAAM,QAAA/X,MAAA3F,KAAAvC,QAAA,QAQAuC,KAAAoI,UAAA7C,OAAA6C,WAAA,SAAAjH,GACA,MAAA,gBAAAA,IAAAwc,SAAAxc,IAAA5G,KAAAqjB,MAAAzc,KAAAA,GAQAnB,KAAAmI,SAAA,SAAAhH,GACA,MAAA,gBAAAA,IAAAA,YAAAjG,SAQA8E,KAAAU,SAAA,SAAAS,GACA,MAAAA,IAAA,gBAAAA,IAQAnB,KAAA6d,WAAA,SAAA1c,GACA,MAAAA,GACAnB,KAAAwF,SAAAC,KAAAtE,GAAA2b,SACA9c,KAAAwF,SAAAmX,UASA3c,KAAA8d,aAAA,SAAAjB,EAAA1X,GACA,GAAAyN,GAAA5S,KAAAwF,SAAAoX,SAAAC,EACA,OAAA7c,MAAA2F,KACA3F,KAAA2F,KAAAoY,SAAAnL,EAAAC,GAAAD,EAAAE,GAAA3N,GACAyN,EAAAlN,SAAAqC,QAAA5C,KAUAnF,KAAAoF,OAAA,SAAAsC,EAAAmL,EAAAC,GACA,GAAA,gBAAApL,GACA,MAAAA,GAAArC,MAAAwN,GAAAnL,EAAApC,OAAAwN,CACA,IAAAF,GAAA5S,KAAAwF,SAAAC,KAAAiC,EACA,OAAAkL,GAAAC,KAAAA,GAAAD,EAAAE,KAAAA,GAQA9S,KAAA0N,QAAA,SAAAY,GACA,MAAAA,GAAAhU,OAAA,GAAAoU,cAAAJ,EAAAC,UAAA,IASAvO,KAAA8I,MAAA,SAAAkV,EAAAC,GACA1hB,OAAAD,KAAA2hB,GAAA7d,QAAA,SAAAqH,GACAzH,KAAAe,KAAAid,EAAAvW,EAAAwW,EAAAxW,OAWAzH,KAAAe,KAAA,SAAAid,EAAAvW,EAAAyW,GACA,GAAAC,GAAAne,KAAA0N,QAAAjG,EACAyW,GAAAld,MACAgd,EAAA,MAAAG,GAAAD,EAAAld,KACAkd,EAAAhd,MACA8c,EAAA,MAAAG,GAAAne,KAAAud,MACA,SAAApc,GACA+c,EAAAhd,IAAAjI,KAAAiB,KAAAiH,GACAjH,KAAAuN,GAAAtG,GAEA+c,EAAAhd,KACAlB,KAAAud,MACA9hB,SAAAyiB,EAAA/c,QACA6c,EAAAvW,GAAAyW,EAAA/c,OAEA5E,OAAA6hB,eAAAJ,EAAAvW,EAAAyW,IAQAle,KAAAS,WAAAlE,OAAAgN,OAAAhN,OAAAgN,cAMAvJ,KAAAY,YAAArE,OAAAgN,OAAAhN,OAAAgN,8KC3LA,YAMA,SAAA8U,GAAAhe,EAAAqZ,GACA,MAAArZ,GAAA+M,cAAAmB,UAAA,GAAA,KAAAmL,GAAArZ,EAAAoE,UAAA,UAAAiV,EAAA,KAAArZ,EAAAoG,KAAA,WAAAiT,EAAA,MAAArZ,EAAAiC,QAAA,IAAA,IAAA,YAGA,QAAAgc,GAAAja,EAAAhE,EAAA0D,EAAAyC,GAEA,GAAAnG,EAAA2D,aACA,GAAA3D,EAAA2D,uBAAAC,GAAA,CAAAI,EACA,cAAAmC,GACA,YACA,WAAA6X,EAAAhe,EAAA,cAEA,KAAA,GADA4C,GAAAjD,EAAAyL,QAAApL,EAAA2D,aAAAf,QACAjI,EAAA,EAAAA,EAAAiI,EAAA/J,SAAA8B,EAAAqJ,EACA,WAAApB,EAAAjI,GACAqJ,GACA,SACA,SACAA,GACA,UACA,6BAAAN,EAAAyC,GACA,gBAEA,QAAAnG,EAAAX,MACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAA2E,EACA,0BAAAmC,GACA,WAAA6X,EAAAhe,EAAA,WACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAgE,EACA,kFAAAmC,EAAAA,EAAAA,EAAAA,GACA,WAAA6X,EAAAhe,EAAA,gBACA,MACA,KAAA,QACA,IAAA,SAAAgE,EACA,2BAAAmC,GACA,WAAA6X,EAAAhe,EAAA,UACA,MACA,KAAA,OAAAgE,EACA,4BAAAmC,GACA,WAAA6X,EAAAhe,EAAA,WACA,MACA,KAAA,SAAAgE,EACA,yBAAAmC,GACA,WAAA6X,EAAAhe,EAAA,UACA,MACA,KAAA,QAAAgE,EACA,4DAAAmC,EAAAA,EAAAA,GACA,WAAA6X,EAAAhe,EAAA,YAOA,QAAAke,GAAAla,EAAAhE,EAAAmG,GAEA,OAAAnG,EAAAiC,SACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAA+B,EACA,sCAAAmC,GACA,WAAA6X,EAAAhe,EAAA,eACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAgE,EACA,2DAAAmC,GACA,WAAA6X,EAAAhe,EAAA,oBACA,MACA,KAAA,OAAAgE,EACA,mCAAAmC,GACA,WAAA6X,EAAAhe,EAAA,iBAWA,QAAA8Z,GAAA/V,GAEA,GAAAxC,GAAAwC,EAAAjE,gBACA,KAAAyB,EAAA1I,OACA,MAAA8G,GAAAsE,UAAA,cAGA,KAAA,GAFAD,GAAArE,EAAAsE,QAAA,KAEA3L,EAAA,EAAAA,EAAAiJ,EAAA1I,SAAAP,EAAA,CACA,GAAA0H,GAAAuB,EAAAjJ,GAAAkB,UACA2M,EAAA,IAAAxG,EAAAwE,SAAAnE,EAAAC,KAGAD,GAAAoG,KAAApC,EACA,sBAAAmC,GACA,yBAAAA,GACA,WAAA6X,EAAAhe,EAAA,WACA,wBAAAmG,GACA,gCACA+X,EAAAla,EAAAhE,EAAA,QACAie,EAAAja,EAAAhE,EAAA1H,EAAA6N,EAAA,UACAnC,EACA,KACA,MAGAhE,EAAAoE,UAAAJ,EACA,sBAAAmC,GACA,yBAAAA,GACA,WAAA6X,EAAAhe,EAAA,UACA,gCAAAmG,GACA8X,EAAAja,EAAAhE,EAAA1H,EAAA6N,EAAA,OAAAnC,EACA,KACA,OAIAhE,EAAA8G,YACA9G,EAAA2D,cAAA3D,EAAA2D,uBAAAC,GAEAI,EACA,sBAAAmC,GAHAnC,EACA,iCAAAmC,EAAAA,IAIA8X,EAAAja,EAAAhE,EAAA1H,EAAA6N,GACAnG,EAAA8G,UAAA9C,EACA,MAGA,MAAAA,GACA,eAlJAjL,EAAAJ,QAAAmhB,CAEA,IAAAlW,GAAAvL,EAAA,IACAsH,EAAAtH,EAAA,wCCJA,YAsBA,SAAA8lB,GAAAllB,EAAA6F,EAAAuI,GAMAxN,KAAAZ,GAAAA,EAMAY,KAAAiF,IAAAA,EAMAjF,KAAA+U,KAAAxT,OAMAvB,KAAAwN,IAAAA,EAIA,QAAA+W,MAWA,QAAAC,GAAA9U,GAMA1P,KAAAgY,KAAAtI,EAAAsI,KAMAhY,KAAAykB,KAAA/U,EAAA+U,KAMAzkB,KAAAiF,IAAAyK,EAAAzK,IAMAjF,KAAA+U,KAAArF,EAAAgV,OAQA,QAAA1E,KAMAhgB,KAAAiF,IAAA,EAMAjF,KAAAgY,KAAA,GAAAsM,GAAAC,EAAA,EAAA,GAMAvkB,KAAAykB,KAAAzkB,KAAAgY,KAMAhY,KAAA0kB,OAAA,KAwDA,QAAAC,GAAAnX,EAAAzI,EAAAwT,GACAxT,EAAAwT,GAAA,IAAA/K,EAGA,QAAAoX,GAAApX,EAAAzI,EAAAwT,GACA,KAAA/K,EAAA,KACAzI,EAAAwT,KAAA,IAAA/K,EAAA,IACAA,KAAA,CAEAzI,GAAAwT,GAAA/K,EAwCA,QAAAqX,GAAArX,EAAAzI,EAAAwT,GACA,KAAA/K,EAAAoL,IACA7T,EAAAwT,KAAA,IAAA/K,EAAAmL,GAAA,IACAnL,EAAAmL,IAAAnL,EAAAmL,KAAA,EAAAnL,EAAAoL,IAAA,MAAA,EACApL,EAAAoL,MAAA,CAEA,MAAApL,EAAAmL,GAAA,KACA5T,EAAAwT,KAAA,IAAA/K,EAAAmL,GAAA,IACAnL,EAAAmL,GAAAnL,EAAAmL,KAAA,CAEA5T,GAAAwT,KAAA/K,EAAAmL,GA2CA,QAAAmM,GAAAtX,EAAAzI,EAAAwT,GACAxT,EAAAwT,KAAA,IAAA/K,EACAzI,EAAAwT,KAAA/K,IAAA,EAAA,IACAzI,EAAAwT,KAAA/K,IAAA,GAAA,IACAzI,EAAAwT,GAAA/K,IAAA,GAtRAtO,EAAAJ,QAAAkhB,CAEA,IAEA+E,GAFAjf,EAAAtH,EAAA,IAIA8M,EAAAxF,EAAAwF,SACArL,EAAA6F,EAAA7F,OACA+E,EAAAc,EAAAd,IA0HAgb,GAAA1d,OAAAwD,EAAAgG,OACA,WAGA,MAFAiZ,KACAA,EAAAvmB,EAAA,MACAwhB,EAAA1d,OAAA,WACA,MAAA,IAAAyiB,QAIA,WACA,MAAA,IAAA/E,IAQAA,EAAAvb,MAAA,SAAAE,GACA,MAAA,IAAAmB,GAAAtF,MAAAmE,IAIAmB,EAAAtF,QAAAA,QACAwf,EAAAvb,MAAAqB,EAAAtB,KAAAwb,EAAAvb,MAAAqB,EAAAtF,MAAAmB,UAAAyY,UAGA,IAAA4K,GAAAhF,EAAAre,SASAqjB,GAAAxlB,KAAA,SAAAJ,EAAA6F,EAAAuI,GAGA,MAFAxN,MAAAykB,KAAAzkB,KAAAykB,KAAA1P,KAAA,GAAAuP,GAAAllB,EAAA6F,EAAAuI,GACAxN,KAAAiF,KAAAA,EACAjF,MAoBAglB,EAAA3K,OAAA,SAAApT,GAEA,MADAA,MAAA,EACAjH,KAAAR,KAAAolB,EACA3d,EAAA,IAAA,EACAA,EAAA,MAAA,EACAA,EAAA,QAAA,EACAA,EAAA,UAAA,EACA,EACAA,IASA+d,EAAA1K,MAAA,SAAArT,GACA,MAAAA,GAAA,EACAjH,KAAAR,KAAAqlB,EAAA,GAAAvZ,EAAAI,WAAAzE,IACAjH,KAAAqa,OAAApT,IAQA+d,EAAAzK,OAAA,SAAAtT,GACA,MAAAjH,MAAAqa,QAAApT,GAAA,EAAAA,GAAA,MAAA,IAsBA+d,EAAAlL,OAAA,SAAA7S,GACA,GAAAyR,GAAApN,EAAAC,KAAAtE,EACA,OAAAjH,MAAAR,KAAAqlB,EAAAnM,EAAA1Z,SAAA0Z,IAUAsM,EAAAnL,MAAAmL,EAAAlL,OAQAkL,EAAAjL,OAAA,SAAA9S,GACA,GAAAyR,GAAApN,EAAAC,KAAAtE,GAAAub,UACA,OAAAxiB,MAAAR,KAAAqlB,EAAAnM,EAAA1Z,SAAA0Z,IAQAsM,EAAAxK,KAAA,SAAAvT,GACA,MAAAjH,MAAAR,KAAAmlB,EAAA,EAAA1d,EAAA,EAAA,IAeA+d,EAAAvK,QAAA,SAAAxT,GACA,MAAAjH,MAAAR,KAAAslB,EAAA,EAAA7d,IAAA,IAQA+d,EAAAtK,SAAA,SAAAzT,GACA,MAAAjH,MAAAR,KAAAslB,EAAA,EAAA7d,GAAA,EAAAA,GAAA,KASA+d,EAAAhL,QAAA,SAAA/S,GACA,GAAAyR,GAAApN,EAAAC,KAAAtE,EACA,OAAAjH,MAAAR,KAAAslB,EAAA,EAAApM,EAAAC,IAAAnZ,KAAAslB,EAAA,EAAApM,EAAAE,KASAoM,EAAA/K,SAAA,SAAAhT,GACA,GAAAyR,GAAApN,EAAAC,KAAAtE,GAAAub,UACA,OAAAxiB,MAAAR,KAAAslB,EAAA,EAAApM,EAAAC,IAAAnZ,KAAAslB,EAAA,EAAApM,EAAAE,IAGA,IAAAqM,GAAA,mBAAArK,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAE,EAAA,GAAAC,YAAAF,EAAAla,OAEA,OADAka,GAAA,IAAA,EACAC,EAAA,GACA,SAAAtN,EAAAzI,EAAAwT,GACAsC,EAAA,GAAArN,EACAzI,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,GAAAuC,EAAA,IAGA,SAAAtN,EAAAzI,EAAAwT,GACAsC,EAAA,GAAArN,EACAzI,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,GAAAuC,EAAA,OAIA,SAAA7T,EAAAlC,EAAAwT,GACA,GAAAhD,GAAAtO,EAAA,EAAA,EAAA,CAGA,IAFAsO,IACAtO,GAAAA,GACA,IAAAA,EACA6d,EAAA,EAAA7d,EAAA,EAAA,EAAA,WAAAlC,EAAAwT,OACA,IAAA2M,MAAAje,GACA6d,EAAA,WAAA/f,EAAAwT,OACA,IAAAtR,EAAA,sBACA6d,GAAAvP,GAAA,GAAA,cAAA,EAAAxQ,EAAAwT,OACA,IAAAtR,EAAA,uBACA6d,GAAAvP,GAAA,GAAAlV,KAAA8kB,MAAAle,EAAA,0BAAA,EAAAlC,EAAAwT,OACA,CACA,GAAA0C,GAAA5a,KAAAqjB,MAAArjB,KAAA0hB,IAAA9a,GAAA5G,KAAA+kB,KACAlK,EAAA,QAAA7a,KAAA8kB,MAAAle,EAAA5G,KAAA8a,IAAA,GAAAF,GAAA,QACA6J,IAAAvP,GAAA,GAAA0F,EAAA,KAAA,GAAAC,KAAA,EAAAnW,EAAAwT,IAUAyM,GAAA5J,MAAA,SAAAnU,GACA,MAAAjH,MAAAR,KAAAylB,EAAA,EAAAhe,GAGA,IAAAoe,GAAA,mBAAA/J,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAR,EAAA,GAAAC,YAAAQ,EAAA5a,OAEA,OADA4a,GAAA,IAAA,EACAT,EAAA,GACA,SAAAtN,EAAAzI,EAAAwT,GACAgD,EAAA,GAAA/N,EACAzI,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,GAAAuC,EAAA,IAGA,SAAAtN,EAAAzI,EAAAwT,GACAgD,EAAA,GAAA/N,EACAzI,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,KAAAuC,EAAA,GACA/V,EAAAwT,GAAAuC,EAAA,OAIA,SAAA7T,EAAAlC,EAAAwT,GACA,GAAAhD,GAAAtO,EAAA,EAAA,EAAA,CAGA,IAFAsO,IACAtO,GAAAA,GACA,IAAAA,EACA6d,EAAA,EAAA/f,EAAAwT,GACAuM,EAAA,EAAA7d,EAAA,EAAA,EAAA,WAAAlC,EAAAwT,EAAA,OACA,IAAA2M,MAAAje,GACA6d,EAAA,WAAA/f,EAAAwT,GACAuM,EAAA,WAAA/f,EAAAwT,EAAA,OACA,IAAAtR,EAAA,uBACA6d,EAAA,EAAA/f,EAAAwT,GACAuM,GAAAvP,GAAA,GAAA,cAAA,EAAAxQ,EAAAwT,EAAA,OACA,CACA,GAAA2C,EACA,IAAAjU,EAAA,wBACAiU,EAAAjU,EAAA,OACA6d,EAAA5J,IAAA,EAAAnW,EAAAwT,GACAuM,GAAAvP,GAAA,GAAA2F,EAAA,cAAA,EAAAnW,EAAAwT,EAAA,OACA,CACA,GAAA0C,GAAA5a,KAAAqjB,MAAArjB,KAAA0hB,IAAA9a,GAAA5G,KAAA+kB,IACA,QAAAnK,IACAA,EAAA,MACAC,EAAAjU,EAAA5G,KAAA8a,IAAA,GAAAF,GACA6J,EAAA,iBAAA5J,IAAA,EAAAnW,EAAAwT,GACAuM,GAAAvP,GAAA,GAAA0F,EAAA,MAAA,GAAA,QAAAC,EAAA,WAAA,EAAAnW,EAAAwT,EAAA,KAWAyM,GAAAxJ,OAAA,SAAAvU,GACA,MAAAjH,MAAAR,KAAA6lB,EAAA,EAAApe,GAGA,IAAAqe,GAAAxf,EAAAtF,MAAAmB,UAAAqF,IACA,SAAAwG,EAAAzI,EAAAwT,GACAxT,EAAAiC,IAAAwG,EAAA+K,IAGA,SAAA/K,EAAAzI,EAAAwT,GACA,IAAA,GAAA9Z,GAAA,EAAAA,EAAA+O,EAAAxO,SAAAP,EACAsG,EAAAwT,EAAA9Z,GAAA+O,EAAA/O,GAQAumB,GAAAnZ,MAAA,SAAA5E,GACA,GAAAhC,GAAAgC,EAAAjI,SAAA,CACA,IAAA,gBAAAiI,IAAAhC,EAAA,CACA,GAAAF,GAAAib,EAAAvb,MAAAQ,EAAAhF,EAAAjB,OAAAiI,GACAhH,GAAAkB,OAAA8F,EAAAlC,EAAA,GACAkC,EAAAlC,EAEA,MAAAE,GACAjF,KAAAqa,OAAApV,GAAAzF,KAAA8lB,EAAArgB,EAAAgC,GACAjH,KAAAR,KAAAmlB,EAAA,EAAA,IAQAK,EAAA9kB,OAAA,SAAA+G,GACA,GAAAhC,GAAAD,EAAAhG,OAAAiI,EACA,OAAAhC,GACAjF,KAAAqa,OAAApV,GAAAzF,KAAAwF,EAAAI,MAAAH,EAAAgC,GACAjH,KAAAR,KAAAmlB,EAAA,EAAA,IAQAK,EAAAnE,KAAA,WAIA,MAHA7gB,MAAA0kB,OAAA,GAAAF,GAAAxkB,MACAA,KAAAgY,KAAAhY,KAAAykB,KAAA,GAAAH,GAAAC,EAAA,EAAA,GACAvkB,KAAAiF,IAAA,EACAjF,MAOAglB,EAAAO,MAAA,WAUA,MATAvlB,MAAA0kB,QACA1kB,KAAAgY,KAAAhY,KAAA0kB,OAAA1M,KACAhY,KAAAykB,KAAAzkB,KAAA0kB,OAAAD,KACAzkB,KAAAiF,IAAAjF,KAAA0kB,OAAAzf,IACAjF,KAAA0kB,OAAA1kB,KAAA0kB,OAAA3P,OAEA/U,KAAAgY,KAAAhY,KAAAykB,KAAA,GAAAH,GAAAC,EAAA,EAAA,GACAvkB,KAAAiF,IAAA,GAEAjF,MAOAglB,EAAAlE,OAAA,WACA,GAAA9I,GAAAhY,KAAAgY,KACAyM,EAAAzkB,KAAAykB,KACAxf,EAAAjF,KAAAiF,GAMA,OALAjF,MAAAulB,QACAlL,OAAApV,GACAwf,KAAA1P,KAAAiD,EAAAjD,KACA/U,KAAAykB,KAAAA,EACAzkB,KAAAiF,KAAAA,EACAjF,MAOAglB,EAAAxI,OAAA,WAIA,IAHA,GAAAxE,GAAAhY,KAAAgY,KAAAjD,KACAhQ,EAAA/E,KAAAuC,YAAAkC,MAAAzE,KAAAiF,KACAsT,EAAA,EACAP,GACAA,EAAA5Y,GAAA4Y,EAAAxK,IAAAzI,EAAAwT,GACAA,GAAAP,EAAA/S,IACA+S,EAAAA,EAAAjD,IAGA,OAAAhQ,wCC/hBA,YAmBA,SAAAggB,KACA/E,EAAAjhB,KAAAiB,MAkCA,QAAAwlB,GAAAhY,EAAAzI,EAAAwT,GACA/K,EAAAxO,OAAA,GACAgG,EAAAI,MAAAoI,EAAAzI,EAAAwT,GAEAxT,EAAAue,UAAA9V,EAAA+K,GAzDArZ,EAAAJ,QAAAimB,CAEA,IAAA/E,GAAAxhB,EAAA,IAEAinB,EAAAV,EAAApjB,UAAAU,OAAAC,OAAA0d,EAAAre,UACA8jB,GAAAljB,YAAAwiB,CAEA,IAAAjf,GAAAtH,EAAA,IAEAwG,EAAAc,EAAAd,KACA8G,EAAAhG,EAAAgG,MAiBAiZ,GAAAtgB,MAAA,SAAAE,GACA,OAAAogB,EAAAtgB,MAAAqH,EAAAqV,aAAAxc,GAGA,IAAA+gB,GAAA5Z,GAAAA,EAAAnK,oBAAAoZ,aAAA,QAAAjP,EAAAnK,UAAAqF,IAAAZ,KACA,SAAAoH,EAAAzI,EAAAwT,GACAxT,EAAAiC,IAAAwG,EAAA+K,IAGA,SAAA/K,EAAAzI,EAAAwT,GACA/K,EAAAmY,KAAA5gB,EAAAwT,EAAA,EAAA/K,EAAAxO,QAMAymB,GAAA5Z,MAAA,SAAA5E,GACA,gBAAAA,KACAA,EAAA6E,EAAAP,KAAAtE,EAAA,UACA,IAAAhC,GAAAgC,EAAAjI,SAAA,CAIA,OAHAgB,MAAAqa,OAAApV,GACAA,GACAjF,KAAAR,KAAAkmB,EAAAzgB,EAAAgC,GACAjH,MAaAylB,EAAAvlB,OAAA,SAAA+G,GACA,GAAAhC,GAAA6G,EAAA8Z,WAAA3e,EAIA,OAHAjH,MAAAqa,OAAApV,GACAA,GACAjF,KAAAR,KAAAgmB,EAAAvgB,EAAAgC,GACAjH,uDCrEA,YAmBA,SAAAuc,GAAA5H,EAAA3B,EAAAtQ,GAMA,MALA,kBAAAsQ,IACAtQ,EAAAsQ,EACAA,EAAA,GAAAxL,GAAAsL,MACAE,IACAA,EAAA,GAAAxL,GAAAsL,MACAE,EAAAuJ,KAAA5H,EAAAjS,GAmCA,QAAA2a,GAAA1I,EAAA3B,GAGA,MAFAA,KACAA,EAAA,GAAAxL,GAAAsL,MACAE,EAAAqK,SAAA1I,GA0DA,QAAAgF,KACAnS,EAAAgR,OAAAkD,IAzHA,GAAAlU,GAAA0b,EAAA1b,SAAA1I,CAkDA0I,GAAA+U,KAAAA,EAeA/U,EAAA6V,SAAAA,EASA7V,EAAAqe,QAGA,KACAre,EAAAuQ,SAAAvZ,EAAA,IACAgJ,EAAAiN,MAAAjW,EAAA,IACAgJ,EAAAJ,OAAA5I,EAAA,IACA,MAAAR,IAGAwJ,EAAAwY,OAAAxhB,EAAA,IACAgJ,EAAAud,aAAAvmB,EAAA,IACAgJ,EAAAgR,OAAAha,EAAA,IACAgJ,EAAA0S,aAAA1b,EAAA,IACAgJ,EAAAqF,QAAArO,EAAA,IACAgJ,EAAA4E,QAAA5N,EAAA,IACAgJ,EAAAyY,SAAAzhB,EAAA,IACAgJ,EAAAyC,UAAAzL,EAAA,IAGAgJ,EAAA4F,iBAAA5O,EAAA,IACAgJ,EAAAoJ,UAAApS,EAAA,IACAgJ,EAAAsL,KAAAtU,EAAA,IACAgJ,EAAAuC,KAAAvL,EAAA,IACAgJ,EAAA/B,KAAAjH,EAAA,IACAgJ,EAAA4G,MAAA5P,EAAA,IACAgJ,EAAA8L,MAAA9U,EAAA,IACAgJ,EAAAmH,SAAAnQ,EAAA,IACAgJ,EAAAkJ,QAAAlS,EAAA,IACAgJ,EAAAyI,OAAAzR,EAAA,IAGAgJ,EAAAjC,MAAA/G,EAAA,IACAgJ,EAAA3B,QAAArH,EAAA,IAGAgJ,EAAAiF,MAAAjO,EAAA,IACAgJ,EAAA+V,IAAA/e,EAAA,IACAgJ,EAAA1B,KAAAtH,EAAA,IACAgJ,EAAAmS,UAAAA,EAaA,kBAAAxH,SAAAA,OAAA2T,KACA3T,QAAA,QAAA,SAAA1G,GAKA,MAJAA,KACAjE,EAAA1B,KAAA2F,KAAAA,EACAkO,KAEAnS","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(6);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(34);\r\n\r\nvar Type; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(32);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type\", \"a Type\");\r\n\r\n    if (ctor) {\r\n        /* istanbul ignore next */\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) {\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.getFieldsArray().forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n            // see util.prop for IE8 support\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.setCtor(ctor);\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object.<string,*>} google/protobuf/any.proto Any\r\n * @property {Object.<string,*>} google/protobuf/duration.proto Duration\r\n * @property {Object.<string,*>} google/protobuf/empty.proto Empty\r\n * @property {Object.<string,*>} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object.<string,*>} google/protobuf/timestamp.proto Timestamp\r\n * @property {Object.<string,*>} google/protobuf/wrappers.proto Wrappers\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});","\"use strict\";\r\nmodule.exports = converter;\r\n\r\nvar Enum       = require(16),\r\n    converters = require(13),\r\n    util       = require(34);\r\n\r\nvar sprintf    = util.codegen.sprintf;\r\n\r\nfunction genConvert(field, fieldIndex, prop) {\r\n    if (field.resolvedType)\r\n        return field.resolvedType instanceof Enum\r\n             ? sprintf(\"f.enums(s%s,%d,types[%d].values,o)\", prop, 0, fieldIndex)\r\n             : sprintf(\"types[%d].convert(s%s,f,o)\", fieldIndex, prop);\r\n    switch (field.type) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            return sprintf(\"f.longs(s%s,%d,%d,%j,o)\", prop, 0, 0, field.type.charAt(0) === \"u\");\r\n        case \"bytes\":\r\n            return sprintf(\"f.bytes(s%s,%j,o)\", prop, field.defaultValue);\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Generates a conveter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @param {function} generateField Field generator\r\n * @returns {Codegen} Codegen instance\r\n * @property {ConverterImpl} json Converter implementation producing JSON\r\n * @property {ConverterImpl} message Converter implementation producing runtime messages\r\n */\r\nfunction converter(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"s\", \"f\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d=f.create(s,this,o)\");\r\n    if (fields.length) { gen\r\n    (\"if(d){\");\r\n        var convert;\r\n        fields.forEach(function(field, i) {\r\n            var prop = util.safeProp(field.resolve().name);\r\n            if (field.repeated) { gen\r\n        (\"if(s%s&&s%s.length){\", prop, prop)\r\n            (\"d%s=[]\", prop)\r\n            (\"for(var i=0;i<s%s.length;++i)\", prop);\r\n                if (convert = genConvert(field, i, prop + \"[i]\")) gen\r\n                (\"d%s.push(%s)\", prop, convert);\r\n                else gen\r\n                (\"d%s.push(s%s[i])\", prop, prop);\r\n                gen\r\n        (\"}else if(o.defaults||o.arrays)\")\r\n            (\"d%s=[]\", prop);\r\n            } else if (convert = genConvert(field, i, prop)) gen\r\n        (\"d%s=%s\", prop, convert);\r\n            else gen\r\n        (\"if(d%s===undefined&&o.defaults)\", prop)\r\n            (\"d%s=%j\", prop, field.defaultValue);\r\n        });\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nutil.merge(converter, converters);\r\n\r\n/**\r\n * A converter implementation as used by {@link Type#convert} respectively {@link Message.convert}.\r\n * @typedef ConverterImpl\r\n * @type {Object}\r\n * @property {ConverterCreate} create Function for creating a new destination object\r\n * @property {ConverterEnums} enums Function for converting enum values\r\n * @property {ConverterLongs} longs Function for converting long values\r\n * @property {ConverterBytes} bytes Function for converting bytes values\r\n */\r\n\r\n/**\r\n * A function for creating a new destination object.\r\n * @typedef ConverterCreate\r\n * @type {function}\r\n * @param {Message|Object} value Source object or message\r\n * @param {Function} typeOrCtor Reflected type or message constructor\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Destination object or message\r\n */\r\n\r\n/**\r\n * A function for converting enum values.\r\n * @typedef ConverterEnums\r\n * @type {function}\r\n * @param {number|string} value Actual value\r\n * @param {number} defaultValue Default value\r\n * @param {Object.<string,number>} values Possible values\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {number|string} Converted value\r\n */\r\n\r\n/**\r\n * A function for converting long values.\r\n * @typedef ConverterLongs\r\n * @type {function}\r\n * @param {number|string|Long} value Actual value\r\n * @param {Long} defaultValue Default value\r\n * @param {boolean} unsigned Whether unsigned or not\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {number|string|Long} Converted value\r\n */\r\n\r\n/**\r\n * A function for converting bytes values.\r\n * @typedef ConverterBytes\r\n * @type {function}\r\n * @param {string|number[]|Uint8Array} value Actual value\r\n * @param {number[]} defaultValue Default value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {string|number[]|Uint8Array} Converted value \r\n */\r\n","\"use strict\";\r\nvar converters = exports;\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * JSON conversion options as used by {@link Message#asJSON}.\r\n * @typedef JSONConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n * @property {*} [longs] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @property {*} [enums=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Converter implementation producing JSON.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.json = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        return options.fieldsOnly\r\n            ? {}\r\n            : util.merge({}, value);\r\n    },\r\n    enums: function(value, defaultValue, values, options) {\r\n        if (!options.defaults) {\r\n            if (value === undefined || value === defaultValue)\r\n                return undefined;\r\n        } else if (value === undefined)\r\n            value = defaultValue;\r\n        return options.enums === String && typeof value === \"number\"\r\n            ? values[value]\r\n            : value;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned, options) {\r\n        if (!value) {\r\n            if (options.defaults)\r\n                value = { low: defaultLow, high: defaultHigh };\r\n            else\r\n                return undefined;\r\n        } else if (!util.longNe(value, defaultLow, defaultHigh) && !options.defaults)\r\n            return undefined;\r\n        if (options.longs === Number)\r\n            return typeof value === \"number\"\r\n                ? value\r\n                : util.LongBits.from(value).toNumber(unsigned);\r\n        if (options.longs === String) {\r\n            if (typeof value === \"number\")\r\n                return util.Long.fromNumber(value, unsigned).toString();\r\n            value = util.Long.fromValue(value); // has no unsigned option\r\n            value.unsigned = unsigned;\r\n            return value.toString();\r\n        }\r\n        return value;\r\n    },\r\n    bytes: function(value, defaultValue, options) {\r\n        if (!value) {\r\n            if (options.defaults)\r\n                value = defaultValue;\r\n            else\r\n                return undefined;\r\n        } else if (!value.length && !options.defaults)\r\n            return undefined;\r\n        return options.bytes === String\r\n            ? util.base64.encode(value, 0, value.length)\r\n            : options.bytes === Array\r\n            ? Array.prototype.slice.call(value)\r\n            : options.bytes === util.Buffer && !util.Buffer.isBuffer(value)\r\n            ? util.Buffer.from(value) // polyfilled\r\n            : value;\r\n    }\r\n};\r\n\r\n/**\r\n * Message conversion options as used by {@link Message.from} and {@link Type#from}.\r\n * @typedef MessageConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n */\r\n// Note that options.defaults and options.arrays also affect the message converter.\r\n// As defaults are already on the prototype, usage is not recommended and thus undocumented.\r\n\r\n/**\r\n * Converter implementation producing runtime messages.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.message = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        // can't use instanceof Type here because converters are also part of the minimal runtime\r\n        return new (typeOrCtor.getCtor ? typeOrCtor.getCtor() : typeOrCtor)(options.fieldsOnly ? undefined : value);\r\n    },\r\n    enums: function(value, defaultValue, values) {\r\n        if (typeof value === \"string\")\r\n            return values[value];\r\n        return value | 0;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned) {\r\n        if (typeof value === \"string\")\r\n            return util.Long.fromString(value, unsigned);\r\n        if (typeof value === \"number\")\r\n            return util.Long.fromNumber(value, unsigned);\r\n        return value;\r\n    },\r\n    bytes: function(value/*, defaultValue*/) {\r\n        if (util.Buffer)\r\n            return util.Buffer.isBuffer(value)\r\n                ? value\r\n                : util.Buffer.from(value, \"base64\"); // polyfilled\r\n        if (typeof value === \"string\") {\r\n            var buf = util.newBuffer(util.base64.length(value));\r\n            util.base64.decode(value, buf, 0);\r\n            return buf;\r\n        }\r\n        return value instanceof util.Array\r\n            ? value\r\n            : new util.Array(value);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(16),\r\n    types   = require(33),\r\n    util    = require(34);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packed\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(16),\r\n    types    = require(33),\r\n    util     = require(34);\r\n\r\nfunction genEncodeType(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.getFieldsArray();\r\n    var oneofs = mtype.getOneofsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(%s&&%s!==util.emptyObject){\", ref, ref)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length){\", ref, ref)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s){\", ref)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genEncodeType(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) {\r\n                    gen\r\n    (\"if(%s!==undefined&&%s!==null&&util.longNe(%s,%d,%d))\", ref, ref, ref, field.defaultValue.low, field.defaultValue.high);\r\n                } else gen\r\n    (\"if(%s!==undefined&&%s!==%j)\", ref, ref, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genEncodeType(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i];\r\n        gen\r\n        (\"switch(%s){\", \"m.get\" + oneof.ucName + \"()\");\r\n        var oneofFields = oneof.getFieldsArray();\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType === undefined)\r\n                genEncodeType(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(34);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    var self = this;\r\n    Object.keys(values || {}).forEach(function(key) {\r\n        var val;\r\n        if (typeof values[key] === \"number\")\r\n            val = values[key];\r\n        else {\r\n            val = parseInt(key, 10);\r\n            key = values[key];\r\n        }\r\n        self.valuesById[self.values[key] = val] = key;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id\", \"a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(16),\r\n    types     = require(33),\r\n    util      = require(34);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id\", \"a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            // defaults to packed=true if not explicity set to false\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed|packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(18);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        if (!Type)\r\n            Type = require(32);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            typeDefault = 0;\r\n        /* istanbul ignore next */\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved, determine the default value\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else {\r\n        if (this.options && this.options[\"default\"] !== undefined) {\r\n            this.defaultValue = this.options[\"default\"];\r\n            if (this.resolvedType instanceof Enum && typeof this.defaultValue === \"string\")\r\n                this.defaultValue = this.resolvedType.values[this.defaultValue] || 0;\r\n        } else\r\n            this.defaultValue = typeDefault;\r\n\r\n        if (this.long) {\r\n            this.defaultValue = util.Long.fromNumber(this.defaultValue, this.type.charAt(0) === \"u\");\r\n            if (Object.freeze)\r\n                Object.freeze(this.defaultValue); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n        }\r\n    }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(17);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(33),\r\n    util    = require(34);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar converters = require(13);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {JSONConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    return this.$type.convert(this, converters.json, options);\r\n};\r\n\r\n/**\r\n * Creates a message from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Options\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = function from(object, options) {\r\n    return this.$type.convert(object, converters.message, options);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Converts an object or runtime message of this type.\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\nMessage.convert = function convert(source, impl, options) {\r\n    return this.$type.convert(source, impl, options);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(32),\r\n    util = require(34);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(16),\r\n    Field   = require(17),\r\n    util    = require(34);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(32);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(30);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object\", nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object\", \"an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            /* istanbul ignore next */\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object\", \"a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(32);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(30);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.getNestedArray();\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name Namespace#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(32);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(30);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(34);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    /* istanbul ignore next */\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className;\r\n    var fullName = this.getFullName();\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(17),\r\n    util  = require(34);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = util.ucFirst(this.name);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nutil.prop(OneOfPrototype, \"fieldsArray\", {\r\n    get: function getFieldsArray() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field\", \"a Field\");\r\n\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field\", \"a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize  = require(31),\r\n    Root      = require(27),\r\n    Type      = require(32),\r\n    Field     = require(17),\r\n    MapField  = require(18),\r\n    OneOf     = require(23),\r\n    Enum      = require(16),\r\n    Service   = require(30),\r\n    Method    = require(20),\r\n    types     = require(33),\r\n    util      = require(34);\r\n\r\nfunction isName(token) {\r\n    return /^[a-zA-Z_][a-zA-Z_0-9]*$/.test(token);\r\n}\r\n\r\nfunction isTypeRef(token) {\r\n    return /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction isFqTypeRef(token) {\r\n    return /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object.<string,*>}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object.<string,*>}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        root = new Root();\r\n        options = root || {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : camelCase;\r\n\r\n    function illegal(token, name) {\r\n        var filename = parse.filename;\r\n        parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && isTypeRef(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"max\": return 536870911;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!isTypeRef(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        isProto3 = syntax === \"proto3\";\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    default:\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (lower(type) === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        if (!isTypeRef(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable.\r\n        if (field.repeated && types.packed[type] !== undefined && !isProto3)\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        skip(\"{\");\r\n        while ((token = next()) !== \"}\") {\r\n            switch (token = lower(token)) {\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        }\r\n        skip(\";\", true);\r\n        parent.add(type).add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var enm = new Enum(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.add(name, value);\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (isFqTypeRef(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n\r\n                /* istanbul ignore next */\r\n                if (!isName(token))\r\n                    throw illegal(token, \"name\");\r\n\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(reference))\r\n            throw illegal(reference, \"reference\");\r\n\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {ParserResult} Parser result\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(37);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(26);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return new BufferReader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\nvar Reader = require(25);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(17),\r\n    util   = require(34);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>|*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    // note that `json` actually must be of type `Object.<string,*>` but TypeScript\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\nvar initParser = function() {\r\n    try { // excluded in noparse builds\r\n        parse  = require(24);\r\n        common = require(11);\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    initParser = null;\r\n};\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (initParser)\r\n        initParser();\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.getFullName();\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(29);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(34);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(34),\r\n    rpc    = require(28);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n\r\n            /* istanbul ignore next */\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object.<string,*>} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n/**/\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(16),\r\n    OneOf     = require(23),\r\n    Field     = require(17),\r\n    Service   = require(30),\r\n    Class     = require(10),\r\n    Message   = require(19),\r\n    Reader    = require(25),\r\n    Writer    = require(39),\r\n    util      = require(34),\r\n    encoder   = require(15),\r\n    decoder   = require(14),\r\n    verifier  = require(38),\r\n    converter = require(12);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new (this.getCtor())(properties);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Conversion options\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.from = function from(object, options) {\r\n    return this.convert(object, converter.message, options);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var types = this.getFieldsArray().map(function(fld) { return fld.resolve().resolvedType; });\r\n    this.encode = encoder(this).eof(this.getFullName() + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(this.getFullName() + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(this.getFullName() + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.convert = converter(this).eof(this.getFullName() + \"$convert\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Converts an object or runtime message.\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\nTypePrototype.convert = function convert_setup(source, impl, options) {\r\n    return this.setup().convert(source, impl, options); // overrides this method\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(34);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(37);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(35);\r\nutil.EventEmitter = require(3);\r\nutil.extend       = require(4);\r\nutil.fetch        = require(5);\r\nutil.path         = require(7);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the second character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) { // ucFirst counterpart is in runtime util\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Whether running within IE8 or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isIE8 = false; try { util.isIE8 = eval(\"!-[1,]\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    /* istanbul ignore next */\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) { // lcFirst counterpart is in core util\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object.<string,*>} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object.<string,*>} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ucKey = util.ucFirst(key);\r\n    if (descriptor.get)\r\n        target[\"get\" + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target[\"set\" + ucKey] = util.isIE8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (util.isIE8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(16),\r\n    util      = require(34);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.getFullName().substring(1) + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e;\")\r\n            (\"if(e=types[%d].verify(%s))\", fieldIndex, ref)\r\n                (\"return e\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(37);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(40);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset()\r\n        .uint32(len)\r\n        .tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\nvar Writer = require(39);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(37);\r\n\r\nvar utf8   = util.utf8,\r\n    Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        val.copy(buf, pos, 0, val.length);\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser (if not excluded)\r\ntry {\r\n    protobuf.tokenize     = require(\"./tokenize\");\r\n    protobuf.parse        = require(\"./parse\");\r\n    protobuf.common       = require(\"./common\");\r\n} catch (e) {} // eslint-disable-line no-empty\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = require(\"./writer_buffer\");\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = require(\"./reader_buffer\");\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n/* istanbul ignore next */\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}