{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","src/common.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/inherits.js","src/mapfield.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/prototype.js","src/reader.js","src/root.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/codegen.js","src/util/longbits.js","src/verifier.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","common","name","json","test","nested","google","protobuf","Any","fields","type_url","type","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","oneof","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","Decoder","this","Enum","Reader","types","util","DecoderPrototype","prototype","Object","defineProperties","fieldsById","get","getFieldsById","ctor","getCtor","decode","reader","limit","undefined","len","pos","message","tag","field","resolve","resolvedType","map","resolvedKeyType","uint32","ks","vs","basic","longToHash","repeated","packed","wireType","plimit","skipType","generate","getFieldsArray","gen","codegen","prop","safeProp","eof","getFullName","fld","toHash","Encoder","Writer","EncoderPrototype","fieldsArray","encode","writer","fi","keys","fork","mapKey","ldelim","required","long","longNeq","defaultValue","reset","keyWireType","options","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","extend","_TypeError","valuesById","getValuesById","forEach","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","isObject","toString","toLowerCase","optional","partOf","Long","extensionField","declaringField","_packed","FieldPrototype","Type","MapField","isPacked","getOption","setOption","ifNotSet","role","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","String","Number","toNumber","charAt","inherits","clazz","classProperties","$type","noStatics","merge","finish","encodeDelimited","decodeDelimited","verify","Prototype","constructor","noRegister","setCtor","prototypeProperties","getOneofsArray","set","MapFieldPrototype","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","Namespace","_nestedArray","namespace","arrayToJSON","array","obj","NamespacePrototype","Service","nestedTypes","nestedError","join","nestedArray","getNestedArray","toArray","methods","addJSON","nestedJson","ns","nestedName","j","object","indexOf","prev","setOptions","onAdd","onRemove","define","path","split","Array","isArray","ptr","part","shift","resolveAll","parentAlreadyChecked","getRoot","slice","found","proto","create","Root","ReflectionObjectPrototype","root","fullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","_fields","addFieldsToParent","OneOfPrototype","push","index","splice","lower","token","camelCase","substring","replace","$0","$1","toUpperCase","parse","source","illegal","tn","line","s_bclose","readString","next","s_dq","s_sq","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRange","start","parseId","end","s_semi","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","s_name","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","p3","isProto3","parseCommon","s_option","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","s_open","s_close","parseMapField","s_required","s_optional","s_repeated","parseField","parseOneOf","extensions","reserved","s_type","parseInlineOptions","valueType","parseEnumField","custom","s_bopen","fqTypeRefRe","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","package","properties","any","fieldsOnly","asJSON","key","indexOutOfRange","writeLength","RangeError","buf","Buffer","isBuffer","BufferReader","Tag","readLongVarint","lo","hi","b","LongBits","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readLongFixed","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","initBufferReader","ieee754","ReaderPrototype","ArrayImpl","Uint8Array","_slice","subarray","int32","octet","sint32","int64","uint64","sint64","bool","fixed32","sfixed32","fixed64","sfixed64","float","double","bytes","string","out","p","c1","fromCharCode","apply","remain","BufferReaderPrototype","readFloatLE","readDoubleLE","deferred","files","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","filename","callback","err","cb","process","JSON","parsed","self","fetch","queued","weak","idx","altname","setTimeout","asPromise","newDeferred","_methodsArray","ServicePrototype","methodsArray","getMethodsArray","methodName","inherited","rpc","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","str","subject","re","stringDelim","stringDoubleRe","stringSingleRe","lastIndex","match","exec","stack","repeat","curr","s_nl","s_sl","s_as","delimRe","delim","expected","actual","equals","_fieldsById","_fieldsArray","_oneofsArray","_ctor","TypePrototype","Verifier","names","oneofsArray","supported","P","fieldName","oneOfName","filter","encoder","readerOrBuffer","decoder","verifier","bake","emptyArray","freeze","fn","ctx","args","arguments","Promise","reject","concat","onload","xhr","status","responseText","fs","readFile","XMLHttpRequest","onreadystatechange","readyState","open","send","isAbsolutePath","normalizePath","parts","prefix","isNode","global","versions","node","dcodeIO","isFinite","description","TypeError","originPath","importPath","alreadyNormalized","from","longFromHash","hash","unsigned","bits","fromHash","fromBits","fromNumber","low","high","dst","src","newBuffer","size","fmt","level","indent","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","format","params","param","stringify","scope","verbose","console","Function","LongBitsPrototype","zero","zzEncode","charCodeAt","mask","part0","part1","part2","VerifierPrototype","reason","hasReasonVar","Op","val","noop","State","tail","BufferWriter","writeByte","writeVarint32","writeVarint64","writeFixed32","writeFixed64","writeFloat","writeDouble","writeString","c2","byteLength","strlen","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","writeStringBuffer","WriterPrototype","op","writeBytes","state","pop","BufferWriterPrototype","allocUnsafe"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = Decoder;\r\n\r\nvar Enum   = require(5),\r\n    Reader = require(15),\r\n    types  = require(20),\r\n    util   = require(21);\r\n\r\n/**\r\n * Constructs a new decoder for the specified message type.\r\n * @classdesc Wire format decoder using code generation on top of reflection.\r\n * @constructor\r\n * @param {Type} type Message type\r\n */\r\nfunction Decoder(type) {\r\n\r\n    /**\r\n     * Message type.\r\n     * @type {Type}\r\n     */\r\n    this.type = type;\r\n}\r\n\r\n/** @alias Decoder.prototype */\r\nvar DecoderPrototype = Decoder.prototype;\r\n\r\n// This is here to mimic Type so that fallback functions work without having to bind()\r\nObject.defineProperties(DecoderPrototype, {\r\n\r\n    /**\r\n     * Fields of this decoder's message type by id for lookups.\r\n     * @name Decoder#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: DecoderPrototype.getFieldsById = function getFieldsById() {\r\n            return this.type.getFieldsById();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * With this decoder's message type registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Decoder#ctor\r\n     * @type {Prototype}\r\n     */\r\n    ctor: {\r\n        get: DecoderPrototype.getCtor = function getCtor() {\r\n            return this.type.getCtor();\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Decodes a message of this decoder's message type.\r\n * @param {Reader} reader Reader to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Prototype} Populated runtime message\r\n */\r\nDecoderPrototype.decode = function decode_fallback(reader, length) { // codegen reference and fallback\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.getFieldsById(),\r\n        reader  = reader instanceof Reader ? reader : Reader(reader),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new (this.getCtor())();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.tag(),\r\n            field    = fields[tag.id].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                    length  = reader.uint32();\r\n                var map = message[field.name] = {};\r\n                if (length) {\r\n                    length += reader.pos;\r\n                    var ks = [], vs = [];\r\n                    while (reader.pos < length) {\r\n                        if (reader.tag().id === 1)\r\n                            ks[ks.length] = reader[keyType]();\r\n                        else if (types.basic[type] !== undefined)\r\n                            vs[vs.length] = reader[type]();\r\n                        else\r\n                            vs[vs.length] = field.resolvedType.decode(reader, reader.uint32());\r\n                    }\r\n                    for (var i = 0; i < ks.length; ++i)\r\n                        map[typeof ks[i] === 'object' ? util.longToHash(ks[i]) : ks[i]] = vs[i];\r\n                }\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] || (message[field.name] = []);\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && tag.wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values[values.length] = reader[type]();\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] !== undefined)\r\n                    values[values.length] = reader[type]();\r\n                  else\r\n                    values[values.length] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] !== undefined)\r\n                message[field.name] = reader[type]();\r\n              else\r\n                message[field.name] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(tag.wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a decoder specific to this decoder's message type.\r\n * @returns {function} Decoder function with an identical signature to {@link Decoder#decode}\r\n */\r\nDecoderPrototype.generate = function generate() {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = this.type.getFieldsArray();    \r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new (this.getCtor())()\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.tag()\")\r\n        (\"switch(t.id){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"var n=r.uint32(),o={}\")\r\n                (\"if(n){\")\r\n                    (\"n+=r.pos\")\r\n                    (\"var k=[],v=[]\")\r\n                    (\"while(r.pos<n){\")\r\n                        (\"if(r.tag().id===1)\")\r\n                            (\"k[k.length]=r.%s()\", keyType);\r\n\r\n                        if (types.basic[type] !== undefined) gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=r.%s()\", type);\r\n\r\n                        else gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=types[%d].decode(r,r.uint32())\", i, i);\r\n                    gen\r\n                    (\"}\")\r\n                    (\"for(var i=0;i<k.length;++i)\")\r\n                        (\"o[typeof(k[i])==='object'?util.longToHash(k[i]):k[i]]=v[i]\")\r\n                (\"}\")\r\n                (\"m%s=o\", prop);\r\n\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s||(m%s=[])\", prop, prop);\r\n\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n                (\"if(t.wireType===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s[m%s.length]=r.%s()\", prop, prop, type)\r\n                (\"}else\");\r\n            }\r\n\r\n            if (types.basic[type] !== undefined) gen\r\n\r\n                    (\"m%s[m%s.length]=r.%s()\", prop, prop, type);\r\n\r\n            else gen\r\n\r\n                    (\"m%s[m%s.length]=types[%d].decode(r,r.uint32())\", prop, prop, i, i);\r\n\r\n        } else if (types.basic[type] !== undefined) { gen\r\n\r\n                (\"m%s=r.%s()\", prop, type);\r\n\r\n        } else { gen\r\n\r\n                (\"m%s=types[%d].decode(r,r.uint32())\", prop, i, i);\r\n\r\n        } gen\r\n                (\"break\");\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t.wireType)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    return gen\r\n    .eof(this.type.getFullName() + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : fields.map(function(fld) { return fld.resolvedType; }),\r\n        util   : util.toHash\r\n    });\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Encoder;\r\n\r\nvar Enum   = require(5),\r\n    Writer = require(25),\r\n    types  = require(20),\r\n    util   = require(21);\r\n\r\n/**\r\n * Constructs a new encoder for the specified message type.\r\n * @classdesc Wire format encoder using code generation on top of reflection\r\n * @constructor\r\n * @param {Type} type Message type\r\n */\r\nfunction Encoder(type) {\r\n\r\n    /**\r\n     * Message type.\r\n     * @type {Type}\r\n     */\r\n    this.type = type;\r\n}\r\n\r\n/** @alias Encoder.prototype */\r\nvar EncoderPrototype = Encoder.prototype;\r\n\r\n// This is here to mimic Type so that fallback functions work without having to bind()\r\nObject.defineProperties(EncoderPrototype, {\r\n\r\n    /**\r\n     * Fields of this encoder's message type as an array for iteration.\r\n     * @name Encoder#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: EncoderPrototype.getFieldsArray = function getFieldsArray() {\r\n            return this.type.getFieldsArray();\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Encodes a message of this encoder's message type.\r\n * @param {Prototype|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nEncoderPrototype.encode = function encode_fallback(message, writer) { // codegen reference and fallback\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer();\r\n    var fields = this.getFieldsArray(), fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            var value, keys;\r\n            if ((value = message[field.name]) && (keys = Object.keys(value)).length) {\r\n                writer.fork();\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    writer.tag(1, types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType !== undefined)\r\n                        writer.tag(2, wireType)[type](value[keys[i]]);\r\n                    else\r\n                        field.resolvedType.encode(value[keys[i]], writer.tag(2,2).fork()).ldelim();\r\n                }\r\n                writer.ldelim(field.id);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    writer.fork();\r\n                    var i = 0;\r\n                    while (i < values.length)\r\n                        writer[type](values[i++]);\r\n                    writer.ldelim(field.id);\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType !== undefined)\r\n                        while (i < values.length)\r\n                            writer.tag(field.id, wireType)[type](values[i++]);\r\n                    else\r\n                        while (i < values.length)\r\n                            field.resolvedType.encode(values[i++], writer.tag(field.id,2).fork()).ldelim();\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name];\r\n            if (field.required || value !== undefined && field.long ? util.longNeq(value, field.defaultValue) : value !== field.defaultValue) {\r\n                if (wireType !== undefined)\r\n                    writer.tag(field.id, wireType)[type](value);\r\n                else {\r\n                    field.resolvedType.encode(value, writer.fork());\r\n                    if (writer.len || field.required)\r\n                        writer.ldelim(field.id);\r\n                    else\r\n                        writer.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates an encoder specific to this encoder's message type.\r\n * @returns {function} Encoder function with an identical signature to {@link Encoder#encode}\r\n */\r\nEncoderPrototype.generate = function generate() {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = this.type.getFieldsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer())\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = util.safeProp(field.name);\r\n        \r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType     = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                keyWireType = types.mapKey[keyType];\r\n            gen\r\n\r\n    (\"if(m%s){\", prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0,ks=Object.keys(m%s);i<ks.length;++i){\", prop)\r\n            (\"w.tag(1,%d).%s(ks[i])\", keyWireType, keyType);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n            (\"w.tag(2,%d).%s(m%s[ks[i]])\", wireType, type, prop);\r\n\r\n            else gen\r\n            \r\n            (\"types[%d].encode(m%s[ks[i]],w.tag(2,2).fork()).ldelim()\", i, prop);\r\n\r\n            gen\r\n        (\"}\")\r\n        (\"w.len&&w.ldelim(%d)||w.reset()\", field.id)\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim(%d)\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.tag(%d,%d).%s(m%s[i])\", field.id, wireType, type, prop);\r\n                else gen\r\n            (\"types[%d].encode(m%s[i],w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(m%s!==undefined&&util.longNeq(m%s,%j))\", prop, prop, field.defaultValue);\r\n                else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n        (\"w.tag(%d,%d).%s(m%s)\", field.id, wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n        (\"types[%d].encode(m%s,w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n        \r\n            else gen\r\n\r\n        (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", i, prop, field.id);\r\n    \r\n        }\r\n    }\r\n    return gen\r\n    (\"return w\")\r\n\r\n    .eof(this.type.getFullName() + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : fields.map(function(fld) { return fld.resolvedType; }),\r\n        util   : util\r\n    });\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nvar util = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nObject.defineProperties(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: EnumPrototype.getValuesById = function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error('duplicate name \"' + name + '\" in ' + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error('\"' + name + '\" is not a name of ' + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nvar Type      = require(19),\r\n    Enum      = require(5),\r\n    MapField  = require(8),\r\n    types     = require(20),\r\n    util      = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string} [rule=optional] Field rule\r\n * @param {string} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== 'optional' ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nObject.defineProperties(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined)\r\n        return MapField.fromJSON(name, json);\r\n    return new Field(name, json.id, json.type, json.role, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options['default']) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n    \r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Prototype#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (this.resolvedType instanceof Enum && options['enum'] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        else if (this.long && options.long)\r\n            return options.long === Number\r\n                ? typeof value === 'number'\r\n                ? value\r\n                : util.Long.fromValue(value).toNumber()\r\n                : util.Long.fromValue(value, this.type.charAt(0) === 'u').toString();\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = inherits;\r\n\r\nvar Prototype = require(14),\r\n    Type      = require(19),\r\n    util      = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Options passed to {@link inherits}, modifying its behavior.\r\n * @typedef InheritanceOptions\r\n * @type {Object}\r\n * @property {boolean} [noStatics=false] Skips adding the default static methods on top of the constructor\r\n * @property {boolean} [noRegister=false] Skips registering the constructor with the reflected type\r\n */\r\n\r\n/**\r\n * Inherits a custom class from the message prototype of the specified message type.\r\n * @param {Function} clazz Inheriting class\r\n * @param {Type} type Inherited message type\r\n * @param {InheritanceOptions} [options] Inheritance options\r\n * @returns {Prototype} Created prototype\r\n */\r\nfunction inherits(clazz, type, options) {\r\n    if (typeof clazz !== 'function')\r\n        throw _TypeError(\"clazz\", \"a function\");\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    if (!options)\r\n        options = {};\r\n\r\n    /**\r\n     * This is not an actual type but stands as a reference for any constructor of a custom message class that you pass to the library.\r\n     * @name Class\r\n     * @extends Prototype\r\n     * @constructor\r\n     * @param {Object.<string,*>} [properties] Properties to set on the message\r\n     * @see {@link inherits}\r\n     */\r\n\r\n    var classProperties = {\r\n        \r\n        /**\r\n         * Reference to the reflected type.\r\n         * @name Class.$type\r\n         * @type {Type}\r\n         * @readonly\r\n         */\r\n        $type: {\r\n            value: type\r\n        }\r\n    };\r\n\r\n    if (!options.noStatics)\r\n        util.merge(classProperties, {\r\n\r\n            /**\r\n             * Encodes a message of this type to a buffer.\r\n             * @name Class.encode\r\n             * @function\r\n             * @param {Prototype|Object} message Message to encode\r\n             * @param {Writer} [writer] Writer to use\r\n             * @returns {Uint8Array} Encoded message\r\n             */\r\n            encode: {\r\n                value: function encode(message, writer) {\r\n                    return this.$type.encode(message, writer).finish();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Encodes a message of this type preceeded by its length as a varint to a buffer.\r\n             * @name Class.encodeDelimited\r\n             * @function\r\n             * @param {Prototype|Object} message Message to encode\r\n             * @param {Writer} [writer] Writer to use\r\n             * @returns {Uint8Array} Encoded message\r\n             */\r\n            encodeDelimited: {\r\n                value: function encodeDelimited(message, writer) {\r\n                    return this.$type.encodeDelimited(message, writer).finish();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Decodes a message of this type from a buffer.\r\n             * @name Class.decode\r\n             * @function\r\n             * @param {Uint8Array} buffer Buffer to decode\r\n             * @returns {Prototype} Decoded message\r\n             */\r\n            decode: {\r\n                value: function decode(buffer) {\r\n                    return this.$type.decode(buffer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Decodes a message of this type preceeded by its length as a varint from a buffer.\r\n             * @name Class.decodeDelimited\r\n             * @function\r\n             * @param {Uint8Array} buffer Buffer to decode\r\n             * @returns {Prototype} Decoded message\r\n             */\r\n            decodeDelimited: {\r\n                value: function decodeDelimited(buffer) {\r\n                    return this.$type.decodeDelimited(buffer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Verifies a message of this type.\r\n             * @name Class.verify\r\n             * @function\r\n             * @param {Prototype|Object} message Message or plain object to verify\r\n             * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            verify: {\r\n                value: function verify(message) {\r\n                    return this.$type.verify(message);\r\n                }\r\n            }\r\n\r\n        }, true);\r\n\r\n    Object.defineProperties(clazz, classProperties);\r\n    var prototype = inherits.defineProperties(new Prototype(), type);\r\n    clazz.prototype = prototype;\r\n    prototype.constructor = clazz;\r\n\r\n    if (!options.noRegister)\r\n        type.setCtor(clazz);\r\n\r\n    return prototype;\r\n}\r\n\r\n/**\r\n * Defines the reflected type's default values and virtual oneof properties on the specified prototype.\r\n * @memberof inherits\r\n * @param {Prototype} prototype Prototype to define properties upon\r\n * @param {Type} type Reflected message type\r\n * @returns {Prototype} The specified prototype\r\n */\r\ninherits.defineProperties = function defineProperties(prototype, type) {\r\n\r\n    var prototypeProperties = {\r\n\r\n        /**\r\n         * Reference to the reflected type.\r\n         * @name Prototype#$type\r\n         * @type {Type}\r\n         * @readonly\r\n         */\r\n        $type: {\r\n            value: type\r\n        }\r\n    };\r\n\r\n    // Initialize default values\r\n    type.getFieldsArray().forEach(function(field) {\r\n        field.resolve();\r\n        if (!util.isObject(field.defaultValue))\r\n            // objects are mutable (i.e. would modify the array on the prototype, not the instance)\r\n            prototype[field.name] = field.defaultValue;\r\n    });\r\n\r\n    // Define each oneof with a non-enumerable getter and setter for the present field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        prototypeProperties[oneof.resolve().name] = {\r\n            get: function() {\r\n                var keys = oneof.oneof;\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    var field = oneof.parent.fields[keys[i]];\r\n                    if (this[keys[i]] != field.defaultValue) // eslint-disable-line eqeqeq\r\n                        return keys[i];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function(value) {\r\n                var keys = oneof.oneof;\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n                }\r\n            }\r\n        };\r\n    });\r\n\r\n    Object.defineProperties(prototype, prototypeProperties);\r\n    return prototype;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(6);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nvar Enum    = require(5),\r\n    types   = require(20),\r\n    util    = require(21);\r\n\r\n/**\r\n * Constructs a new map field.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nvar Type = require(19),\r\n    util = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean} [requestStream] Whether the request is streamed\r\n * @param {boolean} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    this.resolvedResponseType = resolved;\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nvar Enum    = require(5),\r\n    Type    = require(19),\r\n    Field   = require(6),\r\n    Service = require(17),\r\n    util    = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\nvar nestedTypes = [ Enum, Type, Service, Field, Namespace ],\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(', ');\r\n\r\n/**\r\n * Constructs a new namespace.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nObject.defineProperties(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: NamespacePrototype.getNestedArray = function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson)\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw _TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split('.');\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split('.');\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found instanceof Namespace && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.extend = extend;\r\n\r\nvar Root = require(16),\r\n    util = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: ReflectionObjectPrototype.getRoot = function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join('.');\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Lets the specified constructor extend this class.\r\n * @memberof ReflectionObject\r\n * @param {Function} constructor Extending constructor\r\n * @returns {Object} Prototype\r\n * @this ReflectionObject\r\n */\r\nfunction extend(constructor) {\r\n    var proto = constructor.prototype = Object.create(this.prototype);\r\n    proto.constructor = constructor;\r\n    constructor.extend = extend;\r\n    return proto;\r\n}\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Constructor name, space, full name\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    return this.constructor.name + \" \" + this.getFullName();\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nvar Field = require(6),\r\n    util  = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {Array.<string>}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Array.<Field>}\r\n     * @private\r\n     */\r\n    this._fields = [];\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fields.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fields.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fields.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fields.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fields.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize = require(18),\r\n    Root     = require(16),\r\n    Type     = require(19),\r\n    Field    = require(6),\r\n    MapField = require(8),\r\n    OneOf    = require(12),\r\n    Enum     = require(5),\r\n    Service  = require(17),\r\n    Method   = require(9),\r\n    types    = require(20);\r\n\r\nvar nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(name) {\r\n    return name.substring(0,1)\r\n         + name.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\nvar s_required = \"required\",\r\n    s_repeated = \"repeated\",\r\n    s_optional = \"optional\",\r\n    s_option   = \"option\",\r\n    s_name     = \"name\",\r\n    s_type     = \"type\";\r\nvar s_open     = \"{\",\r\n    s_close    = \"}\",\r\n    s_bopen    = '(',\r\n    s_bclose   = ')',\r\n    s_semi     = \";\",\r\n    s_dq       = '\"',\r\n    s_sq       = \"'\";\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} [root] Root to populate\r\n * @returns {ParserResult} Parser result\r\n */\r\nfunction parse(source, root) {\r\n    /* eslint-disable default-case, callback-return */\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    function illegal(token, name) {\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (line \" + tn.line() + s_bclose);\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== s_dq && token !== s_sq)\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === s_dq || token === s_sq);\r\n        return values.join('');\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case s_sq:\r\n            case s_dq:\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(s_semi);\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === '-') {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, 'number');\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"min\": return 1;\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === '-' && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, s_name);\r\n        ptr = ptr.define(pkg);\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(s_semi);\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        var p3;\r\n        if ([ \"proto2\", p3 = \"proto3\" ].indexOf(syntax) < 0)\r\n            throw illegal(syntax, \"syntax\");\r\n        isProto3 = syntax === p3;\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case s_option:\r\n                parseOption(parent, token);\r\n                skip(s_semi);\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n                    case s_required:\r\n                    case s_optional:\r\n                    case s_repeated:\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, s_optional);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, s_type);\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, s_type);\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, s_type);\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (token === s_option) {\r\n                    parseOption(oneof, token);\r\n                    skip(s_semi);\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, s_optional);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (lower(token) === s_option)\r\n                    parseOption(enm);\r\n                else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, s_name);\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parseInlineOptions(parent.values[name] = new Number(value)); // eslint-disable-line no-new-wrappers\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(s_bopen, true);\r\n        var name = next();\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, s_name);\r\n        if (custom) {\r\n            skip(s_bclose);\r\n            name = s_bopen + name + s_bclose;\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (!nameRe.test(token))\r\n                    throw illegal(token, s_name);\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, s_option);\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(s_semi);\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(service, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(s_bopen);\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(s_bclose); skip(\"returns\"); skip(s_bopen);\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(s_bclose);\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(method, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_required:\r\n                    case s_repeated:\r\n                    case s_optional:\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, s_optional, reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case s_option:\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(s_semi);\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    return {\r\n        'package'     : pkg,\r\n        'imports'     : imports,\r\n        'weakImports' : weakImports,\r\n        'syntax'      : syntax,\r\n        'root'        : root\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = Prototype;\r\n\r\n/**\r\n * Options passed to the {@link Prototype|prototype constructor}, modifying its behavior.\r\n * @typedef PrototypeOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Sets only properties that reference a field\r\n */\r\n\r\n/**\r\n * Constructs a new prototype.\r\n * This method should be called from your custom constructors, i.e. `Prototype.call(this, properties)`.\r\n * @classdesc Runtime message prototype ready to be extended by custom classes or generated code.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @param {PrototypeOptions} [options] Prototype options\r\n * @abstract\r\n * @see {@link inherits}\r\n * @see {@link Class}\r\n */\r\nfunction Prototype(properties, options) {\r\n    if (properties) {\r\n        var any    = !(options && options.fieldsOnly),\r\n            fields = this.constructor.$type.fields,\r\n            keys   = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (fields[keys[i]] || any)\r\n                this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a runtime message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {Function} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {Function} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nPrototype.prototype.asJSON = function asJSON(options) {\r\n    var any    = !(options && options.fieldsOnly),\r\n        fields = this.constructor.$type.fields,\r\n        json   = {};\r\n    var keys   = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && value.length) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (any)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util     = require(21),\r\n    ieee754  = require(1);\r\nvar LongBits = util.LongBits,\r\n    Long     = util.Long;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader using the specified buffer.\r\n * When called as a function, returns an appropriate reader for the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    if (!(this instanceof Reader))\r\n        return util.Buffer && (!buffer || util.Buffer.isBuffer(buffer)) && new BufferReader(buffer) || new Reader(buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nvar ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\nReaderPrototype._slice = ArrayImpl.prototype.slice || ArrayImpl.prototype.subarray;\r\n\r\n/**\r\n * Tag read.\r\n * @constructor\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @ignore\r\n */\r\nfunction Tag(id, wireType) {\r\n    this.id = id;\r\n    this.wireType = wireType;\r\n}\r\n\r\n/**\r\n * Reads a tag.\r\n * @returns {{id: number, wireType: number}} Field id and wire type\r\n */\r\nReaderPrototype.tag = function read_tag() {\r\n    if (this.pos >= this.len)\r\n        throw indexOutOfRange(this);\r\n    return new Tag(this.buf[this.pos] >>> 3, this.buf[this.pos++] & 7);\r\n};\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    var value = 0,\r\n        shift = 0,\r\n        octet = 0;\r\n    do {\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        octet = this.buf[this.pos++];\r\n        if (shift < 32)\r\n            value |= (octet & 127) << shift;\r\n        shift += 7;\r\n    } while (octet & 128);\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    return this.int32() >>> 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.int32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/**\r\n * Reads a possibly 64 bits varint.\r\n * @returns {LongBits} Long bits\r\n * @this {Reader}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction readLongVarint() {\r\n    var lo = 0, hi = 0,\r\n        i  = 0, b  = 0;\r\n    if (this.len - this.pos > 9) { // fast route\r\n        for (i = 0; i < 4; ++i) {\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong(); // eslint-disable-line no-invalid-this\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber(); // eslint-disable-line no-invalid-this\r\n}\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\nReaderPrototype.int64 = Long && read_int64_long || read_int64_number;\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true); // eslint-disable-line no-invalid-this\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true); // eslint-disable-line no-invalid-this\r\n}\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\nReaderPrototype.uint64 = Long && read_uint64_long || read_uint64_number;\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong(); // eslint-disable-line no-invalid-this\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber(); // eslint-disable-line no-invalid-this\r\n}\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\nReaderPrototype.sint64 = Long && read_sint64_long || read_sint64_number;\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.int32() !== 0;\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    this.pos += 4;\r\n    return this.buf[this.pos - 4]\r\n         | this.buf[this.pos - 3] << 8\r\n         | this.buf[this.pos - 2] << 16\r\n         | this.buf[this.pos - 1] << 24;\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/**\r\n * Reads a 64 bit value.\r\n * @returns {LongBits} Long bits\r\n * @this {Reader}\r\n * @inner \r\n * @ignore\r\n */\r\nfunction readLongFixed() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    ,\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    );\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readLongFixed.call(this).toLong(true); // eslint-disable-line no-invalid-this\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readLongFixed.call(this).toNumber(true); // eslint-disable-line no-invalid-this\r\n}\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\nReaderPrototype.fixed64 = Long && read_fixed64_long || read_fixed64_number;\r\n\r\nfunction read_sfixed64_long() {\r\n    return readLongFixed.call(this).zzDecode().toLong(); // eslint-disable-line no-invalid-this\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readLongFixed.call(this).zzDecode().toNumber(); // eslint-disable-line no-invalid-this\r\n}\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @returns {Long|number} Value read\r\n */\r\nReaderPrototype.sfixed64 = Long && read_sfixed64_long || read_sfixed64_number;\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = ieee754.read(this.buf, this.pos, false, 23, 4);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = ieee754.read(this.buf, this.pos, false, 52, 8);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    // ref: https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js\r\n    var bytes = this.bytes(),\r\n        len = bytes.length;\r\n    if (len) {\r\n        var out = new Array(len), p = 0, c = 0;\r\n        while (p < len) {\r\n            var c1 = bytes[p++];\r\n            if (c1 < 128)\r\n                out[c++] = c1;\r\n            else if (c1 > 191 && c1 < 224)\r\n                out[c++] = (c1 & 31) << 6 | bytes[p++] & 63;\r\n            else if (c1 > 239 && c1 < 365) {\r\n                var u = ((c1 & 7) << 18 | (bytes[p++] & 63) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63) - 0x10000;\r\n                out[c++] = 0xD800 + (u >> 10);\r\n                out[c++] = 0xDC00 + (u & 1023);\r\n            } else\r\n                out[c++] = (c1 & 15) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63;\r\n        }\r\n        return String.fromCharCode.apply(String, out.slice(0, c));\r\n    }\r\n    return \"\";\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                var tag = this.tag();\r\n                if (tag.wireType === 4)\r\n                    break;\r\n                this.skipType(tag.wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    if (!util.Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.int32() >>> 0,\r\n        start = this.pos,\r\n        end   = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return this.buf.toString(\"utf8\", start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(10);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nvar Field  = require(6),\r\n    util   = require(21),\r\n    common = require(2);\r\n\r\n/**\r\n * Constructs a new root namespace.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.resolvePath;\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {function(?Error, Root=)} [callback] Node-style callback function\r\n * @returns {Promise<Root>|undefined} A promise if `callback` has been omitted\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nRootPrototype.load = function load(filename, callback) {\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                var parsed = require(13)(source, self);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            ++queued;\r\n            setTimeout(function() {\r\n                --queued;\r\n                process(filename, common[filename]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        ++queued;\r\n        util.fetch(filename, function(err, source) {\r\n            --queued;\r\n            if (!callback)\r\n                return; // terminated meanwhile\r\n            if (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        });\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (!queued)\r\n        finish(null);\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.toString = function toString() {\r\n    return this.constructor.name;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(10);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nvar Method = require(9),\r\n    util   = require(21);\r\n\r\n/**\r\n * Constructs a new service.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nObject.defineProperties(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: ServicePrototype.getMethodsArray = function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @function\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {function(?Error, Uint8Array=)} callback Node-style callback called with the error, if any, and the response data\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpc RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether request data is length delimited\r\n * @param {boolean} [responseDelimited=false] Whether response data is length delimited\r\n * @returns {Object} Runtime service\r\n */\r\nServicePrototype.create = function create(rpc, requestDelimited, responseDelimited) {\r\n    var rpcService = {};\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[method.resolve().name] = function(request, callback) {\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited && method.resolvedRequestType.encodeDelimited(request) || method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === 'function' && setImmediate || setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpc(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited && method.resolvedResponseType.decodeDelimited(responseData) || method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    callback(err2);\r\n                    return;\r\n                }\r\n                callback(null, response);\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n\r\nvar s_nl = \"\\n\",\r\n    s_sl = '/',\r\n    s_as = '*';\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable default-case, callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === '\"' ? stringDoubleRe : stringSingleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === s_nl)\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === s_sl) {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === s_sl) { // Line\r\n                    while (charAt(++offset) !== s_nl)\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === s_as) { /* Block */\r\n                    do {\r\n                        if (curr === s_nl)\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== s_as || curr !== s_sl);\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return s_sl;\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === '\"' || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable default-case, callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(10);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nvar Enum      = require(5),\r\n    OneOf     = require(12),\r\n    Field     = require(6),\r\n    Service   = require(17),\r\n    Prototype = require(14),\r\n    inherits  = require(7),\r\n    util      = require(21),\r\n    Reader    = require(15),\r\n    Encoder   = require(4),\r\n    Decoder   = require(3),\r\n    Verifier  = require(24);\r\nvar codegen   = util.codegen;\r\n\r\n/**\r\n * Constructs a new message type.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {?Function}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: TypePrototype.getFieldsById = function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: TypePrototype.getFieldsArray = function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: TypePrototype.getOneofsArray = function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Prototype}\r\n     */\r\n    ctor: {\r\n        get: TypePrototype.getCtor = function getCtor() {\r\n            if (this._ctor)\r\n                return this._ctor;\r\n            var ctor;\r\n            if (codegen.supported)\r\n                ctor = codegen(\"p\")(\"P.call(this,p)\").eof(this.getFullName() + \"$ctor\", {\r\n                    P: Prototype\r\n                });\r\n            else\r\n                ctor = function GenericMessage(properties) {\r\n                    Prototype.call(this, properties);\r\n                };\r\n            ctor.prototype = inherits(ctor, this);\r\n            this._ctor = ctor;\r\n            return ctor;\r\n        },\r\n        set: TypePrototype.setCtor = function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Prototype))\r\n                throw util._TypeError(\"ctor\", \"a constructor inheriting from Prototype\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object} [properties] Properties to set\r\n * @param {?Function} [ctor] Constructor to use.\r\n * Defaults to use the internal constuctor.\r\n * @returns {Prototype} Message instance\r\n */\r\nTypePrototype.create = function create(properties, ctor) {\r\n    if (typeof properties === 'function') {\r\n        ctor = properties;\r\n        properties = undefined;\r\n    } else if (properties /* already */ instanceof Prototype)\r\n        return properties;\r\n    if (ctor) {\r\n        if (!(ctor.prototype instanceof Prototype))\r\n            throw util._TypeError(\"ctor\", \"a constructor inheriting from Prototype\");\r\n    } else\r\n        ctor = this.getCtor();\r\n    return new ctor(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Prototype|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode(message, writer) {\r\n    var encoder = new Encoder(this);\r\n    this.encode = codegen.supported\r\n        ? encoder.generate()\r\n        : encoder.encode;\r\n    return this.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Prototype|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Prototype} Decoded message\r\n */\r\nTypePrototype.decode = function decode(readerOrBuffer, length) {\r\n    var decoder = new Decoder(this);\r\n    this.decode = codegen.supported\r\n        ? decoder.generate()\r\n        : decoder.decode;\r\n    return this.decode(readerOrBuffer, length);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Prototype} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that enum values are valid and that any required fields are present.\r\n * @param {Prototype|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify(message) {\r\n    var verifier = new Verifier(this);\r\n    this.verify = codegen.supported\r\n        ? verifier.generate()\r\n        : verifier.verify;\r\n    return this.verify(message);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = module.exports = {};\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\nvar emptyArray = [];\r\nif (Object.freeze)\r\n    Object.freeze(emptyArray);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ emptyArray\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.packed = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n], 2);\r\n","\"use strict\";\r\n\r\n/**\r\n * Utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = {};\r\n\r\nvar LongBits =\r\nutil.LongBits = require(\"./util/longbits\");\r\nutil.codegen  = require(\"./util/codegen\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nvar isNode = util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {?Function}\r\n */\r\nutil.Buffer = null;\r\n\r\nif (isNode)\r\n    try { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {?Function}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || null;\r\n\r\nif (!util.Long)\r\n    try { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @memberof util\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n}\r\n\r\nutil.isString = isString;\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === 'object');\r\n};\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=a string] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Returns a promise from a node-style function.\r\n * @memberof util\r\n * @param {function(Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var args = [];\r\n    for (var i = 2; i < arguments.length; ++i)\r\n        args.push(arguments[i]);\r\n    return new Promise(function(resolve, reject) {\r\n        fn.apply(ctx, args.concat(\r\n            function(err/*, varargs */) {\r\n                if (err) reject(err);\r\n                else resolve.apply(null, Array.prototype.slice.call(arguments, 1));\r\n            }\r\n        ));\r\n    });\r\n}\r\n\r\nutil.asPromise = asPromise;\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {function(?Error, string=)} [callback] Node-style callback\r\n * @returns {Promise<string>|undefined} Promise if callback has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, util, path);\r\n    var fs; try { fs = require(\"fs\"); } catch (e) {} // eslint-disable-line no-empty\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", callback);\r\n    var xhr = new XMLHttpRequest();\r\n    function onload() {\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n        if (isString(xhr.responseText))\r\n            return callback(null, xhr.responseText);\r\n        return callback(Error(\"request failed\"));\r\n    }\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4)\r\n            onload();\r\n    };\r\n    xhr.open(\"GET\", path, true);\r\n    xhr.send();\r\n    return undefined;\r\n}\r\n\r\nutil.fetch = fetch;\r\n\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @memberof util\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\nfunction isAbsolutePath(path) {\r\n    return /^(?:\\/|[a-zA-Z0-9]+:)/.test(path);\r\n}\r\n\r\nutil.isAbsolutePath = isAbsolutePath;\r\n\r\n/**\r\n * Normalizes the specified path.\r\n * @memberof util\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\nfunction normalizePath(path) {\r\n    path = path.replace(/\\\\/g, '/')\r\n               .replace(/\\/{2,}/g, '/');\r\n    var parts = path.split('/');\r\n    var abs = isAbsolutePath(path);\r\n    var prefix = \"\";\r\n    if (abs)\r\n        prefix = parts.shift() + '/';\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === '..') {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (abs)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === '.')\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join('/');\r\n}\r\n\r\nutil.normalizePath = normalizePath;\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path that was used to fetch the origin file\r\n * @param {string} importPath Import path specified in the origin file\r\n * @param {boolean} [alreadyNormalized] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the imported file\r\n */\r\nutil.resolvePath = function resolvePath(originPath, importPath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        importPath = normalizePath(importPath);\r\n    if (isAbsolutePath(importPath))\r\n        return importPath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalizePath(originPath);\r\n    originPath = originPath.replace(/(?:\\/|^)[^/]+$/, '');\r\n    return originPath.length ? normalizePath(originPath + '/' + importPath) : importPath;\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : '\\0\\0\\0\\0\\0\\0\\0\\0';\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === 'number'\r\n         ? typeof b === 'number'\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === 'number'\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n// Reserved words, ref: https://msdn.microsoft.com/en-us/library/ttyab5c8.aspx\r\n// var reserved = \"break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,false,finally,for,function,if,import,in,instanceof,new,null,protected,return,super,switch,this,throw,true,try,typeof,var,while,with,abstract,boolean,byte,char,decimal,double,enum,final,float,get,implements,int,interface,internal,long,package,private,protected,public,sbyte,set,short,static,uint,ulong,ushort,void,assert,ensure,event,goto,invariant,namespace,native,require,synchronized,throws,transient,use,volatile\".split(',');\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    // NOTE: While dot notation looks cleaner it doesn't seem to have a significant impact on performance.\r\n    // Hence, we can safe the extra bytes from providing the reserved keywords above for pre-ES5 envs.\r\n    return /* /^[a-z_$][a-z0-9_$]*$/i.test(prop) && !reserved.indexOf(prop) ? \".\" + prop : */ \"['\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"']\";\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    return new (util.Buffer || typeof Uint8Array !== 'undefined' && Uint8Array || Array)(size || 0);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * Programmatically generates a function.\r\n * @memberof util\r\n * @param {...string} params Function parameter names\r\n * @returns {util.CodegenAppender} Printf-like appender function\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen(/* varargs */) {\r\n    var args   = Array.prototype.slice.call(arguments),\r\n        src    = ['\\t\"use strict\"'];\r\n\r\n    var indent = 1,\r\n        inCase = false;\r\n\r\n    /**\r\n     * Appends a printf-like formatted line to the generated source. Returned when calling {@link util.codegen}.\r\n     * @typedef CodegenAppender\r\n     * @memberof util\r\n     * @type {function}\r\n     * @param {string} format A printf-like format string\r\n     * @param {...*} params Format replacements\r\n     * @returns {util.CodegenAppender} Itself\r\n     * @property {util.CodegenStringer} str\r\n     * @property {util.CodegenEnder} eof\r\n     * @see {@link https://nodejs.org/docs/latest/api/util.html#util_util_format_format_args}\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var fmt = [];\r\n        for (var i = 0; i < arguments.length; ++i)\r\n            fmt[i] = arguments[i];\r\n        var line = gen.fmt.apply(null, fmt);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (var index = 0; index < level; ++index)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    gen.fmt = function fmt(format) {\r\n        var params = Array.prototype.slice.call(arguments, 1),\r\n            index  = 0;\r\n        return format.replace(/%([djs])/g, function($0, $1) {\r\n            var param = params[index++];\r\n            return $1 === \"j\"\r\n                ? JSON.stringify(param)\r\n                : String(param);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @typedef CodegenStringer\r\n     * @memberof util\r\n     * @type {function}\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     */\r\n    /**/\r\n    gen.str = function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + args.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    };\r\n\r\n    /**\r\n     * Ends generation and builds the function.\r\n     * @typedef CodegenEnder\r\n     * @memberof util\r\n     * @type {function}\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object|Array.<string>} [scope] Function scope\r\n     * @returns {function} A function to apply the scope manually when `scope` is an array, otherwise the generated function with scope applied\r\n     */\r\n    /**/\r\n    gen.eof = function eof(name, scope) {\r\n        if (name && typeof name === 'object') {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var code = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + code.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        code = \"return \" + code;\r\n        var params, values = [];\r\n        if (Array.isArray(scope)) {\r\n            params = scope.slice();\r\n        } else if (scope) {\r\n            params = Object.keys(scope);\r\n            values = params.map(function(key) { return scope[key]; });\r\n        } else\r\n            params = [];\r\n        var fn = Function.apply(null, params.concat(code)); // eslint-disable-line no-new-func\r\n        return values ? fn.apply(null, values) : fn();\r\n    };\r\n\r\n    return gen;\r\n}\r\n\r\ncodegen.supported = false;\r\ntry { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\n\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(21);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constrcuts new long bits from a number or long.\r\n * @param {Long|number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    return typeof value === 'number'\r\n        ? LongBits.fromNumber(value)\r\n        : new LongBits(value.low >>> 0, value.high >>> 0);\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return new util.Long(this.lo, this.hi, unsigned);\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Verifier;\r\n\r\nvar Enum = require(5),\r\n    Type = require(19),\r\n    util = require(21);\r\n\r\n/**\r\n * Constructs a new verifier for the specified message type.\r\n * @classdesc Runtime message verifier using code generation on top of reflection.\r\n * @constructor\r\n * @param {Type} type Message type\r\n */\r\nfunction Verifier(type) {\r\n\r\n    /**\r\n     * Message type.\r\n     * @type {Type}\r\n     */\r\n    this.type = type;\r\n}\r\n\r\n/** @alias Verifier.prototype */\r\nvar VerifierPrototype = Verifier.prototype;\r\n\r\n// This is here to mimic Type so that fallback functions work without having to bind()\r\nObject.defineProperties(VerifierPrototype, {\r\n\r\n    /**\r\n     * Fields of this verifier's message type as an array for iteration.\r\n     * @name Verifier#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: VerifierPrototype.getFieldsArray = function getFieldsArray() {\r\n            return this.type.getFieldsArray();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name of this verifier's message type.\r\n     * @name Verifier#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: VerifierPrototype.getFullName = function getFullName() {\r\n            return this.type.getFullName();\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Verifies a runtime message of this verifier's message type.\r\n * @param {Prototype|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nVerifierPrototype.verify = function verify_fallback(message) {\r\n    var fields = this.getFieldsArray(),\r\n        i = 0;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        if (value === undefined) {\r\n            if (field.required)\r\n                return \"missing required field \" + field.name + \" in \" + this.getFullName();\r\n\r\n        } else if (field.resolvedType instanceof Enum && field.resolvedType.getValuesById()[value] === undefined) {\r\n            return \"invalid enum value \" + field.name + \" = \" + value + \" in \" + this.getFullName();\r\n\r\n        } else if (field.resolvedType instanceof Type) {\r\n            if (!value && field.required)\r\n                return \"missing required field \" + field.name + \" in \" + this.getFullName();\r\n            var reason;\r\n            if ((reason = field.resolvedType.verify(value)) !== null)\r\n                return reason;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Generates a verifier specific to this verifier's message type.\r\n * @returns {function} Verifier function with an identical signature to {@link Verifier#verify}\r\n */\r\nVerifierPrototype.generate = function generate() {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = this.type.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n    var hasReasonVar = false;\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.required) { gen\r\n\r\n            (\"if(m%s===undefined)\", prop)\r\n                (\"return 'missing required field %s in %s'\", field.name, this.type.getFullName());\r\n\r\n        } else if (field.resolvedType instanceof Enum) {\r\n            var values = util.toArray(field.resolvedType.values); gen\r\n\r\n            (\"switch(m%s){\", prop)\r\n                (\"default:\")\r\n                    (\"return 'invalid enum value %s = '+m%s+' in %s'\", field.name, prop, this.type.getFullName());\r\n\r\n            for (var j = 0, l = values.length; j < l; ++j) gen\r\n                (\"case %d:\", values[j]); gen\r\n            (\"}\");\r\n\r\n        } else if (field.resolvedType instanceof Type) {\r\n            if (field.required) gen\r\n\r\n            (\"if(!m%s)\", prop)\r\n                (\"return 'missing required field %s in %s'\", field.name, this.type.getFullName());\r\n\r\n            if (!hasReasonVar) { gen(\"var r\"); hasReasonVar = true; } gen\r\n\r\n            (\"if((r=types[%d].verify(m%s))!==null)\", i, prop)\r\n                (\"return r\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\")\r\n\r\n    .eof(this.type.getFullName() + \"$verify\", {\r\n        types : fields.map(function(fld) { return fld.resolvedType; })\r\n    });\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util     = require(21),\r\n    ieee754  = require(1);\r\nvar LongBits = util.LongBits;\r\n\r\n/**\r\n * Constructs a new writer operation.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {*} val Value to write\r\n * @param {number} len Value byte length\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, val, len) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {?Writer.Op}\r\n     */\r\n    this.next = null;\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n}\r\n\r\nWriter.State = State;\r\n\r\nvar ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer.\r\n * When called as a function, returns an appropriate writer for the current environment.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @exports Writer\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n    if (!(this instanceof Writer))\r\n        return util.Buffer && new BufferWriter() || new Writer();\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * State stack.\r\n     * @type {Object[]}\r\n     */\r\n    this.stack = [];\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    var op = new Op(fn, val, len);\r\n    this.tail.next = op;\r\n    this.tail = op;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(buf, pos, val) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\n/**\r\n * Writes a tag.\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.tag = function write_tag(id, wireType) {\r\n    return this.push(writeByte, 1, id << 3 | wireType & 7);\r\n};\r\n\r\nfunction writeVarint32(buf, pos, val) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value >>>= 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32(value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeVarint64(buf, pos, val) {\r\n    // tends to deoptimize. stays optimized when using bits directly.\r\n    while (val.hi || val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits;\r\n    if (typeof value === 'number')\r\n        bits = value ? LongBits.fromNumber(value) : LongBits.zero;\r\n    else if (value.low || value.high)\r\n        bits = new LongBits(value.low >>> 0, value.high >>> 0);\r\n    else\r\n        bits = LongBits.zero;\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint64 = function sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(buf, pos, val) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24  & 255;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeFixed64(buf, pos, val) {\r\n    buf[pos++] = val.lo        & 255;\r\n    buf[pos++] = val.lo >>> 8  & 255;\r\n    buf[pos++] = val.lo >>> 16 & 255;\r\n    buf[pos++] = val.lo >>> 24      ;\r\n    buf[pos++] = val.hi        & 255;\r\n    buf[pos++] = val.hi >>> 8  & 255;\r\n    buf[pos++] = val.hi >>> 16 & 255;\r\n    buf[pos  ] = val.hi >>> 24      ;\r\n}\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    return this.push(writeFixed64, 8, LongBits.from(value));\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    return this.push(writeFixed64, 8, LongBits.from(value).zzEncode());\r\n};\r\n\r\nfunction writeFloat(buf, pos, val) {\r\n    ieee754.write(buf, val, pos, false, 23, 4);\r\n}\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nfunction writeDouble(buf, pos, val) {\r\n    ieee754.write(buf, val, pos, false, 52, 8);\r\n}\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(buf, pos, val) { buf.set(val, pos); }\r\n    : function writeBytes_for(buf, pos, val) { for (var i = 0; i < val.length; ++i) buf[pos + i] = val[i]; };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nfunction writeString(buf, pos, val) {\r\n    for (var i = 0; i < val.length; ++i) {\r\n        var c1 = val.charCodeAt(i), c2;\r\n        if (c1 < 128) {\r\n            buf[pos++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buf[pos++] = c1 >> 6 | 192;\r\n            buf[pos++] = c1 & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && i + 1 < val.length && ((c2 = val.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buf[pos++] = c1 >> 18      | 240;\r\n            buf[pos++] = c1 >> 12 & 63 | 128;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        } else {\r\n            buf[pos++] = c1 >> 12      | 224;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n}\r\n\r\nfunction byteLength(val) {\r\n    var strlen = val.length >>> 0;\r\n    if (strlen) {\r\n        var len = 0;\r\n        for (var i = 0, c1; i < strlen; ++i) {\r\n            c1 = val.charCodeAt(i);\r\n            if (c1 < 128)\r\n                len += 1;\r\n            else if (c1 < 2048)\r\n                len += 2;\r\n            else if ((c1 & 0xFC00) === 0xD800 && i + 1 < strlen && (val.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n                ++i;\r\n                len += 4;\r\n            } else\r\n                len += 3;\r\n        }\r\n        return len;\r\n    }\r\n    return 0;\r\n}\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeString, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#ldelim}, {@link Writer#reset} or {@link Writer#finish} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.stack.push(new State(this));\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.stack.length) {\r\n        var state = this.stack.pop();\r\n        this.head = state.head;\r\n        this.tail = state.tail;\r\n        this.len  = state.len;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (id !== undefined)\r\n        this.tag(id, 2);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of write operations and frees all resources.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = new ArrayImpl(this.len),\r\n        pos  = 0;\r\n    this.reset();\r\n    while (head) {\r\n        head.fn(buf, pos, head.val);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(buf, pos, val) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(buf, pos, val) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(buf, pos, val) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nfunction writeStringBuffer(buf, pos, val) {\r\n    buf.write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.finish = function finish_buffer() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = util.Buffer.allocUnsafe && util.Buffer.allocUnsafe(this.len) || new util.Buffer(this.len),\r\n        pos  = 0;\r\n    this.reset();\r\n    while (head) {\r\n        head.fn(buf, pos, head.val);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\nvar util = require(\"./util\");\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @param {function(?Error, Root=)} [callback] Callback function\r\n * @returns {Promise<Root>|Object} A promise if callback has been omitted, otherwise the protobuf namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === 'function') {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback) || protobuf;\r\n}\r\n\r\nprotobuf.load = load;\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = protobuf.Writer.BufferWriter;\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = protobuf.Reader.BufferReader;\r\nprotobuf.Encoder          = require(\"./encoder\");\r\nprotobuf.Decoder          = require(\"./decoder\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Prototype        = require(\"./prototype\");\r\nprotobuf.inherits         = require(\"./inherits\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.util             = util;\r\n"],"sourceRoot":"."}