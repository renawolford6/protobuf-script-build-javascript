{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/fs/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/decode.js","src/encode.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verify.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","ceil","b64","s64","encode","start","end","j","b","String","fromCharCode","invalidEncoding","decode","charCodeAt","undefined","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","test","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","keys","Object","Function","concat","map","key","format","$0","$1","arg","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","chunk","c1","c2","Class","type","Type","Message","util","_TypeError","MessageCtor","properties","merge","$type","getFieldsArray","forEach","field","Array","isArray","defaultValue","emptyArray","isObject","emptyObject","getOneofsArray","oneof","prop","get","indexOf","set","setCtor","common","json","nested","google","protobuf","Any","fields","type_url","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","readerOrBuffer","getFieldsById","reader","Reader","limit","pos","message","getCtor","tag","int32","wireType","resolvedType","Enum","resolvedKeyType","skip","longToHash","types","basic","uint32","repeated","packed","plimit","skipType","generate","mtype","safeProp","writer","Writer","fi","fork","mapKey","ldelim","longVal","long","LongBits","fromNumber","partOf","required","lo","low","hi","high","reset","hasLongVar","oneofFields","options","ReflectionObject","_valuesById","clearCache","enm","className","EnumPrototype","props","valuesById","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","getValuesById","remove","Field","toString","toLowerCase","optional","Long","bytes","extensionField","declaringField","_packed","MapField","FieldPrototype","isPacked","getOption","setOption","ifNotSet","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","asJSON","Number","from","toNumber","MapFieldPrototype","keyWireType","MessagePrototype","array","fieldsOnly","encodeDelimited","decodeDelimited","verify","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","_nestedArray","namespace","arrayToJSON","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","object","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","parentAlreadyChecked","getRoot","found","lookupType","lookupService","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","substring","toUpperCase","_fieldsArray","addFieldsToParent","OneOfPrototype","index","lower","token","parse","illegal","tn","readString","next","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRange","parseId","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","p3","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","parseMapField","parseField","parseOneOf","extensions","reserved","camelCase","parseInlineOptions","valueType","parseEnumField","custom","fqTypeRefRe","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","package","indexOutOfRange","writeLength","RangeError","readLongVarint","bits","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","BufferReader","initBufferReader","readStringBuffer_utf8Slice","utf8Slice","readStringBuffer_toString","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","ieee754","ArrayImpl","Uint8Array","Buffer","_slice","subarray","octet","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","float","readDouble","Float64Array","f64","double","finish","remain","BufferReaderPrototype","readStringBuffer","readFloatLE","readDoubleLE","_configure","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","filename","cb","process","parsed","self","sync","queued","weak","idx","altname","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","methodsArray","methodName","inherited","getMethodsArray","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","stack","repeat","curr","delimRe","delim","expected","actual","equals","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","fieldName","oneOfName","fld","bake","description","TypeError","dst","underScore","newBuffer","allocUnsafe","LongBitsPrototype","zero","zzEncode","fromString","unsigned","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","dcodeIO","isFinite","longFromHash","fromBits","longNeq","target","descriptors","descriptor","ie8","ucKey","defineProperty","freeze","invalid","verifyValue","reason","verifyKey","genVerifyValue","fieldIndex","ref","genVerifyKey","Op","val","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","WriterPrototype","op","writeFloat","writeDouble","writeBytes","BufferWriterPrototype","writeStringBuffer","utf8Write","byteLength","roots","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === '=')\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = [];\r\n\r\n// Base64 decoding table\r\nvar s64 = [];\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(2);\r\nvar fs        = require(8);\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @name fs\r\n * @memberof util\r\n * @type {Object}\r\n */\r\n/**/\r\ntry { module.exports = eval([\"req\",\"uire\"].join(\"\"))(\"fs\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = [],\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            parts.push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (i)\r\n        parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n    return parts.join(\"\");\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(33);\r\n\r\nvar Type; // cyclic\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return Class.create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = function create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(31);\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw _TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) { // eslint-disable-line wrap-iife\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n    \r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.getFieldsArray().forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue)\r\n            ? util.emptyObject\r\n            : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.setCtor(ctor);\r\n\r\n    return prototype;\r\n};\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = decode;\r\n\r\nvar Enum    = require(16),\r\n    Reader  = require(25),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * General purpose message decoder.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Populated runtime message\r\n * @this Type\r\n * @property {GenerateDecoder} generate Generates a type specific decoder\r\n */\r\nfunction decode(readerOrBuffer, length) {\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.getFieldsById(),\r\n        reader  = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new (this.getCtor())();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.int32(),\r\n            wireType = tag & 7,\r\n            field    = fields[tag >>> 3].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n                reader.skip();\r\n                reader.pos++; // assumes id 1\r\n                if (message[field.name] === util.emptyObject)\r\n                    message[field.name] = {};\r\n                var key = reader[keyType]();\r\n                if (typeof key === \"object\")\r\n                    key = util.longToHash(key);\r\n                reader.pos++; // assumes id 2\r\n                message[field.name][key] = types.basic[type] === undefined\r\n                    ? field.resolvedType.decode(reader, reader.uint32())\r\n                    : reader[type]();\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] && message[field.name].length ? message[field.name] : message[field.name] = [];\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values.push(reader[type]());\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] === undefined)\r\n                    values.push(field.resolvedType.decode(reader, reader.uint32()));\r\n                else\r\n                    values.push(reader[type]());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] === undefined)\r\n                message[field.name] = field.resolvedType.decode(reader, reader.uint32());\r\n            else\r\n                message[field.name] = reader[type]();\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @typedef GenerateDecoder\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\ndecode.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.int32()\")\r\n        (\"switch(t>>>3){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\")\r\n                (\"if(m%s===util.emptyObject)\", prop)\r\n                    (\"m%s={}\", prop)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\");\r\n            if (types.basic[type] === undefined) gen\r\n                (\"m%s[k]=types[%d].decode(r,r.uint32())\", prop, i);\r\n            else gen\r\n                (\"m%s[k]=r.%s()\", prop, type);\r\n\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s&&m%s.length?m%s:m%s=[]\", prop, prop, prop, prop);\r\n\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s.push(r.%s())\", prop, type)\r\n                (\"}else\");\r\n            if (types.basic[type] === undefined) gen\r\n                    (\"m%s.push(types[%d].decode(r,r.uint32()))\", prop, i, i);\r\n            else gen\r\n                    (\"m%s.push(r.%s())\", prop, type);\r\n\r\n        } else if (types.basic[type] === undefined) gen\r\n                (\"m%s=types[%d].decode(r,r.uint32())\", prop, i, i);\r\n        else gen\r\n                (\"m%s=r.%s()\", prop, type);\r\n        gen\r\n                (\"break\");\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = encode;\r\n\r\nvar Enum     = require(16),\r\n    Writer   = require(37),\r\n    types    = require(32),\r\n    util     = require(33);\r\nvar safeProp = util.safeProp;\r\n\r\n/**\r\n * General purpose message encoder.\r\n * @param {Message|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n * @this Type\r\n * @property {GenerateEncoder} generate Generates a type specific encoder\r\n */\r\nfunction encode(message, writer) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer.create();\r\n    var fields = this.getFieldsArray(), fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            if (message[field.name] && message[field.name] !== util.emptyObject) {\r\n                for (var keys = Object.keys(message[field.name]), i = 0; i < keys.length; ++i) {\r\n                    writer.uint32(field.id << 3 | 2).fork()\r\n                          .uint32(/*1*/8 | types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType === undefined)\r\n                        field.resolvedType.encode(message[field.name][keys[i]], writer.uint32(/*2,2*/18).fork()).ldelim();\r\n                    else\r\n                        writer.uint32(/*2*/16 | wireType)[type](message[field.name][keys[i]]);\r\n                    writer.ldelim();\r\n                }\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    writer.fork();\r\n                    var i = 0;\r\n                    while (i < values.length)\r\n                        writer[type](values[i++]);\r\n                    writer.ldelim(field.id);\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType !== undefined)\r\n                        while (i < values.length)\r\n                            writer.uint32(field.id << 3 | wireType)[type](values[i++]);\r\n                    else\r\n                        while (i < values.length)\r\n                            field.resolvedType.encode(values[i++], writer.uint32(field.id << 3 | 2).fork()).ldelim();\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name],\r\n                longVal = field.long && typeof value === \"number\" ? util.LongBits.fromNumber(value) : value;\r\n            if (\r\n                field.partOf && message[field.partOf.name] === field.name\r\n                ||\r\n                (field.required || value !== undefined) && (field.long ? longVal.lo !== field.defaultValue.low || longVal.hi !== field.defaultValue.high : value !== field.defaultValue)\r\n            ) {\r\n                if (wireType !== undefined)\r\n                    writer.uint32(field.id << 3 | wireType)[type](value);\r\n                else {\r\n                    field.resolvedType.encode(value, writer.fork());\r\n                    if (writer.len || field.required)\r\n                        writer.ldelim(field.id);\r\n                    else\r\n                        writer.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates an {@link Encoder|encoder} specific to the specified message type.\r\n * @typedef GenerateEncoder\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\nencode.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.getFieldsArray();\r\n    var oneofs = mtype.getOneofsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    var i;\r\n    var hasLongVar = false;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(m%s&&m%s!==util.emptyObject){\", prop, prop)\r\n        (\"for(var ks=Object.keys(m%s),i=0;i<ks.length;++i){\", prop)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", field.id << 3 | 2, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(m%s[ks[i]],w.uint32(18).fork()).ldelim()\", i, prop);\r\n            else gen\r\n            (\"w.uint32(%d).%s(m%s[ks[i]])\", 16 | wireType, type, prop);\r\n            gen\r\n            (\"w.ldelim()\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim(%d)\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.uint32(%d).%s(m%s[i])\", field.id << 3 | wireType, type, prop);\r\n                else gen\r\n            (\"types[%d].encode(m%s[i],w.uint32(%d).fork()).ldelim()\", i, prop, field.id << 3 | 2);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) {\r\n                    if (!hasLongVar) { gen\r\n    (\"var l\");\r\n                        hasLongVar = true;\r\n                    }\r\n                    gen\r\n    (\"if(m%s!==undefined&&((l=typeof m%s===\\\"object\\\"?m%s:util.LongBits.from(m%s)).lo!==%d||l.hi!==%d))\", prop, prop, prop, prop, field.defaultValue.low, field.defaultValue.high);\r\n                } else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n        (\"w.uint32(%d).%s(m%s)\", field.id << 3 | wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n        (\"types[%d].encode(m%s,w.uint32(%d).fork()).ldelim()\", i, prop, field.id << 3 | 2);\r\n        \r\n            else gen\r\n\r\n        (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", i, prop, field.id);\r\n    \r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i],\r\n            prop  = safeProp(oneof.name);\r\n        gen\r\n        (\"switch(m%s){\", prop);\r\n        var oneofFields = oneof.getFieldsArray();\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type],\r\n                prop     = safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n                (\"w.uint32(%d).%s(m%s)\", field.id << 3 | wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n                (\"types[%d].encode(m%s,w.uint32(%d).fork()).ldelim()\", fields.indexOf(field), prop, field.id << 3 | 2);\r\n        \r\n            else gen\r\n\r\n                (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", fields.indexOf(field), prop, field.id);\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");        \r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nvar util = require(33);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nField.className = \"Field\";\r\n\r\nvar ReflectionObject = require(22);\r\nvar Message = require(19);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nvar Enum      = require(16),\r\n    types     = require(32),\r\n    util      = require(33);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object} [rule=\"optional\"] Field rule\r\n * @param {string|Object} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(18);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (!Type)\r\n            Type = require(31);\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options[\"default\"]) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Message#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (value instanceof Message)\r\n            return value.asJSON(options);\r\n        if (this.resolvedType instanceof Enum && options[\"enum\"] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        if (options.long && this.long)\r\n            return options.long === Number\r\n                ? typeof value === \"number\"\r\n                    ? value\r\n                    : util.LongBits.from(value).toNumber(this.type.charAt(0) === \"u\")\r\n                : util.Long.fromValue(value, this.type.charAt(0) === \"u\").toString();\r\n        if (options.bytes && this.bytes)\r\n            return options.bytes === Array\r\n                ? Array.prototype.slice.call(value)\r\n                : util.base64.encode(value, 0, value.length);\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar Field = require(17);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nvar Enum    = require(16),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This method should be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @extends {Object}\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @abstract\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {*} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {*} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @param {*} [options.bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @param {boolean} [options.defaults=false] Also sets default values on the resulting object\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    if (!options)\r\n        options = {};\r\n    var fields = this.$type.fields,\r\n        json   = {};\r\n    var keys;\r\n    if (options.defaults) {\r\n        keys = Object.keys(fields);\r\n    } else\r\n        keys = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && (value.length || options.defaults)) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (!options.fieldsOnly)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nvar Type = require(31),\r\n    util = require(33);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (type && !util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    this.resolvedResponseType = resolved;\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nvar Enum    = require(16),\r\n    Field   = require(17),\r\n    util    = require(33);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\nfunction initNested() {\r\n    if (!Type)\r\n        Type = require(31);\r\n    if (!Service)\r\n        Service = require(29);\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw _TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (!Type)\r\n                Type = require(31);\r\n            if (!Service)\r\n                Service = require(29);\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found instanceof Namespace && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path);\r\n    if (!Type)\r\n        Type = require(31);\r\n    if (!(found instanceof Type))\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path);\r\n    if (!Service)\r\n        Service = require(29);\r\n    if (!(found instanceof Service))\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(33);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className;\r\n    var fullName = this.getFullName();\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nvar Field = require(17),\r\n    util  = require(33);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = this.name.substring(0, 1).toUpperCase() + this.name.substring(1);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nutil.prop(OneOfPrototype, \"fieldsArray\", {\r\n    get: function getFieldsArray() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fieldsArray.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize  = require(30),\r\n    Root      = require(26),\r\n    Type      = require(31),\r\n    Field     = require(17),\r\n    MapField  = require(18),\r\n    OneOf     = require(23),\r\n    Enum      = require(16),\r\n    Service   = require(29),\r\n    Method    = require(20),\r\n    types     = require(32),\r\n    util      = require(33);\r\nvar camelCase = util.camelCase;\r\n\r\nvar nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n/**/\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} [root] Root to populate\r\n * @returns {ParserResult} Parser result\r\n */\r\nfunction parse(source, root) {\r\n    /* eslint-disable callback-return */\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    function illegal(token, name) {\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"min\": return 1;\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        var p3;\r\n        if ([ \"proto2\", p3 = \"proto3\" ].indexOf(syntax) < 0)\r\n            throw illegal(syntax, \"syntax\");\r\n        isProto3 = syntax === p3;\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        name = camelCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\")\r\n                    parseOption(enm);\r\n                else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (!nameRe.test(token))\r\n                    throw illegal(token, \"name\");\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util      = require(35),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = function create(buffer) {\r\n    return new (util.Buffer ? BufferReader : Reader)(buffer);\r\n};\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    var octet = this.buf[this.pos++],\r\n        value = octet & 127;\r\n    if (octet > 127) { octet = this.buf[this.pos++]; value |= (octet & 127) <<  7;\r\n    if (octet > 127) { octet = this.buf[this.pos++]; value |= (octet & 127) << 14;\r\n    if (octet > 127) { octet = this.buf[this.pos++]; value |= (octet & 127) << 21;\r\n    if (octet > 127) { octet = this.buf[this.pos++]; value |= (octet & 127) << 28;\r\n    if (octet > 127)   this.pos += 5; } } } }\r\n    if (this.pos > this.len) {\r\n        this.pos = this.len;\r\n        throw indexOutOfRange(this);\r\n    }\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    return this.int32() >>> 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.int32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    var bits = new LongBits(0, 0),\r\n        i = 0, b = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            b = this.buf[this.pos++]; // 1st..4th\r\n            bits.lo = (bits.lo | (b & 127) << i * 7) >>> 0;\r\n            if (b < 128)\r\n                return bits;\r\n        }\r\n        b = this.buf[this.pos++]; // 5th\r\n        bits.lo = (bits.lo | (b & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (b & 127) >>  4) >>> 0;\r\n        if (b < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++]; // 1st..4th\r\n            bits.lo = (bits.lo | (b & 127) << i * 7) >>> 0;\r\n            if (b < 128)\r\n                return bits;\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        b = this.buf[this.pos++]; // 5th\r\n        bits.lo = (bits.lo | (b & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (b & 127) >>  4) >>> 0;\r\n        if (b < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            b = this.buf[this.pos++]; // 6th..10th\r\n            bits.hi = (bits.hi | (b & 127) << i * 7 + 3) >>> 0;\r\n            if (b < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++]; // 6th..10th\r\n            bits.hi = (bits.hi | (b & 127) << i * 7 + 3) >>> 0;\r\n            if (b < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.int32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return buf[end - 4]\r\n         | buf[end - 3] << 8\r\n         | buf[end - 2] << 16\r\n         | buf[end - 1] << 24;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                wireType = this.int32() & 7;\r\n                if (wireType === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    var Buffer = util.Buffer;\r\n    if (!Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = Buffer.prototype.slice;\r\n    readStringBuffer = Buffer.prototype.utf8Slice // around forever, but not present in browser buffer\r\n        ? readStringBuffer_utf8Slice\r\n        : readStringBuffer_toString;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nif (typeof Float32Array === \"undefined\") // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nif (typeof Float64Array === \"undefined\") // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\nvar readStringBuffer;\r\n\r\nfunction readStringBuffer_utf8Slice(buf, start, end) {\r\n    return buf.utf8Slice(start, end); // fastest\r\n}\r\n\r\nfunction readStringBuffer_toString(buf, start, end) {\r\n    return buf.toString(\"utf8\", start, end); // 2nd, again assertions\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return readStringBuffer(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Namespace = require(21);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nvar Field  = require(17),\r\n    util   = require(33),\r\n    common = require(13);\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, callback) {\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                var parsed = require(24)(source, self);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Promise<Root>} Promise\r\n * @variation 2\r\n */\r\n// function load(filename:string):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename) {\r\n    return this.load(filename, SYNC);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(28);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(33);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nService.className = \"Service\";\r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nvar Method = require(20),\r\n    util   = require(33),\r\n    rpc    = require(27);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl RPC implementation ({@link RPCImpl|see})\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[method.name.substring(0, 1).toLowerCase() + method.name.substring(1)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n/**/\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nType.className = \"Type\";\r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nvar Enum      = require(16),\r\n    OneOf     = require(23),\r\n    Field     = require(17),\r\n    Service   = require(29),\r\n    Class     = require(12),\r\n    Message   = require(19),\r\n    Reader    = require(25),\r\n    Writer    = require(37),\r\n    util      = require(33);\r\n\r\nvar encode, // might become cyclic\r\n    decode, // might become cyclic\r\n    verify; // cyclic\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object|*} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new (this.getCtor())(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    if (!encode)\r\n        encode = require(15);\r\n    return (this.encode = util.codegen.supported\r\n        ? encode.generate(this).eof(this.getFullName() + \"$encode\", {\r\n              Writer : Writer,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : encode\r\n    ).call(this, message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    if (!decode)\r\n        decode = require(14);\r\n    return (this.decode = util.codegen.supported\r\n        ? decode.generate(this).eof(this.getFullName() + \"$decode\", {\r\n              Reader : Reader,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : decode\r\n    ).call(this, readerOrBuffer, length);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    if (!verify)\r\n        verify = require(36);\r\n    return (this.verify = util.codegen.supported\r\n        ? verify.generate(this).eof(this.getFullName() + \"$verify\", {\r\n              types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util  : util\r\n          })\r\n        : verify\r\n    ).call(this, message);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(33);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(35);\r\n\r\nutil.asPromise    = require(2);\r\nutil.codegen      = require(4);\r\nutil.EventEmitter = require(5);\r\nutil.extend       = require(6);\r\nutil.fetch        = require(7);\r\nutil.fs           = require(8);\r\nutil.path         = require(9);\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts a string to camel case notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Converts a string to underscore notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.underScore = function underScore(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) { return \"_\" + $1.toLowerCase(); });\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe ? util.Buffer.allocUnsafe(size) : new util.Buffer(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo, this.hi, unsigned)\r\n        : { low: this.lo, high: this.hi, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nvar LongBits =\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nvar isNode = util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Buffer = null;\r\n\r\nif (isNode)\r\n    try { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || null;\r\n\r\nif (!util.Long && isNode)\r\n    try { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === \"object\");\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n * @deprecated\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === \"number\"\r\n         ? typeof b === \"number\"\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === \"number\"\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ie8 = !-[1,];\r\n    var ucKey = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n    if (descriptor.get)\r\n        target[\"get\" + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target[\"set\" + ucKey] = ie8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (ie8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze([]);\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze({});\r\n","\"use strict\";\r\nmodule.exports = verify;\r\n\r\nvar Enum      = require(16),\r\n    Type      = require(31),\r\n    util      = require(33);\r\nvar isInteger = util.isInteger;\r\n\r\nfunction invalid(field, expected) {\r\n    return \"invalid value for field \" + field.getFullName() + \" (\" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected)\";\r\n}\r\n\r\nfunction verifyValue(field, value) {\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\":\r\n            if (typeof value !== \"number\")\r\n                return invalid(field, \"number\");\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (!isInteger(value))\r\n                return invalid(field, \"integer\");\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (!(isInteger(value) || value && isInteger(value.low) && isInteger(value.high)))\r\n                return invalid(field, \"integer|Long\");\r\n            break;\r\n        case \"bool\":\r\n            if (typeof value !== \"boolean\")\r\n                return invalid(field, \"boolean\");\r\n            break;\r\n        case \"string\":\r\n            if (!util.isString(value))\r\n                return invalid(field, \"string\");\r\n            break;\r\n        case \"bytes\":\r\n            if (!(value && typeof value.length === \"number\" || util.isString(value)))\r\n                return invalid(field, \"buffer\");\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) {\r\n                if (typeof field.resolvedType.getValuesById()[value] !== \"number\")\r\n                    return invalid(field, \"enum value\");\r\n            } else if (field.resolvedType instanceof Type) {\r\n                var reason = field.resolvedType.verify(value);\r\n                if (reason)\r\n                    return reason;\r\n            }\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction verifyKey(field, value) {\r\n    switch (field.keyType) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (/^[\\x00-\\xff]{8}$/.test(value)) // eslint-disable-line no-control-regex\r\n                return null;\r\n            // fallthrough\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (/^-?(?:0|[1-9]\\d*)$/.test(value))\r\n                return invalid(field, \"integer key\");\r\n            break;\r\n        case \"bool\":\r\n            if (/^true|false|0|1$/.test(value))\r\n                return invalid(field, \"boolean key\");\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * General purpose message verifier.\r\n * @param {Message|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n * @this {Type}\r\n * @property {GenerateVerifier} generate Generates a type specific verifier\r\n */\r\nfunction verify(message) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    var fields = this.getFieldsArray(),\r\n        i = 0,\r\n        reason;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        // map fields\r\n        if (field.map) {\r\n\r\n            if (value !== undefined) {\r\n                if (!util.isObject(value))\r\n                    return invalid(field, \"object\");\r\n                var keys = Object.keys(value);\r\n                for (var j = 0; j < keys.length; ++j) {\r\n                    if (reason = verifyKey(field, keys[j])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n                    if (reason = verifyValue(field, value[keys[j]])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n                }\r\n            }\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            if (value !== undefined) {\r\n                if (!Array.isArray(value))\r\n                    return invalid(field, \"array\");\r\n                for (var j = 0; j < value.length; ++j)\r\n                    if (reason = verifyValue(field, value[j])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n            }\r\n\r\n        // required or present fields\r\n        } else if (field.required || value !== undefined) {\r\n\r\n            if (reason = verifyValue(field, value)) // eslint-disable-line no-cond-assign\r\n                return reason;\r\n        }\r\n\r\n    }\r\n    return null;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\": gen\r\n            (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                (\"return%j\", invalid(field, \"number\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.isInteger(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!(util.isInteger(%s)||%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                (\"return%j\", invalid(field, \"integer|Long\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                (\"return%j\", invalid(field, \"boolean\"));\r\n            break;\r\n        case \"string\": gen\r\n            (\"if(!util.isString(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"string\"));\r\n            break;\r\n        case \"bytes\": gen\r\n            (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                (\"return%j\", invalid(field, \"buffer\"));\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) { gen\r\n                (\"switch(%s){\", ref)\r\n                    (\"default:\")\r\n                        (\"return%j\", invalid(field, \"enum value\"));\r\n                var values = util.toArray(field.resolvedType.values);\r\n                for (var j = 0; j < values.length; ++j) gen\r\n                    (\"case %d:\", values[j]);\r\n                gen\r\n                        (\"break\")\r\n                (\"}\");\r\n            } else if (field.resolvedType instanceof Type) { gen\r\n                (\"var r;\")\r\n                (\"if(r=types[%d].verify(%s))\", fieldIndex, ref)\r\n                    (\"return r\");\r\n            }\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @typedef GenerateVerifier\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\nverify.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!util.isObject(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(m%s)\", prop)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!Array.isArray(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<m%s.length;++i){\", prop);\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType instanceof Type) gen\r\n            (\"if(m%s!==undefined&&m%s!==null){\", prop, prop);\r\n                else gen\r\n            (\"if(m%s!==undefined){\", prop);\r\n            }\r\n                genVerifyValue(gen, field, i, \"m\" + prop);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util      = require(35),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {*} val Value to write\r\n * @param {number} len Value byte length\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, val, len) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {?Writer.Op}\r\n     */\r\n    this.next = null;\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\nWriter.State = State;\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = function create() {\r\n    return new (util.Buffer ? BufferWriter : Writer);\r\n};\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new ArrayImpl(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (ArrayImpl !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    var op = new Op(fn, val, len);\r\n    this.tail.next = op;\r\n    this.tail = op;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32(value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    // tends to deoptimize. stays optimized when using bits directly.\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset} or {@link Writer#ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend as a tag where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (id)\r\n        this.uint32((id << 3 | 2) >>> 0);\r\n    this.uint32(len >>> 0);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    this.head = this.tail = null; // gc\r\n    this.len = 0;\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    BufferWriter.alloc = util.Buffer.allocUnsafe\r\n        ? util.Buffer.allocUnsafe\r\n        : function allocUnsafeNew(size) { return new util.Buffer(size); };\r\n    return BufferWriter.alloc(size);\r\n};\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(val, buf, pos) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float32Array === \"undefined\") // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(val, buf, pos) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float64Array === \"undefined\") // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(val, buf, pos) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = util.Buffer.from ? util.Buffer.from(value, \"base64\") : new util.Buffer(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nvar writeStringBuffer = (function() { // eslint-disable-line wrap-iife\r\n    return util.Buffer && util.Buffer.prototype.utf8Write // around forever, but not present in browser buffer\r\n        ? function writeString_buffer_utf8Write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.utf8Write(val, pos);\r\n        }\r\n        : function writeString_buffer_write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.write(val, pos);\r\n        };\r\n    // Note that the plain JS encoder is faster for short strings, probably because of redundant assertions.\r\n    // For a raw utf8Write, the breaking point is about 20 characters, for write it is around 40 characters.\r\n    // Unfortunately, this does not translate 1:1 to real use cases, hence the common \"good enough\" limit of 40.\r\n})();\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = value.length < 40\r\n        ? utf8.length(value)\r\n        : util.Buffer.byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nvar Writer =\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = Writer.BufferWriter;\r\nvar Reader =\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = Reader.BufferReader;\r\nprotobuf.encode           = require(\"./encode\");\r\nprotobuf.decode           = require(\"./decode\");\r\nprotobuf.verify           = require(\"./verify\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    Reader._configure();\r\n}\r\n\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}