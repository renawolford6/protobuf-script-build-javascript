{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","src/class.js","src/codegen.js","src/codegen/decode.js","src/codegen/encode.js","src/codegen/verify.js","src/common.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/eventemitter.js","src/util/longbits.js","src/util/pool.js","src/util/runtime.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","Class","type","create","Message","Type","util","_TypeError","ctor","clazz","MessageCtor","properties","this","constructor","prototype","merge","$type","getFieldsArray","forEach","field","resolve","name","Array","isArray","defaultValue","emptyArray","isObject","emptyObject","getOneofsArray","oneof","prop","get","keys","Object","indexOf","set","setCtor","codegen","gen","line","sprintf","apply","arguments","level","indent","src","prev","blockOpenRe","test","branchRe","casingRe","inCase","breakRe","blockCloseRe","index","push","str","replace","args","join","eof","scope","undefined","source","verbose","console","Function","concat","map","key","slice","supported","encode","decode","verify","Enum","Reader","types","fallback","readerOrBuffer","fields","getFieldsById","reader","limit","len","pos","message","getCtor","tag","id","resolvedType","keyType","resolvedKeyType","uint32","ks","vs","basic","longToHash","repeated","values","packed","wireType","plimit","skipType","generate","mtype","safeProp","Writer","writer","fi","fork","mapKey","ldelim","required","long","longNeq","reset","keyWireType","invalid","expected","getFullName","verifyValue","isInteger","low","high","isString","getValuesById","reason","genVerifyValue","fieldIndex","ref","toArray","j","common","json","nested","google","protobuf","Any","type_url","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","NULL_VALUE","ListValue","rule","options","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","extend","props","valuesById","testJSON","Boolean","fromJSON","toJSON","add","remove","Field","toString","toLowerCase","optional","partOf","Long","extensionField","declaringField","_packed","FieldPrototype","MapField","isPacked","getOption","setOption","ifNotSet","role","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","String","Number","toNumber","charAt","MapFieldPrototype","MessagePrototype","asJSON","k","array","fieldsOnly","encodeDelimited","decodeDelimited","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","Namespace","_nestedArray","namespace","arrayToJSON","obj","NamespacePrototype","Service","nestedTypes","nestedError","nestedArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","object","setOptions","onAdd","onRemove","define","path","split","ptr","part","shift","resolveAll","parentAlreadyChecked","getRoot","found","Root","ReflectionObjectPrototype","root","fullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","substring","toUpperCase","_fields","addFieldsToParent","OneOfPrototype","splice","lower","token","parse","illegal","tn","s_bclose","readString","next","s_dq","s_sq","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRange","start","parseId","end","s_semi","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","s_name","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","p3","isProto3","parseCommon","s_option","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","s_open","s_close","parseMapField","s_required","s_optional","s_repeated","parseField","parseOneOf","extensions","reserved","s_type","camelCase","parseInlineOptions","valueType","parseEnumField","custom","s_bopen","fqTypeRefRe","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","package","indexOutOfRange","writeLength","RangeError","configure","ReaderPrototype","int64","read_int64_long","uint64","read_uint64_long","sint64","read_sint64_long","fixed64","read_fixed64_long","sfixed64","read_sfixed64_long","read_int64_number","read_uint64_number","read_sint64_number","read_fixed64_number","read_sfixed64_number","buf","Tag","readLongVarint","lo","hi","b","LongBits","toLong","zzDecode","readLongFixed","BufferReader","initBufferReader","readStringBuffer_utf8Slice","utf8Slice","readStringBuffer_toString","ieee754","ArrayImpl","Uint8Array","Buffer","isBuffer","_slice","subarray","int32","octet","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","float","readDouble","Float64Array","f64","double","bytes","string","out","p","c1","fromCharCode","finish","remain","BufferReaderPrototype","readStringBuffer","readFloatLE","readDoubleLE","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","filename","callback","err","cb","process","JSON","parsed","self","fetch","sync","queued","weak","idx","altname","setTimeout","fs","readFileSync","asPromise","loadSync","newDeferred","rpc","rpcImpl","EventEmitter","$rpc","ServicePrototype","endedByRPC","emit","off","_methodsArray","methodsArray","methodName","inherited","getMethodsArray","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","$0","$1","subject","re","stringDelim","stringDoubleRe","stringSingleRe","lastIndex","match","exec","stack","repeat","curr","s_nl","s_sl","s_as","delimRe","delim","actual","equals","_fieldsById","_fieldsArray","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","fieldName","oneOfName","fld","bake","fn","ctx","Promise","reject","onload","xhr","status","responseText","readFile","XMLHttpRequest","onreadystatechange","readyState","open","send","isAbsolutePath","normalizePath","parts","prefix","description","TypeError","eval","originPath","importPath","alreadyNormalized","dst","format","params","param","stringify","underScore","newBuffer","size","allocUnsafe","_listeners","EventEmitterPrototype","on","evt","listeners","LongBitsPrototype","zero","zzEncode","fromNumber","from","fromString","unsigned","charCodeAt","fromHash","hash","toHash","mask","part0","part1","part2","pool","alloc","SIZE","MAX","slab","isNode","global","versions","node","dcodeIO","isFinite","longFromHash","bits","fromBits","target","descriptors","descriptor","ie8","ucKey","defineProperty","freeze","Op","val","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","writeString","c2","byteLength","strlen","BufferWriter","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","WriterPrototype","op","writeFloat","writeDouble","writeBytes","BufferWriterPrototype","writeStringBuffer","utf8Write","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(11),\r\n    Type    = require(23),\r\n    util    = require(25);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n * @abstract\r\n */\r\nfunction Class(type) {\r\n    return Class.create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = function create(type, ctor) {\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    var clazz = ctor;\r\n    if (clazz) {\r\n        if (typeof clazz !== 'function')\r\n            throw _TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        clazz = (function(MessageCtor) { // eslint-disable-line wrap-iife\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    clazz.constructor = Class;\r\n    \r\n    // new Class() -> Message.prototype\r\n    var prototype = clazz.prototype = new Message();\r\n    prototype.constructor = clazz;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(clazz, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    clazz.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.getFieldsArray().forEach(function(field) {\r\n        field.resolve();\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue)\r\n            ? util.emptyObject\r\n            : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                var keys = Object.keys(this);\r\n                for (var i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                var keys = oneof.oneof;\r\n                for (var i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.setCtor(clazz);\r\n\r\n    return prototype;\r\n};\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar util = require(25);\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {CodegenInstance} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var args   = Array.prototype.slice.call(arguments),\r\n        src    = ['\\t\"use strict\"'],\r\n        indent = 1,\r\n        inCase = false;\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a {@link util.sprintf|sprintf}-like appender function.\r\n     * @typedef CodegenInstance\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {CodegenInstance} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var line = util.sprintf.apply(null, arguments);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (var index = 0; index < level; ++index)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + args.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === 'object') {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n\r\ncodegen.encode = require(5);\r\ncodegen.decode = require(4);\r\ncodegen.verify = require(6);\r\n","\"use strict\";\r\n\r\n/**\r\n * Wire format decoder using code generation on top of reflection that also provides a fallback.\r\n * @exports codegen.decode\r\n * @namespace\r\n */\r\nvar decode = exports;\r\n\r\nvar Enum    = require(8),\r\n    Reader  = require(17),\r\n    types   = require(24),\r\n    util    = require(25),\r\n    codegen = require(3);\r\n\r\n/**\r\n * Decodes a message of `this` message's type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Populated runtime message\r\n * @this Type\r\n */\r\ndecode.fallback = function decode_fallback(readerOrBuffer, length) {\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.getFieldsById(),\r\n        reader  = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new (this.getCtor())();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.tag(),\r\n            field    = fields[tag.id].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                    length  = reader.uint32();\r\n                var map = message[field.name] = {};\r\n                if (length) {\r\n                    length += reader.pos;\r\n                    var ks = [], vs = [];\r\n                    while (reader.pos < length) {\r\n                        if (reader.tag().id === 1)\r\n                            ks[ks.length] = reader[keyType]();\r\n                        else if (types.basic[type] !== undefined)\r\n                            vs[vs.length] = reader[type]();\r\n                        else\r\n                            vs[vs.length] = field.resolvedType.decode(reader, reader.uint32());\r\n                    }\r\n                    for (var i = 0; i < ks.length; ++i)\r\n                        map[typeof ks[i] === 'object' ? util.longToHash(ks[i]) : ks[i]] = vs[i];\r\n                }\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] && message[field.name].length ? message[field.name] : message[field.name] = [];\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && tag.wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values[values.length] = reader[type]();\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] !== undefined)\r\n                    values[values.length] = reader[type]();\r\n                else\r\n                    values[values.length] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] !== undefined)\r\n                message[field.name] = reader[type]();\r\n              else\r\n                message[field.name] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(tag.wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type, with an identical signature to {@link codegen.decode.fallback}.\r\n * @param {Type} mtype Message type\r\n * @returns {CodegenInstance} {@link codegen|Codegen} instance\r\n */\r\ndecode.generate = function decode_generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.tag()\")\r\n        (\"switch(t.id){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"var n=r.uint32(),o={}\")\r\n                (\"if(n){\")\r\n                    (\"n+=r.pos\")\r\n                    (\"var k=[],v=[]\")\r\n                    (\"while(r.pos<n){\")\r\n                        (\"if(r.tag().id===1)\")\r\n                            (\"k[k.length]=r.%s()\", keyType);\r\n\r\n                        if (types.basic[type] !== undefined) gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=r.%s()\", type);\r\n\r\n                        else gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=types[%d].decode(r,r.uint32())\", i, i);\r\n                    gen\r\n                    (\"}\")\r\n                    (\"for(var i=0;i<k.length;++i)\")\r\n                        (\"o[typeof(k[i])==='object'?util.longToHash(k[i]):k[i]]=v[i]\")\r\n                (\"}\")\r\n                (\"m%s=o\", prop);\r\n\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s&&m%s.length?m%s:m%s=[]\", prop, prop, prop, prop);\r\n\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n                (\"if(t.wireType===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s[m%s.length]=r.%s()\", prop, prop, type)\r\n                (\"}else\");\r\n            }\r\n\r\n            if (types.basic[type] !== undefined) gen\r\n\r\n                    (\"m%s[m%s.length]=r.%s()\", prop, prop, type);\r\n\r\n            else gen\r\n\r\n                    (\"m%s[m%s.length]=types[%d].decode(r,r.uint32())\", prop, prop, i, i);\r\n\r\n        } else if (types.basic[type] !== undefined) { gen\r\n\r\n                (\"m%s=r.%s()\", prop, type);\r\n\r\n        } else { gen\r\n\r\n                (\"m%s=types[%d].decode(r,r.uint32())\", prop, i, i);\r\n\r\n        } gen\r\n                (\"break\");\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t.wireType)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Wire format encoder using code generation on top of reflection that also provides a fallback.\r\n * @exports codegen.encode\r\n * @namespace\r\n */\r\nvar encode = exports;\r\n\r\nvar Enum    = require(8),\r\n    Writer  = require(30),\r\n    types   = require(24),\r\n    util    = require(25),\r\n    codegen = require(3);\r\n\r\n/**\r\n * Encodes a message of `this` message's type.\r\n * @param {Message|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n * @this Type\r\n */\r\nencode.fallback = function encode_fallback(message, writer) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer.create();\r\n    var fields = this.getFieldsArray(), fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            var value, keys;\r\n            if ((value = message[field.name]) && (keys = Object.keys(value)).length) {\r\n                writer.fork();\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    writer.tag(1, types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType !== undefined)\r\n                        writer.tag(2, wireType)[type](value[keys[i]]);\r\n                    else\r\n                        field.resolvedType.encode(value[keys[i]], writer.tag(2,2).fork()).ldelim();\r\n                }\r\n                writer.ldelim(field.id);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    writer.fork();\r\n                    var i = 0;\r\n                    while (i < values.length)\r\n                        writer[type](values[i++]);\r\n                    writer.ldelim(field.id);\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType !== undefined)\r\n                        while (i < values.length)\r\n                            writer.tag(field.id, wireType)[type](values[i++]);\r\n                    else\r\n                        while (i < values.length)\r\n                            field.resolvedType.encode(values[i++], writer.tag(field.id,2).fork()).ldelim();\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name];\r\n            if (field.required || value !== undefined && field.long ? util.longNeq(value, field.defaultValue) : value !== field.defaultValue) {\r\n                if (wireType !== undefined)\r\n                    writer.tag(field.id, wireType)[type](value);\r\n                else {\r\n                    field.resolvedType.encode(value, writer.fork());\r\n                    if (writer.len || field.required)\r\n                        writer.ldelim(field.id);\r\n                    else\r\n                        writer.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type, with an identical signature to {@link codegen.encode.fallback}.\r\n * @param {Type} mtype Message type\r\n * @returns {CodegenInstance} {@link codegen|Codegen} instance\r\n */\r\nencode.generate = function encode_generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = util.safeProp(field.name);\r\n        \r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType     = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                keyWireType = types.mapKey[keyType];\r\n            gen\r\n\r\n    (\"if(m%s){\", prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0,ks=Object.keys(m%s);i<ks.length;++i){\", prop)\r\n            (\"w.tag(1,%d).%s(ks[i])\", keyWireType, keyType);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n            (\"w.tag(2,%d).%s(m%s[ks[i]])\", wireType, type, prop);\r\n\r\n            else gen\r\n            \r\n            (\"types[%d].encode(m%s[ks[i]],w.tag(2,2).fork()).ldelim()\", i, prop);\r\n\r\n            gen\r\n        (\"}\")\r\n        (\"w.len&&w.ldelim(%d)||w.reset()\", field.id)\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim(%d)\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.tag(%d,%d).%s(m%s[i])\", field.id, wireType, type, prop);\r\n                else gen\r\n            (\"types[%d].encode(m%s[i],w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(m%s!==undefined&&util.longNeq(m%s,%j))\", prop, prop, field.defaultValue);\r\n                else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n        (\"w.tag(%d,%d).%s(m%s)\", field.id, wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n        (\"types[%d].encode(m%s,w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n        \r\n            else gen\r\n\r\n        (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", i, prop, field.id);\r\n    \r\n        }\r\n    }\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Runtime message verifier using code generation on top of reflection that also provides a fallback.\r\n * @exports codegen.verify\r\n * @namespace\r\n */\r\nvar verify = exports;\r\n\r\nvar Enum      = require(8),\r\n    Type      = require(23),\r\n    util      = require(25),\r\n    codegen   = require(3);\r\nvar isInteger = util.isInteger;\r\n\r\nfunction invalid(field, expected) {\r\n    return \"invalid value for field \" + field.getFullName() + \" (\" + expected + \" expected)\";\r\n}\r\n\r\nfunction verifyValue(field, value) {\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\":\r\n            if (typeof value !== 'number')\r\n                return invalid(field, \"number\");\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (!isInteger(value))\r\n                return invalid(field, \"integer\");\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (!(isInteger(value) || value && isInteger(value.low) && isInteger(value.high)))\r\n                return invalid(field, \"integer|Long\");\r\n            break;\r\n        case \"bool\":\r\n            if (typeof value !== 'boolean')\r\n                return invalid(field, \"boolean\");\r\n            break;\r\n        case \"string\":\r\n            if (!util.isString(value))\r\n                return invalid(field, \"string\");\r\n            break;\r\n        case \"bytes\":\r\n            if (!value || typeof value.length !== 'number')\r\n                return invalid(field, \"buffer\");\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) {\r\n                if (typeof field.resolvedType.getValuesById()[value] !== 'number')\r\n                    return invalid(field, \"enum value\");\r\n            } else if (field.resolvedType instanceof Type) {\r\n                var reason = field.resolvedType.verify(value);\r\n                if (reason)\r\n                    return reason;\r\n            }\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Verifies a runtime message of `this` message type.\r\n * @param {Message|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n * @this {Type}\r\n */\r\nverify.fallback = function verify_fallback(message) {\r\n    var fields = this.getFieldsArray(),\r\n        i = 0,\r\n        reason;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        // repeated fields\r\n        if (field.repeated) {\r\n\r\n            if (value !== undefined) {\r\n                if (!Array.isArray(value))\r\n                    return invalid(field, \"array\");\r\n                for (var j = 0; j < value.length; ++j)\r\n                    if (reason = verifyValue(field, value[j]))\r\n                        return reason;\r\n            }\r\n\r\n        // required or present fields\r\n        } else if (field.required || value !== undefined) {\r\n            \r\n            if (reason = verifyValue(field, value))\r\n                return reason;\r\n        }\r\n\r\n    }\r\n    return null;\r\n};\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\": gen\r\n            (\"if(typeof %s!=='number')\", ref)\r\n                (\"return %j\", invalid(field, \"number\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.isInteger(%s))\", ref)\r\n                (\"return %j\", invalid(field, \"integer\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!(util.isInteger(%s)||%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                (\"return %j\", invalid(field, \"integer|Long\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(typeof %s!=='boolean')\", ref)\r\n                (\"return %j\", invalid(field, \"boolean\"));\r\n            break;\r\n        case \"string\": gen\r\n            (\"if(!util.isString(%s))\", ref)\r\n                (\"return %j\", invalid(field, \"string\"));\r\n            break;\r\n        case \"bytes\": gen\r\n            (\"if (!%s||typeof %s.length!=='number')\", ref, ref)\r\n                (\"return %j\", invalid(field, \"buffer\"));\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) { gen\r\n                (\"switch(%s){\", ref)\r\n                    (\"default:\")\r\n                        (\"return %j\", invalid(field, \"enum value\"));\r\n                var values = util.toArray(field.resolvedType.values);\r\n                for (var j = 0; j < values.length; ++j) gen\r\n                    (\"case %d:\", values[j]);\r\n                gen\r\n                (\"}\");\r\n            } else if (field.resolvedType instanceof Type) { gen\r\n                (\"var r;\")\r\n                (\"if(r=types[%d].verify(%s))\", fieldIndex, ref)\r\n                    (\"return r\");\r\n            }\r\n            break;\r\n    }\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type, with an identical signature to {@link codegen.verify.fallback}.\r\n * @param {Type} mtype Message type\r\n * @returns {CodegenInstance} {@link codegen|Codegen} instance\r\n */\r\nverify.generate = function verify_generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n\r\n        // repeated fields\r\n        if (field.repeated) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!Array.isArray(m%s))\", prop)\r\n                    (\"return %j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<m%s.length;++i){\", prop);\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) gen\r\n            (\"if(m%s!==undefined){\", prop);\r\n                genVerifyValue(gen, field, i, \"m\" + prop);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(14);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nvar util = require(25);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error('duplicate name \"' + name + '\" in ' + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error('\"' + name + '\" is not a name of ' + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(14);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nvar Type      = require(23),\r\n    Enum      = require(8),\r\n    MapField  = require(10),\r\n    types     = require(24),\r\n    util      = require(25);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object} [rule=\"optional\"] Field rule\r\n * @param {string|Object} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== 'optional' ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined)\r\n        return MapField.fromJSON(name, json);\r\n    return new Field(name, json.id, json.type, json.role, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options['default']) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n    \r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Message#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (this.resolvedType instanceof Enum && options['enum'] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        else if (this.long && options.long)\r\n            return options.long === Number\r\n                ? typeof value === 'number'\r\n                ? value\r\n                : util.Long.fromValue(value).toNumber()\r\n                : util.Long.fromValue(value, this.type.charAt(0) === 'u').toString();\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(9);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nvar Enum    = require(8),\r\n    types   = require(24),\r\n    util    = require(25);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * \r\n * This method should be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @extends {Object}\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @abstract\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {*} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {*} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @param {boolean} [options.defaults=false] Also sets default values on the resulting object\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    if (!options)\r\n        options = {};\r\n    var fields = this.$type.fields,\r\n        json   = {};\r\n    var keys;\r\n    if (options.defaults) {\r\n        keys = [];\r\n        for (var k in this) // eslint-disable-line guard-for-in\r\n            keys.push(k);\r\n    } else\r\n        keys = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && value.length) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (!options.fieldsOnly)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(14);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nvar Type = require(23),\r\n    util = require(25);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (type && !util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    this.resolvedResponseType = resolved;\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(14);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nvar Enum    = require(8),\r\n    Type    = require(23),\r\n    Field   = require(9),\r\n    Service = require(21),\r\n    util    = require(25);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\nvar nestedTypes = [ Enum, Type, Service, Field, Namespace ],\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(', ');\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson)\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw _TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split('.');\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split('.');\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found instanceof Namespace && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.extend = extend;\r\n\r\nvar Root = require(18),\r\n    util = require(25);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join('.');\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Lets the specified constructor extend this class.\r\n * @memberof ReflectionObject\r\n * @param {*} constructor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this ReflectionObject\r\n */\r\nfunction extend(constructor) {\r\n    var prototype = constructor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = constructor;\r\n    constructor.extend = extend;\r\n    return prototype;\r\n}\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Constructor name, space, full name\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    return this.constructor.name + \" \" + this.getFullName();\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(14);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nvar Field = require(9),\r\n    util  = require(25);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = this.name.substring(0, 1).toUpperCase() + this.name.substring(1);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fields = [];\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fields.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fields.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fields.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fields.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fields.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize  = require(22),\r\n    Root      = require(18),\r\n    Type      = require(23),\r\n    Field     = require(9),\r\n    MapField  = require(10),\r\n    OneOf     = require(15),\r\n    Enum      = require(8),\r\n    Service   = require(21),\r\n    Method    = require(12),\r\n    types     = require(24),\r\n    util      = require(25);\r\nvar camelCase = util.camelCase;\r\n\r\nvar nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nvar s_required = \"required\",\r\n    s_repeated = \"repeated\",\r\n    s_optional = \"optional\",\r\n    s_option   = \"option\",\r\n    s_name     = \"name\",\r\n    s_type     = \"type\";\r\nvar s_open     = \"{\",\r\n    s_close    = \"}\",\r\n    s_bopen    = '(',\r\n    s_bclose   = ')',\r\n    s_semi     = \";\",\r\n    s_dq       = '\"',\r\n    s_sq       = \"'\";\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} [root] Root to populate\r\n * @returns {ParserResult} Parser result\r\n */\r\nfunction parse(source, root) {\r\n    /* eslint-disable default-case, callback-return */\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    function illegal(token, name) {\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (line \" + tn.line() + s_bclose);\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== s_dq && token !== s_sq)\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === s_dq || token === s_sq);\r\n        return values.join('');\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case s_sq:\r\n            case s_dq:\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(s_semi);\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === '-') {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, 'number');\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"min\": return 1;\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === '-' && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, s_name);\r\n        ptr = ptr.define(pkg);\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(s_semi);\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        var p3;\r\n        if ([ \"proto2\", p3 = \"proto3\" ].indexOf(syntax) < 0)\r\n            throw illegal(syntax, \"syntax\");\r\n        isProto3 = syntax === p3;\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case s_option:\r\n                parseOption(parent, token);\r\n                skip(s_semi);\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n                    case s_required:\r\n                    case s_optional:\r\n                    case s_repeated:\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, s_optional);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, s_type);\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, s_type);\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, s_type);\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (token === s_option) {\r\n                    parseOption(oneof, token);\r\n                    skip(s_semi);\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, s_optional);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (lower(token) === s_option)\r\n                    parseOption(enm);\r\n                else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, s_name);\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(s_bopen, true);\r\n        var name = next();\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, s_name);\r\n        if (custom) {\r\n            skip(s_bclose);\r\n            name = s_bopen + name + s_bclose;\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (!nameRe.test(token))\r\n                    throw illegal(token, s_name);\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, s_option);\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(s_semi);\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(service, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(s_bopen);\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(s_bclose); skip(\"returns\"); skip(s_bopen);\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(s_bclose);\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(method, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_required:\r\n                    case s_repeated:\r\n                    case s_optional:\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, s_optional, reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case s_option:\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(s_semi);\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    return {\r\n        'package'     : pkg,\r\n        'imports'     : imports,\r\n        'weakImports' : weakImports,\r\n        'syntax'      : syntax,\r\n        'root'        : root\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util      = require(29),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Configures the Reader interface according to the environment.\r\n * @memberof Reader\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader.configure = configure;\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = function create(buffer) {\r\n    return new (util.Buffer && util.Buffer.isBuffer(buffer) && BufferReader || Reader)(buffer);\r\n};\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice;\r\n\r\n/**\r\n * Tag read.\r\n * @constructor\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @ignore\r\n */\r\nfunction Tag(id, wireType) {\r\n    this.id = id;\r\n    this.wireType = wireType;\r\n}\r\n\r\n/**\r\n * Reads a tag.\r\n * @returns {{id: number, wireType: number}} Field id and wire type\r\n */\r\nReaderPrototype.tag = function read_tag() {\r\n    if (this.pos >= this.len)\r\n        throw indexOutOfRange(this);\r\n    return new Tag(this.buf[this.pos] >>> 3, this.buf[this.pos++] & 7);\r\n};\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    // 1 byte\r\n    var octet = this.buf[this.pos++],\r\n        value = octet & 127;\r\n    if (octet > 127) { // false if octet is undefined (pos >= len)\r\n        // 2 bytes\r\n        octet = this.buf[this.pos++];\r\n        value |= (octet & 127) << 7;\r\n        if (octet > 127) {\r\n            // 3 bytes\r\n            octet = this.buf[this.pos++];\r\n            value |= (octet & 127) << 14;\r\n            if (octet > 127) {\r\n                // 4 bytes\r\n                octet = this.buf[this.pos++];\r\n                value |= (octet & 127) << 21;\r\n                if (octet > 127) {\r\n                    // 5 bytes\r\n                    octet = this.buf[this.pos++];\r\n                    value |= octet << 28;\r\n                    if (octet > 127) {\r\n                        // 6..10 bytes (sign extended)\r\n                        this.pos += 5;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (this.pos > this.len) {\r\n        this.pos = this.len;\r\n        throw indexOutOfRange(this);\r\n    }\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    return this.int32() >>> 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.int32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    var lo = 0, hi = 0,\r\n        i  = 0, b  = 0;\r\n    if (this.len - this.pos > 9) { // fast route\r\n        for (i = 0; i < 4; ++i) {\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.int32() !== 0;\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    this.pos += 4;\r\n    return this.buf[this.pos - 4]\r\n         | this.buf[this.pos - 3] << 8\r\n         | this.buf[this.pos - 2] << 16\r\n         | this.buf[this.pos - 1] << 24;\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongFixed() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    ,\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    );\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readLongFixed.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readLongFixed.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readLongFixed.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readLongFixed.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[3] = buf[pos  ];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[0] = buf[pos  ];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[3] = buf[pos++];\r\n                f8b[4] = buf[pos++];\r\n                f8b[5] = buf[pos++];\r\n                f8b[6] = buf[pos++];\r\n                f8b[7] = buf[pos  ];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos++];\r\n                f8b[6] = buf[pos++];\r\n                f8b[5] = buf[pos++];\r\n                f8b[4] = buf[pos++];\r\n                f8b[3] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[0] = buf[pos  ];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    // ref: https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js\r\n    var bytes = this.bytes(),\r\n        len = bytes.length;\r\n    if (len) {\r\n        var out = new Array(len), p = 0, c = 0;\r\n        while (p < len) {\r\n            var c1 = bytes[p++];\r\n            if (c1 < 128)\r\n                out[c++] = c1;\r\n            else if (c1 > 191 && c1 < 224)\r\n                out[c++] = (c1 & 31) << 6 | bytes[p++] & 63;\r\n            else if (c1 > 239 && c1 < 365) {\r\n                var u = ((c1 & 7) << 18 | (bytes[p++] & 63) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63) - 0x10000;\r\n                out[c++] = 0xD800 + (u >> 10);\r\n                out[c++] = 0xDC00 + (u & 1023);\r\n            } else\r\n                out[c++] = (c1 & 15) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63;\r\n        }\r\n        return String.fromCharCode.apply(String, out.slice(0, c));\r\n    }\r\n    return \"\";\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                var tag = this.tag();\r\n                if (tag.wireType === 4)\r\n                    break;\r\n                this.skipType(tag.wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    if (!util.Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n    readStringBuffer = util.Buffer.prototype.utf8Slice // around forever, but not present in browser buffer\r\n        ? readStringBuffer_utf8Slice\r\n        : readStringBuffer_toString;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nif (typeof Float32Array === 'undefined') // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nif (typeof Float64Array === 'undefined') // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\nvar readStringBuffer;\r\n\r\nfunction readStringBuffer_utf8Slice(buf, start, end) {\r\n    return buf.utf8Slice(start, end); // fastest\r\n}\r\n\r\nfunction readStringBuffer_toString(buf, start, end) {\r\n    return buf.toString(\"utf8\", start, end); // 2nd, again assertions\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return readStringBuffer(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(13);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nvar Field  = require(9),\r\n    util   = require(25),\r\n    common = require(7);\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.resolvePath;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {function(?Error, Root=)} callback Node-style callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, callback) {\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                var parsed = require(16)(source, self);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, callback:function):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Promise<Root>} Promise\r\n * @variation 2\r\n */\r\n// function load(filename:string):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename) {\r\n    return this.load(filename, SYNC);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.toString = function toString() {\r\n    return this.constructor.name;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(20);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar EventEmitter = require(26);\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` when the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit('end').off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(13);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nvar Method = require(12),\r\n    util   = require(25),\r\n    rpc    = require(19);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {function(?Error, Uint8Array=)} callback Node-style callback called with the error, if any, and the response data. `null` as response data signals an ended stream.\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl RPC implementation ({@link RPCImpl|see})\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[method.name.substring(0, 1).toLowerCase() + method.name.substring(1)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited && method.resolvedRequestType.encodeDelimited(request) || method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === 'function' && setImmediate || setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit('error', err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited && method.resolvedResponseType.decodeDelimited(responseData) || method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit('error', err2, method);\r\n                    return callback ? callback('error', err2) : undefined;\r\n                }\r\n                rpcService.emit('data', response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n\r\nvar s_nl = \"\\n\",\r\n    s_sl = '/',\r\n    s_as = '*';\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable default-case, callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === '\"' ? stringDoubleRe : stringSingleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === s_nl)\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === s_sl) {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === s_sl) { // Line\r\n                    while (charAt(++offset) !== s_nl)\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === s_as) { /* Block */\r\n                    do {\r\n                        if (curr === s_nl)\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== s_as || curr !== s_sl);\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return s_sl;\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === '\"' || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable default-case, callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(13);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nvar Enum      = require(8),\r\n    OneOf     = require(15),\r\n    Field     = require(9),\r\n    Service   = require(21),\r\n    Class     = require(2),\r\n    Message   = require(11),\r\n    Reader    = require(17),\r\n    Writer    = require(30),\r\n    util      = require(25),\r\n    codegen   = require(3);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object|*} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new (this.getCtor())(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode(message, writer) {\r\n    return (this.encode = codegen.supported\r\n        ? codegen.encode.generate(this).eof(this.getFullName() + \"$encode\", {\r\n              Writer : Writer,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : codegen.encode.fallback\r\n    ).call(this, message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode(readerOrBuffer, length) {\r\n    return (this.decode = codegen.supported\r\n        ? codegen.decode.generate(this).eof(this.getFullName() + \"$decode\", {\r\n              Reader : Reader,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : codegen.decode.fallback\r\n    ).call(this, readerOrBuffer, length);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that enum values are valid and that any required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify(message) {\r\n    return (this.verify = codegen.supported\r\n        ? codegen.verify.generate(this).eof(this.getFullName() + \"$verify\", {\r\n              types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util  : util\r\n          })\r\n        : codegen.verify.fallback\r\n    ).call(this, message);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(25);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = exports;\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === 'object');\r\n};\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Returns a promise from a node-style function.\r\n * @memberof util\r\n * @param {function(Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var args = [];\r\n    for (var i = 2; i < arguments.length; ++i)\r\n        args.push(arguments[i]);\r\n    return new Promise(function(resolve, reject) {\r\n        fn.apply(ctx, args.concat(\r\n            function(err/*, varargs */) {\r\n                if (err) reject(err);\r\n                else resolve.apply(null, Array.prototype.slice.call(arguments, 1));\r\n            }\r\n        ));\r\n    });\r\n}\r\n\r\nutil.asPromise = asPromise;\r\n\r\n/**\r\n * Filesystem, if available.\r\n * @memberof util\r\n * @type {?Object}\r\n */\r\nvar fs = null; // Hide this from webpack. There is probably another, better way.\r\ntry { fs = eval(['req','uire'].join(''))(\"fs\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n\r\nutil.fs = fs;\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {function(?Error, string=)} [callback] Node-style callback\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, util, path);\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", callback);\r\n    var xhr = new XMLHttpRequest();\r\n    function onload() {\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n        if (util.isString(xhr.responseText))\r\n            return callback(null, xhr.responseText);\r\n        return callback(Error(\"request failed\"));\r\n    }\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4)\r\n            onload();\r\n    };\r\n    xhr.open(\"GET\", path, true);\r\n    xhr.send();\r\n    return undefined;\r\n}\r\n\r\nutil.fetch = fetch;\r\n\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @memberof util\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\nfunction isAbsolutePath(path) {\r\n    return /^(?:\\/|[a-zA-Z0-9]+:)/.test(path);\r\n}\r\n\r\nutil.isAbsolutePath = isAbsolutePath;\r\n\r\n/**\r\n * Normalizes the specified path.\r\n * @memberof util\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\nfunction normalizePath(path) {\r\n    path = path.replace(/\\\\/g, '/')\r\n               .replace(/\\/{2,}/g, '/');\r\n    var parts = path.split('/');\r\n    var abs = isAbsolutePath(path);\r\n    var prefix = \"\";\r\n    if (abs)\r\n        prefix = parts.shift() + '/';\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === '..') {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (abs)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === '.')\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join('/');\r\n}\r\n\r\nutil.normalizePath = normalizePath;\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path that was used to fetch the origin file\r\n * @param {string} importPath Import path specified in the origin file\r\n * @param {boolean} [alreadyNormalized] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the imported file\r\n */\r\nutil.resolvePath = function resolvePath(originPath, importPath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        importPath = normalizePath(importPath);\r\n    if (isAbsolutePath(importPath))\r\n        return importPath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalizePath(originPath);\r\n    originPath = originPath.replace(/(?:\\/|^)[^/]+$/, '');\r\n    return originPath.length ? normalizePath(originPath + '/' + importPath) : importPath;\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"['\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"']\";\r\n};\r\n\r\n/**\r\n * Minimalistic sprintf.\r\n * @param {string} format Format string\r\n * @param {...*} args Replacements\r\n * @returns {string} Formatted string\r\n */\r\nutil.sprintf = function sprintf(format) {\r\n    var params = Array.prototype.slice.call(arguments, 1),\r\n        index  = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var param = params[index++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(param);\r\n            case \"p\":\r\n                return util.safeProp(param);\r\n            default:\r\n                return String(param);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Converts a string to camel case notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Converts a string to underscore notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.underScore = function underScore(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) { return \"_\" + $1.toLowerCase(); });\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0; \r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe && util.Buffer.allocUnsafe(size) || new util.Buffer(size)\r\n        : new (typeof Uint8Array !== 'undefined' && Uint8Array || Array)(size);\r\n};\r\n\r\nutil.EventEmitter = require(26);\r\n\r\n// Merge in runtime utility\r\nutil.merge(util, require(29));\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        for (var i = 0; i < listeners.length; ++i)\r\n            listeners[i].fn.apply(listeners[i].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(25);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nLongBits.from = function from(value) {\r\n    switch (typeof value) { // eslint-disable-line default-case\r\n        case 'number':\r\n            return LongBits.fromNumber(value);\r\n        case 'string':\r\n            value = util.Long.fromString(value); // throws without a long lib\r\n    }\r\n    return (value.low || value.high) && new LongBits(value.low >>> 0, value.high >>> 0) || zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return new util.Long(this.lo, this.hi, unsigned);\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * A drop-in buffer pool, similar in functionality to what node uses for buffers.\r\n * @memberof util\r\n * @function\r\n * @param {function(number):Uint8Array} alloc Allocator\r\n * @param {function(number, number):Uint8Array} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {function(number):Uint8Array} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nvar LongBits = util.LongBits = require(\"./longbits\");\r\n\r\nutil.pool = require(\"./pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nvar isNode = util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Buffer = null;\r\n\r\nif (isNode)\r\n    try { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || null;\r\n\r\nif (!util.Long && isNode)\r\n    try { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : '\\0\\0\\0\\0\\0\\0\\0\\0';\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === 'number'\r\n         ? typeof b === 'number'\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === 'number'\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ie8 = !-[1,];\r\n    var ucKey = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n    if (descriptor.get)\r\n        target['get' + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target['set' + ucKey] = ie8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (ie8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze([]);\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze({});\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util      = require(29),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {*} val Value to write\r\n * @param {number} len Value byte length\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, val, len) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {?Writer.Op}\r\n     */\r\n    this.next = null;\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @param {State} next Next state entry\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer, next) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = next;\r\n}\r\n\r\nWriter.State = State;\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = function create() {\r\n    return new (util.Buffer && BufferWriter || Writer);\r\n};\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new ArrayImpl(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (ArrayImpl !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    var op = new Op(fn, val, len);\r\n    this.tail.next = op;\r\n    this.tail = op;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(buf, pos, val) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\n/**\r\n * Writes a tag.\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.tag = function write_tag(id, wireType) {\r\n    return this.push(writeByte, 1, id << 3 | wireType & 7);\r\n};\r\n\r\nfunction writeVarint32(buf, pos, val) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value >>>= 0;\r\n    return value < 128\r\n        ? this.push(writeByte, 1, value)\r\n        : this.push(writeVarint32,\r\n              value < 16384     ? 2\r\n            : value < 2097152   ? 3\r\n            : value < 268435456 ? 4\r\n            :                     5\r\n        , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32(value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeVarint64(buf, pos, val) {\r\n    // tends to deoptimize. stays optimized when using bits directly.\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(buf, pos, val) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.hi).push(writeFixed32, 4, bits.lo);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.hi).push(writeFixed32, 4, bits.lo);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(buf, pos, val) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(buf, pos, val) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(buf, pos, val) {\r\n        ieee754.write(buf, val, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(buf, pos, val) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(buf, pos, val) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(buf, pos, val) {\r\n        ieee754.write(buf, val, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(buf, pos, val) {\r\n        buf.set(val, pos);\r\n    }\r\n    : function writeBytes_for(buf, pos, val) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nfunction writeString(buf, pos, val) {\r\n    for (var i = 0; i < val.length; ++i) {\r\n        var c1 = val.charCodeAt(i), c2;\r\n        if (c1 < 128) {\r\n            buf[pos++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buf[pos++] = c1 >> 6       | 192;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = val.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buf[pos++] = c1 >> 18      | 240;\r\n            buf[pos++] = c1 >> 12 & 63 | 128;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        } else {\r\n            buf[pos++] = c1 >> 12      | 224;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n}\r\n\r\nfunction byteLength(val) {\r\n    var strlen = val.length >>> 0;\r\n    var len = 0;\r\n    for (var i = 0; i < strlen; ++i) {\r\n        var c1 = val.charCodeAt(i);\r\n        if (c1 < 128)\r\n            len += 1;\r\n        else if (c1 < 2048)\r\n            len += 2;\r\n        else if ((c1 & 0xFC00) === 0xD800 && (val.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n}\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeString, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#}, {@link Writer#reset} or {@link Writer#finish} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this, this.states);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend as a tag where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (id !== undefined)\r\n        this.tag(id, 2);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of write operations and frees all resources.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len);\r\n    this.reset();\r\n    var pos = 0;\r\n    while (head) {\r\n        head.fn(buf, pos, head.val);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    BufferWriter.alloc = util.Buffer.allocUnsafe\r\n        ? util.Buffer.allocUnsafe\r\n        : function allocUnsafeNew(size) { return new util.Buffer(size); };\r\n    return BufferWriter.alloc(size);\r\n};\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(buf, pos, val) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float32Array === 'undefined') // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(buf, pos, val) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float64Array === 'undefined') // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(buf, pos, val) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n    // This could probably be optimized just like writeStringBuffer, but most real use cases won't benefit much.\r\n}\r\n\r\nif (!(ArrayImpl.prototype.set && util.Buffer && util.Buffer.prototype.set)) // set is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nvar writeStringBuffer = (function() { // eslint-disable-line wrap-iife\r\n    return util.Buffer && util.Buffer.prototype.utf8Write // around forever, but not present in browser buffer\r\n        ? function writeString_buffer_utf8Write(buf, pos, val) {\r\n            if (val.length < 40)\r\n                writeString(buf, pos, val);\r\n            else\r\n                buf.utf8Write(val, pos);\r\n        }\r\n        : function writeString_buffer_write(buf, pos, val) {\r\n            if (val.length < 40)\r\n                writeString(buf, pos, val);\r\n            else\r\n                buf.write(val, pos);\r\n        };\r\n    // Note that the plain JS encoder is faster for short strings, probably because of redundant assertions.\r\n    // For a raw utf8Write, the breaking point is about 20 characters, for write it is around 40 characters.\r\n    // Unfortunately, this does not translate 1:1 to real use cases, hence the common \"good enough\" limit of 40.\r\n})();\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = value.length < 40\r\n        ? byteLength(value)\r\n        : util.Buffer.byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {function(?Error, Root=)} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === 'function') {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:function):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {function(?Error, Root=)} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:function):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = protobuf.Writer.BufferWriter;\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = protobuf.Reader.BufferReader;\r\nprotobuf.codegen          = require(\"./codegen\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\n\r\n// Be nice to AMD\r\nif (typeof define === 'function' && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.Reader.configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}