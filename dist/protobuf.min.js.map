{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/decode.js","src/encode.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verify.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","base64","string","p","charAt","ceil","b64","s64","encode","start","end","j","b","String","fromCharCode","apply","invalidEncoding","decode","charCodeAt","undefined","codegen","gen","line","sprintf","arguments","level","indent","src","prev","blockOpenRe","test","branchRe","casingRe","inCase","breakRe","blockCloseRe","index","push","str","name","replace","args","join","eof","scope","source","verbose","console","keys","Object","Function","concat","map","key","Array","prototype","slice","format","params","$0","$1","param","JSON","stringify","supported","EventEmitter","this","_listeners","EventEmitterPrototype","on","evt","fn","ctx","off","listeners","splice","emit","pool","alloc","size","SIZE","MAX","slab","buf","utf8","strlen","len","c1","c2","Class","type","create","Message","Type","util","_TypeError","ctor","clazz","MessageCtor","properties","constructor","merge","$type","getFieldsArray","forEach","field","resolve","isArray","defaultValue","emptyArray","isObject","emptyObject","getOneofsArray","oneof","prop","get","indexOf","set","setCtor","common","json","nested","google","protobuf","Any","fields","type_url","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","readerOrBuffer","getFieldsById","reader","Reader","limit","pos","message","getCtor","tag","resolvedType","Enum","resolvedKeyType","uint32","ks","vs","types","basic","longToHash","repeated","packed","wireType","plimit","skipType","generate","mtype","safeProp","writer","Writer","fi","fork","mapKey","ldelim","partOf","required","long","longNeq","reset","keyWireType","oneofFields","options","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","extend","props","valuesById","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","getValuesById","remove","Field","toString","toLowerCase","optional","Long","extensionField","declaringField","_packed","FieldPrototype","MapField","isPacked","getOption","setOption","ifNotSet","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","Number","toNumber","MapFieldPrototype","MessagePrototype","asJSON","k","array","fieldsOnly","encodeDelimited","decodeDelimited","verify","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","Namespace","_nestedArray","namespace","arrayToJSON","obj","NamespacePrototype","Service","nestedTypes","nestedError","nestedArray","toArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","object","setOptions","onAdd","onRemove","define","path","split","ptr","part","shift","resolveAll","parentAlreadyChecked","getRoot","found","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","substring","toUpperCase","_fieldsArray","addFieldsToParent","OneOfPrototype","lower","token","parse","illegal","tn","s_bclose","readString","next","s_dq","s_sq","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRange","parseId","s_semi","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","s_name","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","p3","isProto3","parseCommon","s_option","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","s_open","s_close","parseMapField","s_required","s_optional","s_repeated","parseField","parseOneOf","extensions","reserved","s_type","camelCase","parseInlineOptions","valueType","parseEnumField","custom","s_bopen","fqTypeRefRe","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","package","indexOutOfRange","writeLength","RangeError","Tag","readLongVarint","lo","hi","LongBits","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readLongFixed","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","BufferReader","initBufferReader","readStringBuffer_utf8Slice","utf8Slice","readStringBuffer_toString","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","ieee754","ArrayImpl","Uint8Array","Buffer","isBuffer","_slice","subarray","int32","octet","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","float","readDouble","Float64Array","f64","double","bytes","finish","remain","BufferReaderPrototype","readStringBuffer","readFloatLE","readDoubleLE","_configure","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","filename","callback","err","cb","process","parsed","self","fetch","sync","queued","weak","idx","altname","setTimeout","fs","readFileSync","asPromise","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","methodsArray","methodName","inherited","getMethodsArray","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringDoubleRe","stringSingleRe","lastIndex","match","exec","stack","repeat","curr","s_nl","s_sl","s_as","delimRe","delim","expected","actual","equals","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","fieldName","oneOfName","fld","bake","Promise","reject","onload","xhr","status","responseText","readFile","XMLHttpRequest","onreadystatechange","readyState","open","send","isAbsolutePath","normalizePath","parts","prefix","description","TypeError","eval","originPath","importPath","alreadyNormalized","dst","underScore","newBuffer","allocUnsafe","runtime","LongBitsPrototype","zero","zzEncode","fromNumber","from","fromString","low","high","unsigned","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","dcodeIO","isFinite","longFromHash","bits","fromBits","target","descriptors","descriptor","ie8","ucKey","defineProperty","freeze","invalid","verifyValue","reason","verifyKey","genVerifyValue","fieldIndex","ref","genVerifyKey","Op","val","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","WriterPrototype","op","writeFloat","writeDouble","writeBytes","BufferWriterPrototype","writeStringBuffer","utf8Write","byteLength","roots","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === '=')\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = [];\r\n\r\n// Base64 decoding table\r\nvar s64 = [];\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var args   = Array.prototype.slice.call(arguments),\r\n        src    = ['\\t\"use strict\"'],\r\n        indent = 1,\r\n        inCase = false;\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var line = sprintf.apply(null, arguments);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (var index = 0; index < level; ++index)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + args.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === 'object') {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var params = Array.prototype.slice.call(arguments, 1),\r\n        index  = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var param = params[index++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(param);\r\n            default:\r\n                return String(param);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        for (var i = 0; i < listeners.length; ++i)\r\n            listeners[i].fn.apply(listeners[i].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var strlen = string.length >>> 0;\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < strlen; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len > 0) {\r\n        var string = [],\r\n            i = 0, // char offset\r\n            t;     // temporary\r\n        while (start < end) {\r\n            t = buffer[start++];\r\n            if (t < 128)\r\n                string[i++] = t;\r\n            else if (t > 191 && t < 224)\r\n                string[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n            else if (t > 239 && t < 365) {\r\n                t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n                string[i++] = 0xD800 + (t >> 10);\r\n                string[i++] = 0xDC00 + (t & 1023);\r\n            } else\r\n                string[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        }\r\n        return String.fromCharCode.apply(String, string.slice(0, i));\r\n    }\r\n    return \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(14),\r\n    Type    = require(26),\r\n    util    = require(28);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n * @abstract\r\n */\r\nfunction Class(type) {\r\n    return Class.create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = function create(type, ctor) {\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    var clazz = ctor;\r\n    if (clazz) {\r\n        if (typeof clazz !== 'function')\r\n            throw _TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        clazz = (function(MessageCtor) { // eslint-disable-line wrap-iife\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    clazz.constructor = Class;\r\n    \r\n    // new Class() -> Message.prototype\r\n    var prototype = clazz.prototype = new Message();\r\n    prototype.constructor = clazz;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(clazz, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    clazz.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.getFieldsArray().forEach(function(field) {\r\n        field.resolve();\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue)\r\n            ? util.emptyObject\r\n            : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                var keys = Object.keys(this);\r\n                for (var i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                var keys = oneof.oneof;\r\n                for (var i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.setCtor(clazz);\r\n\r\n    return prototype;\r\n};\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = decode;\r\n\r\nvar Enum    = require(11),\r\n    Reader  = require(20),\r\n    types   = require(27),\r\n    util    = require(28);\r\n\r\n/**\r\n * General purpose message decoder.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Populated runtime message\r\n * @this Type\r\n * @property {GenerateDecoder} generate Generates a type specific decoder\r\n */\r\nfunction decode(readerOrBuffer, length) {\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.getFieldsById(),\r\n        reader  = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new (this.getCtor())();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.tag(),\r\n            field    = fields[tag.id].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                    length  = reader.uint32();\r\n                var map = message[field.name] = {};\r\n                if (length) {\r\n                    length += reader.pos;\r\n                    var ks = [], vs = [];\r\n                    while (reader.pos < length) {\r\n                        if (reader.tag().id === 1)\r\n                            ks[ks.length] = reader[keyType]();\r\n                        else if (types.basic[type] !== undefined)\r\n                            vs[vs.length] = reader[type]();\r\n                        else\r\n                            vs[vs.length] = field.resolvedType.decode(reader, reader.uint32());\r\n                    }\r\n                    for (var i = 0; i < ks.length; ++i)\r\n                        map[typeof ks[i] === 'object' ? util.longToHash(ks[i]) : ks[i]] = vs[i];\r\n                }\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] && message[field.name].length ? message[field.name] : message[field.name] = [];\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && tag.wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values[values.length] = reader[type]();\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] !== undefined)\r\n                    values[values.length] = reader[type]();\r\n                else\r\n                    values[values.length] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] !== undefined)\r\n                message[field.name] = reader[type]();\r\n              else\r\n                message[field.name] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(tag.wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @typedef GenerateDecoder\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\ndecode.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.tag()\")\r\n        (\"switch(t.id){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"var n=r.uint32(),o={}\")\r\n                (\"if(n){\")\r\n                    (\"n+=r.pos\")\r\n                    (\"var k=[],v=[]\")\r\n                    (\"while(r.pos<n){\")\r\n                        (\"if(r.tag().id===1)\")\r\n                            (\"k[k.length]=r.%s()\", keyType);\r\n\r\n                        if (types.basic[type] !== undefined) gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=r.%s()\", type);\r\n\r\n                        else gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=types[%d].decode(r,r.uint32())\", i, i);\r\n                    gen\r\n                    (\"}\")\r\n                    (\"for(var i=0;i<k.length;++i)\")\r\n                        (\"o[typeof(k[i])==='object'?util.longToHash(k[i]):k[i]]=v[i]\")\r\n                (\"}\")\r\n                (\"m%s=o\", prop);\r\n\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s&&m%s.length?m%s:m%s=[]\", prop, prop, prop, prop);\r\n\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n                (\"if(t.wireType===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s[m%s.length]=r.%s()\", prop, prop, type)\r\n                (\"}else\");\r\n            }\r\n\r\n            if (types.basic[type] !== undefined) gen\r\n\r\n                    (\"m%s[m%s.length]=r.%s()\", prop, prop, type);\r\n\r\n            else gen\r\n\r\n                    (\"m%s[m%s.length]=types[%d].decode(r,r.uint32())\", prop, prop, i, i);\r\n\r\n        } else if (types.basic[type] !== undefined) { gen\r\n\r\n                (\"m%s=r.%s()\", prop, type);\r\n\r\n        } else { gen\r\n\r\n                (\"m%s=types[%d].decode(r,r.uint32())\", prop, i, i);\r\n\r\n        } gen\r\n                (\"break\");\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t.wireType)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = encode;\r\n\r\nvar Enum     = require(11),\r\n    Writer   = require(32),\r\n    types    = require(27),\r\n    util     = require(28);\r\nvar safeProp = util.safeProp;\r\n\r\n/**\r\n * General purpose message encoder.\r\n * @param {Message|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n * @this Type\r\n * @property {GenerateEncoder} generate Generates a type specific encoder\r\n */\r\nfunction encode(message, writer) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer.create();\r\n    var fields = this.getFieldsArray(), fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            var value, keys;\r\n            if ((value = message[field.name]) && (keys = Object.keys(value)).length) {\r\n                writer.fork();\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    writer.tag(1, types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType !== undefined)\r\n                        writer.tag(2, wireType)[type](value[keys[i]]);\r\n                    else\r\n                        field.resolvedType.encode(value[keys[i]], writer.tag(2,2).fork()).ldelim();\r\n                }\r\n                writer.ldelim(field.id);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    writer.fork();\r\n                    var i = 0;\r\n                    while (i < values.length)\r\n                        writer[type](values[i++]);\r\n                    writer.ldelim(field.id);\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType !== undefined)\r\n                        while (i < values.length)\r\n                            writer.tag(field.id, wireType)[type](values[i++]);\r\n                    else\r\n                        while (i < values.length)\r\n                            field.resolvedType.encode(values[i++], writer.tag(field.id,2).fork()).ldelim();\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name];\r\n            if (\r\n                field.partOf && message[field.partOf.name] === field.name\r\n                ||\r\n                (field.required || value !== undefined) && (field.long ? util.longNeq(value, field.defaultValue) : value !== field.defaultValue)\r\n            ) {\r\n                if (wireType !== undefined)\r\n                    writer.tag(field.id, wireType)[type](value);\r\n                else {\r\n                    field.resolvedType.encode(value, writer.fork());\r\n                    if (writer.len || field.required)\r\n                        writer.ldelim(field.id);\r\n                    else\r\n                        writer.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates an {@link Encoder|encoder} specific to the specified message type.\r\n * @typedef GenerateEncoder\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\nencode.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.getFieldsArray();\r\n    var oneofs = mtype.getOneofsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    var i;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = safeProp(field.name);\r\n        \r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType     = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                keyWireType = types.mapKey[keyType];\r\n            gen\r\n\r\n    (\"if(m%s){\", prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0,ks=Object.keys(m%s);i<ks.length;++i){\", prop)\r\n            (\"w.tag(1,%d).%s(ks[i])\", keyWireType, keyType);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n            (\"w.tag(2,%d).%s(m%s[ks[i]])\", wireType, type, prop);\r\n\r\n            else gen\r\n            \r\n            (\"types[%d].encode(m%s[ks[i]],w.tag(2,2).fork()).ldelim()\", i, prop);\r\n\r\n            gen\r\n        (\"}\")\r\n        (\"w.len&&w.ldelim(%d)||w.reset()\", field.id)\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim(%d)\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.tag(%d,%d).%s(m%s[i])\", field.id, wireType, type, prop);\r\n                else gen\r\n            (\"types[%d].encode(m%s[i],w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(m%s!==undefined&&util.longNeq(m%s,%j))\", prop, prop, field.defaultValue);\r\n                else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n        (\"w.tag(%d,%d).%s(m%s)\", field.id, wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n        (\"types[%d].encode(m%s,w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n        \r\n            else gen\r\n\r\n        (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", i, prop, field.id);\r\n    \r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i],\r\n            prop  = safeProp(oneof.name);\r\n        gen\r\n        (\"switch(m%s){\", prop);\r\n        var oneofFields = oneof.getFieldsArray();\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type],\r\n                prop     = safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n                (\"w.tag(%d,%d).%s(m%s)\", field.id, wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n                (\"types[%d].encode(m%s,w.tag(%d,2).fork()).ldelim()\", fields.indexOf(field), prop, field.id);\r\n        \r\n            else gen\r\n\r\n                (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", fields.indexOf(field), prop, field.id);\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");        \r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(17);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nvar util = require(28);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error('duplicate name \"' + name + '\" in ' + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error('\"' + name + '\" is not a name of ' + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(17);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nvar Type      = require(26),\r\n    Enum      = require(11),\r\n    MapField  = require(13),\r\n    types     = require(27),\r\n    util      = require(28);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object} [rule=\"optional\"] Field rule\r\n * @param {string|Object} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== 'optional' ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined)\r\n        return MapField.fromJSON(name, json);\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options['default']) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n    \r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Message#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (this.resolvedType instanceof Enum && options['enum'] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        else if (this.long && options.long)\r\n            return options.long === Number\r\n                ? typeof value === 'number'\r\n                ? value\r\n                : util.Long.fromValue(value).toNumber()\r\n                : util.Long.fromValue(value, this.type.charAt(0) === 'u').toString();\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(12);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nvar Enum    = require(11),\r\n    types   = require(27),\r\n    util    = require(28);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * \r\n * This method should be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @extends {Object}\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @abstract\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {*} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {*} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @param {boolean} [options.defaults=false] Also sets default values on the resulting object\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    if (!options)\r\n        options = {};\r\n    var fields = this.$type.fields,\r\n        json   = {};\r\n    var keys;\r\n    if (options.defaults) {\r\n        keys = [];\r\n        for (var k in this) // eslint-disable-line guard-for-in\r\n            keys.push(k);\r\n    } else\r\n        keys = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && value.length) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (!options.fieldsOnly)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(17);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nvar Type = require(26),\r\n    util = require(28);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (type && !util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    this.resolvedResponseType = resolved;\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(17);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nvar Enum    = require(11),\r\n    Type    = require(26),\r\n    Field   = require(12),\r\n    Service = require(24),\r\n    util    = require(28);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\nvar nestedTypes = [ Enum, Type, Service, Field, Namespace ],\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(', ');\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson)\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw _TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split('.');\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split('.');\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found instanceof Namespace && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.extend = extend;\r\n\r\nvar Root = require(21),\r\n    util = require(28);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join('.');\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Lets the specified constructor extend this class.\r\n * @memberof ReflectionObject\r\n * @param {*} constructor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this ReflectionObject\r\n */\r\nfunction extend(constructor) {\r\n    var prototype = constructor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = constructor;\r\n    constructor.extend = extend;\r\n    return prototype;\r\n}\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Constructor name, space, full name\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    return this.constructor.name + \" \" + this.getFullName();\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(17);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nvar Field = require(12),\r\n    util  = require(28);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = this.name.substring(0, 1).toUpperCase() + this.name.substring(1);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nutil.prop(OneOfPrototype, \"fieldsArray\", {\r\n    get: function getFieldsArray() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fieldsArray.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize  = require(25),\r\n    Root      = require(21),\r\n    Type      = require(26),\r\n    Field     = require(12),\r\n    MapField  = require(13),\r\n    OneOf     = require(18),\r\n    Enum      = require(11),\r\n    Service   = require(24),\r\n    Method    = require(15),\r\n    types     = require(27),\r\n    util      = require(28);\r\nvar camelCase = util.camelCase;\r\n\r\nvar nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nvar s_required = \"required\",\r\n    s_repeated = \"repeated\",\r\n    s_optional = \"optional\",\r\n    s_option   = \"option\",\r\n    s_name     = \"name\",\r\n    s_type     = \"type\";\r\nvar s_open     = \"{\",\r\n    s_close    = \"}\",\r\n    s_bopen    = '(',\r\n    s_bclose   = ')',\r\n    s_semi     = \";\",\r\n    s_dq       = '\"',\r\n    s_sq       = \"'\";\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} [root] Root to populate\r\n * @returns {ParserResult} Parser result\r\n */\r\nfunction parse(source, root) {\r\n    /* eslint-disable callback-return */\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    function illegal(token, name) {\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (line \" + tn.line() + s_bclose);\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== s_dq && token !== s_sq)\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === s_dq || token === s_sq);\r\n        return values.join('');\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case s_sq:\r\n            case s_dq:\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(s_semi);\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === '-') {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, 'number');\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"min\": return 1;\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === '-' && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, s_name);\r\n        ptr = ptr.define(pkg);\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(s_semi);\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        var p3;\r\n        if ([ \"proto2\", p3 = \"proto3\" ].indexOf(syntax) < 0)\r\n            throw illegal(syntax, \"syntax\");\r\n        isProto3 = syntax === p3;\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case s_option:\r\n                parseOption(parent, token);\r\n                skip(s_semi);\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n                    case s_required:\r\n                    case s_optional:\r\n                    case s_repeated:\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, s_optional);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, s_type);\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, s_type);\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, s_type);\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (token === s_option) {\r\n                    parseOption(oneof, token);\r\n                    skip(s_semi);\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, s_optional);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (lower(token) === s_option)\r\n                    parseOption(enm);\r\n                else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, s_name);\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(s_bopen, true);\r\n        var name = next();\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, s_name);\r\n        if (custom) {\r\n            skip(s_bclose);\r\n            name = s_bopen + name + s_bclose;\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (!nameRe.test(token))\r\n                    throw illegal(token, s_name);\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, s_option);\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(s_semi);\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(service, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(s_bopen);\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(s_bclose); skip(\"returns\"); skip(s_bopen);\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(s_bclose);\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(method, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_required:\r\n                    case s_repeated:\r\n                    case s_optional:\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, s_optional, reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case s_option:\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(s_semi);\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    return {\r\n        'package'     : pkg,\r\n        'imports'     : imports,\r\n        'weakImports' : weakImports,\r\n        'syntax'      : syntax,\r\n        'root'        : root\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util      = require(30),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = function create(buffer) {\r\n    return new (util.Buffer && util.Buffer.isBuffer(buffer) && BufferReader || Reader)(buffer);\r\n};\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice;\r\n\r\n/**\r\n * Tag read.\r\n * @constructor\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @ignore\r\n */\r\nfunction Tag(id, wireType) {\r\n    this.id = id;\r\n    this.wireType = wireType;\r\n}\r\n\r\n/**\r\n * Reads a tag.\r\n * @returns {{id: number, wireType: number}} Field id and wire type\r\n */\r\nReaderPrototype.tag = function read_tag() {\r\n    if (this.pos >= this.len)\r\n        throw indexOutOfRange(this);\r\n    return new Tag(this.buf[this.pos] >>> 3, this.buf[this.pos++] & 7);\r\n};\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    // 1 byte\r\n    var octet = this.buf[this.pos++],\r\n        value = octet & 127;\r\n    if (octet > 127) { // false if octet is undefined (pos >= len)\r\n        // 2 bytes\r\n        octet = this.buf[this.pos++];\r\n        value |= (octet & 127) << 7;\r\n        if (octet > 127) {\r\n            // 3 bytes\r\n            octet = this.buf[this.pos++];\r\n            value |= (octet & 127) << 14;\r\n            if (octet > 127) {\r\n                // 4 bytes\r\n                octet = this.buf[this.pos++];\r\n                value |= (octet & 127) << 21;\r\n                if (octet > 127) {\r\n                    // 5 bytes\r\n                    octet = this.buf[this.pos++];\r\n                    value |= octet << 28;\r\n                    if (octet > 127) {\r\n                        // 6..10 bytes (sign extended)\r\n                        this.pos += 5;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (this.pos > this.len) {\r\n        this.pos = this.len;\r\n        throw indexOutOfRange(this);\r\n    }\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    return this.int32() >>> 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.int32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    var lo = 0, hi = 0,\r\n        i  = 0, b  = 0;\r\n    if (this.len - this.pos > 9) { // fast route\r\n        for (i = 0; i < 4; ++i) {\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.int32() !== 0;\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    this.pos += 4;\r\n    return this.buf[this.pos - 4]\r\n         | this.buf[this.pos - 3] << 8\r\n         | this.buf[this.pos - 2] << 16\r\n         | this.buf[this.pos - 1] << 24;\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongFixed() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    ,\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    );\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readLongFixed.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readLongFixed.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readLongFixed.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readLongFixed.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[3] = buf[pos  ];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[0] = buf[pos  ];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[3] = buf[pos++];\r\n                f8b[4] = buf[pos++];\r\n                f8b[5] = buf[pos++];\r\n                f8b[6] = buf[pos++];\r\n                f8b[7] = buf[pos  ];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos++];\r\n                f8b[6] = buf[pos++];\r\n                f8b[5] = buf[pos++];\r\n                f8b[4] = buf[pos++];\r\n                f8b[3] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[0] = buf[pos  ];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                var tag = this.tag();\r\n                if (tag.wireType === 4)\r\n                    break;\r\n                this.skipType(tag.wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    if (!util.Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n    readStringBuffer = util.Buffer.prototype.utf8Slice // around forever, but not present in browser buffer\r\n        ? readStringBuffer_utf8Slice\r\n        : readStringBuffer_toString;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nif (typeof Float32Array === 'undefined') // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nif (typeof Float64Array === 'undefined') // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\nvar readStringBuffer;\r\n\r\nfunction readStringBuffer_utf8Slice(buf, start, end) {\r\n    return buf.utf8Slice(start, end); // fastest\r\n}\r\n\r\nfunction readStringBuffer_toString(buf, start, end) {\r\n    return buf.toString(\"utf8\", start, end); // 2nd, again assertions\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return readStringBuffer(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(16);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nvar Field  = require(12),\r\n    util   = require(28),\r\n    common = require(8);\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.resolvePath;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, callback) {\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                var parsed = require(19)(source, self);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Promise<Root>} Promise\r\n * @variation 2\r\n */\r\n// function load(filename:string):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename) {\r\n    return this.load(filename, SYNC);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.toString = function toString() {\r\n    return this.constructor.name;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(23);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(28);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit('end').off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(16);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nvar Method = require(15),\r\n    util   = require(28),\r\n    rpc    = require(22);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl RPC implementation ({@link RPCImpl|see})\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[method.name.substring(0, 1).toLowerCase() + method.name.substring(1)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited && method.resolvedRequestType.encodeDelimited(request) || method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === 'function' && setImmediate || setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit('error', err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited && method.resolvedResponseType.decodeDelimited(responseData) || method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit('error', err2, method);\r\n                    return callback ? callback('error', err2) : undefined;\r\n                }\r\n                rpcService.emit('data', response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n\r\nvar s_nl = \"\\n\",\r\n    s_sl = '/',\r\n    s_as = '*';\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === '\"' ? stringDoubleRe : stringSingleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === s_nl)\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === s_sl) {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === s_sl) { // Line\r\n                    while (charAt(++offset) !== s_nl)\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === s_as) { /* Block */\r\n                    do {\r\n                        if (curr === s_nl)\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== s_as || curr !== s_sl);\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return s_sl;\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === '\"' || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(16);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nvar Enum      = require(11),\r\n    OneOf     = require(18),\r\n    Field     = require(12),\r\n    Service   = require(24),\r\n    Class     = require(7),\r\n    Message   = require(14),\r\n    Reader    = require(20),\r\n    Writer    = require(32),\r\n    util      = require(28);\r\nvar encode    = require(10),\r\n    decode    = require(9),\r\n    verify    = require(31);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object|*} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new (this.getCtor())(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return (this.encode = util.codegen.supported\r\n        ? encode.generate(this).eof(this.getFullName() + \"$encode\", {\r\n              Writer : Writer,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : encode\r\n    ).call(this, message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return (this.decode = util.codegen.supported\r\n        ? decode.generate(this).eof(this.getFullName() + \"$decode\", {\r\n              Reader : Reader,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : decode\r\n    ).call(this, readerOrBuffer, length);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return (this.verify = util.codegen.supported\r\n        ? verify.generate(this).eof(this.getFullName() + \"$verify\", {\r\n              types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util  : util\r\n          })\r\n        : verify\r\n    ).call(this, message);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(28);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = exports;\r\n\r\nutil.codegen = require(3);\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Returns a promise from a node-style function.\r\n * @memberof util\r\n * @param {function(Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var args = [];\r\n    for (var i = 2; i < arguments.length; ++i)\r\n        args.push(arguments[i]);\r\n    return new Promise(function(resolve, reject) {\r\n        fn.apply(ctx, args.concat(\r\n            function(err/*, varargs */) {\r\n                if (err) reject(err);\r\n                else resolve.apply(null, Array.prototype.slice.call(arguments, 1));\r\n            }\r\n        ));\r\n    });\r\n}\r\n\r\nutil.asPromise = asPromise;\r\n\r\n/**\r\n * Filesystem, if available.\r\n * @memberof util\r\n * @type {?Object}\r\n */\r\nvar fs = null; // Hide this from webpack. There is probably another, better way.\r\ntry { fs = eval(['req','uire'].join(''))(\"fs\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n\r\nutil.fs = fs;\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, util, path);\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", callback);\r\n    var xhr = new XMLHttpRequest();\r\n    function onload() {\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n        if (util.isString(xhr.responseText))\r\n            return callback(null, xhr.responseText);\r\n        return callback(Error(\"request failed\"));\r\n    }\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4)\r\n            onload();\r\n    };\r\n    xhr.open(\"GET\", path, true);\r\n    xhr.send();\r\n    return undefined;\r\n}\r\n\r\nutil.fetch = fetch;\r\n\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @memberof util\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\nfunction isAbsolutePath(path) {\r\n    return /^(?:\\/|[a-zA-Z0-9]+:)/.test(path);\r\n}\r\n\r\nutil.isAbsolutePath = isAbsolutePath;\r\n\r\n/**\r\n * Normalizes the specified path.\r\n * @memberof util\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\nfunction normalizePath(path) {\r\n    path = path.replace(/\\\\/g, '/')\r\n               .replace(/\\/{2,}/g, '/');\r\n    var parts = path.split('/');\r\n    var abs = isAbsolutePath(path);\r\n    var prefix = \"\";\r\n    if (abs)\r\n        prefix = parts.shift() + '/';\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === '..') {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (abs)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === '.')\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join('/');\r\n}\r\n\r\nutil.normalizePath = normalizePath;\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path that was used to fetch the origin file\r\n * @param {string} importPath Import path specified in the origin file\r\n * @param {boolean} [alreadyNormalized] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the imported file\r\n */\r\nutil.resolvePath = function resolvePath(originPath, importPath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        importPath = normalizePath(importPath);\r\n    if (isAbsolutePath(importPath))\r\n        return importPath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalizePath(originPath);\r\n    originPath = originPath.replace(/(?:\\/|^)[^/]+$/, '');\r\n    return originPath.length ? normalizePath(originPath + '/' + importPath) : importPath;\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"['\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"']\";\r\n};\r\n\r\n/**\r\n * Converts a string to camel case notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Converts a string to underscore notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.underScore = function underScore(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) { return \"_\" + $1.toLowerCase(); });\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe && util.Buffer.allocUnsafe(size) || new util.Buffer(size)\r\n        : new (typeof Uint8Array !== 'undefined' && Uint8Array || Array)(size);\r\n};\r\n\r\nvar runtime = require(30);\r\n\r\nutil.EventEmitter = require(4);\r\n\r\n// Merge in runtime utility\r\nutil.merge(util, runtime);\r\n\r\nutil._configure = function configure() {\r\n    runtime.Long = util.Long;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(28);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    switch (typeof value) {\r\n        case 'number':\r\n            return LongBits.fromNumber(value);\r\n        case 'string':\r\n            if (util.Long)\r\n                value = util.Long.fromString(value);\r\n                // fallthrough\r\n            else\r\n                return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return (value.low || value.high) && new LongBits(value.low >>> 0, value.high >>> 0) || zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo, this.hi, unsigned)\r\n        : { low: this.lo, high: this.hi, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nvar LongBits = util.LongBits = require(\"./longbits\");\r\n\r\nutil.base64 = require(\"@protobufjs/base64\");\r\nutil.utf8   = require(\"@protobufjs/utf8\");\r\nutil.pool   = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nvar isNode = util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Buffer = null;\r\n\r\nif (isNode)\r\n    try { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || null;\r\n\r\nif (!util.Long && isNode)\r\n    try { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === 'object');\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : '\\0\\0\\0\\0\\0\\0\\0\\0';\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === 'number'\r\n         ? typeof b === 'number'\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === 'number'\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ie8 = !-[1,];\r\n    var ucKey = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n    if (descriptor.get)\r\n        target['get' + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target['set' + ucKey] = ie8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (ie8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze([]);\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze({});\r\n","\"use strict\";\r\nmodule.exports = verify;\r\n\r\nvar Enum      = require(11),\r\n    Type      = require(26),\r\n    util      = require(28);\r\nvar isInteger = util.isInteger;\r\n\r\nfunction invalid(field, expected) {\r\n    return \"invalid value for field \" + field.getFullName() + \" (\" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected)\";\r\n}\r\n\r\nfunction verifyValue(field, value) {\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\":\r\n            if (typeof value !== 'number')\r\n                return invalid(field, \"number\");\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (!isInteger(value))\r\n                return invalid(field, \"integer\");\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (!(isInteger(value) || value && isInteger(value.low) && isInteger(value.high)))\r\n                return invalid(field, \"integer|Long\");\r\n            break;\r\n        case \"bool\":\r\n            if (typeof value !== 'boolean')\r\n                return invalid(field, \"boolean\");\r\n            break;\r\n        case \"string\":\r\n            if (!util.isString(value))\r\n                return invalid(field, \"string\");\r\n            break;\r\n        case \"bytes\":\r\n            if (!(value && typeof value.length === 'number' || util.isString(value)))\r\n                return invalid(field, \"buffer\");\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) {\r\n                if (typeof field.resolvedType.getValuesById()[value] !== 'number')\r\n                    return invalid(field, \"enum value\");\r\n            } else if (field.resolvedType instanceof Type) {\r\n                var reason = field.resolvedType.verify(value);\r\n                if (reason)\r\n                    return reason;\r\n            }\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction verifyKey(field, value) {\r\n    switch (field.keyType) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (/^[\\x00-\\xff]{8}$/.test(value)) // eslint-disable-line no-control-regex\r\n                return null;\r\n            // fallthrough\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (/^-?(?:0|[1-9]\\d*)$/.test(value))\r\n                return invalid(field, \"integer key\");\r\n            break;\r\n        case \"bool\":\r\n            if (/^true|false|0|1$/.test(value))\r\n                return invalid(field, \"boolean key\");\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * General purpose message verifier.\r\n * @param {Message|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n * @this {Type}\r\n * @property {GenerateVerifier} generate Generates a type specific verifier\r\n */\r\nfunction verify(message) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    var fields = this.getFieldsArray(),\r\n        i = 0,\r\n        reason;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        // map fields\r\n        if (field.map) {\r\n\r\n            if (value !== undefined) {\r\n                if (!util.isObject(value))\r\n                    return invalid(field, \"object\");\r\n                var keys = Object.keys(value);\r\n                for (var j = 0; j < keys.length; ++j) {\r\n                    if (reason = verifyKey(field, keys[j])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n                    if (reason = verifyValue(field, value[keys[j]])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n                }\r\n            }\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            if (value !== undefined) {\r\n                if (!Array.isArray(value))\r\n                    return invalid(field, \"array\");\r\n                for (var j = 0; j < value.length; ++j)\r\n                    if (reason = verifyValue(field, value[j])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n            }\r\n\r\n        // required or present fields\r\n        } else if (field.required || value !== undefined) {\r\n\r\n            if (reason = verifyValue(field, value)) // eslint-disable-line no-cond-assign\r\n                return reason;\r\n        }\r\n\r\n    }\r\n    return null;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\": gen\r\n            (\"if(typeof %s!=='number')\", ref)\r\n                (\"return%j\", invalid(field, \"number\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.isInteger(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!(util.isInteger(%s)||%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                (\"return%j\", invalid(field, \"integer|Long\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(typeof %s!=='boolean')\", ref)\r\n                (\"return%j\", invalid(field, \"boolean\"));\r\n            break;\r\n        case \"string\": gen\r\n            (\"if(!util.isString(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"string\"));\r\n            break;\r\n        case \"bytes\": gen\r\n            (\"if(!(%s&&typeof %s.length==='number'||util.isString(%s)))\", ref, ref, ref)\r\n                (\"return%j\", invalid(field, \"buffer\"));\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) { gen\r\n                (\"switch(%s){\", ref)\r\n                    (\"default:\")\r\n                        (\"return%j\", invalid(field, \"enum value\"));\r\n                var values = util.toArray(field.resolvedType.values);\r\n                for (var j = 0; j < values.length; ++j) gen\r\n                    (\"case %d:\", values[j]);\r\n                gen\r\n                        (\"break\")\r\n                (\"}\");\r\n            } else if (field.resolvedType instanceof Type) { gen\r\n                (\"var r;\")\r\n                (\"if(r=types[%d].verify(%s))\", fieldIndex, ref)\r\n                    (\"return r\");\r\n            }\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"bool\":\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @typedef GenerateVerifier\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\nverify.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!util.isObject(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(m%s)\", prop)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!Array.isArray(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<m%s.length;++i){\", prop);\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) gen\r\n            (\"if(m%s!==undefined){\", prop);\r\n                genVerifyValue(gen, field, i, \"m\" + prop);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util      = require(30),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {*} val Value to write\r\n * @param {number} len Value byte length\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, val, len) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {?Writer.Op}\r\n     */\r\n    this.next = null;\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @param {State} next Next state entry\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer, next) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = next;\r\n}\r\n\r\nWriter.State = State;\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = function create() {\r\n    return new (util.Buffer && BufferWriter || Writer);\r\n};\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new ArrayImpl(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (ArrayImpl !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    var op = new Op(fn, val, len);\r\n    this.tail.next = op;\r\n    this.tail = op;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\n/**\r\n * Writes a tag.\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.tag = function write_tag(id, wireType) {\r\n    return this.push(writeByte, 1, id << 3 | wireType & 7);\r\n};\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value >>>= 0;\r\n    return value < 128\r\n        ? this.push(writeByte, 1, value)\r\n        : this.push(writeVarint32,\r\n              value < 16384     ? 2\r\n            : value < 2097152   ? 3\r\n            : value < 268435456 ? 4\r\n            :                     5\r\n        , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32(value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    // tends to deoptimize. stays optimized when using bits directly.\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === 'string' && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#}, {@link Writer#reset} or {@link Writer#finish} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this, this.states);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend as a tag where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (id !== undefined)\r\n        this.tag(id, 2);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of write operations and frees all resources.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len);\r\n    this.reset();\r\n    var pos = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    BufferWriter.alloc = util.Buffer.allocUnsafe\r\n        ? util.Buffer.allocUnsafe\r\n        : function allocUnsafeNew(size) { return new util.Buffer(size); };\r\n    return BufferWriter.alloc(size);\r\n};\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(val, buf, pos) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float32Array === 'undefined') // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(val, buf, pos) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float64Array === 'undefined') // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(val, buf, pos) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === 'string')\r\n        value = util.Buffer.from && util.Buffer.from(value, \"base64\") || new util.Buffer(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nvar writeStringBuffer = (function() { // eslint-disable-line wrap-iife\r\n    return util.Buffer && util.Buffer.prototype.utf8Write // around forever, but not present in browser buffer\r\n        ? function writeString_buffer_utf8Write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.utf8Write(val, pos);\r\n        }\r\n        : function writeString_buffer_write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.write(val, pos);\r\n        };\r\n    // Note that the plain JS encoder is faster for short strings, probably because of redundant assertions.\r\n    // For a raw utf8Write, the breaking point is about 20 characters, for write it is around 40 characters.\r\n    // Unfortunately, this does not translate 1:1 to real use cases, hence the common \"good enough\" limit of 40.\r\n})();\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = value.length < 40\r\n        ? utf8.length(value)\r\n        : util.Buffer.byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === 'function') {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = protobuf.Writer.BufferWriter;\r\n               var Reader =\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = protobuf.Reader.BufferReader;\r\nprotobuf.encode           = require(\"./encode\");\r\nprotobuf.decode           = require(\"./decode\");\r\nprotobuf.verify           = require(\"./verify\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\n                 var util =\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    util._configure();\r\n    Reader._configure();\r\n}\r\n\r\n// Be nice to AMD\r\nif (typeof define === 'function' && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}