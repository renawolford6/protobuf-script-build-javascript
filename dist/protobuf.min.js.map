{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","src/common.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/inherits.js","src/mapfield.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/prototype.js","src/reader.js","src/root.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/codegen.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","common","name","json","test","nested","google","protobuf","Any","fields","type_url","type","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","oneof","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","decoder","Enum","Reader","types","util","fallback","reader","this","getFieldsById","limit","undefined","len","pos","message","getCtor","tag","field","resolve","resolvedType","map","resolvedKeyType","uint32","ks","vs","basic","decode","longToHash","repeated","packed","wireType","plimit","skipType","generate","mtype","getFieldsArray","gen","codegen","prop","safeProp","encoder","Writer","writer","fi","keys","Object","fork","mapKey","encode","ldelim","required","long","longNeq","defaultValue","reset","keyWireType","options","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","extend","_TypeError","defineProperties","valuesById","get","getValuesById","forEach","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","isObject","toString","toLowerCase","optional","partOf","Long","extensionField","declaringField","_packed","FieldPrototype","Type","MapField","isPacked","getOption","setOption","ifNotSet","prototype","role","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","String","Number","toNumber","charAt","inherits","clazz","classProperties","$type","noStatics","merge","finish","encodeDelimited","decodeDelimited","verify","Prototype","constructor","noRegister","setCtor","prototypeProperties","getOneofsArray","set","MapFieldPrototype","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","Namespace","_nestedArray","namespace","arrayToJSON","array","obj","NamespacePrototype","Service","nestedTypes","nestedError","ctor","join","nestedArray","getNestedArray","toArray","methods","addJSON","nestedJson","ns","nestedName","j","object","indexOf","prev","setOptions","onAdd","onRemove","define","path","split","Array","isArray","ptr","part","shift","resolveAll","parentAlreadyChecked","getRoot","slice","found","proto","create","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","_fields","addFieldsToParent","OneOfPrototype","push","index","splice","lower","token","camelCase","substring","replace","$0","$1","toUpperCase","parse","source","illegal","tn","line","s_bclose","readString","next","s_dq","s_sq","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRange","start","parseId","end","s_semi","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","s_name","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","p3","isProto3","parseCommon","s_option","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","s_open","s_close","parseMapField","s_required","s_optional","s_repeated","parseField","parseOneOf","extensions","reserved","s_type","parseInlineOptions","valueType","parseEnumField","custom","s_bopen","fqTypeRefRe","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","package","properties","any","fieldsOnly","asJSON","key","indexOutOfRange","writeLength","RangeError","configure","ArrayImpl","Uint8Array","ReaderPrototype","_slice","subarray","int64","read_int64_long","uint64","read_uint64_long","sint64","read_sint64_long","fixed64","read_fixed64_long","sfixed64","read_sfixed64_long","read_int64_number","read_uint64_number","read_sint64_number","read_fixed64_number","read_sfixed64_number","buf","Buffer","isBuffer","BufferReader","Tag","readLongVarint","lo","hi","b","LongBits","toLong","zzDecode","readLongFixed","initBufferReader","ieee754","int32","octet","sint32","bool","fixed32","sfixed32","float","double","bytes","string","out","p","c1","fromCharCode","apply","remain","BufferReaderPrototype","readFloatLE","readDoubleLE","deferred","files","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","filename","callback","err","cb","process","JSON","parsed","self","fetch","queued","weak","idx","altname","setTimeout","asPromise","newDeferred","_methodsArray","ServicePrototype","methodsArray","getMethodsArray","methodName","inherited","rpc","requestDelimited","responseDelimited","rpcService","defineProperty","request","requestData","setImmediate","responseData","response","err2","unescape","str","subject","re","stringDelim","stringDoubleRe","stringSingleRe","lastIndex","match","exec","stack","repeat","curr","s_nl","s_sl","s_as","delimRe","delim","expected","actual","equals","_fieldsById","_fieldsArray","_oneofsArray","_ctor","TypePrototype","verifier","fieldsById","names","fieldsArray","oneofsArray","supported","eof","P","fieldName","oneOfName","filter","fld","readerOrBuffer","bake","emptyArray","freeze","fn","ctx","args","arguments","Promise","reject","concat","onload","xhr","status","responseText","fs","readFile","XMLHttpRequest","onreadystatechange","readyState","open","send","isAbsolutePath","normalizePath","parts","prefix","isFinite","description","TypeError","originPath","importPath","alreadyNormalized","dst","src","newBuffer","size","fmt","level","indent","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","format","params","param","stringify","scope","verbose","console","Function","LongBitsPrototype","zero","zzEncode","fromNumber","from","fromString","low","high","unsigned","charCodeAt","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","dcodeIO","longFromHash","bits","fromBits","reason","hasReasonVar","writeBytes","writeBytes_set","writeBytes_for","Op","val","noop","State","tail","BufferWriter","writeByte","writeVarint32","writeVarint64","writeFixed32","writeFloat","writeDouble","writeString","c2","byteLength","strlen","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","writeStringBuffer","WriterPrototype","op","state","pop","BufferWriterPrototype","allocUnsafe","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\n\r\n/**\r\n * Wire format decoder using code generation on top of reflection.\r\n * @namespace\r\n */\r\nvar decoder = exports;\r\n\r\nvar Enum   = require(5),\r\n    Reader = require(15),\r\n    types  = require(20),\r\n    util   = require(21);\r\n\r\n/**\r\n * Decodes a message of `this` message's type.\r\n * @param {Reader} reader Reader to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Prototype} Populated runtime message\r\n * @this Type\r\n */\r\ndecoder.fallback = function fallback(reader, length) {\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.getFieldsById(),\r\n        reader  = reader instanceof Reader ? reader : Reader(reader),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new (this.getCtor())();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.tag(),\r\n            field    = fields[tag.id].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                    length  = reader.uint32();\r\n                var map = message[field.name] = {};\r\n                if (length) {\r\n                    length += reader.pos;\r\n                    var ks = [], vs = [];\r\n                    while (reader.pos < length) {\r\n                        if (reader.tag().id === 1)\r\n                            ks[ks.length] = reader[keyType]();\r\n                        else if (types.basic[type] !== undefined)\r\n                            vs[vs.length] = reader[type]();\r\n                        else\r\n                            vs[vs.length] = field.resolvedType.decode(reader, reader.uint32());\r\n                    }\r\n                    for (var i = 0; i < ks.length; ++i)\r\n                        map[typeof ks[i] === 'object' ? util.longToHash(ks[i]) : ks[i]] = vs[i];\r\n                }\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] || (message[field.name] = []);\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && tag.wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values[values.length] = reader[type]();\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] !== undefined)\r\n                    values[values.length] = reader[type]();\r\n                  else\r\n                    values[values.length] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] !== undefined)\r\n                message[field.name] = reader[type]();\r\n              else\r\n                message[field.name] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(tag.wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {util.CodegenAppender} Unscoped codegen instance\r\n */\r\ndecoder.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.tag()\")\r\n        (\"switch(t.id){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"var n=r.uint32(),o={}\")\r\n                (\"if(n){\")\r\n                    (\"n+=r.pos\")\r\n                    (\"var k=[],v=[]\")\r\n                    (\"while(r.pos<n){\")\r\n                        (\"if(r.tag().id===1)\")\r\n                            (\"k[k.length]=r.%s()\", keyType);\r\n\r\n                        if (types.basic[type] !== undefined) gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=r.%s()\", type);\r\n\r\n                        else gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=types[%d].decode(r,r.uint32())\", i, i);\r\n                    gen\r\n                    (\"}\")\r\n                    (\"for(var i=0;i<k.length;++i)\")\r\n                        (\"o[typeof(k[i])==='object'?util.longToHash(k[i]):k[i]]=v[i]\")\r\n                (\"}\")\r\n                (\"m%s=o\", prop);\r\n\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s||(m%s=[])\", prop, prop);\r\n\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n                (\"if(t.wireType===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s[m%s.length]=r.%s()\", prop, prop, type)\r\n                (\"}else\");\r\n            }\r\n\r\n            if (types.basic[type] !== undefined) gen\r\n\r\n                    (\"m%s[m%s.length]=r.%s()\", prop, prop, type);\r\n\r\n            else gen\r\n\r\n                    (\"m%s[m%s.length]=types[%d].decode(r,r.uint32())\", prop, prop, i, i);\r\n\r\n        } else if (types.basic[type] !== undefined) { gen\r\n\r\n                (\"m%s=r.%s()\", prop, type);\r\n\r\n        } else { gen\r\n\r\n                (\"m%s=types[%d].decode(r,r.uint32())\", prop, i, i);\r\n\r\n        } gen\r\n                (\"break\");\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t.wireType)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Wire format encoder using code generation on top of reflection.\r\n * @namespace\r\n */\r\nvar encoder = exports;\r\n\r\nvar Enum   = require(5),\r\n    Writer = require(26),\r\n    types  = require(20),\r\n    util   = require(21);\r\n\r\n/**\r\n * Encodes a message of `this` message's type.\r\n * @param {Prototype|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n * @this Type\r\n */\r\nencoder.fallback = function fallback(message, writer) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer();\r\n    var fields = this.getFieldsArray(), fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            var value, keys;\r\n            if ((value = message[field.name]) && (keys = Object.keys(value)).length) {\r\n                writer.fork();\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    writer.tag(1, types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType !== undefined)\r\n                        writer.tag(2, wireType)[type](value[keys[i]]);\r\n                    else\r\n                        field.resolvedType.encode(value[keys[i]], writer.tag(2,2).fork()).ldelim();\r\n                }\r\n                writer.ldelim(field.id);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    writer.fork();\r\n                    var i = 0;\r\n                    while (i < values.length)\r\n                        writer[type](values[i++]);\r\n                    writer.ldelim(field.id);\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType !== undefined)\r\n                        while (i < values.length)\r\n                            writer.tag(field.id, wireType)[type](values[i++]);\r\n                    else\r\n                        while (i < values.length)\r\n                            field.resolvedType.encode(values[i++], writer.tag(field.id,2).fork()).ldelim();\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name];\r\n            if (field.required || value !== undefined && field.long ? util.longNeq(value, field.defaultValue) : value !== field.defaultValue) {\r\n                if (wireType !== undefined)\r\n                    writer.tag(field.id, wireType)[type](value);\r\n                else {\r\n                    field.resolvedType.encode(value, writer.fork());\r\n                    if (writer.len || field.required)\r\n                        writer.ldelim(field.id);\r\n                    else\r\n                        writer.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {util.CodegenAppender} Unscoped codegen instance\r\n */\r\nencoder.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer())\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = util.safeProp(field.name);\r\n        \r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType     = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                keyWireType = types.mapKey[keyType];\r\n            gen\r\n\r\n    (\"if(m%s){\", prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0,ks=Object.keys(m%s);i<ks.length;++i){\", prop)\r\n            (\"w.tag(1,%d).%s(ks[i])\", keyWireType, keyType);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n            (\"w.tag(2,%d).%s(m%s[ks[i]])\", wireType, type, prop);\r\n\r\n            else gen\r\n            \r\n            (\"types[%d].encode(m%s[ks[i]],w.tag(2,2).fork()).ldelim()\", i, prop);\r\n\r\n            gen\r\n        (\"}\")\r\n        (\"w.len&&w.ldelim(%d)||w.reset()\", field.id)\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim(%d)\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.tag(%d,%d).%s(m%s[i])\", field.id, wireType, type, prop);\r\n                else gen\r\n            (\"types[%d].encode(m%s[i],w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(m%s!==undefined&&util.longNeq(m%s,%j))\", prop, prop, field.defaultValue);\r\n                else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n        (\"w.tag(%d,%d).%s(m%s)\", field.id, wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n        (\"types[%d].encode(m%s,w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n        \r\n            else gen\r\n\r\n        (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", i, prop, field.id);\r\n    \r\n        }\r\n    }\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nvar util = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nObject.defineProperties(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: EnumPrototype.getValuesById = function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error('duplicate name \"' + name + '\" in ' + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error('\"' + name + '\" is not a name of ' + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nvar Type      = require(19),\r\n    Enum      = require(5),\r\n    MapField  = require(8),\r\n    types     = require(20),\r\n    util      = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string} [rule=optional] Field rule\r\n * @param {string} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== 'optional' ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nObject.defineProperties(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined)\r\n        return MapField.fromJSON(name, json);\r\n    return new Field(name, json.id, json.type, json.role, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options['default']) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n    \r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Prototype#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (this.resolvedType instanceof Enum && options['enum'] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        else if (this.long && options.long)\r\n            return options.long === Number\r\n                ? typeof value === 'number'\r\n                ? value\r\n                : util.Long.fromValue(value).toNumber()\r\n                : util.Long.fromValue(value, this.type.charAt(0) === 'u').toString();\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = inherits;\r\n\r\nvar Prototype = require(14),\r\n    Type      = require(19),\r\n    util      = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Options passed to {@link inherits}, modifying its behavior.\r\n * @typedef InheritanceOptions\r\n * @type {Object}\r\n * @property {boolean} [noStatics=false] Skips adding the default static methods on top of the constructor\r\n * @property {boolean} [noRegister=false] Skips registering the constructor with the reflected type\r\n */\r\n\r\n/**\r\n * Inherits a custom class from the message prototype of the specified message type.\r\n * @param {Function} clazz Inheriting class\r\n * @param {Type} type Inherited message type\r\n * @param {InheritanceOptions} [options] Inheritance options\r\n * @returns {Prototype} Created prototype\r\n */\r\nfunction inherits(clazz, type, options) {\r\n    if (typeof clazz !== 'function')\r\n        throw _TypeError(\"clazz\", \"a function\");\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    if (!options)\r\n        options = {};\r\n\r\n    /**\r\n     * This is not an actual type but stands as a reference for any constructor of a custom message class that you pass to the library.\r\n     * @name Class\r\n     * @extends Prototype\r\n     * @constructor\r\n     * @param {Object.<string,*>} [properties] Properties to set on the message\r\n     * @see {@link inherits}\r\n     */\r\n\r\n    var classProperties = {\r\n\r\n        /**\r\n         * Reference to the reflected type.\r\n         * @name Class.$type\r\n         * @type {Type}\r\n         * @readonly\r\n         */\r\n        $type: {\r\n            value: type\r\n        }\r\n    };\r\n\r\n    if (!options.noStatics)\r\n        util.merge(classProperties, {\r\n\r\n            /**\r\n             * Encodes a message of this type to a buffer.\r\n             * @name Class.encode\r\n             * @function\r\n             * @param {Prototype|Object} message Message to encode\r\n             * @param {Writer} [writer] Writer to use\r\n             * @returns {Uint8Array} Encoded message\r\n             */\r\n            encode: {\r\n                value: function encode(message, writer) {\r\n                    return this.$type.encode(message, writer).finish();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Encodes a message of this type preceeded by its length as a varint to a buffer.\r\n             * @name Class.encodeDelimited\r\n             * @function\r\n             * @param {Prototype|Object} message Message to encode\r\n             * @param {Writer} [writer] Writer to use\r\n             * @returns {Uint8Array} Encoded message\r\n             */\r\n            encodeDelimited: {\r\n                value: function encodeDelimited(message, writer) {\r\n                    return this.$type.encodeDelimited(message, writer).finish();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Decodes a message of this type from a buffer.\r\n             * @name Class.decode\r\n             * @function\r\n             * @param {Uint8Array} buffer Buffer to decode\r\n             * @returns {Prototype} Decoded message\r\n             */\r\n            decode: {\r\n                value: function decode(buffer) {\r\n                    return this.$type.decode(buffer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Decodes a message of this type preceeded by its length as a varint from a buffer.\r\n             * @name Class.decodeDelimited\r\n             * @function\r\n             * @param {Uint8Array} buffer Buffer to decode\r\n             * @returns {Prototype} Decoded message\r\n             */\r\n            decodeDelimited: {\r\n                value: function decodeDelimited(buffer) {\r\n                    return this.$type.decodeDelimited(buffer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Verifies a message of this type.\r\n             * @name Class.verify\r\n             * @function\r\n             * @param {Prototype|Object} message Message or plain object to verify\r\n             * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            verify: {\r\n                value: function verify(message) {\r\n                    return this.$type.verify(message);\r\n                }\r\n            }\r\n\r\n        }, true);\r\n\r\n    Object.defineProperties(clazz, classProperties);\r\n    var prototype = inherits.defineProperties(new Prototype(), type);\r\n    clazz.prototype = prototype;\r\n    prototype.constructor = clazz;\r\n\r\n    if (!options.noRegister)\r\n        type.setCtor(clazz);\r\n\r\n    return prototype;\r\n}\r\n\r\n/**\r\n * Defines the reflected type's default values and virtual oneof properties on the specified prototype.\r\n * @memberof inherits\r\n * @param {Prototype} prototype Prototype to define properties upon\r\n * @param {Type} type Reflected message type\r\n * @returns {Prototype} The specified prototype\r\n */\r\ninherits.defineProperties = function defineProperties(prototype, type) {\r\n\r\n    var prototypeProperties = {\r\n\r\n        /**\r\n         * Reference to the reflected type.\r\n         * @name Prototype#$type\r\n         * @type {Type}\r\n         * @readonly\r\n         */\r\n        $type: {\r\n            value: type\r\n        }\r\n    };\r\n\r\n    // Initialize default values\r\n    type.getFieldsArray().forEach(function(field) {\r\n        field.resolve();\r\n        if (!util.isObject(field.defaultValue))\r\n            // objects are mutable (i.e. would modify the array on the prototype, not the instance)\r\n            prototype[field.name] = field.defaultValue;\r\n    });\r\n\r\n    // Define each oneof with a non-enumerable getter and setter for the present field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        prototypeProperties[oneof.resolve().name] = {\r\n            get: function() {\r\n                var keys = oneof.oneof;\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    var field = oneof.parent.fields[keys[i]];\r\n                    if (this[keys[i]] != field.defaultValue) // eslint-disable-line eqeqeq\r\n                        return keys[i];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function(value) {\r\n                var keys = oneof.oneof;\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n                }\r\n            }\r\n        };\r\n    });\r\n\r\n    Object.defineProperties(prototype, prototypeProperties);\r\n    return prototype;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(6);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nvar Enum    = require(5),\r\n    types   = require(20),\r\n    util    = require(21);\r\n\r\n/**\r\n * Constructs a new map field.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nvar Type = require(19),\r\n    util = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean} [requestStream] Whether the request is streamed\r\n * @param {boolean} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    this.resolvedResponseType = resolved;\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nvar Enum    = require(5),\r\n    Type    = require(19),\r\n    Field   = require(6),\r\n    Service = require(17),\r\n    util    = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\nvar nestedTypes = [ Enum, Type, Service, Field, Namespace ],\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(', ');\r\n\r\n/**\r\n * Constructs a new namespace.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nObject.defineProperties(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: NamespacePrototype.getNestedArray = function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson)\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw _TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split('.');\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split('.');\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found instanceof Namespace && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.extend = extend;\r\n\r\nvar Root = require(16),\r\n    util = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: ReflectionObjectPrototype.getRoot = function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join('.');\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Lets the specified constructor extend this class.\r\n * @memberof ReflectionObject\r\n * @param {Function} constructor Extending constructor\r\n * @returns {Object} Prototype\r\n * @this ReflectionObject\r\n */\r\nfunction extend(constructor) {\r\n    var proto = constructor.prototype = Object.create(this.prototype);\r\n    proto.constructor = constructor;\r\n    constructor.extend = extend;\r\n    return proto;\r\n}\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Constructor name, space, full name\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    return this.constructor.name + \" \" + this.getFullName();\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nvar Field = require(6),\r\n    util  = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {Array.<string>}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Array.<Field>}\r\n     * @private\r\n     */\r\n    this._fields = [];\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fields.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fields.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fields.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fields.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fields.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize = require(18),\r\n    Root     = require(16),\r\n    Type     = require(19),\r\n    Field    = require(6),\r\n    MapField = require(8),\r\n    OneOf    = require(12),\r\n    Enum     = require(5),\r\n    Service  = require(17),\r\n    Method   = require(9),\r\n    types    = require(20);\r\n\r\nvar nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(name) {\r\n    return name.substring(0,1)\r\n         + name.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\nvar s_required = \"required\",\r\n    s_repeated = \"repeated\",\r\n    s_optional = \"optional\",\r\n    s_option   = \"option\",\r\n    s_name     = \"name\",\r\n    s_type     = \"type\";\r\nvar s_open     = \"{\",\r\n    s_close    = \"}\",\r\n    s_bopen    = '(',\r\n    s_bclose   = ')',\r\n    s_semi     = \";\",\r\n    s_dq       = '\"',\r\n    s_sq       = \"'\";\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} [root] Root to populate\r\n * @returns {ParserResult} Parser result\r\n */\r\nfunction parse(source, root) {\r\n    /* eslint-disable default-case, callback-return */\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    function illegal(token, name) {\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (line \" + tn.line() + s_bclose);\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== s_dq && token !== s_sq)\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === s_dq || token === s_sq);\r\n        return values.join('');\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case s_sq:\r\n            case s_dq:\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(s_semi);\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === '-') {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, 'number');\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"min\": return 1;\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === '-' && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, s_name);\r\n        ptr = ptr.define(pkg);\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(s_semi);\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        var p3;\r\n        if ([ \"proto2\", p3 = \"proto3\" ].indexOf(syntax) < 0)\r\n            throw illegal(syntax, \"syntax\");\r\n        isProto3 = syntax === p3;\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case s_option:\r\n                parseOption(parent, token);\r\n                skip(s_semi);\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n                    case s_required:\r\n                    case s_optional:\r\n                    case s_repeated:\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, s_optional);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, s_type);\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, s_type);\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, s_type);\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (token === s_option) {\r\n                    parseOption(oneof, token);\r\n                    skip(s_semi);\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, s_optional);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (lower(token) === s_option)\r\n                    parseOption(enm);\r\n                else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, s_name);\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(s_bopen, true);\r\n        var name = next();\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, s_name);\r\n        if (custom) {\r\n            skip(s_bclose);\r\n            name = s_bopen + name + s_bclose;\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (!nameRe.test(token))\r\n                    throw illegal(token, s_name);\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, s_option);\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(s_semi);\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(service, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(s_bopen);\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(s_bclose); skip(\"returns\"); skip(s_bopen);\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(s_bclose);\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(method, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_required:\r\n                    case s_repeated:\r\n                    case s_optional:\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, s_optional, reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case s_option:\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(s_semi);\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    return {\r\n        'package'     : pkg,\r\n        'imports'     : imports,\r\n        'weakImports' : weakImports,\r\n        'syntax'      : syntax,\r\n        'root'        : root\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = Prototype;\r\n\r\n/**\r\n * Options passed to the {@link Prototype|prototype constructor}, modifying its behavior.\r\n * @typedef PrototypeOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Sets only properties that reference a field\r\n */\r\n\r\n/**\r\n * Constructs a new prototype.\r\n * This method should be called from your custom constructors, i.e. `Prototype.call(this, properties)`.\r\n * @classdesc Runtime message prototype ready to be extended by custom classes or generated code.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @param {PrototypeOptions} [options] Prototype options\r\n * @abstract\r\n * @see {@link inherits}\r\n * @see {@link Class}\r\n */\r\nfunction Prototype(properties, options) {\r\n    if (properties) {\r\n        var any    = !(options && options.fieldsOnly),\r\n            fields = this.constructor.$type.fields,\r\n            keys   = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (fields[keys[i]] || any)\r\n                this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a runtime message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {Function} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {Function} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nPrototype.prototype.asJSON = function asJSON(options) {\r\n    var any    = !(options && options.fieldsOnly),\r\n        fields = this.constructor.$type.fields,\r\n        json   = {};\r\n    var keys   = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && value.length) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (any)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util     = require(24),\r\n    ieee754  = require(1);\r\nvar LongBits = util.LongBits,\r\n    ArrayImpl;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Configures the Reader interface according to the environment.\r\n * @memberof Reader\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n    ReaderPrototype._slice = ArrayImpl.prototype.slice || ArrayImpl.prototype.subarray;\r\n\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader.configure = configure;\r\n\r\n/**\r\n * Constructs a new reader using the specified buffer.\r\n * When called as a function, returns an appropriate reader for the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    if (!(this instanceof Reader))\r\n        return util.Buffer && (!buffer || util.Buffer.isBuffer(buffer)) && new BufferReader(buffer) || new Reader(buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\n/**\r\n * Tag read.\r\n * @constructor\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @ignore\r\n */\r\nfunction Tag(id, wireType) {\r\n    this.id = id;\r\n    this.wireType = wireType;\r\n}\r\n\r\n/**\r\n * Reads a tag.\r\n * @returns {{id: number, wireType: number}} Field id and wire type\r\n */\r\nReaderPrototype.tag = function read_tag() {\r\n    if (this.pos >= this.len)\r\n        throw indexOutOfRange(this);\r\n    return new Tag(this.buf[this.pos] >>> 3, this.buf[this.pos++] & 7);\r\n};\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    var value = 0,\r\n        shift = 0,\r\n        octet = 0;\r\n    do {\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        octet = this.buf[this.pos++];\r\n        if (shift < 32)\r\n            value |= (octet & 127) << shift;\r\n        shift += 7;\r\n    } while (octet & 128);\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    return this.int32() >>> 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.int32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    var lo = 0, hi = 0,\r\n        i  = 0, b  = 0;\r\n    if (this.len - this.pos > 9) { // fast route\r\n        for (i = 0; i < 4; ++i) {\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.int32() !== 0;\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    this.pos += 4;\r\n    return this.buf[this.pos - 4]\r\n         | this.buf[this.pos - 3] << 8\r\n         | this.buf[this.pos - 2] << 16\r\n         | this.buf[this.pos - 1] << 24;\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongFixed() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    ,\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    );\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readLongFixed.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readLongFixed.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readLongFixed.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readLongFixed.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = ieee754.read(this.buf, this.pos, false, 23, 4);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = ieee754.read(this.buf, this.pos, false, 52, 8);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    // ref: https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js\r\n    var bytes = this.bytes(),\r\n        len = bytes.length;\r\n    if (len) {\r\n        var out = new Array(len), p = 0, c = 0;\r\n        while (p < len) {\r\n            var c1 = bytes[p++];\r\n            if (c1 < 128)\r\n                out[c++] = c1;\r\n            else if (c1 > 191 && c1 < 224)\r\n                out[c++] = (c1 & 31) << 6 | bytes[p++] & 63;\r\n            else if (c1 > 239 && c1 < 365) {\r\n                var u = ((c1 & 7) << 18 | (bytes[p++] & 63) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63) - 0x10000;\r\n                out[c++] = 0xD800 + (u >> 10);\r\n                out[c++] = 0xDC00 + (u & 1023);\r\n            } else\r\n                out[c++] = (c1 & 15) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63;\r\n        }\r\n        return String.fromCharCode.apply(String, out.slice(0, c));\r\n    }\r\n    return \"\";\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                var tag = this.tag();\r\n                if (tag.wireType === 4)\r\n                    break;\r\n                this.skipType(tag.wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    if (!util.Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.int32() >>> 0,\r\n        start = this.pos,\r\n        end   = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return this.buf.toString(\"utf8\", start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(10);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nvar Field  = require(6),\r\n    util   = require(21),\r\n    common = require(2);\r\n\r\n/**\r\n * Constructs a new root namespace.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.resolvePath;\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {function(?Error, Root=)} [callback] Node-style callback function\r\n * @returns {Promise<Root>|undefined} A promise if `callback` has been omitted\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nRootPrototype.load = function load(filename, callback) {\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                var parsed = require(13)(source, self);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            ++queued;\r\n            setTimeout(function() {\r\n                --queued;\r\n                process(filename, common[filename]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        ++queued;\r\n        util.fetch(filename, function(err, source) {\r\n            --queued;\r\n            if (!callback)\r\n                return; // terminated meanwhile\r\n            if (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        });\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (!queued)\r\n        finish(null);\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.toString = function toString() {\r\n    return this.constructor.name;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(10);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nvar Method = require(9),\r\n    util   = require(21);\r\n\r\n/**\r\n * Constructs a new service.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nObject.defineProperties(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: ServicePrototype.getMethodsArray = function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @function\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {function(?Error, Uint8Array=)} callback Node-style callback called with the error, if any, and the response data\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpc RPC implementation ({@link RPCImpl|see})\r\n * @param {boolean} [requestDelimited=false] Whether request data is length delimited\r\n * @param {boolean} [responseDelimited=false] Whether response data is length delimited\r\n * @returns {Object} Runtime service\r\n */\r\nServicePrototype.create = function create(rpc, requestDelimited, responseDelimited) {\r\n    var rpcService = {};\r\n    Object.defineProperty(rpcService, \"$rpc\", {\r\n        value: rpc\r\n    });\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[method.name] = function(request, callback) {\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited && method.resolvedRequestType.encodeDelimited(request) || method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === 'function' && setImmediate || setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpc(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited && method.resolvedResponseType.decodeDelimited(responseData) || method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    callback(err2);\r\n                    return;\r\n                }\r\n                callback(null, response);\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n\r\nvar s_nl = \"\\n\",\r\n    s_sl = '/',\r\n    s_as = '*';\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable default-case, callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === '\"' ? stringDoubleRe : stringSingleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === s_nl)\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === s_sl) {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === s_sl) { // Line\r\n                    while (charAt(++offset) !== s_nl)\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === s_as) { /* Block */\r\n                    do {\r\n                        if (curr === s_nl)\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== s_as || curr !== s_sl);\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return s_sl;\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === '\"' || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable default-case, callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(10);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nvar Enum      = require(5),\r\n    OneOf     = require(12),\r\n    Field     = require(6),\r\n    Service   = require(17),\r\n    Prototype = require(14),\r\n    Reader    = require(15),\r\n    Writer    = require(26),\r\n    encoder   = require(4),\r\n    decoder   = require(3),\r\n    verifier  = require(25),\r\n    inherits  = require(7),\r\n    util      = require(21);\r\n\r\nvar codegen   = util.codegen;\r\n\r\n/**\r\n * Constructs a new message type.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {?Function}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: TypePrototype.getFieldsById = function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: TypePrototype.getFieldsArray = function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: TypePrototype.getOneofsArray = function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Prototype}\r\n     */\r\n    ctor: {\r\n        get: TypePrototype.getCtor = function getCtor() {\r\n            if (this._ctor)\r\n                return this._ctor;\r\n            var ctor;\r\n            if (codegen.supported)\r\n                ctor = codegen(\"p\")(\"P.call(this,p)\").eof(this.getFullName() + \"$ctor\", {\r\n                    P: Prototype\r\n                });\r\n            else\r\n                ctor = function GenericMessage(properties) {\r\n                    Prototype.call(this, properties);\r\n                };\r\n            ctor.prototype = inherits(ctor, this);\r\n            this._ctor = ctor;\r\n            return ctor;\r\n        },\r\n        set: TypePrototype.setCtor = function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Prototype))\r\n                throw util._TypeError(\"ctor\", \"a constructor inheriting from Prototype\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object} [properties] Properties to set\r\n * @param {?Function} [ctor] Constructor to use.\r\n * Defaults to use the internal constuctor.\r\n * @returns {Prototype} Message instance\r\n */\r\nTypePrototype.create = function create(properties, ctor) {\r\n    if (typeof properties === 'function') {\r\n        ctor = properties;\r\n        properties = undefined;\r\n    } else if (properties /* already */ instanceof Prototype)\r\n        return properties;\r\n    if (ctor) {\r\n        if (!(ctor.prototype instanceof Prototype))\r\n            throw util._TypeError(\"ctor\", \"a constructor inheriting from Prototype\");\r\n    } else\r\n        ctor = this.getCtor();\r\n    return new ctor(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Prototype|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode(message, writer) {\r\n    return (this.encode = codegen.supported\r\n        ? encoder.generate(this).eof(this.getFullName() + \"$encode\", {\r\n              Writer : Writer,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : encoder.fallback\r\n    ).call(this, message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Prototype|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Prototype} Decoded message\r\n */\r\nTypePrototype.decode = function decode(readerOrBuffer, length) {\r\n    return (this.decode = codegen.supported\r\n        ? decoder.generate(this).eof(this.getFullName() + \"$decode\", {\r\n              Reader : Reader,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : decoder.fallback\r\n    ).call(this, readerOrBuffer, length);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Prototype} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that enum values are valid and that any required fields are present.\r\n * @param {Prototype|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify(message) {\r\n    return (this.verify = codegen.supported\r\n        ? verifier.generate(this).eof(this.getFullName() + \"$verify\", {\r\n              types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; })\r\n          })\r\n        : verifier.fallback\r\n    ).call(this, message);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\nvar emptyArray = [];\r\nif (Object.freeze)\r\n    Object.freeze(emptyArray);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ emptyArray\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Utility functions.\r\n * @namespace\r\n */\r\nvar util = exports;\r\n\r\nutil.codegen  = require(22);\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @memberof util\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n}\r\n\r\nutil.isString = isString;\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === 'object');\r\n};\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=a string] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Returns a promise from a node-style function.\r\n * @memberof util\r\n * @param {function(Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var args = [];\r\n    for (var i = 2; i < arguments.length; ++i)\r\n        args.push(arguments[i]);\r\n    return new Promise(function(resolve, reject) {\r\n        fn.apply(ctx, args.concat(\r\n            function(err/*, varargs */) {\r\n                if (err) reject(err);\r\n                else resolve.apply(null, Array.prototype.slice.call(arguments, 1));\r\n            }\r\n        ));\r\n    });\r\n}\r\n\r\nutil.asPromise = asPromise;\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {function(?Error, string=)} [callback] Node-style callback\r\n * @returns {Promise<string>|undefined} Promise if callback has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, util, path);\r\n    var fs; try { fs = require(\"fs\"); } catch (e) {} // eslint-disable-line no-empty\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", callback);\r\n    var xhr = new XMLHttpRequest();\r\n    function onload() {\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n        if (isString(xhr.responseText))\r\n            return callback(null, xhr.responseText);\r\n        return callback(Error(\"request failed\"));\r\n    }\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4)\r\n            onload();\r\n    };\r\n    xhr.open(\"GET\", path, true);\r\n    xhr.send();\r\n    return undefined;\r\n}\r\n\r\nutil.fetch = fetch;\r\n\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @memberof util\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\nfunction isAbsolutePath(path) {\r\n    return /^(?:\\/|[a-zA-Z0-9]+:)/.test(path);\r\n}\r\n\r\nutil.isAbsolutePath = isAbsolutePath;\r\n\r\n/**\r\n * Normalizes the specified path.\r\n * @memberof util\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\nfunction normalizePath(path) {\r\n    path = path.replace(/\\\\/g, '/')\r\n               .replace(/\\/{2,}/g, '/');\r\n    var parts = path.split('/');\r\n    var abs = isAbsolutePath(path);\r\n    var prefix = \"\";\r\n    if (abs)\r\n        prefix = parts.shift() + '/';\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === '..') {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (abs)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === '.')\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join('/');\r\n}\r\n\r\nutil.normalizePath = normalizePath;\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path that was used to fetch the origin file\r\n * @param {string} importPath Import path specified in the origin file\r\n * @param {boolean} [alreadyNormalized] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the imported file\r\n */\r\nutil.resolvePath = function resolvePath(originPath, importPath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        importPath = normalizePath(importPath);\r\n    if (isAbsolutePath(importPath))\r\n        return importPath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalizePath(originPath);\r\n    originPath = originPath.replace(/(?:\\/|^)[^/]+$/, '');\r\n    return originPath.length ? normalizePath(originPath + '/' + importPath) : importPath;\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n// Reserved words, ref: https://msdn.microsoft.com/en-us/library/ttyab5c8.aspx\r\n// var reserved = \"break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,false,finally,for,function,if,import,in,instanceof,new,null,protected,return,super,switch,this,throw,true,try,typeof,var,while,with,abstract,boolean,byte,char,decimal,double,enum,final,float,get,implements,int,interface,internal,long,package,private,protected,public,sbyte,set,short,static,uint,ulong,ushort,void,assert,ensure,event,goto,invariant,namespace,native,require,synchronized,throws,transient,use,volatile\".split(',');\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    // NOTE: While dot notation looks cleaner it doesn't seem to have a significant impact on performance.\r\n    // Hence, we can safe the extra bytes from providing the reserved keywords above for pre-ES5 envs.\r\n    return /* /^[a-z_$][a-z0-9_$]*$/i.test(prop) && !reserved.indexOf(prop) ? \".\" + prop : */ \"['\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"']\";\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    return new (util.Buffer || typeof Uint8Array !== 'undefined' && Uint8Array || Array)(size || 0);\r\n};\r\n\r\n// Merge in runtime utility\r\nutil.merge(util, require(24));\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * Programmatically generates a function.\r\n * @memberof util\r\n * @param {...string} params Function parameter names\r\n * @returns {util.CodegenAppender} Printf-like appender function\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen(/* varargs */) {\r\n    var args   = Array.prototype.slice.call(arguments),\r\n        src    = ['\\t\"use strict\"'];\r\n\r\n    var indent = 1,\r\n        inCase = false;\r\n\r\n    /**\r\n     * Appends a printf-like formatted line to the generated source. Returned when calling {@link util.codegen}.\r\n     * @typedef CodegenAppender\r\n     * @memberof util\r\n     * @type {function}\r\n     * @param {string} format A printf-like format string\r\n     * @param {...*} params Format replacements\r\n     * @returns {util.CodegenAppender} Itself\r\n     * @property {util.CodegenStringer} str\r\n     * @property {util.CodegenEnder} eof\r\n     * @see {@link https://nodejs.org/docs/latest/api/util.html#util_util_format_format_args}\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var fmt = [];\r\n        for (var i = 0; i < arguments.length; ++i)\r\n            fmt[i] = arguments[i];\r\n        var line = gen.fmt.apply(null, fmt);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (var index = 0; index < level; ++index)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    gen.fmt = function fmt(format) {\r\n        var params = Array.prototype.slice.call(arguments, 1),\r\n            index  = 0;\r\n        return format.replace(/%([djs])/g, function($0, $1) {\r\n            var param = params[index++];\r\n            return $1 === \"j\"\r\n                ? JSON.stringify(param)\r\n                : String(param);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @typedef CodegenStringer\r\n     * @memberof util\r\n     * @type {function}\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     */\r\n    /**/\r\n    gen.str = function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + args.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    };\r\n\r\n    /**\r\n     * Ends generation and builds the function.\r\n     * @typedef CodegenEnder\r\n     * @memberof util\r\n     * @type {function}\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object|Array.<string>} [scope] Function scope\r\n     * @returns {function} A function to apply the scope manually when `scope` is an array, otherwise the generated function with scope applied\r\n     */\r\n    /**/\r\n    gen.eof = function eof(name, scope) {\r\n        if (name && typeof name === 'object') {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var code = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + code.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        code = \"return \" + code;\r\n        var params, values = [];\r\n        if (Array.isArray(scope)) {\r\n            params = scope.slice();\r\n        } else if (scope) {\r\n            params = Object.keys(scope);\r\n            values = params.map(function(key) { return scope[key]; });\r\n        } else\r\n            params = [];\r\n        var fn = Function.apply(null, params.concat(code)); // eslint-disable-line no-new-func\r\n        return values ? fn.apply(null, values) : fn();\r\n    };\r\n\r\n    return gen;\r\n}\r\n\r\ncodegen.supported = false;\r\ntry { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\n\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(21);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nLongBits.from = function from(value) {\r\n    switch (typeof value) { // eslint-disable-line default-case\r\n        case 'number':\r\n            return LongBits.fromNumber(value);\r\n        case 'string':\r\n            value = util.Long.fromString(value); // throws without a long lib\r\n    }\r\n    return (value.low || value.high) && new LongBits(value.low >>> 0, value.high >>> 0) || zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return new util.Long(this.lo, this.hi, unsigned);\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nvar LongBits = util.LongBits = require(\"./longbits\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nvar isNode = util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {?Function}\r\n */\r\nutil.Buffer = null;\r\n\r\nif (isNode)\r\n    try { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {?Function}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || null;\r\n\r\nif (!util.Long && isNode)\r\n    try { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : '\\0\\0\\0\\0\\0\\0\\0\\0';\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === 'number'\r\n         ? typeof b === 'number'\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === 'number'\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Runtime message verifier using code generation on top of reflection.\r\n * @namespace\r\n */\r\nvar verifier = exports;\r\n\r\nvar Enum = require(5),\r\n    Type = require(19),\r\n    util = require(21);\r\n\r\n/**\r\n * Verifies a runtime message of `this` message type.\r\n * @param {Prototype|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n * @this {Type}\r\n */\r\nverifier.fallback = function fallback(message) {\r\n    var fields = this.getFieldsArray(),\r\n        i = 0;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        if (value === undefined) {\r\n            if (field.required)\r\n                return \"missing required field \" + field.name + \" in \" + this.getFullName();\r\n\r\n        } else if (field.resolvedType instanceof Enum && field.resolvedType.getValuesById()[value] === undefined) {\r\n            return \"invalid enum value \" + field.name + \" = \" + value + \" in \" + this.getFullName();\r\n\r\n        } else if (field.resolvedType instanceof Type) {\r\n            if (!value && field.required)\r\n                return \"missing required field \" + field.name + \" in \" + this.getFullName();\r\n            var reason;\r\n            if ((reason = field.resolvedType.verify(value)) !== null)\r\n                return reason;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {util.CodegenAppender} Unscoped codegen instance\r\n */\r\nverifier.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n    var hasReasonVar = false;\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.required) { gen\r\n\r\n            (\"if(m%s===undefined)\", prop)\r\n                (\"return 'missing required field %s in %s'\", field.name, mtype.getFullName());\r\n\r\n        } else if (field.resolvedType instanceof Enum) {\r\n            var values = util.toArray(field.resolvedType.values); gen\r\n\r\n            (\"switch(m%s){\", prop)\r\n                (\"default:\")\r\n                    (\"return 'invalid enum value %s = '+m%s+' in %s'\", field.name, prop, mtype.getFullName());\r\n\r\n            for (var j = 0, l = values.length; j < l; ++j) gen\r\n                (\"case %d:\", values[j]); gen\r\n            (\"}\");\r\n\r\n        } else if (field.resolvedType instanceof Type) {\r\n            if (field.required) gen\r\n\r\n            (\"if(!m%s)\", prop)\r\n                (\"return 'missing required field %s in %s'\", field.name, mtype.getFullName());\r\n\r\n            if (!hasReasonVar) { gen(\"var r\"); hasReasonVar = true; } gen\r\n\r\n            (\"if((r=types[%d].verify(m%s))!==null)\", i, prop)\r\n                (\"return r\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util     = require(24),\r\n    ieee754  = require(1);\r\nvar LongBits = util.LongBits,\r\n    ArrayImpl;\r\n\r\n/**\r\n * Configures the writer interface according to the environment.\r\n * @memberof Writer\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n    writeBytes = ArrayImpl.prototype.set && writeBytes_set || writeBytes_for;\r\n}\r\n\r\nWriter.configure = configure;\r\n\r\n/**\r\n * Constructs a new writer operation.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {*} val Value to write\r\n * @param {number} len Value byte length\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, val, len) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {?Writer.Op}\r\n     */\r\n    this.next = null;\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n}\r\n\r\nWriter.State = State;\r\n\r\n/**\r\n * Constructs a new writer.\r\n * When called as a function, returns an appropriate writer for the current environment.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @exports Writer\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n    if (!(this instanceof Writer))\r\n        return util.Buffer && new BufferWriter() || new Writer();\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * State stack.\r\n     * @type {Object[]}\r\n     */\r\n    this.stack = [];\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    var op = new Op(fn, val, len);\r\n    this.tail.next = op;\r\n    this.tail = op;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(buf, pos, val) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\n/**\r\n * Writes a tag.\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.tag = function write_tag(id, wireType) {\r\n    return this.push(writeByte, 1, id << 3 | wireType & 7);\r\n};\r\n\r\nfunction writeVarint32(buf, pos, val) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value >>>= 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32(value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeVarint64(buf, pos, val) {\r\n    // tends to deoptimize. stays optimized when using bits directly.\r\n    while (val.hi || val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(buf, pos, val) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24  & 255;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.hi).push(writeFixed32, 4, bits.lo);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.hi).push(writeFixed32, 4, bits.lo);\r\n};\r\n\r\nfunction writeFloat(buf, pos, val) {\r\n    ieee754.write(buf, val, pos, false, 23, 4);\r\n}\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nfunction writeDouble(buf, pos, val) {\r\n    ieee754.write(buf, val, pos, false, 52, 8);\r\n}\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes;\r\n\r\nfunction writeBytes_set(buf, pos, val) {\r\n    buf.set(val, pos);\r\n}\r\n\r\nfunction writeBytes_for(buf, pos, val) {\r\n    for (var i = 0; i < val.length; ++i)\r\n        buf[pos + i] = val[i];\r\n}\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nfunction writeString(buf, pos, val) {\r\n    for (var i = 0; i < val.length; ++i) {\r\n        var c1 = val.charCodeAt(i), c2;\r\n        if (c1 < 128) {\r\n            buf[pos++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buf[pos++] = c1 >> 6 | 192;\r\n            buf[pos++] = c1 & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && i + 1 < val.length && ((c2 = val.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buf[pos++] = c1 >> 18      | 240;\r\n            buf[pos++] = c1 >> 12 & 63 | 128;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        } else {\r\n            buf[pos++] = c1 >> 12      | 224;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n}\r\n\r\nfunction byteLength(val) {\r\n    var strlen = val.length >>> 0;\r\n    if (strlen) {\r\n        var len = 0;\r\n        for (var i = 0, c1; i < strlen; ++i) {\r\n            c1 = val.charCodeAt(i);\r\n            if (c1 < 128)\r\n                len += 1;\r\n            else if (c1 < 2048)\r\n                len += 2;\r\n            else if ((c1 & 0xFC00) === 0xD800 && i + 1 < strlen && (val.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n                ++i;\r\n                len += 4;\r\n            } else\r\n                len += 3;\r\n        }\r\n        return len;\r\n    }\r\n    return 0;\r\n}\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeString, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#ldelim}, {@link Writer#reset} or {@link Writer#finish} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.stack.push(new State(this));\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.stack.length) {\r\n        var state = this.stack.pop();\r\n        this.head = state.head;\r\n        this.tail = state.tail;\r\n        this.len  = state.len;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (id !== undefined)\r\n        this.tag(id, 2);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of write operations and frees all resources.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = new ArrayImpl(this.len),\r\n        pos  = 0;\r\n    this.reset();\r\n    while (head) {\r\n        head.fn(buf, pos, head.val);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(buf, pos, val) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(buf, pos, val) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(buf, pos, val) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nfunction writeStringBuffer(buf, pos, val) {\r\n    buf.write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.finish = function finish_buffer() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = util.Buffer.allocUnsafe && util.Buffer.allocUnsafe(this.len) || new util.Buffer(this.len),\r\n        pos  = 0;\r\n    this.reset();\r\n    while (head) {\r\n        head.fn(buf, pos, head.val);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n\r\nconfigure();\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\nvar util = require(\"./util\");\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @param {function(?Error, Root=)} [callback] Callback function\r\n * @returns {Promise<Root>|Object} A promise if callback has been omitted, otherwise the protobuf namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === 'function') {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback) || protobuf;\r\n}\r\n\r\nprotobuf.load = load;\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = protobuf.Writer.BufferWriter;\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = protobuf.Reader.BufferReader;\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Prototype        = require(\"./prototype\");\r\nprotobuf.inherits         = require(\"./inherits\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.util             = util;\r\n\r\n// Be nice to AMD\r\n/* eslint-disable no-undef */\r\nif (typeof define === 'function' && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.Reader.configure();\r\n            protobuf.Writer.configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n/* eslint-enable no-undef */\r\n"],"sourceRoot":"."}