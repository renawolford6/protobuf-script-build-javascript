{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","src/codegen.js","src/codegen/decode.js","src/codegen/encode.js","src/codegen/verify.js","src/common.js","src/enum.js","src/field.js","src/inherits.js","src/mapfield.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/prototype.js","src/reader.js","src/root.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/pool.js","src/util/runtime.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","codegen","gen","line","util","sprintf","apply","arguments","level","indent","src","prev","blockOpenRe","test","branchRe","casingRe","inCase","breakRe","blockCloseRe","index","push","str","name","replace","args","join","eof","scope","undefined","source","verbose","console","keys","Object","Function","concat","map","key","Array","prototype","slice","supported","encode","decode","verify","Enum","Reader","types","fallback","reader","fields","this","getFieldsById","create","limit","len","pos","message","getCtor","tag","field","id","resolve","type","resolvedType","keyType","resolvedKeyType","uint32","ks","vs","basic","longToHash","repeated","values","packed","wireType","plimit","skipType","generate","mtype","getFieldsArray","prop","safeProp","Writer","writer","fi","fork","mapKey","ldelim","required","long","longNeq","defaultValue","reset","keyWireType","Type","getFullName","getValuesById","reason","hasReasonVar","toArray","j","common","json","nested","google","protobuf","Any","type_url","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","Value","oneofs","kind","oneof","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","NULL_VALUE","ListValue","rule","options","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","extend","_TypeError","props","valuesById","get","forEach","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","isObject","toString","toLowerCase","optional","partOf","Long","extensionField","declaringField","_packed","FieldPrototype","MapField","isPacked","getOption","setOption","ifNotSet","role","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","String","Number","toNumber","charAt","inherits","clazz","classProperties","$type","noStatics","merge","encodeDelimited","decodeDelimited","defineProperties","Prototype","constructor","noRegister","setCtor","prototypeProperties","freeze","getOneofsArray","indexOf","set","MapFieldPrototype","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","Namespace","_nestedArray","namespace","arrayToJSON","array","obj","NamespacePrototype","Service","nestedTypes","nestedError","ctor","nestedArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","object","setOptions","onAdd","onRemove","define","path","split","isArray","ptr","part","shift","resolveAll","parentAlreadyChecked","getRoot","found","proto","Root","ReflectionObjectPrototype","root","fullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","substring","toUpperCase","_fields","addFieldsToParent","OneOfPrototype","splice","lower","token","camelCase","$0","$1","parse","illegal","tn","s_bclose","readString","next","s_dq","s_sq","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRange","start","parseId","end","s_semi","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","s_name","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","p3","isProto3","parseCommon","s_option","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","s_open","s_close","parseMapField","s_required","s_optional","s_repeated","parseField","parseOneOf","extensions","reserved","s_type","parseInlineOptions","valueType","parseEnumField","custom","s_bopen","fqTypeRefRe","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","package","properties","fieldsOnly","asJSON","any","k","indexOutOfRange","writeLength","RangeError","configure","ReaderPrototype","int64","read_int64_long","uint64","read_uint64_long","sint64","read_sint64_long","fixed64","read_fixed64_long","sfixed64","read_sfixed64_long","read_int64_number","read_uint64_number","read_sint64_number","read_fixed64_number","read_sfixed64_number","buf","Tag","readLongVarint","lo","hi","b","LongBits","toLong","zzDecode","readLongFixed","BufferReader","initBufferReader","readStringBuffer_utf8Slice","utf8Slice","readStringBuffer_toString","ieee754","ArrayImpl","Uint8Array","Buffer","isBuffer","_slice","subarray","int32","octet","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","float","readDouble","Float64Array","f64","double","bytes","string","out","p","c1","fromCharCode","finish","remain","BufferReaderPrototype","readStringBuffer","readFloatLE","readDoubleLE","deferred","files","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","filename","callback","err","cb","process","JSON","parsed","self","fetch","queued","weak","idx","altname","setTimeout","asPromise","newDeferred","_methodsArray","ServicePrototype","methodsArray","methodName","inherited","getMethodsArray","rpc","requestDelimited","responseDelimited","rpcService","lcName","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringDoubleRe","stringSingleRe","lastIndex","match","exec","stack","repeat","curr","s_nl","s_sl","s_as","delimRe","delim","expected","actual","equals","_fieldsById","_fieldsArray","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","P","fieldName","oneOfName","fld","readerOrBuffer","bake","fn","ctx","Promise","reject","onload","xhr","status","responseText","fs","readFile","XMLHttpRequest","onreadystatechange","readyState","open","send","isAbsolutePath","normalizePath","parts","prefix","isFinite","description","TypeError","originPath","importPath","alreadyNormalized","dst","newBuffer","size","allocUnsafe","format","params","param","stringify","LongBitsPrototype","zero","zzEncode","fromNumber","from","fromString","low","high","unsigned","charCodeAt","fromHash","hash","toHash","mask","part0","part1","part2","pool","alloc","SIZE","MAX","slab","isNode","global","versions","node","dcodeIO","longFromHash","bits","fromBits","target","descriptors","descriptor","ie8","ucKey","defineProperty","Op","val","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","writeString","c2","byteLength","strlen","BufferWriter","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","WriterPrototype","op","writeFloat","writeDouble","writeBytes","BufferWriterPrototype","writeStringBuffer","utf8Write","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar util = require(23);\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {CodegenInstance} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var args   = Array.prototype.slice.call(arguments),\r\n        src    = ['\\t\"use strict\"'],\r\n        indent = 1,\r\n        inCase = false;\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a {@link util.sprintf|sprintf}-like appender function.\r\n     * @typedef CodegenInstance\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {CodegenInstance} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var line = util.sprintf.apply(null, arguments);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (var index = 0; index < level; ++index)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + args.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === 'object') {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n\r\ncodegen.encode = require(4);\r\ncodegen.decode = require(3);\r\ncodegen.verify = require(5);\r\n","\"use strict\";\r\n\r\n/**\r\n * Wire format decoder using code generation on top of reflection that also provides a fallback.\r\n * @exports codegen.decode\r\n * @namespace\r\n */\r\nvar decode = exports;\r\n\r\nvar Enum    = require(7),\r\n    Reader  = require(17),\r\n    types   = require(22),\r\n    util    = require(23),\r\n    codegen = require(2);\r\n\r\n/**\r\n * Decodes a message of `this` message's type.\r\n * @param {Reader} reader Reader to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Prototype} Populated runtime message\r\n * @this Type\r\n */\r\ndecode.fallback = function decode_fallback(reader, length) {\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.getFieldsById(),\r\n        reader  = reader instanceof Reader ? reader : Reader.create(reader),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new (this.getCtor())();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.tag(),\r\n            field    = fields[tag.id].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                    length  = reader.uint32();\r\n                var map = message[field.name] = {};\r\n                if (length) {\r\n                    length += reader.pos;\r\n                    var ks = [], vs = [];\r\n                    while (reader.pos < length) {\r\n                        if (reader.tag().id === 1)\r\n                            ks[ks.length] = reader[keyType]();\r\n                        else if (types.basic[type] !== undefined)\r\n                            vs[vs.length] = reader[type]();\r\n                        else\r\n                            vs[vs.length] = field.resolvedType.decode(reader, reader.uint32());\r\n                    }\r\n                    for (var i = 0; i < ks.length; ++i)\r\n                        map[typeof ks[i] === 'object' ? util.longToHash(ks[i]) : ks[i]] = vs[i];\r\n                }\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] && message[field.name].length ? message[field.name] : message[field.name] = [];\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && tag.wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values[values.length] = reader[type]();\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] !== undefined)\r\n                    values[values.length] = reader[type]();\r\n                else\r\n                    values[values.length] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] !== undefined)\r\n                message[field.name] = reader[type]();\r\n              else\r\n                message[field.name] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(tag.wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type, with an identical signature to {@link codegen.decode.fallback}.\r\n * @param {Type} mtype Message type\r\n * @returns {function(string, ...*):string} {@link codegen} instance\r\n */\r\ndecode.generate = function decode_generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.tag()\")\r\n        (\"switch(t.id){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"var n=r.uint32(),o={}\")\r\n                (\"if(n){\")\r\n                    (\"n+=r.pos\")\r\n                    (\"var k=[],v=[]\")\r\n                    (\"while(r.pos<n){\")\r\n                        (\"if(r.tag().id===1)\")\r\n                            (\"k[k.length]=r.%s()\", keyType);\r\n\r\n                        if (types.basic[type] !== undefined) gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=r.%s()\", type);\r\n\r\n                        else gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=types[%d].decode(r,r.uint32())\", i, i);\r\n                    gen\r\n                    (\"}\")\r\n                    (\"for(var i=0;i<k.length;++i)\")\r\n                        (\"o[typeof(k[i])==='object'?util.longToHash(k[i]):k[i]]=v[i]\")\r\n                (\"}\")\r\n                (\"m%s=o\", prop);\r\n\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s&&m%s.length?m%s:m%s=[]\", prop, prop, prop, prop);\r\n\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n                (\"if(t.wireType===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s[m%s.length]=r.%s()\", prop, prop, type)\r\n                (\"}else\");\r\n            }\r\n\r\n            if (types.basic[type] !== undefined) gen\r\n\r\n                    (\"m%s[m%s.length]=r.%s()\", prop, prop, type);\r\n\r\n            else gen\r\n\r\n                    (\"m%s[m%s.length]=types[%d].decode(r,r.uint32())\", prop, prop, i, i);\r\n\r\n        } else if (types.basic[type] !== undefined) { gen\r\n\r\n                (\"m%s=r.%s()\", prop, type);\r\n\r\n        } else { gen\r\n\r\n                (\"m%s=types[%d].decode(r,r.uint32())\", prop, i, i);\r\n\r\n        } gen\r\n                (\"break\");\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t.wireType)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Wire format encoder using code generation on top of reflection that also provides a fallback.\r\n * @exports codegen.encode\r\n * @namespace\r\n */\r\nvar encode = exports;\r\n\r\nvar Enum    = require(7),\r\n    Writer  = require(27),\r\n    types   = require(22),\r\n    util    = require(23),\r\n    codegen = require(2);\r\n\r\n/**\r\n * Encodes a message of `this` message's type.\r\n * @param {Prototype|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n * @this Type\r\n */\r\nencode.fallback = function encode_fallback(message, writer) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer.create();\r\n    var fields = this.getFieldsArray(), fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            var value, keys;\r\n            if ((value = message[field.name]) && (keys = Object.keys(value)).length) {\r\n                writer.fork();\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    writer.tag(1, types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType !== undefined)\r\n                        writer.tag(2, wireType)[type](value[keys[i]]);\r\n                    else\r\n                        field.resolvedType.encode(value[keys[i]], writer.tag(2,2).fork()).ldelim();\r\n                }\r\n                writer.ldelim(field.id);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    writer.fork();\r\n                    var i = 0;\r\n                    while (i < values.length)\r\n                        writer[type](values[i++]);\r\n                    writer.ldelim(field.id);\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType !== undefined)\r\n                        while (i < values.length)\r\n                            writer.tag(field.id, wireType)[type](values[i++]);\r\n                    else\r\n                        while (i < values.length)\r\n                            field.resolvedType.encode(values[i++], writer.tag(field.id,2).fork()).ldelim();\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name];\r\n            if (field.required || value !== undefined && field.long ? util.longNeq(value, field.defaultValue) : value !== field.defaultValue) {\r\n                if (wireType !== undefined)\r\n                    writer.tag(field.id, wireType)[type](value);\r\n                else {\r\n                    field.resolvedType.encode(value, writer.fork());\r\n                    if (writer.len || field.required)\r\n                        writer.ldelim(field.id);\r\n                    else\r\n                        writer.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type, with an identical signature to {@link codegen.encode.fallback}.\r\n * @param {Type} mtype Message type\r\n * @returns {function(string, ...*):string} {@link codegen} instance\r\n */\r\nencode.generate = function encode_generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = util.safeProp(field.name);\r\n        \r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType     = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                keyWireType = types.mapKey[keyType];\r\n            gen\r\n\r\n    (\"if(m%s){\", prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0,ks=Object.keys(m%s);i<ks.length;++i){\", prop)\r\n            (\"w.tag(1,%d).%s(ks[i])\", keyWireType, keyType);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n            (\"w.tag(2,%d).%s(m%s[ks[i]])\", wireType, type, prop);\r\n\r\n            else gen\r\n            \r\n            (\"types[%d].encode(m%s[ks[i]],w.tag(2,2).fork()).ldelim()\", i, prop);\r\n\r\n            gen\r\n        (\"}\")\r\n        (\"w.len&&w.ldelim(%d)||w.reset()\", field.id)\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim(%d)\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.tag(%d,%d).%s(m%s[i])\", field.id, wireType, type, prop);\r\n                else gen\r\n            (\"types[%d].encode(m%s[i],w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(m%s!==undefined&&util.longNeq(m%s,%j))\", prop, prop, field.defaultValue);\r\n                else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n        (\"w.tag(%d,%d).%s(m%s)\", field.id, wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n        (\"types[%d].encode(m%s,w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n        \r\n            else gen\r\n\r\n        (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", i, prop, field.id);\r\n    \r\n        }\r\n    }\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Runtime message verifier using code generation on top of reflection that also provides a fallback.\r\n * @exports codegen.verify\r\n * @namespace\r\n */\r\nvar verify = exports;\r\n\r\nvar Enum    = require(7),\r\n    Type    = require(21),\r\n    util    = require(23),\r\n    codegen = require(2);\r\n\r\n/**\r\n * Verifies a runtime message of `this` message type.\r\n * @param {Prototype|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n * @this {Type}\r\n */\r\nverify.fallback = function verify_fallback(message) {\r\n    var fields = this.getFieldsArray(),\r\n        i = 0;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        if (value === undefined) {\r\n            if (field.required)\r\n                return \"missing required field \" + field.name + \" in \" + this.getFullName();\r\n\r\n        } else if (field.resolvedType instanceof Enum && field.resolvedType.getValuesById()[value] === undefined) {\r\n            return \"invalid enum value \" + field.name + \" = \" + value + \" in \" + this.getFullName();\r\n\r\n        } else if (field.resolvedType instanceof Type) {\r\n            if (!value && field.required)\r\n                return \"missing required field \" + field.name + \" in \" + this.getFullName();\r\n            var reason;\r\n            if ((reason = field.resolvedType.verify(value)) !== null)\r\n                return reason;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type, with an identical signature to {@link codegen.verify.fallback}.\r\n * @param {Type} mtype Message type\r\n * @returns {function(string, ...*):string} {@link codegen} instance\r\n */\r\nverify.generate = function verify_generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = codegen(\"m\");\r\n    var hasReasonVar = false;\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.required) { gen\r\n\r\n            (\"if(m%s===undefined)\", prop)\r\n                (\"return 'missing required field %s in %s'\", field.name, mtype.getFullName());\r\n\r\n        } else if (field.resolvedType instanceof Enum) {\r\n            var values = util.toArray(field.resolvedType.values); gen\r\n\r\n            (\"switch(m%s){\", prop)\r\n                (\"default:\")\r\n                    (\"return 'invalid enum value %s = '+m%s+' in %s'\", field.name, prop, mtype.getFullName());\r\n\r\n            for (var j = 0, l = values.length; j < l; ++j) gen\r\n                (\"case %d:\", values[j]); gen\r\n            (\"}\");\r\n\r\n        } else if (field.resolvedType instanceof Type) {\r\n            if (field.required) gen\r\n\r\n            (\"if(!m%s)\", prop)\r\n                (\"return 'missing required field %s in %s'\", field.name, mtype.getFullName());\r\n\r\n            if (!hasReasonVar) { gen(\"var r\"); hasReasonVar = true; } gen\r\n\r\n            (\"if((r=types[%d].verify(m%s))!==null)\", i, prop)\r\n                (\"return r\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(13);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nvar util = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error('duplicate name \"' + name + '\" in ' + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error('\"' + name + '\" is not a name of ' + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(13);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nvar Type      = require(21),\r\n    Enum      = require(7),\r\n    MapField  = require(10),\r\n    types     = require(22),\r\n    util      = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string} [rule=optional] Field rule\r\n * @param {string} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== 'optional' ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined)\r\n        return MapField.fromJSON(name, json);\r\n    return new Field(name, json.id, json.type, json.role, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options['default']) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n    \r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Prototype#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (this.resolvedType instanceof Enum && options['enum'] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        else if (this.long && options.long)\r\n            return options.long === Number\r\n                ? typeof value === 'number'\r\n                ? value\r\n                : util.Long.fromValue(value).toNumber()\r\n                : util.Long.fromValue(value, this.type.charAt(0) === 'u').toString();\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = inherits;\r\n\r\nvar Prototype = require(16),\r\n    Type      = require(21),\r\n    util      = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Options passed to {@link inherits}, modifying its behavior.\r\n * @typedef InheritanceOptions\r\n * @type {Object}\r\n * @property {boolean} [noStatics=false] Skips adding the default static methods on top of the constructor\r\n * @property {boolean} [noRegister=false] Skips registering the constructor with the reflected type\r\n */\r\n\r\n/**\r\n * Inherits a custom class from the message prototype of the specified message type.\r\n * @param {*} clazz Inheriting class constructor\r\n * @param {Type} type Inherited message type\r\n * @param {InheritanceOptions} [options] Inheritance options\r\n * @returns {Prototype} Created prototype\r\n */\r\nfunction inherits(clazz, type, options) {\r\n    if (typeof clazz !== 'function')\r\n        throw _TypeError(\"clazz\", \"a function\");\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    if (!options)\r\n        options = {};\r\n\r\n    /**\r\n     * This is not an actual type but stands as a reference for any constructor of a custom message class that you pass to the library.\r\n     * @name Class\r\n     * @extends Prototype\r\n     * @constructor\r\n     * @param {Object.<string,*>} [properties] Properties to set on the message\r\n     * @see {@link inherits}\r\n     */\r\n\r\n    var classProperties = {\r\n\r\n        /**\r\n         * Reference to the reflected type.\r\n         * @name Class.$type\r\n         * @type {Type}\r\n         * @readonly\r\n         */\r\n        $type: {\r\n            value: type\r\n        }\r\n    };\r\n\r\n    if (!options.noStatics)\r\n        util.merge(classProperties, {\r\n\r\n            /**\r\n             * Encodes a message of this type to a buffer.\r\n             * @name Class.encode\r\n             * @function\r\n             * @param {Prototype|Object} message Message to encode\r\n             * @param {Writer} [writer] Writer to use\r\n             * @returns {Writer} Writer\r\n             */\r\n            encode: {\r\n                value: function encode(message, writer) {\r\n                    return this.$type.encode(message, writer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Encodes a message of this type preceeded by its length as a varint to a buffer.\r\n             * @name Class.encodeDelimited\r\n             * @function\r\n             * @param {Prototype|Object} message Message to encode\r\n             * @param {Writer} [writer] Writer to use\r\n             * @returns {Writer} Writer\r\n             */\r\n            encodeDelimited: {\r\n                value: function encodeDelimited(message, writer) {\r\n                    return this.$type.encodeDelimited(message, writer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Decodes a message of this type from a buffer.\r\n             * @name Class.decode\r\n             * @function\r\n             * @param {Uint8Array} buffer Buffer to decode\r\n             * @returns {Prototype} Decoded message\r\n             */\r\n            decode: {\r\n                value: function decode(buffer) {\r\n                    return this.$type.decode(buffer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Decodes a message of this type preceeded by its length as a varint from a buffer.\r\n             * @name Class.decodeDelimited\r\n             * @function\r\n             * @param {Uint8Array} buffer Buffer to decode\r\n             * @returns {Prototype} Decoded message\r\n             */\r\n            decodeDelimited: {\r\n                value: function decodeDelimited(buffer) {\r\n                    return this.$type.decodeDelimited(buffer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Verifies a message of this type.\r\n             * @name Class.verify\r\n             * @function\r\n             * @param {Prototype|Object} message Message or plain object to verify\r\n             * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            verify: {\r\n                value: function verify(message) {\r\n                    return this.$type.verify(message);\r\n                }\r\n            }\r\n\r\n        }, true);\r\n\r\n    util.props(clazz, classProperties);\r\n    var prototype = inherits.defineProperties(new Prototype(), type);\r\n    clazz.prototype = prototype;\r\n    prototype.constructor = clazz;\r\n\r\n    if (!options.noRegister)\r\n        type.setCtor(clazz);\r\n\r\n    return prototype;\r\n}\r\n\r\n/**\r\n * Defines the reflected type's default values and virtual oneof properties on the specified prototype.\r\n * @memberof inherits\r\n * @param {Prototype} prototype Prototype to define properties upon\r\n * @param {Type} type Reflected message type\r\n * @returns {Prototype} The specified prototype\r\n */\r\ninherits.defineProperties = function defineProperties(prototype, type) {\r\n\r\n    var prototypeProperties = {\r\n\r\n        /**\r\n         * Reference to the reflected type.\r\n         * @name Prototype#$type\r\n         * @type {Type}\r\n         * @readonly\r\n         */\r\n        $type: {\r\n            value: type\r\n        }\r\n    };\r\n\r\n    // Initialize default values\r\n    type.getFieldsArray().forEach(function(field) {\r\n        field.resolve();\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the non-encoded value on the prototype for ALL messages of this type.\r\n        prototype[field.name] = util.isObject(field.defaultValue)\r\n            ? Object.freeze(field.defaultValue)\r\n            : field.defaultValue;\r\n    });\r\n\r\n    // Define each oneof with a non-enumerable getter and setter for the present field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                var keys = Object.keys(this);\r\n                for (var i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                var keys = oneof.oneof;\r\n                for (var i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    util.props(prototype, prototypeProperties);\r\n    return prototype;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(8);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nvar Enum    = require(7),\r\n    types   = require(22),\r\n    util    = require(23);\r\n\r\n/**\r\n * Constructs a new map field.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(13);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nvar Type = require(21),\r\n    util = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    this.resolvedResponseType = resolved;\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(13);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nvar Enum    = require(7),\r\n    Type    = require(21),\r\n    Field   = require(8),\r\n    Service = require(19),\r\n    util    = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\nvar nestedTypes = [ Enum, Type, Service, Field, Namespace ],\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(', ');\r\n\r\n/**\r\n * Constructs a new namespace.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson)\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw _TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split('.');\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split('.');\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found instanceof Namespace && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.extend = extend;\r\n\r\nvar Root = require(18),\r\n    util = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join('.');\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Lets the specified constructor extend this class.\r\n * @memberof ReflectionObject\r\n * @param {*} constructor Extending constructor\r\n * @returns {Object} Prototype\r\n * @this ReflectionObject\r\n */\r\nfunction extend(constructor) {\r\n    var proto = constructor.prototype = Object.create(this.prototype);\r\n    proto.constructor = constructor;\r\n    constructor.extend = extend;\r\n    return proto;\r\n}\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Constructor name, space, full name\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    return this.constructor.name + \" \" + this.getFullName();\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(13);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nvar Field = require(8),\r\n    util  = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = this.name.substring(0, 1).toUpperCase() + this.name.substring(1);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {Array.<string>}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Array.<Field>}\r\n     * @private\r\n     */\r\n    this._fields = [];\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fields.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fields.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fields.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fields.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fields.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize = require(20),\r\n    Root     = require(18),\r\n    Type     = require(21),\r\n    Field    = require(8),\r\n    MapField = require(10),\r\n    OneOf    = require(14),\r\n    Enum     = require(7),\r\n    Service  = require(19),\r\n    Method   = require(11),\r\n    types    = require(22);\r\n\r\nvar nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(name) {\r\n    return name.substring(0,1)\r\n         + name.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\nvar s_required = \"required\",\r\n    s_repeated = \"repeated\",\r\n    s_optional = \"optional\",\r\n    s_option   = \"option\",\r\n    s_name     = \"name\",\r\n    s_type     = \"type\";\r\nvar s_open     = \"{\",\r\n    s_close    = \"}\",\r\n    s_bopen    = '(',\r\n    s_bclose   = ')',\r\n    s_semi     = \";\",\r\n    s_dq       = '\"',\r\n    s_sq       = \"'\";\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} [root] Root to populate\r\n * @returns {ParserResult} Parser result\r\n */\r\nfunction parse(source, root) {\r\n    /* eslint-disable default-case, callback-return */\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    function illegal(token, name) {\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (line \" + tn.line() + s_bclose);\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== s_dq && token !== s_sq)\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === s_dq || token === s_sq);\r\n        return values.join('');\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case s_sq:\r\n            case s_dq:\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(s_semi);\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === '-') {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, 'number');\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"min\": return 1;\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === '-' && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, s_name);\r\n        ptr = ptr.define(pkg);\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(s_semi);\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        var p3;\r\n        if ([ \"proto2\", p3 = \"proto3\" ].indexOf(syntax) < 0)\r\n            throw illegal(syntax, \"syntax\");\r\n        isProto3 = syntax === p3;\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case s_option:\r\n                parseOption(parent, token);\r\n                skip(s_semi);\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n                    case s_required:\r\n                    case s_optional:\r\n                    case s_repeated:\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, s_optional);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, s_type);\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, s_type);\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, s_type);\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (token === s_option) {\r\n                    parseOption(oneof, token);\r\n                    skip(s_semi);\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, s_optional);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (lower(token) === s_option)\r\n                    parseOption(enm);\r\n                else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, s_name);\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(s_bopen, true);\r\n        var name = next();\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, s_name);\r\n        if (custom) {\r\n            skip(s_bclose);\r\n            name = s_bopen + name + s_bclose;\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (!nameRe.test(token))\r\n                    throw illegal(token, s_name);\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, s_option);\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(s_semi);\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(service, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(s_bopen);\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(s_bclose); skip(\"returns\"); skip(s_bopen);\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(s_bclose);\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(method, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_required:\r\n                    case s_repeated:\r\n                    case s_optional:\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, s_optional, reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case s_option:\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(s_semi);\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    return {\r\n        'package'     : pkg,\r\n        'imports'     : imports,\r\n        'weakImports' : weakImports,\r\n        'syntax'      : syntax,\r\n        'root'        : root\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = Prototype;\r\n\r\n/**\r\n * Options passed to the {@link Prototype|prototype constructor}, modifying its behavior.\r\n * @typedef PrototypeOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Sets only properties that reference a field\r\n */\r\n\r\n/**\r\n * Constructs a new prototype.\r\n * This method should be called from your custom constructors, i.e. `Prototype.call(this, properties)`.\r\n * @classdesc Runtime message prototype ready to be extended by custom classes or generated code.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @param {PrototypeOptions} [options] Prototype options\r\n * @abstract\r\n * @see {@link inherits}\r\n * @see {@link Class}\r\n */\r\nfunction Prototype(properties, options) {\r\n    if (!options)\r\n        options = {};\r\n    if (properties) {\r\n        var fields = this.constructor.$type.fields,\r\n            keys   = Object.keys(properties);\r\n        var i;\r\n        for (i = 0; i < keys.length; ++i) {\r\n            var field = fields[keys[i]];\r\n            if (field && field.partOf)\r\n                for (var j = 0; j < field.partOf.oneof.length; ++j)\r\n                    delete this[field.partOf.oneof[j]];\r\n            if (field || !options.fieldsOnly)\r\n                this[keys[i]] = properties[keys[i]];\r\n        }\r\n        /* fields = this.constructor.$type.repeatedFieldsArray;\r\n        for (i = 0; i < fields.length; ++i)\r\n            if (!this[fields[i].name])\r\n                this[fields[i].name] = []; */\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a runtime message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {*} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {*} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @param {boolean} [options.defaults=false] Also sets default values on the resulting object\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nPrototype.prototype.asJSON = function asJSON(options) {\r\n    var any    = !(options && options.fieldsOnly),\r\n        fields = this.constructor.$type.fields,\r\n        json   = {};\r\n    var keys;\r\n    if (options && options.defaults) {\r\n        keys = [];\r\n        for (var k in this) // eslint-disable-line guard-for-in\r\n            keys.push(k);\r\n    } else\r\n        keys = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && value.length) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (any)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util      = require(26),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Configures the Reader interface according to the environment.\r\n * @memberof Reader\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader.configure = configure;\r\n\r\n/**\r\n * Constructs a new reader using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = function create(buffer) {\r\n    return new (util.Buffer && util.Buffer.isBuffer(buffer) && BufferReader || Reader)(buffer);\r\n};\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice;\r\n\r\n/**\r\n * Tag read.\r\n * @constructor\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @ignore\r\n */\r\nfunction Tag(id, wireType) {\r\n    this.id = id;\r\n    this.wireType = wireType;\r\n}\r\n\r\n/**\r\n * Reads a tag.\r\n * @returns {{id: number, wireType: number}} Field id and wire type\r\n */\r\nReaderPrototype.tag = function read_tag() {\r\n    if (this.pos >= this.len)\r\n        throw indexOutOfRange(this);\r\n    return new Tag(this.buf[this.pos] >>> 3, this.buf[this.pos++] & 7);\r\n};\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    // 1 byte\r\n    var octet = this.buf[this.pos++],\r\n        value = octet & 127;\r\n    if (octet > 127) { // false if octet is undefined (pos >= len)\r\n        // 2 bytes\r\n        octet = this.buf[this.pos++];\r\n        value |= (octet & 127) << 7;\r\n        if (octet > 127) {\r\n            // 3 bytes\r\n            octet = this.buf[this.pos++];\r\n            value |= (octet & 127) << 14;\r\n            if (octet > 127) {\r\n                // 4 bytes\r\n                octet = this.buf[this.pos++];\r\n                value |= (octet & 127) << 21;\r\n                if (octet > 127) {\r\n                    // 5 bytes\r\n                    octet = this.buf[this.pos++];\r\n                    value |= octet << 28;\r\n                    if (octet > 127) {\r\n                        // 6..10 bytes (sign extended)\r\n                        this.pos += 5;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (this.pos > this.len) {\r\n        this.pos = this.len;\r\n        throw indexOutOfRange(this);\r\n    }\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    return this.int32() >>> 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.int32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    var lo = 0, hi = 0,\r\n        i  = 0, b  = 0;\r\n    if (this.len - this.pos > 9) { // fast route\r\n        for (i = 0; i < 4; ++i) {\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.int32() !== 0;\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    this.pos += 4;\r\n    return this.buf[this.pos - 4]\r\n         | this.buf[this.pos - 3] << 8\r\n         | this.buf[this.pos - 2] << 16\r\n         | this.buf[this.pos - 1] << 24;\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongFixed() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    ,\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    );\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readLongFixed.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readLongFixed.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readLongFixed.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readLongFixed.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[3] = buf[pos  ];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[0] = buf[pos  ];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[3] = buf[pos++];\r\n                f8b[4] = buf[pos++];\r\n                f8b[5] = buf[pos++];\r\n                f8b[6] = buf[pos++];\r\n                f8b[7] = buf[pos  ];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos++];\r\n                f8b[6] = buf[pos++];\r\n                f8b[5] = buf[pos++];\r\n                f8b[4] = buf[pos++];\r\n                f8b[3] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[0] = buf[pos  ];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    // ref: https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js\r\n    var bytes = this.bytes(),\r\n        len = bytes.length;\r\n    if (len) {\r\n        var out = new Array(len), p = 0, c = 0;\r\n        while (p < len) {\r\n            var c1 = bytes[p++];\r\n            if (c1 < 128)\r\n                out[c++] = c1;\r\n            else if (c1 > 191 && c1 < 224)\r\n                out[c++] = (c1 & 31) << 6 | bytes[p++] & 63;\r\n            else if (c1 > 239 && c1 < 365) {\r\n                var u = ((c1 & 7) << 18 | (bytes[p++] & 63) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63) - 0x10000;\r\n                out[c++] = 0xD800 + (u >> 10);\r\n                out[c++] = 0xDC00 + (u & 1023);\r\n            } else\r\n                out[c++] = (c1 & 15) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63;\r\n        }\r\n        return String.fromCharCode.apply(String, out.slice(0, c));\r\n    }\r\n    return \"\";\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                var tag = this.tag();\r\n                if (tag.wireType === 4)\r\n                    break;\r\n                this.skipType(tag.wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    if (!util.Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n    readStringBuffer = util.Buffer.prototype.utf8Slice // around forever, but not present in browser buffer\r\n        ? readStringBuffer_utf8Slice\r\n        : readStringBuffer_toString;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nif (typeof Float32Array === 'undefined') // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nif (typeof Float64Array === 'undefined') // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\nvar readStringBuffer;\r\n\r\nfunction readStringBuffer_utf8Slice(buf, start, end) {\r\n    return buf.utf8Slice(start, end); // fastest\r\n}\r\n\r\nfunction readStringBuffer_toString(buf, start, end) {\r\n    return buf.toString(\"utf8\", start, end); // 2nd, again assertions\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return readStringBuffer(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(12);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nvar Field  = require(8),\r\n    util   = require(23),\r\n    common = require(6);\r\n\r\n/**\r\n * Constructs a new root namespace.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.resolvePath;\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {function(?Error, Root=)} [callback] Node-style callback function\r\n * @returns {Promise<Root>|undefined} A promise if `callback` has been omitted\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nRootPrototype.load = function load(filename, callback) {\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                var parsed = require(15)(source, self);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            ++queued;\r\n            setTimeout(function() {\r\n                --queued;\r\n                process(filename, common[filename]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        ++queued;\r\n        util.fetch(filename, function(err, source) {\r\n            --queued;\r\n            if (!callback)\r\n                return; // terminated meanwhile\r\n            if (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        });\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (!queued)\r\n        finish(null);\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.toString = function toString() {\r\n    return this.constructor.name;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(12);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nvar Method = require(11),\r\n    util   = require(23);\r\n\r\n/**\r\n * Constructs a new service.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @function\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {function(?Error, Uint8Array=)} callback Node-style callback called with the error, if any, and the response data\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpc RPC implementation ({@link RPCImpl|see})\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {Object} Runtime service\r\n */\r\nServicePrototype.create = function create(rpc, requestDelimited, responseDelimited) {\r\n    var rpcService = {};\r\n    util.prop(rpcService, \"$rpc\", {\r\n        value: rpc\r\n    });\r\n    this.getMethodsArray().forEach(function(method) {\r\n        var lcName = method.name.substring(0, 1).toLowerCase() + method.name.substring(1);\r\n        rpcService[lcName] = function(request, callback) {\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited && method.resolvedRequestType.encodeDelimited(request) || method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === 'function' && setImmediate || setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpc(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited && method.resolvedResponseType.decodeDelimited(responseData) || method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    callback(err2);\r\n                    return;\r\n                }\r\n                callback(null, response);\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n\r\nvar s_nl = \"\\n\",\r\n    s_sl = '/',\r\n    s_as = '*';\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable default-case, callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === '\"' ? stringDoubleRe : stringSingleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === s_nl)\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === s_sl) {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === s_sl) { // Line\r\n                    while (charAt(++offset) !== s_nl)\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === s_as) { /* Block */\r\n                    do {\r\n                        if (curr === s_nl)\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== s_as || curr !== s_sl);\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return s_sl;\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === '\"' || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable default-case, callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(12);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nvar Enum      = require(7),\r\n    OneOf     = require(14),\r\n    Field     = require(8),\r\n    Service   = require(19),\r\n    Prototype = require(16),\r\n    Reader    = require(17),\r\n    Writer    = require(27),\r\n    inherits  = require(9),\r\n    util      = require(23),\r\n    codegen   = require(2);\r\n\r\n/**\r\n * Constructs a new message type.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Prototype}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            if (this._ctor)\r\n                return this._ctor;\r\n            var ctor;\r\n            if (codegen.supported)\r\n                ctor = codegen(\"p\")(\"P.call(this,p)\").eof(this.getFullName() + \"$ctor\", {\r\n                    P: Prototype\r\n                });\r\n            else\r\n                ctor = function GenericMessage(properties) {\r\n                    Prototype.call(this, properties);\r\n                };\r\n            ctor.prototype = inherits(ctor, this);\r\n            this._ctor = ctor;\r\n            return ctor;\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Prototype))\r\n                throw util._TypeError(\"ctor\", \"a constructor inheriting from Prototype\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object|*} [properties] Properties to set\r\n * @param {*} [ctor] Constructor to use.\r\n * Defaults to use the internal constuctor.\r\n * @returns {Prototype} Message instance\r\n */\r\nTypePrototype.create = function create(properties, ctor) {\r\n    if (!properties || typeof properties === 'function') {\r\n        ctor = properties;\r\n        properties = undefined;\r\n    } else if (properties /* already */ instanceof Prototype)\r\n        return properties;\r\n    if (ctor) {\r\n        if (!(ctor.prototype instanceof Prototype))\r\n            throw util._TypeError(\"ctor\", \"a constructor inheriting from Prototype\");\r\n    } else\r\n        ctor = this.getCtor();\r\n    return new ctor(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Prototype|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode(message, writer) {\r\n    return (this.encode = codegen.supported\r\n        ? codegen.encode.generate(this).eof(this.getFullName() + \"$encode\", {\r\n              Writer : Writer,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : codegen.encode.fallback\r\n    ).call(this, message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Prototype|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Prototype} Decoded message\r\n */\r\nTypePrototype.decode = function decode(readerOrBuffer, length) {\r\n    return (this.decode = codegen.supported\r\n        ? codegen.decode.generate(this).eof(this.getFullName() + \"$decode\", {\r\n              Reader : Reader,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : codegen.decode.fallback\r\n    ).call(this, readerOrBuffer, length);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Prototype} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that enum values are valid and that any required fields are present.\r\n * @param {Prototype|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify(message) {\r\n    return (this.verify = codegen.supported\r\n        ? codegen.verify.generate(this).eof(this.getFullName() + \"$verify\", {\r\n              types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; })\r\n          })\r\n        : codegen.verify.fallback\r\n    ).call(this, message);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ []\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Utility functions.\r\n * @namespace\r\n */\r\nvar util = exports;\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @memberof util\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n}\r\n\r\nutil.isString = isString;\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === 'object');\r\n};\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Returns a promise from a node-style function.\r\n * @memberof util\r\n * @param {function(Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var args = [];\r\n    for (var i = 2; i < arguments.length; ++i)\r\n        args.push(arguments[i]);\r\n    return new Promise(function(resolve, reject) {\r\n        fn.apply(ctx, args.concat(\r\n            function(err/*, varargs */) {\r\n                if (err) reject(err);\r\n                else resolve.apply(null, Array.prototype.slice.call(arguments, 1));\r\n            }\r\n        ));\r\n    });\r\n}\r\n\r\nutil.asPromise = asPromise;\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {function(?Error, string=)} [callback] Node-style callback\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, util, path);\r\n    var fs; try { fs = require(\"fs\"); } catch (e) {} // eslint-disable-line no-empty\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", callback);\r\n    var xhr = new XMLHttpRequest();\r\n    function onload() {\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n        if (isString(xhr.responseText))\r\n            return callback(null, xhr.responseText);\r\n        return callback(Error(\"request failed\"));\r\n    }\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4)\r\n            onload();\r\n    };\r\n    xhr.open(\"GET\", path, true);\r\n    xhr.send();\r\n    return undefined;\r\n}\r\n\r\nutil.fetch = fetch;\r\n\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @memberof util\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\nfunction isAbsolutePath(path) {\r\n    return /^(?:\\/|[a-zA-Z0-9]+:)/.test(path);\r\n}\r\n\r\nutil.isAbsolutePath = isAbsolutePath;\r\n\r\n/**\r\n * Normalizes the specified path.\r\n * @memberof util\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\nfunction normalizePath(path) {\r\n    path = path.replace(/\\\\/g, '/')\r\n               .replace(/\\/{2,}/g, '/');\r\n    var parts = path.split('/');\r\n    var abs = isAbsolutePath(path);\r\n    var prefix = \"\";\r\n    if (abs)\r\n        prefix = parts.shift() + '/';\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === '..') {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (abs)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === '.')\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join('/');\r\n}\r\n\r\nutil.normalizePath = normalizePath;\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path that was used to fetch the origin file\r\n * @param {string} importPath Import path specified in the origin file\r\n * @param {boolean} [alreadyNormalized] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the imported file\r\n */\r\nutil.resolvePath = function resolvePath(originPath, importPath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        importPath = normalizePath(importPath);\r\n    if (isAbsolutePath(importPath))\r\n        return importPath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalizePath(originPath);\r\n    originPath = originPath.replace(/(?:\\/|^)[^/]+$/, '');\r\n    return originPath.length ? normalizePath(originPath + '/' + importPath) : importPath;\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"['\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"']\";\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0; \r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe && util.Buffer.allocUnsafe(size) || new util.Buffer(size)\r\n        : new (typeof Uint8Array !== 'undefined' && Uint8Array || Array)(size);\r\n};\r\n\r\n/**\r\n * Minimalistic sprintf.\r\n * @param {string} format Format string\r\n * @param {...*} args Replacements\r\n * @returns {string} Formatted string\r\n */\r\nutil.sprintf = function sprintf(format) {\r\n    var params = Array.prototype.slice.call(arguments, 1),\r\n        index  = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var param = params[index++];\r\n        return $1 === \"j\"\r\n            ? JSON.stringify(param)\r\n            : String(param);\r\n    });\r\n};\r\n\r\n// Merge in runtime utility\r\nutil.merge(util, require(26));\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(23);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nLongBits.from = function from(value) {\r\n    switch (typeof value) { // eslint-disable-line default-case\r\n        case 'number':\r\n            return LongBits.fromNumber(value);\r\n        case 'string':\r\n            value = util.Long.fromString(value); // throws without a long lib\r\n    }\r\n    return (value.low || value.high) && new LongBits(value.low >>> 0, value.high >>> 0) || zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return new util.Long(this.lo, this.hi, unsigned);\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * A drop-in buffer pool, similar in functionality to what node uses for buffers.\r\n * @memberof util\r\n * @function\r\n * @param {function(number):Uint8Array} alloc Allocator\r\n * @param {function(number, number):Uint8Array} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {function(number):Uint8Array} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nvar LongBits = util.LongBits = require(\"./longbits\");\r\n\r\nutil.pool = require(\"./pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nvar isNode = util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Buffer = null;\r\n\r\nif (isNode)\r\n    try { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || null;\r\n\r\nif (!util.Long && isNode)\r\n    try { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : '\\0\\0\\0\\0\\0\\0\\0\\0';\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === 'number'\r\n         ? typeof b === 'number'\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === 'number'\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ie8 = !-[1,];\r\n    var ucKey = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n    if (descriptor.get)\r\n        target['get' + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target['set' + ucKey] = ie8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (ie8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util      = require(26),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer operation.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {*} val Value to write\r\n * @param {number} len Value byte length\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, val, len) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {?Writer.Op}\r\n     */\r\n    this.next = null;\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @param {State} next Next state entry\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer, next) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = next;\r\n}\r\n\r\nWriter.State = State;\r\n\r\n/**\r\n * Constructs a new writer.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = function create() {\r\n    return new (util.Buffer && BufferWriter || Writer);\r\n};\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new ArrayImpl(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (ArrayImpl !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    var op = new Op(fn, val, len);\r\n    this.tail.next = op;\r\n    this.tail = op;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(buf, pos, val) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\n/**\r\n * Writes a tag.\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.tag = function write_tag(id, wireType) {\r\n    return this.push(writeByte, 1, id << 3 | wireType & 7);\r\n};\r\n\r\nfunction writeVarint32(buf, pos, val) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value >>>= 0;\r\n    return value < 128\r\n        ? this.push(writeByte, 1, value)\r\n        : this.push(writeVarint32,\r\n              value < 16384     ? 2\r\n            : value < 2097152   ? 3\r\n            : value < 268435456 ? 4\r\n            :                     5\r\n        , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32(value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeVarint64(buf, pos, val) {\r\n    // tends to deoptimize. stays optimized when using bits directly.\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(buf, pos, val) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.hi).push(writeFixed32, 4, bits.lo);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.hi).push(writeFixed32, 4, bits.lo);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(buf, pos, val) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(buf, pos, val) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(buf, pos, val) {\r\n        ieee754.write(buf, val, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(buf, pos, val) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(buf, pos, val) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(buf, pos, val) {\r\n        ieee754.write(buf, val, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(buf, pos, val) {\r\n        buf.set(val, pos);\r\n    }\r\n    : function writeBytes_for(buf, pos, val) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nfunction writeString(buf, pos, val) {\r\n    for (var i = 0; i < val.length; ++i) {\r\n        var c1 = val.charCodeAt(i), c2;\r\n        if (c1 < 128) {\r\n            buf[pos++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buf[pos++] = c1 >> 6       | 192;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = val.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buf[pos++] = c1 >> 18      | 240;\r\n            buf[pos++] = c1 >> 12 & 63 | 128;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        } else {\r\n            buf[pos++] = c1 >> 12      | 224;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n}\r\n\r\nfunction byteLength(val) {\r\n    var strlen = val.length >>> 0;\r\n    var len = 0;\r\n    for (var i = 0; i < strlen; ++i) {\r\n        var c1 = val.charCodeAt(i);\r\n        if (c1 < 128)\r\n            len += 1;\r\n        else if (c1 < 2048)\r\n            len += 2;\r\n        else if ((c1 & 0xFC00) === 0xD800 && (val.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n}\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeString, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#ldelim}, {@link Writer#reset} or {@link Writer#finish} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this, this.states);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (id !== undefined)\r\n        this.tag(id, 2);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of write operations and frees all resources.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len);\r\n    this.reset();\r\n    var pos = 0;\r\n    while (head) {\r\n        head.fn(buf, pos, head.val);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    BufferWriter.alloc = util.Buffer.allocUnsafe\r\n        ? util.Buffer.allocUnsafe\r\n        : function allocUnsafeNew(size) { return new util.Buffer(size); };\r\n    return BufferWriter.alloc(size);\r\n};\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(buf, pos, val) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float32Array === 'undefined') // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(buf, pos, val) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float64Array === 'undefined') // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(buf, pos, val) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n    // This could probably be optimized just like writeStringBuffer, but most real use cases won't benefit much.\r\n}\r\n\r\nif (!(ArrayImpl.prototype.set && util.Buffer && util.Buffer.prototype.set)) // set is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nvar writeStringBuffer = (function() { // eslint-disable-line wrap-iife\r\n    return util.Buffer && util.Buffer.prototype.utf8Write // around forever, but not present in browser buffer\r\n        ? function writeString_buffer_utf8Write(buf, pos, val) {\r\n            if (val.length < 40)\r\n                writeString(buf, pos, val);\r\n            else\r\n                buf.utf8Write(val, pos);\r\n        }\r\n        : function writeString_buffer_write(buf, pos, val) {\r\n            if (val.length < 40)\r\n                writeString(buf, pos, val);\r\n            else\r\n                buf.write(val, pos);\r\n        };\r\n    // Note that the plain JS encoder is faster for short strings, probably because of redundant assertions.\r\n    // For a raw utf8Write, the breaking point is about 20 characters, for write it is around 40 characters.\r\n    // Unfortunately, this does not translate 1:1 to real use cases, hence the common \"good enough\" limit of 40.\r\n})();\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = value.length < 40\r\n        ? byteLength(value)\r\n        : util.Buffer.byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {function(?Error, Root=)} callback Callback function\r\n * @returns {undefined}\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === 'function') {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {function(?Error, Root=)} callback Callback function\r\n * @returns {undefined}\r\n * @throws {TypeError} If arguments are invalid\r\n * @variation 2\r\n */\r\n// function load(filename, callback)\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} A promise\r\n * @throws {TypeError} If arguments are invalid\r\n * @variation 3\r\n */\r\n// function load(filename, [root]):Promise\r\n\r\nprotobuf.load = load;\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = protobuf.Writer.BufferWriter;\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = protobuf.Reader.BufferReader;\r\nprotobuf.codegen          = require(\"./codegen\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Prototype        = require(\"./prototype\");\r\nprotobuf.inherits         = require(\"./inherits\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.util             = require(\"./util\");\r\n\r\n// Be nice to AMD\r\nif (typeof define === 'function' && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.Reader.configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}