{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","src/common.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/inherits.js","src/mapfield.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/prototype.js","src/reader.js","src/root.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/codegen.js","src/util/longbits.js","src/util/pool.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","common","name","json","test","nested","google","protobuf","Any","fields","type_url","type","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","oneof","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","decoder","Enum","Reader","types","util","fallback","reader","this","getFieldsById","create","limit","undefined","len","pos","message","getCtor","tag","field","resolve","resolvedType","map","resolvedKeyType","uint32","ks","vs","basic","decode","longToHash","repeated","packed","wireType","plimit","skipType","generate","mtype","getFieldsArray","gen","codegen","prop","safeProp","encoder","Writer","writer","fi","keys","Object","fork","mapKey","encode","ldelim","required","long","longNeq","defaultValue","reset","keyWireType","options","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","extend","_TypeError","props","valuesById","get","forEach","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","getValuesById","remove","Field","isObject","toString","toLowerCase","optional","partOf","Long","extensionField","declaringField","_packed","FieldPrototype","Type","MapField","isPacked","getOption","setOption","ifNotSet","prototype","role","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","String","Number","toNumber","charAt","inherits","clazz","classProperties","$type","noStatics","merge","encodeDelimited","decodeDelimited","verify","defineProperties","Prototype","constructor","noRegister","setCtor","prototypeProperties","getOneofsArray","indexOf","set","MapFieldPrototype","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","Namespace","_nestedArray","namespace","arrayToJSON","array","obj","NamespacePrototype","Service","nestedTypes","nestedError","ctor","join","nestedArray","toArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","j","object","prev","setOptions","onAdd","onRemove","define","path","split","Array","isArray","ptr","part","shift","resolveAll","parentAlreadyChecked","getRoot","slice","found","proto","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","substring","toUpperCase","_fields","addFieldsToParent","OneOfPrototype","push","index","splice","lower","token","camelCase","replace","$0","$1","parse","source","illegal","tn","line","s_bclose","readString","next","s_dq","s_sq","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRange","start","parseId","end","s_semi","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","s_name","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","p3","isProto3","parseCommon","s_option","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","s_open","s_close","parseMapField","s_required","s_optional","s_repeated","parseField","parseOneOf","extensions","reserved","s_type","parseInlineOptions","valueType","parseEnumField","custom","s_bopen","fqTypeRefRe","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","package","properties","any","fieldsOnly","asJSON","k","key","indexOutOfRange","writeLength","RangeError","configure","ReaderPrototype","int64","read_int64_long","uint64","read_uint64_long","sint64","read_sint64_long","fixed64","read_fixed64_long","sfixed64","read_sfixed64_long","read_int64_number","read_uint64_number","read_sint64_number","read_fixed64_number","read_sfixed64_number","buf","Tag","readLongVarint","lo","hi","b","LongBits","toLong","zzDecode","readLongFixed","BufferReader","initBufferReader","readStringBuffer_utf8Slice","utf8Slice","readStringBuffer_toString","ieee754","ArrayImpl","Uint8Array","Buffer","isBuffer","_slice","subarray","int32","octet","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","float","readDouble","Float64Array","f64","double","bytes","string","out","p","c1","fromCharCode","apply","finish","remain","BufferReaderPrototype","readStringBuffer","readFloatLE","readDoubleLE","deferred","files","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","filename","callback","err","cb","process","JSON","parsed","self","fetch","queued","weak","idx","altname","setTimeout","asPromise","newDeferred","_methodsArray","ServicePrototype","methodsArray","methodName","inherited","getMethodsArray","rpc","requestDelimited","responseDelimited","rpcService","lcName","request","requestData","setImmediate","responseData","response","err2","unescape","str","subject","re","stringDelim","stringDoubleRe","stringSingleRe","lastIndex","match","exec","stack","repeat","curr","s_nl","s_sl","s_as","delimRe","delim","expected","actual","equals","_fieldsById","_fieldsArray","_oneofsArray","_ctor","TypePrototype","verifier","fieldsById","names","fieldsArray","oneofsArray","supported","eof","P","fieldName","oneOfName","filter","fld","readerOrBuffer","bake","emptyArray","freeze","fn","ctx","args","arguments","Promise","reject","concat","onload","xhr","status","responseText","fs","readFile","XMLHttpRequest","onreadystatechange","readyState","open","send","isAbsolutePath","normalizePath","parts","prefix","isFinite","description","TypeError","originPath","importPath","alreadyNormalized","dst","src","newBuffer","size","allocUnsafe","fmt","level","indent","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","format","params","param","stringify","scope","verbose","console","Function","LongBitsPrototype","zero","zzEncode","fromNumber","from","fromString","low","high","unsigned","charCodeAt","fromHash","hash","toHash","mask","part0","part1","part2","pool","alloc","SIZE","MAX","slab","isNode","global","versions","node","dcodeIO","longFromHash","bits","fromBits","target","descriptors","descriptor","ie8","ucKey","defineProperty","reason","hasReasonVar","Op","val","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","writeString","c2","byteLength","strlen","BufferWriter","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","WriterPrototype","op","writeFloat","writeDouble","writeBytes","BufferWriterPrototype","writeStringBuffer","utf8Write","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\n\r\n/**\r\n * Wire format decoder using code generation on top of reflection.\r\n * @namespace\r\n */\r\nvar decoder = exports;\r\n\r\nvar Enum   = require(5),\r\n    Reader = require(15),\r\n    types  = require(20),\r\n    util   = require(21);\r\n\r\n/**\r\n * Decodes a message of `this` message's type.\r\n * @param {Reader} reader Reader to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Prototype} Populated runtime message\r\n * @this Type\r\n */\r\ndecoder.fallback = function fallback(reader, length) {\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.getFieldsById(),\r\n        reader  = reader instanceof Reader ? reader : Reader.create(reader),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new (this.getCtor())();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.tag(),\r\n            field    = fields[tag.id].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                    length  = reader.uint32();\r\n                var map = message[field.name] = {};\r\n                if (length) {\r\n                    length += reader.pos;\r\n                    var ks = [], vs = [];\r\n                    while (reader.pos < length) {\r\n                        if (reader.tag().id === 1)\r\n                            ks[ks.length] = reader[keyType]();\r\n                        else if (types.basic[type] !== undefined)\r\n                            vs[vs.length] = reader[type]();\r\n                        else\r\n                            vs[vs.length] = field.resolvedType.decode(reader, reader.uint32());\r\n                    }\r\n                    for (var i = 0; i < ks.length; ++i)\r\n                        map[typeof ks[i] === 'object' ? util.longToHash(ks[i]) : ks[i]] = vs[i];\r\n                }\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] || (message[field.name] = []);\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && tag.wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values[values.length] = reader[type]();\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] !== undefined)\r\n                    values[values.length] = reader[type]();\r\n                  else\r\n                    values[values.length] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] !== undefined)\r\n                message[field.name] = reader[type]();\r\n              else\r\n                message[field.name] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(tag.wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {util.CodegenAppender} Unscoped codegen instance\r\n */\r\ndecoder.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.tag()\")\r\n        (\"switch(t.id){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"var n=r.uint32(),o={}\")\r\n                (\"if(n){\")\r\n                    (\"n+=r.pos\")\r\n                    (\"var k=[],v=[]\")\r\n                    (\"while(r.pos<n){\")\r\n                        (\"if(r.tag().id===1)\")\r\n                            (\"k[k.length]=r.%s()\", keyType);\r\n\r\n                        if (types.basic[type] !== undefined) gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=r.%s()\", type);\r\n\r\n                        else gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=types[%d].decode(r,r.uint32())\", i, i);\r\n                    gen\r\n                    (\"}\")\r\n                    (\"for(var i=0;i<k.length;++i)\")\r\n                        (\"o[typeof(k[i])==='object'?util.longToHash(k[i]):k[i]]=v[i]\")\r\n                (\"}\")\r\n                (\"m%s=o\", prop);\r\n\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s||(m%s=[])\", prop, prop);\r\n\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n                (\"if(t.wireType===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s[m%s.length]=r.%s()\", prop, prop, type)\r\n                (\"}else\");\r\n            }\r\n\r\n            if (types.basic[type] !== undefined) gen\r\n\r\n                    (\"m%s[m%s.length]=r.%s()\", prop, prop, type);\r\n\r\n            else gen\r\n\r\n                    (\"m%s[m%s.length]=types[%d].decode(r,r.uint32())\", prop, prop, i, i);\r\n\r\n        } else if (types.basic[type] !== undefined) { gen\r\n\r\n                (\"m%s=r.%s()\", prop, type);\r\n\r\n        } else { gen\r\n\r\n                (\"m%s=types[%d].decode(r,r.uint32())\", prop, i, i);\r\n\r\n        } gen\r\n                (\"break\");\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t.wireType)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Wire format encoder using code generation on top of reflection.\r\n * @namespace\r\n */\r\nvar encoder = exports;\r\n\r\nvar Enum   = require(5),\r\n    Writer = require(27),\r\n    types  = require(20),\r\n    util   = require(21);\r\n\r\n/**\r\n * Encodes a message of `this` message's type.\r\n * @param {Prototype|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n * @this Type\r\n */\r\nencoder.fallback = function fallback(message, writer) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer.create();\r\n    var fields = this.getFieldsArray(), fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            var value, keys;\r\n            if ((value = message[field.name]) && (keys = Object.keys(value)).length) {\r\n                writer.fork();\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    writer.tag(1, types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType !== undefined)\r\n                        writer.tag(2, wireType)[type](value[keys[i]]);\r\n                    else\r\n                        field.resolvedType.encode(value[keys[i]], writer.tag(2,2).fork()).ldelim();\r\n                }\r\n                writer.ldelim(field.id);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    writer.fork();\r\n                    var i = 0;\r\n                    while (i < values.length)\r\n                        writer[type](values[i++]);\r\n                    writer.ldelim(field.id);\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType !== undefined)\r\n                        while (i < values.length)\r\n                            writer.tag(field.id, wireType)[type](values[i++]);\r\n                    else\r\n                        while (i < values.length)\r\n                            field.resolvedType.encode(values[i++], writer.tag(field.id,2).fork()).ldelim();\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name];\r\n            if (field.required || value !== undefined && field.long ? util.longNeq(value, field.defaultValue) : value !== field.defaultValue) {\r\n                if (wireType !== undefined)\r\n                    writer.tag(field.id, wireType)[type](value);\r\n                else {\r\n                    field.resolvedType.encode(value, writer.fork());\r\n                    if (writer.len || field.required)\r\n                        writer.ldelim(field.id);\r\n                    else\r\n                        writer.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {util.CodegenAppender} Unscoped codegen instance\r\n */\r\nencoder.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = util.safeProp(field.name);\r\n        \r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType     = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                keyWireType = types.mapKey[keyType];\r\n            gen\r\n\r\n    (\"if(m%s){\", prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0,ks=Object.keys(m%s);i<ks.length;++i){\", prop)\r\n            (\"w.tag(1,%d).%s(ks[i])\", keyWireType, keyType);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n            (\"w.tag(2,%d).%s(m%s[ks[i]])\", wireType, type, prop);\r\n\r\n            else gen\r\n            \r\n            (\"types[%d].encode(m%s[ks[i]],w.tag(2,2).fork()).ldelim()\", i, prop);\r\n\r\n            gen\r\n        (\"}\")\r\n        (\"w.len&&w.ldelim(%d)||w.reset()\", field.id)\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim(%d)\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.tag(%d,%d).%s(m%s[i])\", field.id, wireType, type, prop);\r\n                else gen\r\n            (\"types[%d].encode(m%s[i],w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(m%s!==undefined&&util.longNeq(m%s,%j))\", prop, prop, field.defaultValue);\r\n                else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n        (\"w.tag(%d,%d).%s(m%s)\", field.id, wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n        (\"types[%d].encode(m%s,w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n        \r\n            else gen\r\n\r\n        (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", i, prop, field.id);\r\n    \r\n        }\r\n    }\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nvar util = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error('duplicate name \"' + name + '\" in ' + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error('\"' + name + '\" is not a name of ' + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nvar Type      = require(19),\r\n    Enum      = require(5),\r\n    MapField  = require(8),\r\n    types     = require(20),\r\n    util      = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string} [rule=optional] Field rule\r\n * @param {string} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== 'optional' ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined)\r\n        return MapField.fromJSON(name, json);\r\n    return new Field(name, json.id, json.type, json.role, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options['default']) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n    \r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Prototype#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (this.resolvedType instanceof Enum && options['enum'] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        else if (this.long && options.long)\r\n            return options.long === Number\r\n                ? typeof value === 'number'\r\n                ? value\r\n                : util.Long.fromValue(value).toNumber()\r\n                : util.Long.fromValue(value, this.type.charAt(0) === 'u').toString();\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = inherits;\r\n\r\nvar Prototype = require(14),\r\n    Type      = require(19),\r\n    util      = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Options passed to {@link inherits}, modifying its behavior.\r\n * @typedef InheritanceOptions\r\n * @type {Object}\r\n * @property {boolean} [noStatics=false] Skips adding the default static methods on top of the constructor\r\n * @property {boolean} [noRegister=false] Skips registering the constructor with the reflected type\r\n */\r\n\r\n/**\r\n * Inherits a custom class from the message prototype of the specified message type.\r\n * @param {Function} clazz Inheriting class\r\n * @param {Type} type Inherited message type\r\n * @param {InheritanceOptions} [options] Inheritance options\r\n * @returns {Prototype} Created prototype\r\n */\r\nfunction inherits(clazz, type, options) {\r\n    if (typeof clazz !== 'function')\r\n        throw _TypeError(\"clazz\", \"a function\");\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    if (!options)\r\n        options = {};\r\n\r\n    /**\r\n     * This is not an actual type but stands as a reference for any constructor of a custom message class that you pass to the library.\r\n     * @name Class\r\n     * @extends Prototype\r\n     * @constructor\r\n     * @param {Object.<string,*>} [properties] Properties to set on the message\r\n     * @see {@link inherits}\r\n     */\r\n\r\n    var classProperties = {\r\n\r\n        /**\r\n         * Reference to the reflected type.\r\n         * @name Class.$type\r\n         * @type {Type}\r\n         * @readonly\r\n         */\r\n        $type: {\r\n            value: type\r\n        }\r\n    };\r\n\r\n    if (!options.noStatics)\r\n        util.merge(classProperties, {\r\n\r\n            /**\r\n             * Encodes a message of this type to a buffer.\r\n             * @name Class.encode\r\n             * @function\r\n             * @param {Prototype|Object} message Message to encode\r\n             * @param {Writer} [writer] Writer to use\r\n             * @returns {Writer} Writer\r\n             */\r\n            encode: {\r\n                value: function encode(message, writer) {\r\n                    return this.$type.encode(message, writer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Encodes a message of this type preceeded by its length as a varint to a buffer.\r\n             * @name Class.encodeDelimited\r\n             * @function\r\n             * @param {Prototype|Object} message Message to encode\r\n             * @param {Writer} [writer] Writer to use\r\n             * @returns {Writer} Writer\r\n             */\r\n            encodeDelimited: {\r\n                value: function encodeDelimited(message, writer) {\r\n                    return this.$type.encodeDelimited(message, writer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Decodes a message of this type from a buffer.\r\n             * @name Class.decode\r\n             * @function\r\n             * @param {Uint8Array} buffer Buffer to decode\r\n             * @returns {Prototype} Decoded message\r\n             */\r\n            decode: {\r\n                value: function decode(buffer) {\r\n                    return this.$type.decode(buffer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Decodes a message of this type preceeded by its length as a varint from a buffer.\r\n             * @name Class.decodeDelimited\r\n             * @function\r\n             * @param {Uint8Array} buffer Buffer to decode\r\n             * @returns {Prototype} Decoded message\r\n             */\r\n            decodeDelimited: {\r\n                value: function decodeDelimited(buffer) {\r\n                    return this.$type.decodeDelimited(buffer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Verifies a message of this type.\r\n             * @name Class.verify\r\n             * @function\r\n             * @param {Prototype|Object} message Message or plain object to verify\r\n             * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            verify: {\r\n                value: function verify(message) {\r\n                    return this.$type.verify(message);\r\n                }\r\n            }\r\n\r\n        }, true);\r\n\r\n    util.props(clazz, classProperties);\r\n    var prototype = inherits.defineProperties(new Prototype(), type);\r\n    clazz.prototype = prototype;\r\n    prototype.constructor = clazz;\r\n\r\n    if (!options.noRegister)\r\n        type.setCtor(clazz);\r\n\r\n    return prototype;\r\n}\r\n\r\n/**\r\n * Defines the reflected type's default values and virtual oneof properties on the specified prototype.\r\n * @memberof inherits\r\n * @param {Prototype} prototype Prototype to define properties upon\r\n * @param {Type} type Reflected message type\r\n * @returns {Prototype} The specified prototype\r\n */\r\ninherits.defineProperties = function defineProperties(prototype, type) {\r\n\r\n    var prototypeProperties = {\r\n\r\n        /**\r\n         * Reference to the reflected type.\r\n         * @name Prototype#$type\r\n         * @type {Type}\r\n         * @readonly\r\n         */\r\n        $type: {\r\n            value: type\r\n        }\r\n    };\r\n\r\n    // Initialize default values\r\n    type.getFieldsArray().forEach(function(field) {\r\n        field.resolve();\r\n        if (!util.isObject(field.defaultValue))\r\n            // objects are mutable (i.e. would modify the array on the prototype, not the instance)\r\n            prototype[field.name] = field.defaultValue;\r\n    });\r\n\r\n    // Define each oneof with a non-enumerable getter and setter for the present field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                var keys = Object.keys(this);\r\n                for (var i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                var keys = oneof.oneof;\r\n                for (var i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    util.props(prototype, prototypeProperties);\r\n    return prototype;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(6);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nvar Enum    = require(5),\r\n    types   = require(20),\r\n    util    = require(21);\r\n\r\n/**\r\n * Constructs a new map field.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nvar Type = require(19),\r\n    util = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    this.resolvedResponseType = resolved;\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nvar Enum    = require(5),\r\n    Type    = require(19),\r\n    Field   = require(6),\r\n    Service = require(17),\r\n    util    = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\nvar nestedTypes = [ Enum, Type, Service, Field, Namespace ],\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(', ');\r\n\r\n/**\r\n * Constructs a new namespace.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson)\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw _TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split('.');\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split('.');\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found instanceof Namespace && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.extend = extend;\r\n\r\nvar Root = require(16),\r\n    util = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join('.');\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Lets the specified constructor extend this class.\r\n * @memberof ReflectionObject\r\n * @param {Function} constructor Extending constructor\r\n * @returns {Object} Prototype\r\n * @this ReflectionObject\r\n */\r\nfunction extend(constructor) {\r\n    var proto = constructor.prototype = Object.create(this.prototype);\r\n    proto.constructor = constructor;\r\n    constructor.extend = extend;\r\n    return proto;\r\n}\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Constructor name, space, full name\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    return this.constructor.name + \" \" + this.getFullName();\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(11);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nvar Field = require(6),\r\n    util  = require(21);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = this.name.substring(0, 1).toUpperCase() + this.name.substring(1);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {Array.<string>}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Array.<Field>}\r\n     * @private\r\n     */\r\n    this._fields = [];\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fields.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fields.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fields.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fields.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fields.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize = require(18),\r\n    Root     = require(16),\r\n    Type     = require(19),\r\n    Field    = require(6),\r\n    MapField = require(8),\r\n    OneOf    = require(12),\r\n    Enum     = require(5),\r\n    Service  = require(17),\r\n    Method   = require(9),\r\n    types    = require(20);\r\n\r\nvar nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(name) {\r\n    return name.substring(0,1)\r\n         + name.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\nvar s_required = \"required\",\r\n    s_repeated = \"repeated\",\r\n    s_optional = \"optional\",\r\n    s_option   = \"option\",\r\n    s_name     = \"name\",\r\n    s_type     = \"type\";\r\nvar s_open     = \"{\",\r\n    s_close    = \"}\",\r\n    s_bopen    = '(',\r\n    s_bclose   = ')',\r\n    s_semi     = \";\",\r\n    s_dq       = '\"',\r\n    s_sq       = \"'\";\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} [root] Root to populate\r\n * @returns {ParserResult} Parser result\r\n */\r\nfunction parse(source, root) {\r\n    /* eslint-disable default-case, callback-return */\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    function illegal(token, name) {\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (line \" + tn.line() + s_bclose);\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== s_dq && token !== s_sq)\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === s_dq || token === s_sq);\r\n        return values.join('');\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case s_sq:\r\n            case s_dq:\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(s_semi);\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === '-') {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, 'number');\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"min\": return 1;\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === '-' && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, s_name);\r\n        ptr = ptr.define(pkg);\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(s_semi);\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        var p3;\r\n        if ([ \"proto2\", p3 = \"proto3\" ].indexOf(syntax) < 0)\r\n            throw illegal(syntax, \"syntax\");\r\n        isProto3 = syntax === p3;\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case s_option:\r\n                parseOption(parent, token);\r\n                skip(s_semi);\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n                    case s_required:\r\n                    case s_optional:\r\n                    case s_repeated:\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, s_optional);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, s_type);\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, s_type);\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, s_type);\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (token === s_option) {\r\n                    parseOption(oneof, token);\r\n                    skip(s_semi);\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, s_optional);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (lower(token) === s_option)\r\n                    parseOption(enm);\r\n                else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, s_name);\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(s_bopen, true);\r\n        var name = next();\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, s_name);\r\n        if (custom) {\r\n            skip(s_bclose);\r\n            name = s_bopen + name + s_bclose;\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (!nameRe.test(token))\r\n                    throw illegal(token, s_name);\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, s_option);\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(s_semi);\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(service, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(s_bopen);\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(s_bclose); skip(\"returns\"); skip(s_bopen);\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(s_bclose);\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(method, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_required:\r\n                    case s_repeated:\r\n                    case s_optional:\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, s_optional, reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case s_option:\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(s_semi);\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    return {\r\n        'package'     : pkg,\r\n        'imports'     : imports,\r\n        'weakImports' : weakImports,\r\n        'syntax'      : syntax,\r\n        'root'        : root\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = Prototype;\r\n\r\n/**\r\n * Options passed to the {@link Prototype|prototype constructor}, modifying its behavior.\r\n * @typedef PrototypeOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Sets only properties that reference a field\r\n */\r\n\r\n/**\r\n * Constructs a new prototype.\r\n * This method should be called from your custom constructors, i.e. `Prototype.call(this, properties)`.\r\n * @classdesc Runtime message prototype ready to be extended by custom classes or generated code.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @param {PrototypeOptions} [options] Prototype options\r\n * @abstract\r\n * @see {@link inherits}\r\n * @see {@link Class}\r\n */\r\nfunction Prototype(properties, options) {\r\n    if (properties) {\r\n        var any    = !(options && options.fieldsOnly),\r\n            fields = this.constructor.$type.fields,\r\n            keys   = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i) {\r\n            var field = fields[keys[i]];\r\n            if (field && field.partOf)\r\n                this['set' + field.partOf.ucName](field.name);\r\n            if (field || any)\r\n                this[keys[i]] = properties[keys[i]];\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a runtime message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {Function} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {Function} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @param {boolean} [options.defaults=false] Also sets default values on the resulting object\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nPrototype.prototype.asJSON = function asJSON(options) {\r\n    var any    = !(options && options.fieldsOnly),\r\n        fields = this.constructor.$type.fields,\r\n        json   = {};\r\n    var keys;\r\n    if (options.defaults) {\r\n        keys = [];\r\n        for (var k in this)\r\n            keys.push(k);\r\n    } else\r\n        keys = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && value.length) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (any)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util      = require(25),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Configures the Reader interface according to the environment.\r\n * @memberof Reader\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader.configure = configure;\r\n\r\n/**\r\n * Constructs a new reader using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = function create(buffer) {\r\n    return new (util.Buffer && util.Buffer.isBuffer(buffer) && BufferReader || Reader)(buffer);\r\n};\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice;\r\n\r\n/**\r\n * Tag read.\r\n * @constructor\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @ignore\r\n */\r\nfunction Tag(id, wireType) {\r\n    this.id = id;\r\n    this.wireType = wireType;\r\n}\r\n\r\n/**\r\n * Reads a tag.\r\n * @returns {{id: number, wireType: number}} Field id and wire type\r\n */\r\nReaderPrototype.tag = function read_tag() {\r\n    if (this.pos >= this.len)\r\n        throw indexOutOfRange(this);\r\n    return new Tag(this.buf[this.pos] >>> 3, this.buf[this.pos++] & 7);\r\n};\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    // 1 byte\r\n    var octet = this.buf[this.pos++],\r\n        value = octet & 127;\r\n    if (octet > 127) { // false if octet is undefined (pos >= len)\r\n        // 2 bytes\r\n        octet = this.buf[this.pos++];\r\n        value |= (octet & 127) << 7;\r\n        if (octet > 127) {\r\n            // 3 bytes\r\n            octet = this.buf[this.pos++];\r\n            value |= (octet & 127) << 14;\r\n            if (octet > 127) {\r\n                // 4 bytes\r\n                octet = this.buf[this.pos++];\r\n                value |= (octet & 127) << 21;\r\n                if (octet > 127) {\r\n                    // 5 bytes\r\n                    octet = this.buf[this.pos++];\r\n                    value |= octet << 28;\r\n                    if (octet > 127) {\r\n                        // 6..10 bytes (sign extended)\r\n                        this.pos += 5;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (this.pos > this.len) {\r\n        this.pos = this.len;\r\n        throw indexOutOfRange(this);\r\n    }\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    return this.int32() >>> 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.int32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    var lo = 0, hi = 0,\r\n        i  = 0, b  = 0;\r\n    if (this.len - this.pos > 9) { // fast route\r\n        for (i = 0; i < 4; ++i) {\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.int32() !== 0;\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    this.pos += 4;\r\n    return this.buf[this.pos - 4]\r\n         | this.buf[this.pos - 3] << 8\r\n         | this.buf[this.pos - 2] << 16\r\n         | this.buf[this.pos - 1] << 24;\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongFixed() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    ,\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    );\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readLongFixed.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readLongFixed.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readLongFixed.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readLongFixed.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[3] = buf[pos  ];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[0] = buf[pos  ];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[3] = buf[pos++];\r\n                f8b[4] = buf[pos++];\r\n                f8b[5] = buf[pos++];\r\n                f8b[6] = buf[pos++];\r\n                f8b[7] = buf[pos  ];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos++];\r\n                f8b[6] = buf[pos++];\r\n                f8b[5] = buf[pos++];\r\n                f8b[4] = buf[pos++];\r\n                f8b[3] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[0] = buf[pos  ];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    // ref: https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js\r\n    var bytes = this.bytes(),\r\n        len = bytes.length;\r\n    if (len) {\r\n        var out = new Array(len), p = 0, c = 0;\r\n        while (p < len) {\r\n            var c1 = bytes[p++];\r\n            if (c1 < 128)\r\n                out[c++] = c1;\r\n            else if (c1 > 191 && c1 < 224)\r\n                out[c++] = (c1 & 31) << 6 | bytes[p++] & 63;\r\n            else if (c1 > 239 && c1 < 365) {\r\n                var u = ((c1 & 7) << 18 | (bytes[p++] & 63) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63) - 0x10000;\r\n                out[c++] = 0xD800 + (u >> 10);\r\n                out[c++] = 0xDC00 + (u & 1023);\r\n            } else\r\n                out[c++] = (c1 & 15) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63;\r\n        }\r\n        return String.fromCharCode.apply(String, out.slice(0, c));\r\n    }\r\n    return \"\";\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                var tag = this.tag();\r\n                if (tag.wireType === 4)\r\n                    break;\r\n                this.skipType(tag.wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    if (!util.Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n    readStringBuffer = util.Buffer.prototype.utf8Slice // around forever, but not present in browser buffer\r\n        ? readStringBuffer_utf8Slice\r\n        : readStringBuffer_toString;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nif (typeof Float32Array === 'undefined') // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nif (typeof Float64Array === 'undefined') // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\nvar readStringBuffer;\r\n\r\nfunction readStringBuffer_utf8Slice(buf, start, end) {\r\n    return buf.utf8Slice(start, end); // fastest\r\n}\r\n\r\nfunction readStringBuffer_toString(buf, start, end) {\r\n    return buf.toString(\"utf8\", start, end); // 2nd, again assertions\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return readStringBuffer(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(10);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nvar Field  = require(6),\r\n    util   = require(21),\r\n    common = require(2);\r\n\r\n/**\r\n * Constructs a new root namespace.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.resolvePath;\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {function(?Error, Root=)} [callback] Node-style callback function\r\n * @returns {Promise<Root>|undefined} A promise if `callback` has been omitted\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nRootPrototype.load = function load(filename, callback) {\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                var parsed = require(13)(source, self);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            ++queued;\r\n            setTimeout(function() {\r\n                --queued;\r\n                process(filename, common[filename]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        ++queued;\r\n        util.fetch(filename, function(err, source) {\r\n            --queued;\r\n            if (!callback)\r\n                return; // terminated meanwhile\r\n            if (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        });\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (!queued)\r\n        finish(null);\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.toString = function toString() {\r\n    return this.constructor.name;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(10);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nvar Method = require(9),\r\n    util   = require(21);\r\n\r\n/**\r\n * Constructs a new service.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @function\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {function(?Error, Uint8Array=)} callback Node-style callback called with the error, if any, and the response data\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpc RPC implementation ({@link RPCImpl|see})\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {Object} Runtime service\r\n */\r\nServicePrototype.create = function create(rpc, requestDelimited, responseDelimited) {\r\n    var rpcService = {};\r\n    util.prop(rpcService, \"$rpc\", {\r\n        value: rpc\r\n    });\r\n    this.getMethodsArray().forEach(function(method) {\r\n        var lcName = method.name.substring(0, 1).toLowerCase() + method.name.substring(1);\r\n        rpcService[lcName] = function(request, callback) {\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited && method.resolvedRequestType.encodeDelimited(request) || method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === 'function' && setImmediate || setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpc(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited && method.resolvedResponseType.decodeDelimited(responseData) || method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    callback(err2);\r\n                    return;\r\n                }\r\n                callback(null, response);\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n\r\nvar s_nl = \"\\n\",\r\n    s_sl = '/',\r\n    s_as = '*';\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable default-case, callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === '\"' ? stringDoubleRe : stringSingleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === s_nl)\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === s_sl) {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === s_sl) { // Line\r\n                    while (charAt(++offset) !== s_nl)\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === s_as) { /* Block */\r\n                    do {\r\n                        if (curr === s_nl)\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== s_as || curr !== s_sl);\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return s_sl;\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === '\"' || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable default-case, callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(10);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nvar Enum      = require(5),\r\n    OneOf     = require(12),\r\n    Field     = require(6),\r\n    Service   = require(17),\r\n    Prototype = require(14),\r\n    Reader    = require(15),\r\n    Writer    = require(27),\r\n    encoder   = require(4),\r\n    decoder   = require(3),\r\n    verifier  = require(26),\r\n    inherits  = require(7),\r\n    util      = require(21);\r\n\r\nvar codegen   = util.codegen;\r\n\r\n/**\r\n * Constructs a new message type.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {?Function}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: TypePrototype.getFieldsArray = function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: TypePrototype.getOneofsArray = function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Prototype}\r\n     */\r\n    ctor: {\r\n        get: TypePrototype.getCtor = function getCtor() {\r\n            if (this._ctor)\r\n                return this._ctor;\r\n            var ctor;\r\n            if (codegen.supported)\r\n                ctor = codegen(\"p\")(\"P.call(this,p)\").eof(this.getFullName() + \"$ctor\", {\r\n                    P: Prototype\r\n                });\r\n            else\r\n                ctor = function GenericMessage(properties) {\r\n                    Prototype.call(this, properties);\r\n                };\r\n            ctor.prototype = inherits(ctor, this);\r\n            this._ctor = ctor;\r\n            return ctor;\r\n        },\r\n        set: TypePrototype.setCtor = function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Prototype))\r\n                throw util._TypeError(\"ctor\", \"a constructor inheriting from Prototype\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object|?Function} [properties] Properties to set\r\n * @param {?Function} [ctor] Constructor to use.\r\n * Defaults to use the internal constuctor.\r\n * @returns {Prototype} Message instance\r\n */\r\nTypePrototype.create = function create(properties, ctor) {\r\n    if (!properties || typeof properties === 'function') {\r\n        ctor = properties;\r\n        properties = undefined;\r\n    } else if (properties /* already */ instanceof Prototype)\r\n        return properties;\r\n    if (ctor) {\r\n        if (!(ctor.prototype instanceof Prototype))\r\n            throw util._TypeError(\"ctor\", \"a constructor inheriting from Prototype\");\r\n    } else\r\n        ctor = this.getCtor();\r\n    return new ctor(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Prototype|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode(message, writer) {\r\n    return (this.encode = codegen.supported\r\n        ? encoder.generate(this).eof(this.getFullName() + \"$encode\", {\r\n              Writer : Writer,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : encoder.fallback\r\n    ).call(this, message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Prototype|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Prototype} Decoded message\r\n */\r\nTypePrototype.decode = function decode(readerOrBuffer, length) {\r\n    return (this.decode = codegen.supported\r\n        ? decoder.generate(this).eof(this.getFullName() + \"$decode\", {\r\n              Reader : Reader,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : decoder.fallback\r\n    ).call(this, readerOrBuffer, length);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Prototype} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that enum values are valid and that any required fields are present.\r\n * @param {Prototype|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify(message) {\r\n    return (this.verify = codegen.supported\r\n        ? verifier.generate(this).eof(this.getFullName() + \"$verify\", {\r\n              types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; })\r\n          })\r\n        : verifier.fallback\r\n    ).call(this, message);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\nvar emptyArray = [];\r\nif (Object.freeze)\r\n    Object.freeze(emptyArray);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ emptyArray\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Utility functions.\r\n * @namespace\r\n */\r\nvar util = exports;\r\n\r\nutil.codegen  = require(22);\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @memberof util\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n}\r\n\r\nutil.isString = isString;\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === 'object');\r\n};\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Returns a promise from a node-style function.\r\n * @memberof util\r\n * @param {function(Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var args = [];\r\n    for (var i = 2; i < arguments.length; ++i)\r\n        args.push(arguments[i]);\r\n    return new Promise(function(resolve, reject) {\r\n        fn.apply(ctx, args.concat(\r\n            function(err/*, varargs */) {\r\n                if (err) reject(err);\r\n                else resolve.apply(null, Array.prototype.slice.call(arguments, 1));\r\n            }\r\n        ));\r\n    });\r\n}\r\n\r\nutil.asPromise = asPromise;\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {function(?Error, string=)} [callback] Node-style callback\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, util, path);\r\n    var fs; try { fs = require(\"fs\"); } catch (e) {} // eslint-disable-line no-empty\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", callback);\r\n    var xhr = new XMLHttpRequest();\r\n    function onload() {\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n        if (isString(xhr.responseText))\r\n            return callback(null, xhr.responseText);\r\n        return callback(Error(\"request failed\"));\r\n    }\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4)\r\n            onload();\r\n    };\r\n    xhr.open(\"GET\", path, true);\r\n    xhr.send();\r\n    return undefined;\r\n}\r\n\r\nutil.fetch = fetch;\r\n\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @memberof util\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\nfunction isAbsolutePath(path) {\r\n    return /^(?:\\/|[a-zA-Z0-9]+:)/.test(path);\r\n}\r\n\r\nutil.isAbsolutePath = isAbsolutePath;\r\n\r\n/**\r\n * Normalizes the specified path.\r\n * @memberof util\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\nfunction normalizePath(path) {\r\n    path = path.replace(/\\\\/g, '/')\r\n               .replace(/\\/{2,}/g, '/');\r\n    var parts = path.split('/');\r\n    var abs = isAbsolutePath(path);\r\n    var prefix = \"\";\r\n    if (abs)\r\n        prefix = parts.shift() + '/';\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === '..') {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (abs)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === '.')\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join('/');\r\n}\r\n\r\nutil.normalizePath = normalizePath;\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path that was used to fetch the origin file\r\n * @param {string} importPath Import path specified in the origin file\r\n * @param {boolean} [alreadyNormalized] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the imported file\r\n */\r\nutil.resolvePath = function resolvePath(originPath, importPath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        importPath = normalizePath(importPath);\r\n    if (isAbsolutePath(importPath))\r\n        return importPath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalizePath(originPath);\r\n    originPath = originPath.replace(/(?:\\/|^)[^/]+$/, '');\r\n    return originPath.length ? normalizePath(originPath + '/' + importPath) : importPath;\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"['\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"']\";\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0; \r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe && util.Buffer.allocUnsafe(size) || new util.Buffer(size)\r\n        : new (typeof Uint8Array !== 'undefined' && Uint8Array || Array)(size);\r\n};\r\n\r\n// Merge in runtime utility\r\nutil.merge(util, require(25));\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * Programmatically generates a function.\r\n * @memberof util\r\n * @param {...string} params Function parameter names\r\n * @returns {util.CodegenAppender} Printf-like appender function\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen(/* varargs */) {\r\n    var args   = Array.prototype.slice.call(arguments),\r\n        src    = ['\\t\"use strict\"'];\r\n\r\n    var indent = 1,\r\n        inCase = false;\r\n\r\n    /**\r\n     * Appends a printf-like formatted line to the generated source. Returned when calling {@link util.codegen}.\r\n     * @typedef CodegenAppender\r\n     * @memberof util\r\n     * @type {function}\r\n     * @param {string} format A printf-like format string\r\n     * @param {...*} params Format replacements\r\n     * @returns {util.CodegenAppender} Itself\r\n     * @property {util.CodegenStringer} str\r\n     * @property {util.CodegenEnder} eof\r\n     * @see {@link https://nodejs.org/docs/latest/api/util.html#util_util_format_format_args}\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var fmt = [];\r\n        for (var i = 0; i < arguments.length; ++i)\r\n            fmt[i] = arguments[i];\r\n        var line = gen.fmt.apply(null, fmt);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (var index = 0; index < level; ++index)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    gen.fmt = function fmt(format) {\r\n        var params = Array.prototype.slice.call(arguments, 1),\r\n            index  = 0;\r\n        return format.replace(/%([djs])/g, function($0, $1) {\r\n            var param = params[index++];\r\n            return $1 === \"j\"\r\n                ? JSON.stringify(param)\r\n                : String(param);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @typedef CodegenStringer\r\n     * @memberof util\r\n     * @type {function}\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     */\r\n    /**/\r\n    gen.str = function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + args.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    };\r\n\r\n    /**\r\n     * Ends generation and builds the function.\r\n     * @typedef CodegenEnder\r\n     * @memberof util\r\n     * @type {function}\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object|Array.<string>} [scope] Function scope\r\n     * @returns {function} A function to apply the scope manually when `scope` is an array, otherwise the generated function with scope applied\r\n     */\r\n    /**/\r\n    gen.eof = function eof(name, scope) {\r\n        if (name && typeof name === 'object') {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var code = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + code.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        code = \"return \" + code;\r\n        var params, values = [];\r\n        if (Array.isArray(scope)) {\r\n            params = scope.slice();\r\n        } else if (scope) {\r\n            params = Object.keys(scope);\r\n            values = params.map(function(key) { return scope[key]; });\r\n        } else\r\n            params = [];\r\n        var fn = Function.apply(null, params.concat(code)); // eslint-disable-line no-new-func\r\n        return values ? fn.apply(null, values) : fn();\r\n    };\r\n\r\n    return gen;\r\n}\r\n\r\ncodegen.supported = false;\r\ntry { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\n\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(21);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nLongBits.from = function from(value) {\r\n    switch (typeof value) { // eslint-disable-line default-case\r\n        case 'number':\r\n            return LongBits.fromNumber(value);\r\n        case 'string':\r\n            value = util.Long.fromString(value); // throws without a long lib\r\n    }\r\n    return (value.low || value.high) && new LongBits(value.low >>> 0, value.high >>> 0) || zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return new util.Long(this.lo, this.hi, unsigned);\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * A drop-in buffer pool, similar in functionality to what node uses for buffers.\r\n * @memberof util\r\n * @function\r\n * @param {function(number):Uint8Array} alloc Allocator\r\n * @param {function(number, number):Uint8Array} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {function(number):Uint8Array} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nvar LongBits = util.LongBits = require(\"./longbits\");\r\n\r\nutil.pool = require(\"./pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nvar isNode = util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {?Function}\r\n */\r\nutil.Buffer = null;\r\n\r\nif (isNode)\r\n    try { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {?Function}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || null;\r\n\r\nif (!util.Long && isNode)\r\n    try { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : '\\0\\0\\0\\0\\0\\0\\0\\0';\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === 'number'\r\n         ? typeof b === 'number'\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === 'number'\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ie8 = !-[1,];\r\n    var ucKey = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n    if (descriptor.get)\r\n        target['get' + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target['set' + ucKey] = ie8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (ie8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Runtime message verifier using code generation on top of reflection.\r\n * @namespace\r\n */\r\nvar verifier = exports;\r\n\r\nvar Enum = require(5),\r\n    Type = require(19),\r\n    util = require(21);\r\n\r\n/**\r\n * Verifies a runtime message of `this` message type.\r\n * @param {Prototype|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n * @this {Type}\r\n */\r\nverifier.fallback = function fallback(message) {\r\n    var fields = this.getFieldsArray(),\r\n        i = 0;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        if (value === undefined) {\r\n            if (field.required)\r\n                return \"missing required field \" + field.name + \" in \" + this.getFullName();\r\n\r\n        } else if (field.resolvedType instanceof Enum && field.resolvedType.getValuesById()[value] === undefined) {\r\n            return \"invalid enum value \" + field.name + \" = \" + value + \" in \" + this.getFullName();\r\n\r\n        } else if (field.resolvedType instanceof Type) {\r\n            if (!value && field.required)\r\n                return \"missing required field \" + field.name + \" in \" + this.getFullName();\r\n            var reason;\r\n            if ((reason = field.resolvedType.verify(value)) !== null)\r\n                return reason;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {util.CodegenAppender} Unscoped codegen instance\r\n */\r\nverifier.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n    var hasReasonVar = false;\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.required) { gen\r\n\r\n            (\"if(m%s===undefined)\", prop)\r\n                (\"return 'missing required field %s in %s'\", field.name, mtype.getFullName());\r\n\r\n        } else if (field.resolvedType instanceof Enum) {\r\n            var values = util.toArray(field.resolvedType.values); gen\r\n\r\n            (\"switch(m%s){\", prop)\r\n                (\"default:\")\r\n                    (\"return 'invalid enum value %s = '+m%s+' in %s'\", field.name, prop, mtype.getFullName());\r\n\r\n            for (var j = 0, l = values.length; j < l; ++j) gen\r\n                (\"case %d:\", values[j]); gen\r\n            (\"}\");\r\n\r\n        } else if (field.resolvedType instanceof Type) {\r\n            if (field.required) gen\r\n\r\n            (\"if(!m%s)\", prop)\r\n                (\"return 'missing required field %s in %s'\", field.name, mtype.getFullName());\r\n\r\n            if (!hasReasonVar) { gen(\"var r\"); hasReasonVar = true; } gen\r\n\r\n            (\"if((r=types[%d].verify(m%s))!==null)\", i, prop)\r\n                (\"return r\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util      = require(25),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer operation.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {*} val Value to write\r\n * @param {number} len Value byte length\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, val, len) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {?Writer.Op}\r\n     */\r\n    this.next = null;\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @param {State} next Next state entry\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer, next) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = next;\r\n}\r\n\r\nWriter.State = State;\r\n\r\n/**\r\n * Constructs a new writer.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = function create() {\r\n    return new (util.Buffer && BufferWriter || Writer);\r\n};\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new ArrayImpl(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (ArrayImpl !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    var op = new Op(fn, val, len);\r\n    this.tail.next = op;\r\n    this.tail = op;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(buf, pos, val) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\n/**\r\n * Writes a tag.\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.tag = function write_tag(id, wireType) {\r\n    return this.push(writeByte, 1, id << 3 | wireType & 7);\r\n};\r\n\r\nfunction writeVarint32(buf, pos, val) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value >>>= 0;\r\n    return value < 128\r\n        ? this.push(writeByte, 1, value)\r\n        : this.push(writeVarint32,\r\n              value < 16384     ? 2\r\n            : value < 2097152   ? 3\r\n            : value < 268435456 ? 4\r\n            :                     5\r\n        , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32(value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeVarint64(buf, pos, val) {\r\n    // tends to deoptimize. stays optimized when using bits directly.\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(buf, pos, val) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.hi).push(writeFixed32, 4, bits.lo);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.hi).push(writeFixed32, 4, bits.lo);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(buf, pos, val) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(buf, pos, val) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(buf, pos, val) {\r\n        ieee754.write(buf, val, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(buf, pos, val) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(buf, pos, val) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(buf, pos, val) {\r\n        ieee754.write(buf, val, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(buf, pos, val) {\r\n        buf.set(val, pos);\r\n    }\r\n    : function writeBytes_for(buf, pos, val) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nfunction writeString(buf, pos, val) {\r\n    for (var i = 0; i < val.length; ++i) {\r\n        var c1 = val.charCodeAt(i), c2;\r\n        if (c1 < 128) {\r\n            buf[pos++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buf[pos++] = c1 >> 6       | 192;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = val.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buf[pos++] = c1 >> 18      | 240;\r\n            buf[pos++] = c1 >> 12 & 63 | 128;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        } else {\r\n            buf[pos++] = c1 >> 12      | 224;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n}\r\n\r\nfunction byteLength(val) {\r\n    var strlen = val.length >>> 0;\r\n    var len = 0;\r\n    for (var i = 0; i < strlen; ++i) {\r\n        var c1 = val.charCodeAt(i);\r\n        if (c1 < 128)\r\n            len += 1;\r\n        else if (c1 < 2048)\r\n            len += 2;\r\n        else if ((c1 & 0xFC00) === 0xD800 && (val.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n}\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeString, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#ldelim}, {@link Writer#reset} or {@link Writer#finish} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this, this.states);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (id !== undefined)\r\n        this.tag(id, 2);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of write operations and frees all resources.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len);\r\n    this.reset();\r\n    var pos = 0;\r\n    while (head) {\r\n        head.fn(buf, pos, head.val);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    BufferWriter.alloc = util.Buffer.allocUnsafe\r\n        ? util.Buffer.allocUnsafe\r\n        : function allocUnsafeNew(size) { return new util.Buffer(size); };\r\n    return BufferWriter.alloc(size);\r\n};\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(buf, pos, val) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float32Array === 'undefined') // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(buf, pos, val) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float64Array === 'undefined') // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(buf, pos, val) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n    // This could probably be optimized just like writeStringBuffer, but most real use cases won't benefit much.\r\n}\r\n\r\nif (!(ArrayImpl.prototype.set && util.Buffer && util.Buffer.prototype.set)) // set is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nvar writeStringBuffer = (function() { // eslint-disable-line wrap-iife\r\n    return util.Buffer && util.Buffer.prototype.utf8Write // around forever, but not present in browser buffer\r\n        ? function writeString_buffer_utf8Write(buf, pos, val) {\r\n            if (val.length < 40)\r\n                writeString(buf, pos, val);\r\n            else\r\n                buf.utf8Write(val, pos);\r\n        }\r\n        : function writeString_buffer_write(buf, pos, val) {\r\n            if (val.length < 40)\r\n                writeString(buf, pos, val);\r\n            else\r\n                buf.write(val, pos);\r\n        };\r\n    // Note that the plain JS encoder is faster for short strings, probably because of redundant assertions.\r\n    // For a raw utf8Write, the breaking point is about 20 characters, for write it is around 40 characters.\r\n    // Unfortunately, this does not translate 1:1 to real use cases, hence the common \"good enough\" limit of 40.\r\n})();\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = value.length < 40\r\n        ? byteLength(value)\r\n        : util.Buffer.byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root|function(?Error, Root=)} [root] Root namespace, defaults to create a new one if omitted.\r\n * @param {function(?Error, Root=)} [callback] Callback function\r\n * @returns {Promise<Root>|undefined} A promise if `callback` has been omitted\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === 'function') {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\nprotobuf.load = load;\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = protobuf.Writer.BufferWriter;\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = protobuf.Reader.BufferReader;\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Prototype        = require(\"./prototype\");\r\nprotobuf.inherits         = require(\"./inherits\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.util             = require(\"./util\");\r\n\r\n// Be nice to AMD\r\nif (typeof define === 'function' && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.Reader.configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}