{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","src/codegen.js","src/codegen/decode.js","src/codegen/encode.js","src/codegen/verify.js","src/common.js","src/enum.js","src/field.js","src/inherits.js","src/mapfield.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/prototype.js","src/reader.js","src/root.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/pool.js","src/util/runtime.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","codegen","gen","line","util","sprintf","apply","arguments","level","indent","src","prev","blockOpenRe","test","branchRe","casingRe","inCase","breakRe","blockCloseRe","index","push","str","name","replace","args","join","eof","scope","undefined","source","verbose","console","keys","Object","Function","concat","map","key","Array","prototype","slice","supported","encode","decode","verify","Enum","Reader","types","fallback","readerOrBuffer","fields","this","getFieldsById","reader","create","limit","len","pos","message","getCtor","tag","field","id","resolve","type","resolvedType","keyType","resolvedKeyType","uint32","ks","vs","basic","longToHash","repeated","values","packed","wireType","plimit","skipType","generate","mtype","getFieldsArray","prop","safeProp","Writer","writer","fi","fork","mapKey","ldelim","required","long","longNeq","defaultValue","reset","keyWireType","Type","getFullName","getValuesById","reason","hasReasonVar","toArray","j","common","json","nested","google","protobuf","Any","type_url","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","Value","oneofs","kind","oneof","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","NULL_VALUE","ListValue","rule","options","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","extend","_TypeError","props","valuesById","get","forEach","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","isObject","toString","toLowerCase","optional","partOf","Long","extensionField","declaringField","_packed","FieldPrototype","MapField","isPacked","getOption","setOption","ifNotSet","role","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","String","Number","toNumber","charAt","inherits","clazz","classProperties","$type","noStatics","merge","encodeDelimited","decodeDelimited","defineProperties","Prototype","constructor","noRegister","setCtor","prototypeProperties","isArray","emptyArray","emptyObject","getOneofsArray","indexOf","set","MapFieldPrototype","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","Namespace","_nestedArray","namespace","arrayToJSON","array","obj","NamespacePrototype","Service","nestedTypes","nestedError","ctor","nestedArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","object","setOptions","onAdd","onRemove","define","path","split","ptr","part","shift","resolveAll","parentAlreadyChecked","getRoot","found","proto","Root","ReflectionObjectPrototype","root","fullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","substring","toUpperCase","_fields","addFieldsToParent","OneOfPrototype","splice","lower","token","parse","illegal","tn","s_bclose","readString","next","s_dq","s_sq","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRange","start","parseId","end","s_semi","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","s_name","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","p3","isProto3","parseCommon","s_option","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","s_open","s_close","parseMapField","s_required","s_optional","s_repeated","parseField","parseOneOf","extensions","reserved","s_type","camelCase","parseInlineOptions","valueType","parseEnumField","custom","s_bopen","fqTypeRefRe","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","package","properties","asJSON","any","fieldsOnly","k","indexOutOfRange","writeLength","RangeError","configure","ReaderPrototype","int64","read_int64_long","uint64","read_uint64_long","sint64","read_sint64_long","fixed64","read_fixed64_long","sfixed64","read_sfixed64_long","read_int64_number","read_uint64_number","read_sint64_number","read_fixed64_number","read_sfixed64_number","buf","Tag","readLongVarint","lo","hi","b","LongBits","toLong","zzDecode","readLongFixed","BufferReader","initBufferReader","readStringBuffer_utf8Slice","utf8Slice","readStringBuffer_toString","ieee754","ArrayImpl","Uint8Array","Buffer","isBuffer","_slice","subarray","int32","octet","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","float","readDouble","Float64Array","f64","double","bytes","string","out","p","c1","fromCharCode","finish","remain","BufferReaderPrototype","readStringBuffer","readFloatLE","readDoubleLE","deferred","files","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","filename","callback","err","cb","process","JSON","parsed","self","fetch","queued","weak","idx","altname","setTimeout","asPromise","newDeferred","_methodsArray","ServicePrototype","methodsArray","methodName","inherited","getMethodsArray","rpc","requestDelimited","responseDelimited","rpcService","lcName","request","requestData","setImmediate","responseData","response","err2","unescape","$0","$1","subject","re","stringDelim","stringDoubleRe","stringSingleRe","lastIndex","match","exec","stack","repeat","curr","s_nl","s_sl","s_as","delimRe","delim","expected","actual","equals","_fieldsById","_fieldsArray","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","P","fieldName","oneOfName","fld","bake","fn","ctx","Promise","reject","onload","xhr","status","responseText","fs","readFile","XMLHttpRequest","onreadystatechange","readyState","open","send","isAbsolutePath","normalizePath","parts","prefix","isFinite","description","TypeError","originPath","importPath","alreadyNormalized","dst","format","params","param","stringify","underScore","newBuffer","size","allocUnsafe","LongBitsPrototype","zero","zzEncode","fromNumber","from","fromString","low","high","unsigned","charCodeAt","fromHash","hash","toHash","mask","part0","part1","part2","pool","alloc","SIZE","MAX","slab","isNode","global","versions","node","dcodeIO","longFromHash","bits","fromBits","target","descriptors","descriptor","ie8","ucKey","defineProperty","freeze","Op","val","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","writeString","c2","byteLength","strlen","BufferWriter","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","WriterPrototype","op","writeFloat","writeDouble","writeBytes","BufferWriterPrototype","writeStringBuffer","utf8Write","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar util = require(23);\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {CodegenInstance} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var args   = Array.prototype.slice.call(arguments),\r\n        src    = ['\\t\"use strict\"'],\r\n        indent = 1,\r\n        inCase = false;\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a {@link util.sprintf|sprintf}-like appender function.\r\n     * @typedef CodegenInstance\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {CodegenInstance} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var line = util.sprintf.apply(null, arguments);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (var index = 0; index < level; ++index)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + args.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === 'object') {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n\r\ncodegen.encode = require(4);\r\ncodegen.decode = require(3);\r\ncodegen.verify = require(5);\r\n","\"use strict\";\r\n\r\n/**\r\n * Wire format decoder using code generation on top of reflection that also provides a fallback.\r\n * @exports codegen.decode\r\n * @namespace\r\n */\r\nvar decode = exports;\r\n\r\nvar Enum    = require(7),\r\n    Reader  = require(17),\r\n    types   = require(22),\r\n    util    = require(23),\r\n    codegen = require(2);\r\n\r\n/**\r\n * Decodes a message of `this` message's type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Prototype} Populated runtime message\r\n * @this Type\r\n */\r\ndecode.fallback = function decode_fallback(readerOrBuffer, length) {\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.getFieldsById(),\r\n        reader  = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new (this.getCtor())();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.tag(),\r\n            field    = fields[tag.id].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                    length  = reader.uint32();\r\n                var map = message[field.name] = {};\r\n                if (length) {\r\n                    length += reader.pos;\r\n                    var ks = [], vs = [];\r\n                    while (reader.pos < length) {\r\n                        if (reader.tag().id === 1)\r\n                            ks[ks.length] = reader[keyType]();\r\n                        else if (types.basic[type] !== undefined)\r\n                            vs[vs.length] = reader[type]();\r\n                        else\r\n                            vs[vs.length] = field.resolvedType.decode(reader, reader.uint32());\r\n                    }\r\n                    for (var i = 0; i < ks.length; ++i)\r\n                        map[typeof ks[i] === 'object' ? util.longToHash(ks[i]) : ks[i]] = vs[i];\r\n                }\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] && message[field.name].length ? message[field.name] : message[field.name] = [];\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && tag.wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values[values.length] = reader[type]();\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] !== undefined)\r\n                    values[values.length] = reader[type]();\r\n                else\r\n                    values[values.length] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] !== undefined)\r\n                message[field.name] = reader[type]();\r\n              else\r\n                message[field.name] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(tag.wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type, with an identical signature to {@link codegen.decode.fallback}.\r\n * @param {Type} mtype Message type\r\n * @returns {CodegenInstance} {@link codegen|Codegen} instance\r\n */\r\ndecode.generate = function decode_generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.tag()\")\r\n        (\"switch(t.id){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"var n=r.uint32(),o={}\")\r\n                (\"if(n){\")\r\n                    (\"n+=r.pos\")\r\n                    (\"var k=[],v=[]\")\r\n                    (\"while(r.pos<n){\")\r\n                        (\"if(r.tag().id===1)\")\r\n                            (\"k[k.length]=r.%s()\", keyType);\r\n\r\n                        if (types.basic[type] !== undefined) gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=r.%s()\", type);\r\n\r\n                        else gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=types[%d].decode(r,r.uint32())\", i, i);\r\n                    gen\r\n                    (\"}\")\r\n                    (\"for(var i=0;i<k.length;++i)\")\r\n                        (\"o[typeof(k[i])==='object'?util.longToHash(k[i]):k[i]]=v[i]\")\r\n                (\"}\")\r\n                (\"m%s=o\", prop);\r\n\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s&&m%s.length?m%s:m%s=[]\", prop, prop, prop, prop);\r\n\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n                (\"if(t.wireType===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s[m%s.length]=r.%s()\", prop, prop, type)\r\n                (\"}else\");\r\n            }\r\n\r\n            if (types.basic[type] !== undefined) gen\r\n\r\n                    (\"m%s[m%s.length]=r.%s()\", prop, prop, type);\r\n\r\n            else gen\r\n\r\n                    (\"m%s[m%s.length]=types[%d].decode(r,r.uint32())\", prop, prop, i, i);\r\n\r\n        } else if (types.basic[type] !== undefined) { gen\r\n\r\n                (\"m%s=r.%s()\", prop, type);\r\n\r\n        } else { gen\r\n\r\n                (\"m%s=types[%d].decode(r,r.uint32())\", prop, i, i);\r\n\r\n        } gen\r\n                (\"break\");\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t.wireType)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Wire format encoder using code generation on top of reflection that also provides a fallback.\r\n * @exports codegen.encode\r\n * @namespace\r\n */\r\nvar encode = exports;\r\n\r\nvar Enum    = require(7),\r\n    Writer  = require(27),\r\n    types   = require(22),\r\n    util    = require(23),\r\n    codegen = require(2);\r\n\r\n/**\r\n * Encodes a message of `this` message's type.\r\n * @param {Prototype|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n * @this Type\r\n */\r\nencode.fallback = function encode_fallback(message, writer) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer.create();\r\n    var fields = this.getFieldsArray(), fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            var value, keys;\r\n            if ((value = message[field.name]) && (keys = Object.keys(value)).length) {\r\n                writer.fork();\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    writer.tag(1, types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType !== undefined)\r\n                        writer.tag(2, wireType)[type](value[keys[i]]);\r\n                    else\r\n                        field.resolvedType.encode(value[keys[i]], writer.tag(2,2).fork()).ldelim();\r\n                }\r\n                writer.ldelim(field.id);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    writer.fork();\r\n                    var i = 0;\r\n                    while (i < values.length)\r\n                        writer[type](values[i++]);\r\n                    writer.ldelim(field.id);\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType !== undefined)\r\n                        while (i < values.length)\r\n                            writer.tag(field.id, wireType)[type](values[i++]);\r\n                    else\r\n                        while (i < values.length)\r\n                            field.resolvedType.encode(values[i++], writer.tag(field.id,2).fork()).ldelim();\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name];\r\n            if (field.required || value !== undefined && field.long ? util.longNeq(value, field.defaultValue) : value !== field.defaultValue) {\r\n                if (wireType !== undefined)\r\n                    writer.tag(field.id, wireType)[type](value);\r\n                else {\r\n                    field.resolvedType.encode(value, writer.fork());\r\n                    if (writer.len || field.required)\r\n                        writer.ldelim(field.id);\r\n                    else\r\n                        writer.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type, with an identical signature to {@link codegen.encode.fallback}.\r\n * @param {Type} mtype Message type\r\n * @returns {CodegenInstance} {@link codegen|Codegen} instance\r\n */\r\nencode.generate = function encode_generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = util.safeProp(field.name);\r\n        \r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType     = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                keyWireType = types.mapKey[keyType];\r\n            gen\r\n\r\n    (\"if(m%s){\", prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0,ks=Object.keys(m%s);i<ks.length;++i){\", prop)\r\n            (\"w.tag(1,%d).%s(ks[i])\", keyWireType, keyType);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n            (\"w.tag(2,%d).%s(m%s[ks[i]])\", wireType, type, prop);\r\n\r\n            else gen\r\n            \r\n            (\"types[%d].encode(m%s[ks[i]],w.tag(2,2).fork()).ldelim()\", i, prop);\r\n\r\n            gen\r\n        (\"}\")\r\n        (\"w.len&&w.ldelim(%d)||w.reset()\", field.id)\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim(%d)\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.tag(%d,%d).%s(m%s[i])\", field.id, wireType, type, prop);\r\n                else gen\r\n            (\"types[%d].encode(m%s[i],w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(m%s!==undefined&&util.longNeq(m%s,%j))\", prop, prop, field.defaultValue);\r\n                else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n        (\"w.tag(%d,%d).%s(m%s)\", field.id, wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n        (\"types[%d].encode(m%s,w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n        \r\n            else gen\r\n\r\n        (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", i, prop, field.id);\r\n    \r\n        }\r\n    }\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Runtime message verifier using code generation on top of reflection that also provides a fallback.\r\n * @exports codegen.verify\r\n * @namespace\r\n */\r\nvar verify = exports;\r\n\r\nvar Enum    = require(7),\r\n    Type    = require(21),\r\n    util    = require(23),\r\n    codegen = require(2);\r\n\r\n/**\r\n * Verifies a runtime message of `this` message type.\r\n * @param {Prototype|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n * @this {Type}\r\n */\r\nverify.fallback = function verify_fallback(message) {\r\n    var fields = this.getFieldsArray(),\r\n        i = 0;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        if (value === undefined) {\r\n            if (field.required)\r\n                return \"missing required field \" + field.name + \" in \" + this.getFullName();\r\n\r\n        } else if (field.resolvedType instanceof Enum && field.resolvedType.getValuesById()[value] === undefined) {\r\n            return \"invalid enum value \" + field.name + \" = \" + value + \" in \" + this.getFullName();\r\n\r\n        } else if (field.resolvedType instanceof Type) {\r\n            if (!value && field.required)\r\n                return \"missing required field \" + field.name + \" in \" + this.getFullName();\r\n            var reason;\r\n            if ((reason = field.resolvedType.verify(value)) !== null)\r\n                return reason;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type, with an identical signature to {@link codegen.verify.fallback}.\r\n * @param {Type} mtype Message type\r\n * @returns {CodegenInstance} {@link codegen|Codegen} instance\r\n */\r\nverify.generate = function verify_generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = codegen(\"m\");\r\n    var hasReasonVar = false;\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.required) { gen\r\n\r\n            (\"if(m%s===undefined)\", prop)\r\n                (\"return 'missing required field %s in %s'\", field.name, mtype.getFullName());\r\n\r\n        } else if (field.resolvedType instanceof Enum) {\r\n            var values = util.toArray(field.resolvedType.values); gen\r\n\r\n            (\"switch(m%s){\", prop)\r\n                (\"default:\")\r\n                    (\"return 'invalid enum value %s = '+m%s+' in %s'\", field.name, prop, mtype.getFullName());\r\n\r\n            for (var j = 0, l = values.length; j < l; ++j) gen\r\n                (\"case %d:\", values[j]); gen\r\n            (\"}\");\r\n\r\n        } else if (field.resolvedType instanceof Type) {\r\n            if (field.required) gen\r\n\r\n            (\"if(!m%s)\", prop)\r\n                (\"return 'missing required field %s in %s'\", field.name, mtype.getFullName());\r\n\r\n            if (!hasReasonVar) { gen(\"var r\"); hasReasonVar = true; } gen\r\n\r\n            (\"if((r=types[%d].verify(m%s))!==null)\", i, prop)\r\n                (\"return r\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(13);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nvar util = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error('duplicate name \"' + name + '\" in ' + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error('\"' + name + '\" is not a name of ' + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(13);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nvar Type      = require(21),\r\n    Enum      = require(7),\r\n    MapField  = require(10),\r\n    types     = require(22),\r\n    util      = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object} [rule=\"optional\"] Field rule\r\n * @param {string|Object} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== 'optional' ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined)\r\n        return MapField.fromJSON(name, json);\r\n    return new Field(name, json.id, json.type, json.role, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options['default']) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n    \r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Prototype#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (this.resolvedType instanceof Enum && options['enum'] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        else if (this.long && options.long)\r\n            return options.long === Number\r\n                ? typeof value === 'number'\r\n                ? value\r\n                : util.Long.fromValue(value).toNumber()\r\n                : util.Long.fromValue(value, this.type.charAt(0) === 'u').toString();\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = inherits;\r\n\r\nvar Prototype = require(16),\r\n    Type      = require(21),\r\n    util      = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Options passed to {@link inherits}, modifying its behavior.\r\n * @typedef InheritanceOptions\r\n * @type {Object}\r\n * @property {boolean} [noStatics=false] Skips adding the default static methods on top of the constructor\r\n * @property {boolean} [noRegister=false] Skips registering the constructor with the reflected type\r\n */\r\n\r\n/**\r\n * Inherits a custom class from the message prototype of the specified message type.\r\n * @param {*} clazz Inheriting class constructor\r\n * @param {Type} type Inherited message type\r\n * @param {InheritanceOptions} [options] Inheritance options\r\n * @returns {Prototype} Created prototype\r\n */\r\nfunction inherits(clazz, type, options) {\r\n    if (typeof clazz !== 'function')\r\n        throw _TypeError(\"clazz\", \"a function\");\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    if (!options)\r\n        options = {};\r\n\r\n    /**\r\n     * This is not an actual type but stands as a reference for any constructor of a custom message class that you pass to the library.\r\n     * @name Class\r\n     * @extends Prototype\r\n     * @constructor\r\n     * @param {Object.<string,*>} [properties] Properties to set on the message\r\n     * @see {@link inherits}\r\n     */\r\n\r\n    var classProperties = {\r\n\r\n        /**\r\n         * Reference to the reflected type.\r\n         * @name Class.$type\r\n         * @type {Type}\r\n         * @readonly\r\n         */\r\n        $type: {\r\n            value: type\r\n        }\r\n    };\r\n\r\n    if (!options.noStatics)\r\n        util.merge(classProperties, {\r\n\r\n            /**\r\n             * Encodes a message of this type to a buffer.\r\n             * @name Class.encode\r\n             * @function\r\n             * @param {Prototype|Object} message Message to encode\r\n             * @param {Writer} [writer] Writer to use\r\n             * @returns {Writer} Writer\r\n             */\r\n            encode: {\r\n                value: function encode(message, writer) {\r\n                    return this.$type.encode(message, writer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Encodes a message of this type preceeded by its length as a varint to a buffer.\r\n             * @name Class.encodeDelimited\r\n             * @function\r\n             * @param {Prototype|Object} message Message to encode\r\n             * @param {Writer} [writer] Writer to use\r\n             * @returns {Writer} Writer\r\n             */\r\n            encodeDelimited: {\r\n                value: function encodeDelimited(message, writer) {\r\n                    return this.$type.encodeDelimited(message, writer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Decodes a message of this type from a buffer.\r\n             * @name Class.decode\r\n             * @function\r\n             * @param {Uint8Array} buffer Buffer to decode\r\n             * @returns {Prototype} Decoded message\r\n             */\r\n            decode: {\r\n                value: function decode(buffer) {\r\n                    return this.$type.decode(buffer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Decodes a message of this type preceeded by its length as a varint from a buffer.\r\n             * @name Class.decodeDelimited\r\n             * @function\r\n             * @param {Uint8Array} buffer Buffer to decode\r\n             * @returns {Prototype} Decoded message\r\n             */\r\n            decodeDelimited: {\r\n                value: function decodeDelimited(buffer) {\r\n                    return this.$type.decodeDelimited(buffer);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Verifies a message of this type.\r\n             * @name Class.verify\r\n             * @function\r\n             * @param {Prototype|Object} message Message or plain object to verify\r\n             * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            verify: {\r\n                value: function verify(message) {\r\n                    return this.$type.verify(message);\r\n                }\r\n            }\r\n\r\n        }, true);\r\n\r\n    util.props(clazz, classProperties);\r\n    var prototype = inherits.defineProperties(new Prototype(), type);\r\n    clazz.prototype = prototype;\r\n    prototype.constructor = clazz;\r\n\r\n    if (!options.noRegister)\r\n        type.setCtor(clazz);\r\n\r\n    return prototype;\r\n}\r\n\r\n/**\r\n * Defines the reflected type's default values and virtual oneof properties on the specified prototype.\r\n * @memberof inherits\r\n * @param {Prototype} prototype Prototype to define properties upon\r\n * @param {Type} type Reflected message type\r\n * @returns {Prototype} The specified prototype\r\n */\r\ninherits.defineProperties = function defineProperties(prototype, type) {\r\n\r\n    var prototypeProperties = {\r\n\r\n        /**\r\n         * Reference to the reflected type.\r\n         * @name Prototype#$type\r\n         * @type {Type}\r\n         * @readonly\r\n         */\r\n        $type: {\r\n            value: type\r\n        }\r\n    };\r\n\r\n    // Initialize default values\r\n    type.getFieldsArray().forEach(function(field) {\r\n        field.resolve();\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue)\r\n            ? util.emptyObject\r\n            : field.defaultValue;\r\n    });\r\n\r\n    // Define each oneof with a non-enumerable getter and setter for the present field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                var keys = Object.keys(this);\r\n                for (var i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                var keys = oneof.oneof;\r\n                for (var i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    util.props(prototype, prototypeProperties);\r\n    return prototype;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(8);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nvar Enum    = require(7),\r\n    types   = require(22),\r\n    util    = require(23);\r\n\r\n/**\r\n * Constructs a new map field.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(13);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nvar Type = require(21),\r\n    util = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (type && !util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    this.resolvedResponseType = resolved;\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(13);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nvar Enum    = require(7),\r\n    Type    = require(21),\r\n    Field   = require(8),\r\n    Service = require(19),\r\n    util    = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\nvar nestedTypes = [ Enum, Type, Service, Field, Namespace ],\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(', ');\r\n\r\n/**\r\n * Constructs a new namespace.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson)\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw _TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split('.');\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split('.');\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found instanceof Namespace && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.extend = extend;\r\n\r\nvar Root = require(18),\r\n    util = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join('.');\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Lets the specified constructor extend this class.\r\n * @memberof ReflectionObject\r\n * @param {*} constructor Extending constructor\r\n * @returns {Object} Prototype\r\n * @this ReflectionObject\r\n */\r\nfunction extend(constructor) {\r\n    var proto = constructor.prototype = Object.create(this.prototype);\r\n    proto.constructor = constructor;\r\n    constructor.extend = extend;\r\n    return proto;\r\n}\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Constructor name, space, full name\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    return this.constructor.name + \" \" + this.getFullName();\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(13);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nvar Field = require(8),\r\n    util  = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = this.name.substring(0, 1).toUpperCase() + this.name.substring(1);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fields = [];\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fields.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fields.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fields.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fields.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fields.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize  = require(20),\r\n    Root      = require(18),\r\n    Type      = require(21),\r\n    Field     = require(8),\r\n    MapField  = require(10),\r\n    OneOf     = require(14),\r\n    Enum      = require(7),\r\n    Service   = require(19),\r\n    Method    = require(11),\r\n    types     = require(22),\r\n    util      = require(23);\r\nvar camelCase = util.camelCase;\r\n\r\nvar nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nvar s_required = \"required\",\r\n    s_repeated = \"repeated\",\r\n    s_optional = \"optional\",\r\n    s_option   = \"option\",\r\n    s_name     = \"name\",\r\n    s_type     = \"type\";\r\nvar s_open     = \"{\",\r\n    s_close    = \"}\",\r\n    s_bopen    = '(',\r\n    s_bclose   = ')',\r\n    s_semi     = \";\",\r\n    s_dq       = '\"',\r\n    s_sq       = \"'\";\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} [root] Root to populate\r\n * @returns {ParserResult} Parser result\r\n */\r\nfunction parse(source, root) {\r\n    /* eslint-disable default-case, callback-return */\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    function illegal(token, name) {\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (line \" + tn.line() + s_bclose);\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== s_dq && token !== s_sq)\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === s_dq || token === s_sq);\r\n        return values.join('');\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case s_sq:\r\n            case s_dq:\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(s_semi);\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === '-') {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, 'number');\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"min\": return 1;\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === '-' && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, s_name);\r\n        ptr = ptr.define(pkg);\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(s_semi);\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        var p3;\r\n        if ([ \"proto2\", p3 = \"proto3\" ].indexOf(syntax) < 0)\r\n            throw illegal(syntax, \"syntax\");\r\n        isProto3 = syntax === p3;\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case s_option:\r\n                parseOption(parent, token);\r\n                skip(s_semi);\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n                    case s_required:\r\n                    case s_optional:\r\n                    case s_repeated:\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, s_optional);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, s_type);\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, s_type);\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, s_type);\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (token === s_option) {\r\n                    parseOption(oneof, token);\r\n                    skip(s_semi);\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, s_optional);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (lower(token) === s_option)\r\n                    parseOption(enm);\r\n                else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, s_name);\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(s_bopen, true);\r\n        var name = next();\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, s_name);\r\n        if (custom) {\r\n            skip(s_bclose);\r\n            name = s_bopen + name + s_bclose;\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (!nameRe.test(token))\r\n                    throw illegal(token, s_name);\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, s_option);\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(s_semi);\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(service, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(s_bopen);\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(s_bclose); skip(\"returns\"); skip(s_bopen);\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(s_bclose);\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(method, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_required:\r\n                    case s_repeated:\r\n                    case s_optional:\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, s_optional, reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case s_option:\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(s_semi);\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    return {\r\n        'package'     : pkg,\r\n        'imports'     : imports,\r\n        'weakImports' : weakImports,\r\n        'syntax'      : syntax,\r\n        'root'        : root\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = Prototype;\r\n\r\n/**\r\n * Constructs a new prototype.\r\n * This method should be called from your custom constructors, i.e. `Prototype.call(this, properties)`.\r\n * @classdesc Runtime message prototype ready to be extended by custom classes or generated code.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @abstract\r\n * @see {@link inherits}\r\n * @see {@link Class}\r\n */\r\nfunction Prototype(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a runtime message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {*} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {*} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @param {boolean} [options.defaults=false] Also sets default values on the resulting object\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nPrototype.prototype.asJSON = function asJSON(options) {\r\n    var any    = !(options && options.fieldsOnly),\r\n        fields = this.constructor.$type.fields,\r\n        json   = {};\r\n    var keys;\r\n    if (options && options.defaults) {\r\n        keys = [];\r\n        for (var k in this) // eslint-disable-line guard-for-in\r\n            keys.push(k);\r\n    } else\r\n        keys = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && value.length) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (any)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util      = require(26),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Configures the Reader interface according to the environment.\r\n * @memberof Reader\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader.configure = configure;\r\n\r\n/**\r\n * Constructs a new reader using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = function create(buffer) {\r\n    return new (util.Buffer && util.Buffer.isBuffer(buffer) && BufferReader || Reader)(buffer);\r\n};\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice;\r\n\r\n/**\r\n * Tag read.\r\n * @constructor\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @ignore\r\n */\r\nfunction Tag(id, wireType) {\r\n    this.id = id;\r\n    this.wireType = wireType;\r\n}\r\n\r\n/**\r\n * Reads a tag.\r\n * @returns {{id: number, wireType: number}} Field id and wire type\r\n */\r\nReaderPrototype.tag = function read_tag() {\r\n    if (this.pos >= this.len)\r\n        throw indexOutOfRange(this);\r\n    return new Tag(this.buf[this.pos] >>> 3, this.buf[this.pos++] & 7);\r\n};\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    // 1 byte\r\n    var octet = this.buf[this.pos++],\r\n        value = octet & 127;\r\n    if (octet > 127) { // false if octet is undefined (pos >= len)\r\n        // 2 bytes\r\n        octet = this.buf[this.pos++];\r\n        value |= (octet & 127) << 7;\r\n        if (octet > 127) {\r\n            // 3 bytes\r\n            octet = this.buf[this.pos++];\r\n            value |= (octet & 127) << 14;\r\n            if (octet > 127) {\r\n                // 4 bytes\r\n                octet = this.buf[this.pos++];\r\n                value |= (octet & 127) << 21;\r\n                if (octet > 127) {\r\n                    // 5 bytes\r\n                    octet = this.buf[this.pos++];\r\n                    value |= octet << 28;\r\n                    if (octet > 127) {\r\n                        // 6..10 bytes (sign extended)\r\n                        this.pos += 5;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (this.pos > this.len) {\r\n        this.pos = this.len;\r\n        throw indexOutOfRange(this);\r\n    }\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    return this.int32() >>> 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.int32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    var lo = 0, hi = 0,\r\n        i  = 0, b  = 0;\r\n    if (this.len - this.pos > 9) { // fast route\r\n        for (i = 0; i < 4; ++i) {\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.int32() !== 0;\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    this.pos += 4;\r\n    return this.buf[this.pos - 4]\r\n         | this.buf[this.pos - 3] << 8\r\n         | this.buf[this.pos - 2] << 16\r\n         | this.buf[this.pos - 1] << 24;\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongFixed() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    ,\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    );\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readLongFixed.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readLongFixed.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readLongFixed.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readLongFixed.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[3] = buf[pos  ];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[0] = buf[pos  ];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[3] = buf[pos++];\r\n                f8b[4] = buf[pos++];\r\n                f8b[5] = buf[pos++];\r\n                f8b[6] = buf[pos++];\r\n                f8b[7] = buf[pos  ];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos++];\r\n                f8b[6] = buf[pos++];\r\n                f8b[5] = buf[pos++];\r\n                f8b[4] = buf[pos++];\r\n                f8b[3] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[0] = buf[pos  ];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    // ref: https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js\r\n    var bytes = this.bytes(),\r\n        len = bytes.length;\r\n    if (len) {\r\n        var out = new Array(len), p = 0, c = 0;\r\n        while (p < len) {\r\n            var c1 = bytes[p++];\r\n            if (c1 < 128)\r\n                out[c++] = c1;\r\n            else if (c1 > 191 && c1 < 224)\r\n                out[c++] = (c1 & 31) << 6 | bytes[p++] & 63;\r\n            else if (c1 > 239 && c1 < 365) {\r\n                var u = ((c1 & 7) << 18 | (bytes[p++] & 63) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63) - 0x10000;\r\n                out[c++] = 0xD800 + (u >> 10);\r\n                out[c++] = 0xDC00 + (u & 1023);\r\n            } else\r\n                out[c++] = (c1 & 15) << 12 | (bytes[p++] & 63) << 6 | bytes[p++] & 63;\r\n        }\r\n        return String.fromCharCode.apply(String, out.slice(0, c));\r\n    }\r\n    return \"\";\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                var tag = this.tag();\r\n                if (tag.wireType === 4)\r\n                    break;\r\n                this.skipType(tag.wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    if (!util.Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n    readStringBuffer = util.Buffer.prototype.utf8Slice // around forever, but not present in browser buffer\r\n        ? readStringBuffer_utf8Slice\r\n        : readStringBuffer_toString;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nif (typeof Float32Array === 'undefined') // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nif (typeof Float64Array === 'undefined') // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\nvar readStringBuffer;\r\n\r\nfunction readStringBuffer_utf8Slice(buf, start, end) {\r\n    return buf.utf8Slice(start, end); // fastest\r\n}\r\n\r\nfunction readStringBuffer_toString(buf, start, end) {\r\n    return buf.toString(\"utf8\", start, end); // 2nd, again assertions\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return readStringBuffer(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(12);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nvar Field  = require(8),\r\n    util   = require(23),\r\n    common = require(6);\r\n\r\n/**\r\n * Constructs a new root namespace.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.resolvePath;\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {function(?Error, Root=)} callback Node-style callback function\r\n * @returns {undefined}\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nRootPrototype.load = function load(filename, callback) {\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                var parsed = require(15)(source, self);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            ++queued;\r\n            setTimeout(function() {\r\n                --queued;\r\n                process(filename, common[filename]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        ++queued;\r\n        util.fetch(filename, function(err, source) {\r\n            --queued;\r\n            if (!callback)\r\n                return; // terminated meanwhile\r\n            if (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        });\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (!queued)\r\n        finish(null);\r\n    return undefined;\r\n};\r\n// function load(filename:string, callback:function):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Promise<Root>} Promise\r\n * @throws {TypeError} If arguments are invalid\r\n * @variation 2\r\n */\r\n// function load(filename:string):Promise<Root>\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.toString = function toString() {\r\n    return this.constructor.name;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(12);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nvar Method = require(11),\r\n    util   = require(23);\r\n\r\n/**\r\n * Constructs a new service.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @function\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {function(?Error, Uint8Array=)} callback Node-style callback called with the error, if any, and the response data\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpc RPC implementation ({@link RPCImpl|see})\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {Object} Runtime service\r\n */\r\nServicePrototype.create = function create(rpc, requestDelimited, responseDelimited) {\r\n    var rpcService = {};\r\n    util.prop(rpcService, \"$rpc\", {\r\n        value: rpc\r\n    });\r\n    this.getMethodsArray().forEach(function(method) {\r\n        var lcName = method.name.substring(0, 1).toLowerCase() + method.name.substring(1);\r\n        rpcService[lcName] = function(request, callback) {\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited && method.resolvedRequestType.encodeDelimited(request) || method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === 'function' && setImmediate || setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpc(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited && method.resolvedResponseType.decodeDelimited(responseData) || method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    callback(err2);\r\n                    return;\r\n                }\r\n                callback(null, response);\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n\r\nvar s_nl = \"\\n\",\r\n    s_sl = '/',\r\n    s_as = '*';\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable default-case, callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === '\"' ? stringDoubleRe : stringSingleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === s_nl)\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === s_sl) {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === s_sl) { // Line\r\n                    while (charAt(++offset) !== s_nl)\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === s_as) { /* Block */\r\n                    do {\r\n                        if (curr === s_nl)\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== s_as || curr !== s_sl);\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return s_sl;\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === '\"' || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable default-case, callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(12);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nvar Enum      = require(7),\r\n    OneOf     = require(14),\r\n    Field     = require(8),\r\n    Service   = require(19),\r\n    Prototype = require(16),\r\n    Reader    = require(17),\r\n    Writer    = require(27),\r\n    inherits  = require(9),\r\n    util      = require(23),\r\n    codegen   = require(2);\r\n\r\n/**\r\n * Constructs a new message type.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Prototype}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            if (this._ctor)\r\n                return this._ctor;\r\n            var ctor;\r\n            if (codegen.supported)\r\n                ctor = codegen(\"p\")(\"P.call(this,p)\").eof(this.getFullName() + \"$ctor\", {\r\n                    P: Prototype\r\n                });\r\n            else\r\n                ctor = function GenericMessage(properties) {\r\n                    Prototype.call(this, properties);\r\n                };\r\n            ctor.prototype = inherits(ctor, this);\r\n            this._ctor = ctor;\r\n            return ctor;\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Prototype))\r\n                throw util._TypeError(\"ctor\", \"a constructor inheriting from Prototype\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object|*} [properties] Properties to set\r\n * @param {*} [ctor] Constructor to use.\r\n * Defaults to use the internal constuctor.\r\n * @returns {Prototype} Message instance\r\n */\r\nTypePrototype.create = function create(properties, ctor) {\r\n    if (!properties || typeof properties === 'function') {\r\n        ctor = properties;\r\n        properties = undefined;\r\n    } else if (properties /* already */ instanceof Prototype)\r\n        return properties;\r\n    if (ctor) {\r\n        if (!(ctor.prototype instanceof Prototype))\r\n            throw util._TypeError(\"ctor\", \"a constructor inheriting from Prototype\");\r\n    } else\r\n        ctor = this.getCtor();\r\n    return new ctor(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Prototype|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode(message, writer) {\r\n    return (this.encode = codegen.supported\r\n        ? codegen.encode.generate(this).eof(this.getFullName() + \"$encode\", {\r\n              Writer : Writer,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : codegen.encode.fallback\r\n    ).call(this, message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Prototype|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Prototype} Decoded message\r\n */\r\nTypePrototype.decode = function decode(readerOrBuffer, length) {\r\n    return (this.decode = codegen.supported\r\n        ? codegen.decode.generate(this).eof(this.getFullName() + \"$decode\", {\r\n              Reader : Reader,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : codegen.decode.fallback\r\n    ).call(this, readerOrBuffer, length);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Prototype} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that enum values are valid and that any required fields are present.\r\n * @param {Prototype|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify(message) {\r\n    return (this.verify = codegen.supported\r\n        ? codegen.verify.generate(this).eof(this.getFullName() + \"$verify\", {\r\n              types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; })\r\n          })\r\n        : codegen.verify.fallback\r\n    ).call(this, message);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(23);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Utility functions.\r\n * @namespace\r\n */\r\nvar util = exports;\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @memberof util\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n}\r\n\r\nutil.isString = isString;\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === 'object');\r\n};\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Returns a promise from a node-style function.\r\n * @memberof util\r\n * @param {function(Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var args = [];\r\n    for (var i = 2; i < arguments.length; ++i)\r\n        args.push(arguments[i]);\r\n    return new Promise(function(resolve, reject) {\r\n        fn.apply(ctx, args.concat(\r\n            function(err/*, varargs */) {\r\n                if (err) reject(err);\r\n                else resolve.apply(null, Array.prototype.slice.call(arguments, 1));\r\n            }\r\n        ));\r\n    });\r\n}\r\n\r\nutil.asPromise = asPromise;\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {function(?Error, string=)} [callback] Node-style callback\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, util, path);\r\n    var fs; try { fs = require(\"fs\"); } catch (e) {} // eslint-disable-line no-empty\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", callback);\r\n    var xhr = new XMLHttpRequest();\r\n    function onload() {\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n        if (isString(xhr.responseText))\r\n            return callback(null, xhr.responseText);\r\n        return callback(Error(\"request failed\"));\r\n    }\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4)\r\n            onload();\r\n    };\r\n    xhr.open(\"GET\", path, true);\r\n    xhr.send();\r\n    return undefined;\r\n}\r\n\r\nutil.fetch = fetch;\r\n\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @memberof util\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\nfunction isAbsolutePath(path) {\r\n    return /^(?:\\/|[a-zA-Z0-9]+:)/.test(path);\r\n}\r\n\r\nutil.isAbsolutePath = isAbsolutePath;\r\n\r\n/**\r\n * Normalizes the specified path.\r\n * @memberof util\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\nfunction normalizePath(path) {\r\n    path = path.replace(/\\\\/g, '/')\r\n               .replace(/\\/{2,}/g, '/');\r\n    var parts = path.split('/');\r\n    var abs = isAbsolutePath(path);\r\n    var prefix = \"\";\r\n    if (abs)\r\n        prefix = parts.shift() + '/';\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === '..') {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (abs)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === '.')\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join('/');\r\n}\r\n\r\nutil.normalizePath = normalizePath;\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path that was used to fetch the origin file\r\n * @param {string} importPath Import path specified in the origin file\r\n * @param {boolean} [alreadyNormalized] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the imported file\r\n */\r\nutil.resolvePath = function resolvePath(originPath, importPath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        importPath = normalizePath(importPath);\r\n    if (isAbsolutePath(importPath))\r\n        return importPath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalizePath(originPath);\r\n    originPath = originPath.replace(/(?:\\/|^)[^/]+$/, '');\r\n    return originPath.length ? normalizePath(originPath + '/' + importPath) : importPath;\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"['\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"']\";\r\n};\r\n\r\n/**\r\n * Minimalistic sprintf.\r\n * @param {string} format Format string\r\n * @param {...*} args Replacements\r\n * @returns {string} Formatted string\r\n */\r\nutil.sprintf = function sprintf(format) {\r\n    var params = Array.prototype.slice.call(arguments, 1),\r\n        index  = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var param = params[index++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(param);\r\n            case \"p\":\r\n                return util.safeProp(param);\r\n            default:\r\n                return String(param);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Converts a string to camel case notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Converts a string to underscore notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.underScore = function underScore(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) { return \"_\" + $1.toLowerCase(); });\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0; \r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe && util.Buffer.allocUnsafe(size) || new util.Buffer(size)\r\n        : new (typeof Uint8Array !== 'undefined' && Uint8Array || Array)(size);\r\n};\r\n\r\n// Merge in runtime utility\r\nutil.merge(util, require(26));\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(23);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nLongBits.from = function from(value) {\r\n    switch (typeof value) { // eslint-disable-line default-case\r\n        case 'number':\r\n            return LongBits.fromNumber(value);\r\n        case 'string':\r\n            value = util.Long.fromString(value); // throws without a long lib\r\n    }\r\n    return (value.low || value.high) && new LongBits(value.low >>> 0, value.high >>> 0) || zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return new util.Long(this.lo, this.hi, unsigned);\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * A drop-in buffer pool, similar in functionality to what node uses for buffers.\r\n * @memberof util\r\n * @function\r\n * @param {function(number):Uint8Array} alloc Allocator\r\n * @param {function(number, number):Uint8Array} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {function(number):Uint8Array} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nvar LongBits = util.LongBits = require(\"./longbits\");\r\n\r\nutil.pool = require(\"./pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nvar isNode = util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Buffer = null;\r\n\r\nif (isNode)\r\n    try { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || null;\r\n\r\nif (!util.Long && isNode)\r\n    try { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : '\\0\\0\\0\\0\\0\\0\\0\\0';\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === 'number'\r\n         ? typeof b === 'number'\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === 'number'\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ie8 = !-[1,];\r\n    var ucKey = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n    if (descriptor.get)\r\n        target['get' + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target['set' + ucKey] = ie8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (ie8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze([]);\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze({});\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util      = require(26),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer operation.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {*} val Value to write\r\n * @param {number} len Value byte length\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, val, len) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {?Writer.Op}\r\n     */\r\n    this.next = null;\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @param {State} next Next state entry\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer, next) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = next;\r\n}\r\n\r\nWriter.State = State;\r\n\r\n/**\r\n * Constructs a new writer.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = function create() {\r\n    return new (util.Buffer && BufferWriter || Writer);\r\n};\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new ArrayImpl(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (ArrayImpl !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    var op = new Op(fn, val, len);\r\n    this.tail.next = op;\r\n    this.tail = op;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(buf, pos, val) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\n/**\r\n * Writes a tag.\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.tag = function write_tag(id, wireType) {\r\n    return this.push(writeByte, 1, id << 3 | wireType & 7);\r\n};\r\n\r\nfunction writeVarint32(buf, pos, val) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value >>>= 0;\r\n    return value < 128\r\n        ? this.push(writeByte, 1, value)\r\n        : this.push(writeVarint32,\r\n              value < 16384     ? 2\r\n            : value < 2097152   ? 3\r\n            : value < 268435456 ? 4\r\n            :                     5\r\n        , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32(value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeVarint64(buf, pos, val) {\r\n    // tends to deoptimize. stays optimized when using bits directly.\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(buf, pos, val) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.hi).push(writeFixed32, 4, bits.lo);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.hi).push(writeFixed32, 4, bits.lo);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(buf, pos, val) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(buf, pos, val) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(buf, pos, val) {\r\n        ieee754.write(buf, val, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(buf, pos, val) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(buf, pos, val) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(buf, pos, val) {\r\n        ieee754.write(buf, val, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(buf, pos, val) {\r\n        buf.set(val, pos);\r\n    }\r\n    : function writeBytes_for(buf, pos, val) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nfunction writeString(buf, pos, val) {\r\n    for (var i = 0; i < val.length; ++i) {\r\n        var c1 = val.charCodeAt(i), c2;\r\n        if (c1 < 128) {\r\n            buf[pos++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buf[pos++] = c1 >> 6       | 192;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = val.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buf[pos++] = c1 >> 18      | 240;\r\n            buf[pos++] = c1 >> 12 & 63 | 128;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        } else {\r\n            buf[pos++] = c1 >> 12      | 224;\r\n            buf[pos++] = c1 >> 6  & 63 | 128;\r\n            buf[pos++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n}\r\n\r\nfunction byteLength(val) {\r\n    var strlen = val.length >>> 0;\r\n    var len = 0;\r\n    for (var i = 0; i < strlen; ++i) {\r\n        var c1 = val.charCodeAt(i);\r\n        if (c1 < 128)\r\n            len += 1;\r\n        else if (c1 < 2048)\r\n            len += 2;\r\n        else if ((c1 & 0xFC00) === 0xD800 && (val.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n}\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeString, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#ldelim}, {@link Writer#reset} or {@link Writer#finish} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this, this.states);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (id !== undefined)\r\n        this.tag(id, 2);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of write operations and frees all resources.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len);\r\n    this.reset();\r\n    var pos = 0;\r\n    while (head) {\r\n        head.fn(buf, pos, head.val);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    BufferWriter.alloc = util.Buffer.allocUnsafe\r\n        ? util.Buffer.allocUnsafe\r\n        : function allocUnsafeNew(size) { return new util.Buffer(size); };\r\n    return BufferWriter.alloc(size);\r\n};\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(buf, pos, val) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float32Array === 'undefined') // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(buf, pos, val) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float64Array === 'undefined') // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(buf, pos, val) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n    // This could probably be optimized just like writeStringBuffer, but most real use cases won't benefit much.\r\n}\r\n\r\nif (!(ArrayImpl.prototype.set && util.Buffer && util.Buffer.prototype.set)) // set is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nvar writeStringBuffer = (function() { // eslint-disable-line wrap-iife\r\n    return util.Buffer && util.Buffer.prototype.utf8Write // around forever, but not present in browser buffer\r\n        ? function writeString_buffer_utf8Write(buf, pos, val) {\r\n            if (val.length < 40)\r\n                writeString(buf, pos, val);\r\n            else\r\n                buf.utf8Write(val, pos);\r\n        }\r\n        : function writeString_buffer_write(buf, pos, val) {\r\n            if (val.length < 40)\r\n                writeString(buf, pos, val);\r\n            else\r\n                buf.write(val, pos);\r\n        };\r\n    // Note that the plain JS encoder is faster for short strings, probably because of redundant assertions.\r\n    // For a raw utf8Write, the breaking point is about 20 characters, for write it is around 40 characters.\r\n    // Unfortunately, this does not translate 1:1 to real use cases, hence the common \"good enough\" limit of 40.\r\n})();\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = value.length < 40\r\n        ? byteLength(value)\r\n        : util.Buffer.byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {function(?Error, Root=)} callback Callback function\r\n * @returns {undefined}\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === 'function') {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:function):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {function(?Error, Root=)} callback Callback function\r\n * @returns {undefined}\r\n * @throws {TypeError} If arguments are invalid\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:function):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @throws {TypeError} If arguments are invalid\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = protobuf.Writer.BufferWriter;\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = protobuf.Reader.BufferReader;\r\nprotobuf.codegen          = require(\"./codegen\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Prototype        = require(\"./prototype\");\r\nprotobuf.inherits         = require(\"./inherits\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.util             = require(\"./util\");\r\n\r\n// Be nice to AMD\r\nif (typeof define === 'function' && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.Reader.configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}