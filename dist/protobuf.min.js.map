{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/fs/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/decode.js","src/encode.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verify.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","ceil","b64","Array","s64","encode","start","end","j","b","String","fromCharCode","invalidEncoding","decode","charCodeAt","undefined","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","test","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","keys","Object","Function","concat","map","key","format","$0","$1","arg","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","chunk","c1","c2","Class","type","Type","Message","util","_TypeError","MessageCtor","properties","merge","$type","getFieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","emptyObject","getOneofsArray","oneof","prop","get","indexOf","set","setCtor","common","json","nested","google","protobuf","Any","fields","type_url","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","readerOrBuffer","getFieldsById","reader","Reader","limit","pos","message","getCtor","tag","uint32","wireType","resolvedType","Enum","resolvedKeyType","skip","longToHash","types","basic","repeated","packed","plimit","skipType","generate","mtype","safeProp","writer","Writer","fi","fork","mapKey","ldelim","partOf","required","long","longNe","low","high","reset","oneofFields","options","ReflectionObject","_valuesById","clearCache","enm","className","EnumPrototype","props","valuesById","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","getValuesById","remove","Field","toString","toLowerCase","optional","Long","bytes","extensionField","declaringField","_packed","MapField","FieldPrototype","isPacked","getOption","setOption","ifNotSet","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","asJSON","Number","LongBits","from","toNumber","Buffer","isBuffer","MapFieldPrototype","keyWireType","MessagePrototype","array","fieldsOnly","encodeDelimited","decodeDelimited","verify","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","_nestedArray","namespace","arrayToJSON","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","object","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","parentAlreadyChecked","getRoot","found","lookupType","lookupService","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","substring","toUpperCase","_fieldsArray","addFieldsToParent","OneOfPrototype","index","lower","token","parse","illegal","filename","tn","readString","next","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRange","parseId","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","p3","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","parseMapField","parseField","parseOneOf","extensions","reserved","keepCase","camelCase","parseInlineOptions","valueType","parseEnumField","custom","fqTypeRefRe","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","package","indexOutOfRange","writeLength","RangeError","readLongVarint","bits","octet","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","BufferReader","initBufferReader","readStringBuffer_utf8Slice","utf8Slice","readStringBuffer_toString","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","ieee754","ArrayImpl","Uint8Array","_slice","subarray","read_uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","float","readDouble","Float64Array","f64","double","finish","remain","BufferReaderPrototype","readStringBuffer","readFloatLE","readDoubleLE","_configure","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","cb","process","parsed","self","sync","queued","weak","idx","altname","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","methodsArray","methodName","inherited","getMethodsArray","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","stack","repeat","curr","delimRe","delim","expected","actual","equals","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","fieldName","oneOfName","setup","fld","bake","description","TypeError","dst","underScore","newBuffer","allocUnsafe","LongBitsPrototype","zero","zzEncode","fromNumber","fromString","unsigned","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","dcodeIO","isFinite","longFromHash","fromBits","longNeq","val","target","descriptors","descriptor","ie8","ucKey","defineProperty","freeze","invalid","verifyValue","reason","verifyKey","genVerifyValue","fieldIndex","ref","genVerifyKey","Op","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","WriterPrototype","writeFloat","writeDouble","writeBytes","BufferWriterPrototype","writeStringBuffer","utf8Write","byteLength","roots","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(2);\r\nvar fs        = require(8);\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @name fs\r\n * @memberof util\r\n * @type {Object}\r\n */\r\n/**/\r\ntry { module.exports = eval([\"req\",\"uire\"].join(\"\"))(\"fs\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = [],\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            parts.push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (i)\r\n        parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n    return parts.join(\"\");\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(33);\r\n\r\nvar Type; // cyclic\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return Class.create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = function create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(31);\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw _TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) { // eslint-disable-line wrap-iife\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n    \r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.getFieldsArray().forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue)\r\n            ? util.emptyObject\r\n            : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.setCtor(ctor);\r\n\r\n    return prototype;\r\n};\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = decode;\r\n\r\nvar Enum    = require(16),\r\n    Reader  = require(25),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * General purpose message decoder.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Populated runtime message\r\n * @this Type\r\n * @property {GenerateDecoder} generate Generates a type specific decoder\r\n */\r\nfunction decode(readerOrBuffer, length) {\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.getFieldsById(),\r\n        reader  = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new (this.getCtor())();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.uint32(),\r\n            wireType = tag & 7,\r\n            field    = fields[tag >>> 3].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n                reader.skip();\r\n                reader.pos++; // assumes id 1\r\n                if (message[field.name] === util.emptyObject)\r\n                    message[field.name] = {};\r\n                var key = reader[keyType]();\r\n                if (typeof key === \"object\")\r\n                    key = util.longToHash(key);\r\n                reader.pos++; // assumes id 2\r\n                message[field.name][key] = types.basic[type] === undefined\r\n                    ? field.resolvedType.decode(reader, reader.uint32())\r\n                    : reader[type]();\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] && message[field.name].length ? message[field.name] : message[field.name] = [];\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values.push(reader[type]());\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] === undefined)\r\n                    values.push(field.resolvedType.decode(reader, reader.uint32()));\r\n                else\r\n                    values.push(reader[type]());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] === undefined)\r\n                message[field.name] = field.resolvedType.decode(reader, reader.uint32());\r\n            else\r\n                message[field.name] = reader[type]();\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @typedef GenerateDecoder\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\ndecode.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.int32()\")\r\n        (\"switch(t>>>3){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\")\r\n                (\"if(m%s===util.emptyObject)\", prop)\r\n                    (\"m%s={}\", prop)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\");\r\n            if (types.basic[type] === undefined) gen\r\n                (\"m%s[k]=types[%d].decode(r,r.uint32())\", prop, i);\r\n            else gen\r\n                (\"m%s[k]=r.%s()\", prop, type);\r\n\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s&&m%s.length?m%s:m%s=[]\", prop, prop, prop, prop);\r\n\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s.push(r.%s())\", prop, type)\r\n                (\"}else\");\r\n            if (types.basic[type] === undefined) gen\r\n                    (\"m%s.push(types[%d].decode(r,r.uint32()))\", prop, i, i);\r\n            else gen\r\n                    (\"m%s.push(r.%s())\", prop, type);\r\n\r\n        } else if (types.basic[type] === undefined) gen\r\n                (\"m%s=types[%d].decode(r,r.uint32())\", prop, i, i);\r\n        else gen\r\n                (\"m%s=r.%s()\", prop, type);\r\n        gen\r\n                (\"break\");\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = encode;\r\n\r\nvar Enum     = require(16),\r\n    Writer   = require(37),\r\n    types    = require(32),\r\n    util     = require(33);\r\nvar safeProp = util.safeProp;\r\n\r\n/**\r\n * General purpose message encoder.\r\n * @param {Message|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n * @this Type\r\n * @property {GenerateEncoder} generate Generates a type specific encoder\r\n */\r\nfunction encode(message, writer) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer.create();\r\n    var fields = this.getFieldsArray(), fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            if (message[field.name] && message[field.name] !== util.emptyObject) {\r\n                for (var keys = Object.keys(message[field.name]), i = 0; i < keys.length; ++i) {\r\n                    writer.uint32(field.id << 3 | 2).fork()\r\n                          .uint32(/*1*/8 | types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType === undefined)\r\n                        field.resolvedType.encode(message[field.name][keys[i]], writer.uint32(/*2,2*/18).fork()).ldelim();\r\n                    else\r\n                        writer.uint32(/*2*/16 | wireType)[type](message[field.name][keys[i]]);\r\n                    writer.ldelim();\r\n                }\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    writer.fork();\r\n                    var i = 0;\r\n                    while (i < values.length)\r\n                        writer[type](values[i++]);\r\n                    writer.ldelim(field.id);\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType !== undefined)\r\n                        while (i < values.length)\r\n                            writer.uint32(field.id << 3 | wireType)[type](values[i++]);\r\n                    else\r\n                        while (i < values.length)\r\n                            field.resolvedType.encode(values[i++], writer.uint32(field.id << 3 | 2).fork()).ldelim();\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name];\r\n            if (\r\n                field.partOf && message[field.partOf.name] === field.name\r\n                ||\r\n                (field.required || value !== undefined) && (field.long ? util.longNe(value, field.defaultValue.low, field.defaultValue.high) : value !== field.defaultValue)\r\n            ) {\r\n                if (wireType !== undefined)\r\n                    writer.uint32(field.id << 3 | wireType)[type](value);\r\n                else {\r\n                    field.resolvedType.encode(value, writer.fork());\r\n                    if (writer.len || field.required)\r\n                        writer.ldelim(field.id);\r\n                    else\r\n                        writer.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates an {@link Encoder|encoder} specific to the specified message type.\r\n * @typedef GenerateEncoder\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\nencode.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.getFieldsArray();\r\n    var oneofs = mtype.getOneofsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    var i;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(m%s&&m%s!==util.emptyObject){\", prop, prop)\r\n        (\"for(var ks=Object.keys(m%s),i=0;i<ks.length;++i){\", prop)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", field.id << 3 | 2, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(m%s[ks[i]],w.uint32(18).fork()).ldelim()\", i, prop);\r\n            else gen\r\n            (\"w.uint32(%d).%s(m%s[ks[i]])\", 16 | wireType, type, prop);\r\n            gen\r\n            (\"w.ldelim()\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim(%d)\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.uint32(%d).%s(m%s[i])\", field.id << 3 | wireType, type, prop);\r\n                else gen\r\n            (\"types[%d].encode(m%s[i],w.uint32(%d).fork()).ldelim()\", i, prop, field.id << 3 | 2);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) {\r\n                    gen\r\n    (\"if(m%s!==undefined&&util.longNe(m%s,%d,%d))\", prop, prop, field.defaultValue.low, field.defaultValue.high);\r\n                } else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n        (\"w.uint32(%d).%s(m%s)\", field.id << 3 | wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n        (\"types[%d].encode(m%s,w.uint32(%d).fork()).ldelim()\", i, prop, field.id << 3 | 2);\r\n        \r\n            else gen\r\n\r\n        (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", i, prop, field.id);\r\n    \r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i],\r\n            prop  = safeProp(oneof.name);\r\n        gen\r\n        (\"switch(m%s){\", prop);\r\n        var oneofFields = oneof.getFieldsArray();\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type],\r\n                prop     = safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n                (\"w.uint32(%d).%s(m%s)\", field.id << 3 | wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n                (\"types[%d].encode(m%s,w.uint32(%d).fork()).ldelim()\", fields.indexOf(field), prop, field.id << 3 | 2);\r\n        \r\n            else gen\r\n\r\n                (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", fields.indexOf(field), prop, field.id);\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");        \r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nvar util = require(33);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nField.className = \"Field\";\r\n\r\nvar ReflectionObject = require(\"./object\");\r\nvar Message = require(\"./message\");\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nvar Enum      = require(\"./enum\"),\r\n    types     = require(\"./types\"),\r\n    util      = require(\"./util\");\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object} [rule=\"optional\"] Field rule\r\n * @param {string|Object} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(\"./mapfield\");\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (!Type)\r\n            Type = require(\"./type\");\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options[\"default\"]) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Message#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (value instanceof Message)\r\n            return value.asJSON(options);\r\n        if (this.resolvedType instanceof Enum && options[\"enum\"] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        if (options.long && this.long)\r\n            return options.long === Number\r\n                ? typeof value === \"number\"\r\n                    ? value\r\n                    : util.LongBits.from(value).toNumber(this.type.charAt(0) === \"u\")\r\n                : util.Long.fromValue(value, this.type.charAt(0) === \"u\").toString();\r\n        if (options.bytes && this.bytes) {\r\n            if (options.bytes === String)\r\n                return util.base64.encode(value, 0, value.length);\r\n            if (options.bytes === Array)\r\n                return Array.prototype.slice.call(value);\r\n            if (options.bytes === util.Buffer && !util.Buffer.isBuffer(value))\r\n                return util.Buffer.from ? util.Buffer.from(value) : new Buffer(value);\r\n        }\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar Field = require(17);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nvar Enum    = require(16),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This method should be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @extends {Object}\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @abstract\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {*} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {*} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @param {*} [options.bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @param {boolean} [options.defaults=false] Also sets default values on the resulting object\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    if (!options)\r\n        options = {};\r\n    var fields = this.$type.fields,\r\n        json   = {};\r\n    var keys;\r\n    if (options.defaults) {\r\n        keys = Object.keys(fields);\r\n    } else\r\n        keys = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && (value.length || options.defaults)) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (!options.fieldsOnly)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nvar Type = require(31),\r\n    util = require(33);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (type && !util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    this.resolvedResponseType = resolved;\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nvar Enum    = require(16),\r\n    Field   = require(17),\r\n    util    = require(33);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\nfunction initNested() {\r\n    if (!Type)\r\n        Type = require(31);\r\n    if (!Service)\r\n        Service = require(29);\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw _TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (!Type)\r\n                Type = require(31);\r\n            if (!Service)\r\n                Service = require(29);\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found instanceof Namespace && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path);\r\n    if (!Type)\r\n        Type = require(31);\r\n    if (!(found instanceof Type))\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path);\r\n    if (!Service)\r\n        Service = require(29);\r\n    if (!(found instanceof Service))\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(33);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className;\r\n    var fullName = this.getFullName();\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nvar Field = require(17),\r\n    util  = require(33);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = this.name.substring(0, 1).toUpperCase() + this.name.substring(1);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nutil.prop(OneOfPrototype, \"fieldsArray\", {\r\n    get: function getFieldsArray() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fieldsArray.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize  = require(30),\r\n    Root      = require(26),\r\n    Type      = require(31),\r\n    Field     = require(17),\r\n    MapField  = require(18),\r\n    OneOf     = require(23),\r\n    Enum      = require(16),\r\n    Service   = require(29),\r\n    Method    = require(20),\r\n    types     = require(32),\r\n    util      = require(33);\r\nvar camelCase = util.camelCase;\r\n\r\nvar nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        root = new Root();\r\n        options = root || {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    function illegal(token, name) {\r\n        var filename = parse.filename;\r\n        parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"min\": return 1;\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        var p3;\r\n        if ([ \"proto2\", p3 = \"proto3\" ].indexOf(syntax) < 0)\r\n            throw illegal(syntax, \"syntax\");\r\n        isProto3 = syntax === p3;\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        if (!options.keepCase)\r\n            name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        if (!options.keepCase)\r\n            name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        if (!options.keepCase)\r\n            name = camelCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (!nameRe.test(token))\r\n                    throw illegal(token, \"name\");\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {ParserResult} Parser result\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util      = require(35),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = function create(buffer) {\r\n    return new (util.Buffer ? BufferReader : Reader)(buffer);\r\n};\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice;\r\n\r\nvar read_uint32 = \r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    // FIXME: tends to soft-deopt with \"Insufficient type feedback for generic named access\", which\r\n    // is not a problem, but with --trace-deopt, node v4-v7 always crashes when the above happens.\r\n    var value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n    if ((this.pos += 5) > this.len) {\r\n        this.pos = this.len;\r\n        throw indexOutOfRange(this, 10);\r\n    }\r\n    return value;\r\n};\r\n\r\n// See comment above. While unnecessary code, this prevents crashing with --trace-deopt (node 6.9.1).\r\nread_uint32.call({\r\n    buf: [255,255,255,255,15],\r\n    pos: 0,\r\n    len: 5\r\n});\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    var bits = new LongBits(0, 0),\r\n        i = 0,\r\n        octet = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            octet= this.buf[this.pos++]; // 1st..4th\r\n            bits.lo = (bits.lo | (octet & 127) << i * 7) >>> 0;\r\n            if (octet < 128)\r\n                return bits;\r\n        }\r\n        octet = this.buf[this.pos++]; // 5th\r\n        bits.lo = (bits.lo | (octet & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (octet & 127) >>  4) >>> 0;\r\n        if (octet < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            octet = this.buf[this.pos++]; // 1st..4th\r\n            bits.lo = (bits.lo | (octet & 127) << i * 7) >>> 0;\r\n            if (octet < 128)\r\n                return bits;\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        octet = this.buf[this.pos++]; // 5th\r\n        bits.lo = (bits.lo | (octet & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (octet & 127) >>  4) >>> 0;\r\n        if (octet < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            octet = this.buf[this.pos++]; // 6th..10th\r\n            bits.hi = (bits.hi | (octet & 127) << i * 7 + 3) >>> 0;\r\n            if (octet < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            octet = this.buf[this.pos++]; // 6th..10th\r\n            bits.hi = (bits.hi | (octet & 127) << i * 7 + 3) >>> 0;\r\n            if (octet < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return buf[end - 4]\r\n         | buf[end - 3] << 8\r\n         | buf[end - 2] << 16\r\n         | buf[end - 1] << 24;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                wireType = this.uint32() & 7;\r\n                if (wireType === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    var Buffer = util.Buffer;\r\n    if (!Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = Buffer.prototype.slice;\r\n    readStringBuffer = Buffer.prototype.utf8Slice // around forever, but not present in browser buffer\r\n        ? readStringBuffer_utf8Slice\r\n        : readStringBuffer_toString;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nif (typeof Float32Array === \"undefined\") // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nif (typeof Float64Array === \"undefined\") // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\nvar readStringBuffer;\r\n\r\nfunction readStringBuffer_utf8Slice(buf, start, end) {\r\n    return buf.utf8Slice(start, end); // fastest\r\n}\r\n\r\nfunction readStringBuffer_toString(buf, start, end) {\r\n    return buf.toString(\"utf8\", start, end); // 2nd, again assertions\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return readStringBuffer(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Namespace = require(21);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nvar Field  = require(17),\r\n    util   = require(33),\r\n    common = require(13);\r\n\r\nvar parse; // cyclic\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (!parse)\r\n        parse = require(24);\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename) {\r\n    return this.load(filename, SYNC);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(28);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(33);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nService.className = \"Service\";\r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nvar Method = require(20),\r\n    util   = require(33),\r\n    rpc    = require(27);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl RPC implementation ({@link RPCImpl|see})\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[method.name.substring(0, 1).toLowerCase() + method.name.substring(1)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n/**/\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nType.className = \"Type\";\r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nvar Enum      = require(16),\r\n    OneOf     = require(23),\r\n    Field     = require(17),\r\n    Service   = require(29),\r\n    Class     = require(12),\r\n    Message   = require(19),\r\n    Reader    = require(25),\r\n    Writer    = require(37),\r\n    util      = require(33);\r\n\r\nvar encode, // might become cyclic\r\n    decode, // might become cyclic\r\n    verify; // cyclic\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object|*} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new (this.getCtor())(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode}, {@link Type#decode} and {@link Type#verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    if (!encode) {\r\n        encode = require(15);\r\n        decode = require(14);\r\n        verify = require(36);\r\n    }\r\n    this.encode = util.codegen.supported\r\n        ? encode.generate(this).eof(this.getFullName() + \"$encode\", {\r\n              Writer : Writer,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : encode;\r\n    this.decode = util.codegen.supported\r\n        ? decode.generate(this).eof(this.getFullName() + \"$decode\", {\r\n              Reader : Reader,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : decode;\r\n    this.verify = util.codegen.supported\r\n        ? verify.generate(this).eof(this.getFullName() + \"$verify\", {\r\n              types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util  : util\r\n          })\r\n        : verify;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(33);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(35);\r\n\r\nutil.asPromise    = require(2);\r\nutil.codegen      = require(4);\r\nutil.EventEmitter = require(5);\r\nutil.extend       = require(6);\r\nutil.fetch        = require(7);\r\nutil.fs           = require(8);\r\nutil.path         = require(9);\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts a string to camel case notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Converts a string to underscore notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.underScore = function underScore(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) { return \"_\" + $1.toLowerCase(); });\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe ? util.Buffer.allocUnsafe(size) : new util.Buffer(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo, this.hi, unsigned)\r\n        : { low: this.lo, high: this.hi, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nvar LongBits =\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nvar isNode = util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Buffer = null;\r\n\r\nif (isNode)\r\n    try { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || null;\r\n\r\nif (!util.Long && isNode)\r\n    try { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === \"object\");\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n * @deprecated\r\n * @see Use {@link util.longNe} instead\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === \"number\"\r\n         ? typeof b === \"number\"\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === \"number\"\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ie8 = !-[1,];\r\n    var ucKey = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n    if (descriptor.get)\r\n        target[\"get\" + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target[\"set\" + ucKey] = ie8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (ie8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze([]);\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze({});\r\n","\"use strict\";\r\nmodule.exports = verify;\r\n\r\nvar Enum      = require(16),\r\n    Type      = require(31),\r\n    util      = require(33);\r\nvar isInteger = util.isInteger;\r\n\r\nfunction invalid(field, expected) {\r\n    return \"invalid value for field \" + field.getFullName() + \" (\" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected)\";\r\n}\r\n\r\nfunction verifyValue(field, value) {\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\":\r\n            if (typeof value !== \"number\")\r\n                return invalid(field, \"number\");\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (!isInteger(value))\r\n                return invalid(field, \"integer\");\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (!isInteger(value) && !(value && isInteger(value.low) && isInteger(value.high)))\r\n                return invalid(field, \"integer|Long\");\r\n            break;\r\n        case \"bool\":\r\n            if (typeof value !== \"boolean\")\r\n                return invalid(field, \"boolean\");\r\n            break;\r\n        case \"string\":\r\n            if (!util.isString(value))\r\n                return invalid(field, \"string\");\r\n            break;\r\n        case \"bytes\":\r\n            if (!(value && typeof value.length === \"number\" || util.isString(value)))\r\n                return invalid(field, \"buffer\");\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) {\r\n                if (typeof field.resolvedType.getValuesById()[value] !== \"number\")\r\n                    return invalid(field, \"enum value\");\r\n            } else if (field.resolvedType instanceof Type) {\r\n                var reason = field.resolvedType.verify(value);\r\n                if (reason)\r\n                    return reason;\r\n            }\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction verifyKey(field, value) {\r\n    switch (field.keyType) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (/^[\\x00-\\xff]{8}$/.test(value)) // eslint-disable-line no-control-regex\r\n                return null;\r\n            // fallthrough\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (/^-?(?:0|[1-9]\\d*)$/.test(value))\r\n                return invalid(field, \"integer key\");\r\n            break;\r\n        case \"bool\":\r\n            if (/^true|false|0|1$/.test(value))\r\n                return invalid(field, \"boolean key\");\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * General purpose message verifier.\r\n * @param {Message|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n * @this {Type}\r\n * @property {GenerateVerifier} generate Generates a type specific verifier\r\n */\r\nfunction verify(message) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    var fields = this.getFieldsArray(),\r\n        i = 0,\r\n        reason;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        // map fields\r\n        if (field.map) {\r\n\r\n            if (value !== undefined) {\r\n                if (!util.isObject(value))\r\n                    return invalid(field, \"object\");\r\n                var keys = Object.keys(value);\r\n                for (var j = 0; j < keys.length; ++j) {\r\n                    if (reason = verifyKey(field, keys[j])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n                    if (reason = verifyValue(field, value[keys[j]])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n                }\r\n            }\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            if (value !== undefined) {\r\n                if (!Array.isArray(value))\r\n                    return invalid(field, \"array\");\r\n                for (var j = 0; j < value.length; ++j)\r\n                    if (reason = verifyValue(field, value[j])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n            }\r\n\r\n        // required or present fields\r\n        } else if (field.required || value !== undefined) {\r\n\r\n            if (reason = verifyValue(field, value)) // eslint-disable-line no-cond-assign\r\n                return reason;\r\n        }\r\n\r\n    }\r\n    return null;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\": gen\r\n            (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                (\"return%j\", invalid(field, \"number\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.isInteger(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                (\"return%j\", invalid(field, \"integer|Long\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                (\"return%j\", invalid(field, \"boolean\"));\r\n            break;\r\n        case \"string\": gen\r\n            (\"if(!util.isString(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"string\"));\r\n            break;\r\n        case \"bytes\": gen\r\n            (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                (\"return%j\", invalid(field, \"buffer\"));\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) { gen\r\n                (\"switch(%s){\", ref)\r\n                    (\"default:\")\r\n                        (\"return%j\", invalid(field, \"enum value\"));\r\n                var values = util.toArray(field.resolvedType.values);\r\n                for (var j = 0; j < values.length; ++j) gen\r\n                    (\"case %d:\", values[j]);\r\n                gen\r\n                        (\"break\")\r\n                (\"}\");\r\n            } else if (field.resolvedType instanceof Type) { gen\r\n                (\"var r;\")\r\n                (\"if(r=types[%d].verify(%s))\", fieldIndex, ref)\r\n                    (\"return r\");\r\n            }\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @typedef GenerateVerifier\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\nverify.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!util.isObject(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(m%s)\", prop)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!Array.isArray(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<m%s.length;++i){\", prop);\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType instanceof Type) gen\r\n            (\"if(m%s!==undefined&&m%s!==null){\", prop, prop);\r\n                else gen\r\n            (\"if(m%s!==undefined){\", prop);\r\n            }\r\n                genVerifyValue(gen, field, i, \"m\" + prop);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util      = require(35),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {*} val Value to write\r\n * @param {number} len Value byte length\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, val, len) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {?Writer.Op}\r\n     */\r\n    this.next = null;\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\nWriter.State = State;\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = function create() {\r\n    return new (util.Buffer ? BufferWriter : Writer);\r\n};\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new ArrayImpl(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (ArrayImpl !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, val, len);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset} or {@link Writer#ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend as a tag where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (id)\r\n        this.uint32((id << 3 | 2) >>> 0);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    this.head = this.tail = null; // gc\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    BufferWriter.alloc = util.Buffer.allocUnsafe\r\n        ? util.Buffer.allocUnsafe\r\n        : function allocUnsafeNew(size) { return new util.Buffer(size); };\r\n    return BufferWriter.alloc(size);\r\n};\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(val, buf, pos) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float32Array === \"undefined\") // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(val, buf, pos) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float64Array === \"undefined\") // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(val, buf, pos) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = util.Buffer.from ? util.Buffer.from(value, \"base64\") : new util.Buffer(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nvar writeStringBuffer = (function() { // eslint-disable-line wrap-iife\r\n    return util.Buffer && util.Buffer.prototype.utf8Write // around forever, but not present in browser buffer\r\n        ? function writeString_buffer_utf8Write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.utf8Write(val, pos);\r\n        }\r\n        : function writeString_buffer_write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.write(val, pos);\r\n        };\r\n    // Note that the plain JS encoder is faster for short strings, probably because of redundant assertions.\r\n    // For a raw utf8Write, the breaking point is about 20 characters, for write it is around 40 characters.\r\n    // Unfortunately, this does not translate 1:1 to real use cases, hence the common \"good enough\" limit of 40.\r\n})();\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = value.length < 40\r\n        ? utf8.length(value)\r\n        : util.Buffer.byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nvar Writer =\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = Writer.BufferWriter;\r\nvar Reader =\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = Reader.BufferReader;\r\nprotobuf.encode           = require(\"./encode\");\r\nprotobuf.decode           = require(\"./decode\");\r\nprotobuf.verify           = require(\"./verify\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    Reader._configure();\r\n}\r\n\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}