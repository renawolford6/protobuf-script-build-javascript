{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/class.js","../src/common.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light.js","../src/index-minimal.js","../src/index","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/parse.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/tokenize.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/writer.js","../src/writer_buffer.js"],"names":["global","undefined","modules","cache","$require","name","$module","call","exports","protobuf","entries","define","amd","Long","util","configure","module","1","require","asPromise","fn","ctx","params","i","arguments","length","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","n","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","t","j","b","String","fromCharCode","decode","offset","c","charCodeAt","Error","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","e","EventEmitter","_listeners","prototype","on","evt","off","listeners","splice","emit","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","toString","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","moduleName","mod","eval","path","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","ctor","Type","TypeError","generate","constructor","Message","merge","$type","fieldsArray","_fieldsArray","isArray","defaultValue","emptyArray","isObject","long","emptyObject","ctorProperties","oneofsArray","_oneofsArray","get","oneOfGetter","oneof","set","oneOfSetter","defineProperties","create","common","json","commonRe","nested","google","Any","fields","type_url","id","value","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","genValuePartial_fromObject","field","fieldIndex","prop","resolvedType","Enum","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","safeProp","toObject","sort","compareFieldsById","repeatedFields","mapFields","otherFields","valuesById","low","high","unsigned","toNumber","bytes","indexOf","partOf","missing","decoder","group","ref","types","basic","compat","packed","rfield","required","genTypePartial","encoder","index","wireType","mapKey","ReflectionObject","comments","className","fromJSON","toJSON","add","comment","isString","isInteger","allow_alias","remove","val","Field","extend","ruleRe","toLowerCase","optional","message","extensionField","declaringField","_packed","defineProperty","getOption","setOption","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","load","root","Root","loadSync","build","verifier","Namespace","OneOf","MapField","Service","Method","_configure","Reader","BufferReader","roots","Writer","BufferWriter","rpc","tokenize","parse","resolvedKeyType","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","setOptions","onAdd","onRemove","ptr","part","resolveAll","filterType","parentAlreadyChecked","found","lookupService","lookupEnum","Type_","Service_","unshift","_handleAdd","_handleRemove","Root_","fieldNames","addFieldsToParent","self","camelCase","substring","camelCaseRe","toUpperCase","illegal","token","insideTryCatch","tn","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRanges","target","acceptStrings","parseId","sign","Infinity","NaN","base10Re","parseInt","base16Re","base8Re","numberRe","parseFloat","acceptNegative","base10NegRe","base16NegRe","base8NegRe","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","cmnt","parseMapField","parseField","parseOneOf","extensions","reserved","isProto3","parseGroup","applyCase","trailingLine","parseInlineOptions","fieldName","lcFirst","ucFirst","valueType","enm","parseEnumValue","custom","fqTypeRefRe","parseOptionValue","service","parseMethod","method","reference","pkg","imports","weakImports","syntax","head","keepCase","whichImports","package","indexOutOfRange","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","readFixed32","readFixed64","create_array","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","uint","exponent","mantissa","pow","float","readDouble","Float64Array","f64","double","skipType","BufferReader_","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","resolvePath","finish","cb","sync","process","parsed","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","requestCtor","responseCtor","request","endedByRPC","_methodsArray","inherited","methodsArray","rpcService","m","q","s","unescape","unescapeRe","unescapeMap","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","setComment","commentType","commentLine","lines","setCommentSplitRe","setCommentRe","trim","commentText","stack","repeat","curr","isComment","whitespaceRe","delimRe","expected","actual","ret","0","r","_fieldsById","_ctor","fieldsById","filter","isReservedId","isReservedName","setup","fork","ldelim","bake","o","a","zero","zzEncode","zeroHash","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","newError","CustomError","captureStackTrace","versions","node","Number","isFinite","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","lazyResolve","lazyTypes","longs","enums","encoding","allocUnsafe","invalid","genVerifyValue","genVerifyKey","seenFirstField","oneofProp","Op","noop","State","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.configure();\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(6);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(21),\r\n    util    = require(36);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction Class(type, ctor) {\r\n    if (!Type)\r\n        Type = require(34);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        ctor = Class.generate(type).eof(type.name); // named constructor function (codegen is required anyway)\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    (ctor.prototype = new Message()).constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    ctor.prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    var i = 0;\r\n    for (; i < /* initializes */ type.fieldsArray.length; ++i) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        ctor.prototype[type._fieldsArray[i].name] = Array.isArray(type._fieldsArray[i].resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(type._fieldsArray[i].defaultValue) && !type._fieldsArray[i].long\r\n              ? util.emptyObject\r\n              : type._fieldsArray[i].defaultValue; // if a long, it is frozen when initialized\r\n    }\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    var ctorProperties = {};\r\n    for (i = 0; i < /* initializes */ type.oneofsArray.length; ++i)\r\n        ctorProperties[type._oneofsArray[i].resolve().name] = {\r\n            get: util.oneOfGetter(type._oneofsArray[i].oneof),\r\n            set: util.oneOfSetter(type._oneofsArray[i].oneof)\r\n        };\r\n    if (i)\r\n        Object.defineProperties(ctor.prototype, ctorProperties);\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return ctor.prototype;\r\n}\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} type Type to use\r\n * @returns {Codegen} Codegen instance\r\n */\r\nClass.generate = function generate(type) { // eslint-disable-line no-unused-vars\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"p\");\r\n    // see issue #700: the following would add explicitly initialized mutable object/array fields\r\n    // so that these aren't just inherited from the prototype. will break test cases.\r\n    /*\r\n    for (var i = 0, field; i < type.fieldsArray.length; ++i)\r\n        if ((field = type._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    */\r\n    return gen\r\n    (\"if(p){\")\r\n        (\"for(var ks=Object.keys(p),i=0;i<ks.length;++i)\")\r\n            (\"this[ks[i]]=p[ks[i]];\")\r\n    (\"}\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @function\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = Class;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object.<string,*>} google/protobuf/any.proto Any\r\n * @property {Object.<string,*>} google/protobuf/duration.proto Duration\r\n * @property {Object.<string,*>} google/protobuf/empty.proto Empty\r\n * @property {Object.<string,*>} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object.<string,*>} google/protobuf/timestamp.proto Timestamp\r\n * @property {Object.<string,*>} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n *\r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\r\nfunction common(name, json) {\r\n    if (!commonRe.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\nvar commonRe = /\\/|\\./;\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/field_mask.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(15),\r\n    util = require(36);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        otherFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (fields[i].resolve().repeated)\r\n            repeatedFields.push(fields[i]);\r\n        else if (fields[i].map)\r\n            mapFields.push(fields[i]);\r\n        else\r\n            otherFields.push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0, field; i < otherFields.length; ++i) {\r\n            var field = otherFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    for (i = 0, field; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m%s!==undefined&&m%s!==null&&m.hasOwnProperty(%j)){\", prop, prop, field.name);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ mtype._fieldsArray.indexOf(field), prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ mtype._fieldsArray.indexOf(field), prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, /* sorted */ mtype._fieldsArray.indexOf(field), prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(35),\r\n    util    = require(36);\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nencoder.compat = true;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(35),\r\n    util     = require(36);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates encoders serializing in ascending field order\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray;\r\n    /* istanbul ignore else */\r\n    if (encoder.compat)\r\n        fields = fields.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = encoder.compat ? mtype._fieldsArray.indexOf(field) : /* istanbul ignore next */ i,\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length&&m.hasOwnProperty(%j)){\", ref, ref, field.name)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n                else if (field.bytes || field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id\");\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(15),\r\n    types = require(35),\r\n    util  = require(36);\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n\r\n        /* istanbul ignore if */\r\n        if (!Type)\r\n            Type = require(34);\r\n\r\n        var scope = this.declaringField ? this.declaringField.parent : this.parent;\r\n        if (this.resolvedType = scope.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = scope.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type + \" in \" + scope);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary packed option (parser adds this) if not referencing an enum\r\n    if (this.options && this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n        delete this.options.packed;\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(18);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(14);\r\nprotobuf.decoder          = require(13);\r\nprotobuf.verifier         = require(39);\r\nprotobuf.converter        = require(12);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(24);\r\nprotobuf.Namespace        = require(23);\r\nprotobuf.Root             = require(29);\r\nprotobuf.Enum             = require(15);\r\nprotobuf.Type             = require(34);\r\nprotobuf.Field            = require(16);\r\nprotobuf.OneOf            = require(25);\r\nprotobuf.MapField         = require(20);\r\nprotobuf.Service          = require(32);\r\nprotobuf.Method           = require(22);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(10);\r\nprotobuf.Message          = require(21);\r\n\r\n// Utility\r\nprotobuf.types            = require(35);\r\nprotobuf.util             = require(36);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(40);\r\nprotobuf.BufferWriter = require(41);\r\nprotobuf.Reader       = require(27);\r\nprotobuf.BufferReader = require(28);\r\n\r\n// Utility\r\nprotobuf.util         = require(38);\r\nprotobuf.rpc          = require(30);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"full\";\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(33);\r\nprotobuf.parse            = require(26);\r\nprotobuf.common           = require(11);\r\n\r\n// Configure parser\r\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(16);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(35),\r\n    util    = require(36);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(15),\r\n    Field    = require(16),\r\n    util     = require(36);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterType || found instanceof filterType)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(36);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {?string}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(16);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n}\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(33),\r\n    Root      = require(29),\r\n    Type      = require(34),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    OneOf     = require(25),\r\n    Enum      = require(15),\r\n    Service   = require(32),\r\n    Method    = require(22),\r\n    types     = require(35),\r\n    util      = require(36);\r\n\r\nvar base10Re    = /^[1-9][0-9]*$/,\r\n    base10NegRe = /^-?[1-9][0-9]*$/,\r\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\r\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\r\n    base8Re     = /^0[0-7]+$/,\r\n    base8NegRe  = /^-?0[0-7]+$/,\r\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\r\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nvar camelCaseRe = /_([a-z])(?=[a-z]|$)/g;\r\n\r\nfunction camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object.<string,*>}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object.<string,*>}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name, insideTryCatch) {\r\n        var filename = parse.filename;\r\n        if (!insideTryCatch)\r\n            parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        /* istanbul ignore next */\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (token) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\": case \"TRUE\":\r\n                return true;\r\n            case \"false\": case \"FALSE\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token, /* insideTryCatch */ true);\r\n        } catch (e) {\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRanges(target, acceptStrings) {\r\n        var token, start;\r\n        do {\r\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\r\n                target.push(readString());\r\n            else\r\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\r\n        } while (skip(\",\", true));\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseNumber(token, insideTryCatch) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        switch (token) {\r\n            case \"inf\": case \"INF\": return sign * Infinity;\r\n            case \"nan\": case \"NaN\": case \"NAN\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (base10Re.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (base16Re.test(token))\r\n            return sign * parseInt(token, 16);\r\n        if (base8Re.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (numberRe.test(token))\r\n            return sign * parseFloat(token);\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\", insideTryCatch);\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        switch (token) {\r\n            case \"max\": case \"MAX\": return 536870911;\r\n            case \"0\": return 0;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (base10NegRe.test(token))\r\n            return parseInt(token, 10);\r\n        if (base16NegRe.test(token))\r\n            return parseInt(token, 16);\r\n        /* istanbul ignore else */\r\n        if (base8NegRe.test(token))\r\n            return parseInt(token, 8);\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        /* istanbul ignore next */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = readString();\r\n        isProto3 = syntax === \"proto3\";\r\n        /* istanbul ignore next */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        type.comment = cmnt();\r\n        type.filename = parse.filename;\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (token) {\r\n\r\n                    case \"map\":\r\n                        parseMapField(type, token);\r\n                        break;\r\n\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, token);\r\n                        break;\r\n\r\n                    case \"oneof\":\r\n                        parseOneOf(type, token);\r\n                        break;\r\n\r\n                    case \"extensions\":\r\n                        readRanges(type.extensions || (type.extensions = []));\r\n                        break;\r\n\r\n                    case \"reserved\":\r\n                        readRanges(type.reserved || (type.reserved = []), true);\r\n                        break;\r\n\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var field = new Field(name, parseId(next()), type, rule, extend),\r\n            trailingLine = tn.line();\r\n        field.comment = cmnt();\r\n        field.filename = parse.filename;\r\n        parseInlineOptions(field);\r\n        if (!field.comment)\r\n            field.comment = cmnt(trailingLine);\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\r\n        // any type (not just packable types) because enums also use varint encoding and it is not\r\n        // yet known whether a type is an enum or not.\r\n        if (!isProto3 && field.repeated)\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        type.comment = cmnt();\r\n        var field = new Field(fieldName, id, name, rule);\r\n        type.filename = field.filename = parse.filename;\r\n        skip(\"{\");\r\n        while ((token = next()) !== \"}\") {\r\n            switch (token) {\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        }\r\n        skip(\";\", true);\r\n        parent.add(type).add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var field = new MapField(name, parseId(next()), keyType, valueType),\r\n            trailingLine = tn.line();\r\n        field.comment = cmnt();\r\n        field.filename = parse.filename;\r\n        parseInlineOptions(field);\r\n        if (!field.comment)\r\n            field.comment = cmnt(trailingLine);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        var oneof = new OneOf(name),\r\n            trailingLine = tn.line();\r\n        oneof.comment = cmnt();\r\n        oneof.filename = parse.filename;\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else {\r\n            skip(\";\");\r\n            if (!oneof.comment)\r\n                oneof.comment = cmnt(trailingLine);\r\n        }\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var enm = new Enum(name);\r\n        enm.comment = cmnt();\r\n        enm.filename = parse.filename;\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumValue(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            trailingLine = tn.line();\r\n        parent.add(name, value, cmnt());\r\n        parseInlineOptions({}); // skips enum value options\r\n        if (!parent.comments[name])\r\n            parent.comments[name] = cmnt(trailingLine);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\r\n            /* istanbul ignore next */\r\n            do {\r\n                if (!nameRe.test(token = next()))\r\n                    throw illegal(token, \"name\");\r\n                if (peek() === \"{\")\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n                else {\r\n                    skip(\":\");\r\n                    setOption(parent, name + \".\" + token, readValue(true));\r\n                }\r\n            } while (!skip(\"}\", true));\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var name = token;\r\n        var service = new Service(name);\r\n        service.comment = cmnt();\r\n        service.filename = parse.filename;\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                switch (token) {\r\n                    case \"option\":\r\n                        parseOption(service, token);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, token);\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream),\r\n            trailingLine = tn.line();\r\n        method.comment = cmnt();\r\n        method.filename = parse.filename;\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                switch (token) {\r\n                    case \"option\":\r\n                        parseOption(method, token);\r\n                        skip(\";\");\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else {\r\n            skip(\";\");\r\n            if (!method.comment)\r\n                method.comment = cmnt(trailingLine);\r\n        }\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                switch (token) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, token, reference);\r\n                        break;\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        switch (token) {\r\n\r\n            case \"package\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(38);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[0] = buf[pos + 3];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[3] = buf[pos    ];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[0] = buf[pos + 7];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[7] = buf[pos    ];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(27);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(38);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(16),\r\n    Enum    = require(15),\r\n    util    = require(36);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {?string} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore next */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore next */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else /* istanbul ignore next */ if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(31);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(38);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n *\r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(22),\r\n    util   = require(36),\r\n    rpc    = require(30);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst(this._methodsArray[i].resolve().name)] = util.codegen(\"r\",\"c\")(\"return this.rpcCall(m,q,s,r,c)\").eof(util.lcFirst(this._methodsArray[i].name), {\r\n            m: this._methodsArray[i],\r\n            q: this._methodsArray[i].resolvedRequestType.ctor,\r\n            s: this._methodsArray[i].resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nvar setCommentRe = /^ *[*/]+ */,\r\n    setCommentSplitRe = /\\n/g,\r\n    whitespaceRe = /\\s/,\r\n    unescapeRe = /\\\\(.?)/g;\r\n\r\nvar unescapeMap = {\r\n    \"0\": \"\\0\",\r\n    \"r\": \"\\r\",\r\n    \"n\": \"\\n\",\r\n    \"t\": \"\\t\"\r\n};\r\n\r\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @ignore\r\n */\r\nfunction unescape(str) {\r\n    return str.replace(unescapeRe, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            default:\r\n                return unescapeMap[$1] || \"\";\r\n        }\r\n    });\r\n}\r\n\r\ntokenize.unescape = unescape;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object.<string,*>} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {function(number=):?string} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n * @property {function(string):string} unescape Unescapes a string\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        var lines = source\r\n            .substring(start, end)\r\n            .split(setCommentSplitRe);\r\n        for (var i = 0; i < lines.length; ++i)\r\n            lines[i] = lines[i].replace(setCommentRe, \"\").trim();\r\n        commentText = lines\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isComment;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (whitespaceRe.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    isComment = charAt(start = offset + 1) === \"/\";\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 1);\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    isComment = charAt(start = offset + 1) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            throw illegal(\"comment\");\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 2);\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        // offset !== length if we got here\r\n\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        line: function() {\r\n            return line;\r\n        },\r\n        cmnt: function(trailingLine) {\r\n            var ret;\r\n            if (trailingLine === undefined)\r\n                ret = commentLine === line - 1 && commentText || null;\r\n            else {\r\n                if (!commentText)\r\n                    peek();\r\n                ret = commentLine === trailingLine && commentType === \"/\" && commentText || null;\r\n            }\r\n            if (ret) {\r\n                commentType = commentText = null;\r\n                commentLine = 0;\r\n            }\r\n            return ret;\r\n        }\r\n    };\r\n    /* eslint-enable callback-return */\r\n}\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(25),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    Service   = require(32),\r\n    Class     = require(10),\r\n    Message   = require(21),\r\n    Reader    = require(27),\r\n    Writer    = require(40),\r\n    util      = require(36),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(39),\r\n    converter = require(12);\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            /* istanbul ignore next */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        /* istanbul ignore next */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        /* istanbul ignore next */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (typeof this.reserved[i] !== \"string\" && this.reserved[i][0] <= id && this.reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (this.reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.from = Type.prototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(36);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(38);\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(7);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(38);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n *\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(6);\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(9);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(8);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(37);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Internal alias of or polyfull for Buffer.from.\r\n * @type {?function}\r\n * @param {string|number[]} value Value\r\n * @param {string} [encoding] Encoding if value is a string\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_from = null;\r\n\r\n/**\r\n * Internal alias of or polyfill for Buffer.allocUnsafe.\r\n * @type {?function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {function} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>=} properties Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message}\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations. Longs, enums and bytes are converted to strings by default.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(36);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %d:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen(\"m\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = {};\r\n    if (oneofs.length) gen\r\n    (\"var p={}\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n            if (field.partOf) {\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(38);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(40);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(38);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"sourceRoot":"."}