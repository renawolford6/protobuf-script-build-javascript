{"version":3,"sources":["lib/prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/converter.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/index-light.js","src/index-minimal.js","src/index","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/minimal.js","src/verifier.js","src/writer.js","src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","util","configure","module","1","require","asPromise","fn","ctx","params","i","arguments","length","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","n","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","t","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","Error","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","e","EventEmitter","_listeners","prototype","on","evt","off","listeners","splice","emit","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","ctor","Type","TypeError","Message","constructor","merge","$type","fieldsArray","_fieldsArray","isArray","defaultValue","emptyArray","isObject","long","emptyObject","ctorProperties","oneofsArray","_oneofsArray","get","oneOfGetter","oneof","set","oneOfSetter","defineProperties","create","common","json","nested","google","Any","fields","type_url","id","value","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","genValuePartial_fromObject","field","fieldIndex","prop","resolvedType","Enum","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","safeProp","toObject","repeatedFields","mapFields","otherFields","valuesById","low","high","unsigned","toNumber","bytes","decoder","group","ref","types","basic","compat","packed","genTypePartial","encoder","partOf","wireType","mapKey","required","indexOf","options","ReflectionObject","comments","className","fromJSON","toJSON","add","comment","isString","isInteger","remove","val","Field","extend","toLowerCase","optional","message","extensionField","declaringField","_packed","defineProperty","getOption","setOption","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","load","filename","root","Root","loadSync","build","verifier","Namespace","OneOf","MapField","Service","Method","_configure","Reader","BufferReader","roots","Writer","BufferWriter","rpc","tokenize","parse","resolvedKeyType","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","setOptions","onAdd","onRemove","ptr","part","resolveAll","filterType","parentAlreadyChecked","found","lookupService","lookupEnum","Type_","Service_","unshift","_handleAdd","_handleRemove","toString","Root_","fieldNames","addFieldsToParent","index","self","isName","token","isTypeRef","isFqTypeRef","lower","camelCase","substring","toUpperCase","illegal","tn","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","readRange","parseId","sign","tokenLower","Infinity","NaN","parseInt","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","cmnt","parseMapField","parseField","parseOneOf","extensions","reserved","parseGroup","applyCase","trailingLine","parseInlineOptions","fieldName","lcFirst","ucFirst","valueType","enm","parseEnumValue","custom","parseOptionValue","service","parseMethod","method","reference","head","keepCase","package","indexOutOfRange","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","exponent","mantissa","pow","float","readDouble","Float64Array","f64","double","skipType","BufferReader_","int64","uint64","sint64","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","resolvePath","finish","cb","sync","process","parsed","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","requestCtor","responseCtor","request","response","endedByRPC","_methodsArray","inherited","methodsArray","rpcService","m","q","s","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","setComment","commentType","commentLine","lines","trim","commentText","stack","repeat","curr","isComment","delimRe","delim","expected","actual","equals","ret","0","r","_fieldsById","_ctor","fieldsById","filter","setup","fork","ldelim","bake","o","zero","zzEncode","zeroHash","fromString","fromHash","hash","toHash","mask","part0","part1","part2","versions","node","Number","isFinite","utf8Write","encoding","allocUnsafe","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","dst","fieldMap","lazyResolve","lazyTypes","longs","enums","invalid","genVerifyValue","genVerifyKey","Op","noop","State","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.configure();\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(6);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted\r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(21),\r\n    util    = require(36);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction Class(type, ctor) {\r\n    if (!Type)\r\n        Type = require(34);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        // create named constructor functions (codegen is required anyway)\r\n        ctor = util.codegen(\"p\")(\"return c.call(this,p)\").eof(type.name, {\r\n            c: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    (ctor.prototype = new Message()).constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    ctor.prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    var i = 0;\r\n    for (; i < /* initializes */ type.fieldsArray.length; ++i) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        ctor.prototype[type._fieldsArray[i].name] = Array.isArray(type._fieldsArray[i].resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(type._fieldsArray[i].defaultValue) && !type._fieldsArray[i].long\r\n              ? util.emptyObject\r\n              : type._fieldsArray[i].defaultValue; // if a long, it is frozen when initialized\r\n    }\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    var ctorProperties = {};\r\n    for (i = 0; i < /* initializes */ type.oneofsArray.length; ++i)\r\n        ctorProperties[type._oneofsArray[i].resolve().name] = {\r\n            get: util.oneOfGetter(type._oneofsArray[i].oneof),\r\n            set: util.oneOfSetter(type._oneofsArray[i].oneof)\r\n        };\r\n    if (i)\r\n        Object.defineProperties(ctor.prototype, ctorProperties);\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return ctor.prototype;\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @function\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = Class;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object.<string,*>} google/protobuf/any.proto Any\r\n * @property {Object.<string,*>} google/protobuf/duration.proto Duration\r\n * @property {Object.<string,*>} google/protobuf/empty.proto Empty\r\n * @property {Object.<string,*>} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object.<string,*>} google/protobuf/timestamp.proto Timestamp\r\n * @property {Object.<string,*>} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n * \r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/field_mask.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(15),\r\n    util = require(36);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low,d%s.high).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low,m%s.high).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        otherFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (fields[i].resolve().repeated)\r\n            repeatedFields.push(fields[i]);\r\n        else if (fields[i].map)\r\n            mapFields.push(fields[i]);\r\n        else\r\n            otherFields.push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0, field; i < otherFields.length; ++i) {\r\n            var field = otherFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    for (i = 0, field; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m%s!==undefined&&m%s!==null&&m.hasOwnProperty(%j)){\", prop, prop, field.name);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, i, prop);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(35),\r\n    util    = require(36);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(35),\r\n    util     = require(36);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field    = mtype._fieldsArray[i].resolve();\r\n        if (field.partOf) // see below for oneofs\r\n            continue;\r\n        var type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length&&m.hasOwnProperty(%j)){\", ref, ref, field.name)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n                else if (field.bytes || field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j))\", ref, field.name);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < /* initializes */ mtype.oneofsArray.length; ++i) {\r\n        var oneof = mtype._oneofsArray[i]; gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        for (var j = 0; j < /* direct */ oneof.fieldsArray.length; ++j) {\r\n            var field    = oneof.fieldsArray[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name); gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, mtype._fieldsArray.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n    \r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id\");\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    this.comments[name] = comment || null;\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(15),\r\n    types = require(35),\r\n    util  = require(36);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n\r\n        /* istanbul ignore if */\r\n        if (!Type)\r\n            Type = require(34);\r\n\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(18);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(14);\r\nprotobuf.decoder          = require(13);\r\nprotobuf.verifier         = require(39);\r\nprotobuf.converter        = require(12);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(24);\r\nprotobuf.Namespace        = require(23);\r\nprotobuf.Root             = require(29);\r\nprotobuf.Enum             = require(15);\r\nprotobuf.Type             = require(34);\r\nprotobuf.Field            = require(16);\r\nprotobuf.OneOf            = require(25);\r\nprotobuf.MapField         = require(20);\r\nprotobuf.Service          = require(32);\r\nprotobuf.Method           = require(22);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(10);\r\nprotobuf.Message          = require(21);\r\n\r\n// Utility\r\nprotobuf.types            = require(35);\r\nprotobuf.util             = require(36);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n * \r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n * \r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(40);\r\nprotobuf.BufferWriter = require(41);\r\nprotobuf.Reader       = require(27);\r\nprotobuf.BufferReader = require(28);\r\n\r\n// Utility\r\nprotobuf.util         = require(38);\r\nprotobuf.rpc          = require(30);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"full\";\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(33);\r\nprotobuf.parse            = require(26);\r\nprotobuf.common           = require(11);\r\n\r\n// Configure parser\r\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(16);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(35),\r\n    util    = require(36);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(15),\r\n    Field    = require(16),\r\n    util     = require(36);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterType || found instanceof filterType)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(36);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(16);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n}\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(33),\r\n    Root      = require(29),\r\n    Type      = require(34),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    OneOf     = require(25),\r\n    Enum      = require(15),\r\n    Service   = require(32),\r\n    Method    = require(22),\r\n    types     = require(35),\r\n    util      = require(36);\r\n\r\nfunction isName(token) {\r\n    return /^[a-zA-Z_][a-zA-Z_0-9]*$/.test(token);\r\n}\r\n\r\nfunction isTypeRef(token) {\r\n    return /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction isFqTypeRef(token) {\r\n    return /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object.<string,*>}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object.<string,*>}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name) {\r\n        var filename = parse.filename;\r\n        parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        /* istanbul ignore next */\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && isTypeRef(token))\r\n                return token;\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"max\": return 536870911;\r\n            case \"0\": return 0;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        /* istanbul ignore else */\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        /* istanbul ignore next */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        isProto3 = syntax === \"proto3\";\r\n        /* istanbul ignore next */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        type.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var field = new Field(name, parseId(next()), type, rule, extend),\r\n            trailingLine = tn.line();\r\n        field.comment = cmnt();\r\n        parseInlineOptions(field);\r\n        if (!field.comment)\r\n            field.comment = cmnt(trailingLine);\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable.\r\n        if (field.repeated && types.packed[type] !== undefined && !isProto3)\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        type.comment = cmnt();\r\n        var field = new Field(fieldName, id, name, rule);\r\n        skip(\"{\");\r\n        while ((token = next()) !== \"}\") {\r\n            switch (token = lower(token)) {\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        }\r\n        skip(\";\", true);\r\n        parent.add(type).add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var field = new MapField(name, parseId(next()), keyType, valueType),\r\n            trailingLine = tn.line();\r\n        field.comment = cmnt();\r\n        parseInlineOptions(field);\r\n        if (!field.comment)\r\n            field.comment = cmnt(trailingLine);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        var oneof = new OneOf(name),\r\n            trailingLine = tn.line();\r\n        oneof.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else {\r\n            skip(\";\");\r\n            if (!oneof.comment)\r\n                oneof.comment = cmnt(trailingLine);\r\n        }\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var enm = new Enum(name);\r\n        enm.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumValue(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            trailingLine = tn.line();\r\n        parent.add(name, value, cmnt());\r\n        parseInlineOptions({}); // skips enum value options\r\n        if (!parent.comments[name])\r\n            parent.comments[name] = cmnt(trailingLine);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (isFqTypeRef(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\r\n            /* istanbul ignore next */\r\n            do {\r\n                if (!isName(token = next()))\r\n                    throw illegal(token, \"name\");\r\n                if (peek() === \"{\")\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n                else {\r\n                    skip(\":\");\r\n                    setOption(parent, name + \".\" + token, readValue(true));\r\n                }\r\n            } while (!skip(\"}\", true));\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var name = token;\r\n        var service = new Service(name);\r\n        service.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream),\r\n            trailingLine = tn.line();\r\n        method.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else {\r\n            skip(\";\");\r\n            if (!method.comment)\r\n                method.comment = cmnt(trailingLine);\r\n        }\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(reference))\r\n            throw illegal(reference, \"reference\");\r\n\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(38);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        Reader.prototype.int64 = read_int64_long;\r\n        Reader.prototype.uint64 = read_uint64_long;\r\n        Reader.prototype.sint64 = read_sint64_long;\r\n        Reader.prototype.fixed64 = read_fixed64_long;\r\n        Reader.prototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        Reader.prototype.int64 = read_int64_number;\r\n        Reader.prototype.uint64 = read_uint64_number;\r\n        Reader.prototype.sint64 = read_sint64_number;\r\n        Reader.prototype.fixed64 = read_fixed64_number;\r\n        Reader.prototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(27);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(38);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(16),\r\n    Enum    = require(15),\r\n    util    = require(36);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore next */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        fetch(self.resolvePath(filename, parsed.imports[i]));\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        fetch(self.resolvePath(filename, parsed.weakImports[i]), true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore next */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued)\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0; i < filename.length; ++i)\r\n        fetch(self.resolvePath(\"\", filename[i]));\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {   \r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(31);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(38);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n * \r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n * \r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(\"error\", err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(22),\r\n    util   = require(36),\r\n    rpc    = require(30);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst(this._methodsArray[i].resolve().name)] = util.codegen(\"r\",\"c\")(\"return this.rpcCall(m,q,s,r,c)\").eof(util.lcFirst(this._methodsArray[i].name), {\r\n            m: this._methodsArray[i],\r\n            q: this._methodsArray[i].resolvedRequestType.ctor,\r\n            s: this._methodsArray[i].resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @ignore\r\n */\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            default:\r\n                return unescape.map[$1] || \"\";\r\n        }\r\n    });\r\n}\r\n\r\nunescape.map = {\r\n    \"0\": \"\\0\",\r\n    \"r\": \"\\r\",\r\n    \"n\": \"\\n\",\r\n    \"t\": \"\\t\"\r\n};\r\n\r\ntokenize.unescape = unescape;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object.<string,*>} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {function(number=):?string} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n * @property {function(string):string} unescape Unescapes a string\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        var lines = source\r\n            .substring(start, end)\r\n            .split(/\\n/g);\r\n        for (var i = 0; i < lines.length; ++i)\r\n            lines[i] = lines[i].replace(/^ *[*/]+ */, \"\").trim();\r\n        commentText = lines\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isComment;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    isComment = charAt(start = offset + 1) === \"/\";\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 1);\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    isComment = charAt(start = offset + 1) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            throw illegal(\"comment\");\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 2);\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        // offset !== length if we got here\r\n\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        line: function() {\r\n            return line;\r\n        },\r\n        cmnt: function(trailingLine) {\r\n            var ret;\r\n            if (trailingLine === undefined)\r\n                ret = commentLine === line - 1 && commentText || null;\r\n            else {\r\n                if (!commentText)\r\n                    peek();\r\n                ret = commentLine === trailingLine && commentType === \"/\" && commentText || null;\r\n            }\r\n            if (ret) {\r\n                commentType = commentText = null;\r\n                commentLine = 0;\r\n            }\r\n            return ret;\r\n        }\r\n    };\r\n    /* eslint-enable callback-return */\r\n}\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(25),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    Service   = require(32),\r\n    Class     = require(10),\r\n    Message   = require(21),\r\n    Reader    = require(27),\r\n    Writer    = require(40),\r\n    util      = require(36),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(39),\r\n    converter = require(12);\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            /* istanbul ignore next */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        /* istanbul ignore next */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        /* istanbul ignore next */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.from = Type.prototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(36);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(38);\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(7);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(38);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\nutil.asPromise    = require(1);\r\nutil.base64       = require(2);\r\nutil.EventEmitter = require(4);\r\nutil.inquire      = require(6);\r\nutil.utf8         = require(9);\r\nutil.pool         = require(8);\r\n\r\nutil.LongBits     = require(37);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {};\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util.Buffer.allocUnsafe(sizeOrArray) // polyfilled\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util.Buffer.from(sizeOrArray) // polyfilled\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(36);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %d:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9][0-9]*)$/.test(%s))\", ref) // it's important not to use any literals here that might be confused with short variable names by pbjs' beautify\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    if (/* initializes */ !mtype.fieldsArray.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(38);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(40);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(38);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n"],"sourceRoot":"."}