{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/converter.js","src/converters.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/writer_buffer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","undefined","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","arg","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","Type","TypeError","MessageCtor","properties","Message","util","merge","$type","fieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","long","emptyObject","oneofsArray","oneof","defineProperty","get","indexOf","set","value","common","json","nested","google","protobuf","Any","fields","type_url","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","genConvert","fieldIndex","prop","resolvedType","Enum","converter","mtype","convert","safeProp","repeated","converters","typeOrCtor","options","fieldsOnly","enums","defaults","longs","defaultLow","defaultHigh","unsigned","longNe","low","high","Number","LongBits","from","toNumber","Long","fromNumber","toString","fromValue","bytes","Buffer","isBuffer","message","fromString","newBuffer","decoder","group","ref","resolvedKeyType","types","basic","packed","genEncodeType","encoder","wireType","mapKey","partOf","required","oneofFields","ReflectionObject","valuesById","self","val","parseInt","EnumPrototype","className","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","remove","Field","toLowerCase","optional","extensionField","declaringField","_packed","FieldPrototype","MapField","defineProperties","getOption","setOption","ifNotSet","resolved","typeDefault","parent","lookup","freeze","MapFieldPrototype","MessagePrototype","asJSON","object","writer","encodeDelimited","readerOrBuffer","decodeDelimited","verify","impl","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","_nestedArray","_clearProperties","clearCache","namespace","arrayToJSON","array","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","nestedJson","ns","nestedName","getEnum","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","root","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","fullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","_fieldsArray","addFieldsToParent","OneOfPrototype","index","fieldName","isName","token","isTypeRef","isFqTypeRef","lower","camelCase","substring","toUpperCase","parse","illegal","filename","tn","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","readRange","parseId","sign","tokenLower","Infinity","NaN","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","parseMapField","parseField","parseOneOf","extensions","reserved","parseGroup","applyCase","parseInlineOptions","lcFirst","ucFirst","valueType","enm","parseEnumField","custom","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","keepCase","package","indexOutOfRange","reader","writeLength","RangeError","pos","Reader","readLongVarint","bits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","BufferReader","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","exponent","mantissa","pow","float","readDouble","Float64Array","f64","double","skipType","_configure","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","initParser","load","finish","cb","process","parsed","sync","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","methodsArray","methodName","inherited","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","stack","repeat","curr","delimRe","delim","expected","actual","equals","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","Writer","verifier","fieldsById","names","repeatedFieldsArray","filter","oneOfName","setup","fld","fork","ldelim","bake","dst","allocUnsafe","LongBitsPrototype","zero","zzEncode","zeroHash","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","utf8Write","encoding","dcodeIO","isFinite","floor","longToHash","longFromHash","fromBits","arrayNe","invalid","genVerifyValue","genVerifyKey","Op","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength","roots","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object.<string,*>} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted\r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(20),\r\n    util    = require(35);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(33);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        /* istanbul ignore next */\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) {\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.fieldsArray.forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.oneofsArray.forEach(function(oneof) {\r\n        Object.defineProperty(prototype, oneof.resolve().name, {\r\n            get: function() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object.<string,*>} google/protobuf/any.proto Any\r\n * @property {Object.<string,*>} google/protobuf/duration.proto Duration\r\n * @property {Object.<string,*>} google/protobuf/empty.proto Empty\r\n * @property {Object.<string,*>} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object.<string,*>} google/protobuf/timestamp.proto Timestamp\r\n * @property {Object.<string,*>} google/protobuf/wrappers.proto Wrappers\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});","\"use strict\";\r\nmodule.exports = converter;\r\n\r\nvar Enum       = require(17),\r\n    converters = require(14),\r\n    util       = require(35);\r\n\r\nvar sprintf    = util.codegen.sprintf;\r\n\r\nfunction genConvert(field, fieldIndex, prop) {\r\n    if (field.resolvedType)\r\n        return field.resolvedType instanceof Enum\r\n            // enums\r\n            ? sprintf(\"f.enums(s%s,%d,types[%d].values,o)\", prop, 0, fieldIndex)\r\n            // recurse into messages\r\n            : sprintf(\"types[%d].convert(s%s,f,o)\", fieldIndex, prop);\r\n    switch (field.type) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            // longs\r\n            return sprintf(\"f.longs(s%s,%d,%d,%j,o)\", prop, 0, 0, field.type.charAt(0) === \"u\");\r\n        case \"bytes\":\r\n            // bytes\r\n            return sprintf(\"f.bytes(s%s,%j,o)\", prop, Array.prototype.slice.call(field.defaultValue));\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Generates a conveter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @param {function} generateField Field generator\r\n * @returns {Codegen} Codegen instance\r\n * @property {ConverterImpl} json Converter implementation producing JSON\r\n * @property {ConverterImpl} message Converter implementation producing runtime messages\r\n */\r\nfunction converter(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"s\", \"f\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d=f.create(s,this,o)\");\r\n    if (fields.length) { gen\r\n    (\"if(d){\");\r\n        var convert;\r\n        fields.forEach(function(field, i) {\r\n            var prop = util.safeProp(field.resolve().name);\r\n\r\n            // repeated\r\n            if (field.repeated) { gen\r\n        (\"if(s%s&&s%s.length){\", prop, prop)\r\n            (\"d%s=[]\", prop)\r\n            (\"for(var i=0;i<s%s.length;++i)\", prop);\r\n                if (convert = genConvert(field, i, prop + \"[i]\")) gen\r\n                (\"d%s.push(%s)\", prop, convert);\r\n                else gen\r\n                (\"d%s.push(s%s[i])\", prop, prop);\r\n                gen\r\n        (\"}else if(o.defaults||o.arrays)\")\r\n            (\"d%s=[]\", prop);\r\n\r\n            // non-repeated\r\n            } else if (convert = genConvert(field, i, prop)) gen\r\n        (\"d%s=%s\", prop, convert);\r\n            else gen\r\n        (\"if(d%s===undefined&&o.defaults)\", prop)\r\n            (\"d%s=%j\", prop, field.defaultValue);\r\n\r\n        });\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nutil.merge(converter, converters);\r\n\r\n/**\r\n * A converter implementation as used by {@link Type#convert} respectively {@link Message.convert}.\r\n * @typedef ConverterImpl\r\n * @type {Object}\r\n * @property {ConverterCreate} create Function for creating a new destination object\r\n * @property {ConverterEnums} enums Function for converting enum values\r\n * @property {ConverterLongs} longs Function for converting long values\r\n * @property {ConverterBytes} bytes Function for converting bytes values\r\n */\r\n\r\n/**\r\n * A function for creating a new destination object.\r\n * @typedef ConverterCreate\r\n * @type {function}\r\n * @param {Message|Object} value Source object or message\r\n * @param {Function} typeOrCtor Reflected type or message constructor\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Destination object or message\r\n */\r\n\r\n/**\r\n * A function for converting enum values.\r\n * @typedef ConverterEnums\r\n * @type {function}\r\n * @param {number|string} value Actual value\r\n * @param {number} defaultValue Default value\r\n * @param {Object.<string,number>} values Possible values\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {number|string} Converted value\r\n */\r\n\r\n/**\r\n * A function for converting long values.\r\n * @typedef ConverterLongs\r\n * @type {function}\r\n * @param {number|string|Long} value Actual value\r\n * @param {Long} defaultValue Default value\r\n * @param {boolean} unsigned Whether unsigned or not\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {number|string|Long} Converted value\r\n */\r\n\r\n/**\r\n * A function for converting bytes values.\r\n * @typedef ConverterBytes\r\n * @type {function}\r\n * @param {string|number[]|Uint8Array} value Actual value\r\n * @param {number[]} defaultValue Default value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {string|number[]|Uint8Array} Converted value \r\n */\r\n","\"use strict\";\r\nvar converters = exports;\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * JSON conversion options as used by {@link Message#asJSON}.\r\n * @typedef JSONConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n * @property {*} [longs] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @property {*} [enums=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Converter implementation producing JSON.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.json = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        return options.fieldsOnly\r\n            ? {}\r\n            : util.merge({}, value);\r\n    },\r\n    enums: function(value, defaultValue, values, options) {\r\n        if (!options.defaults) {\r\n            if (value === undefined || value === defaultValue)\r\n                return undefined;\r\n        } else if (value === undefined)\r\n            value = defaultValue;\r\n        return options.enums === String && typeof value === \"number\"\r\n            ? values[value]\r\n            : value;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned, options) {\r\n        if (!value) {\r\n            if (options.defaults)\r\n                value = { low: defaultLow, high: defaultHigh };\r\n            else\r\n                return undefined;\r\n        } else if (!util.longNe(value, defaultLow, defaultHigh) && !options.defaults)\r\n            return undefined;\r\n        if (options.longs === Number)\r\n            return typeof value === \"number\"\r\n                ? value\r\n                : util.LongBits.from(value).toNumber(unsigned);\r\n        if (options.longs === String) {\r\n            if (typeof value === \"number\")\r\n                return util.Long.fromNumber(value, unsigned).toString();\r\n            value = util.Long.fromValue(value); // has no unsigned option\r\n            value.unsigned = unsigned;\r\n            return value.toString();\r\n        }\r\n        return value;\r\n    },\r\n    bytes: function(value, defaultValue, options) {\r\n        if (!value) {\r\n            if (options.defaults)\r\n                value = defaultValue;\r\n            else\r\n                return undefined;\r\n        } else if (!value.length && !options.defaults)\r\n            return undefined;\r\n        return options.bytes === String\r\n            ? util.base64.encode(value, 0, value.length)\r\n            : options.bytes === Array\r\n            ? Array.prototype.slice.call(value)\r\n            : options.bytes === util.Buffer && !util.Buffer.isBuffer(value)\r\n            ? util.Buffer.from(value) // polyfilled\r\n            : value;\r\n    }\r\n};\r\n\r\n/**\r\n * Message conversion options as used by {@link Message.from} and {@link Type#from}.\r\n * @typedef MessageConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n */\r\n// Note that options.defaults and options.arrays also affect the message converter.\r\n// As defaults are already on the prototype, usage is not recommended and thus undocumented.\r\n\r\n/**\r\n * Converter implementation producing runtime messages.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.message = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        // can't use instanceof Type here because converters are also part of the minimal runtime\r\n        return new (typeOrCtor.ctor ? typeOrCtor.ctor : typeOrCtor)(options.fieldsOnly ? undefined : value);\r\n    },\r\n    enums: function(value, defaultValue, values) {\r\n        if (typeof value === \"string\")\r\n            return values[value];\r\n        return value | 0;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned) {\r\n        if (typeof value === \"string\")\r\n            return util.Long.fromString(value, unsigned);\r\n        if (typeof value === \"number\")\r\n            return util.Long.fromNumber(value, unsigned);\r\n        return value;\r\n    },\r\n    bytes: function(value/*, defaultValue*/) {\r\n        if (util.Buffer)\r\n            return util.Buffer.isBuffer(value)\r\n                ? value\r\n                : util.Buffer.from(value, \"base64\"); // polyfilled\r\n        if (typeof value === \"string\") {\r\n            var buf = util.newBuffer(util.base64.length(value));\r\n            util.base64.decode(value, buf, 0);\r\n            return buf;\r\n        }\r\n        return value instanceof util.Array\r\n            ? value\r\n            : new util.Array(value);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(17),\r\n    types   = require(34),\r\n    util    = require(35);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.ctor)\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packed\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(17),\r\n    types    = require(34),\r\n    util     = require(35);\r\n\r\nfunction genEncodeType(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var oneofs = mtype.oneofsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(%s&&%s!==util.emptyObject){\", ref, ref)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length){\", ref, ref)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s){\", ref)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genEncodeType(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&util.longNe(%s,%d,%d))\", ref, ref, ref, field.defaultValue.low, field.defaultValue.high);\r\n                else if (field.bytes) gen\r\n    (\"if(%s&&%s.length\" + (field.defaultValue.length ? \"&&util.arrayNe(%s,%j)\" : \"\") + \")\", ref, ref, ref, Array.prototype.slice.call(field.defaultValue));\r\n                else gen\r\n    (\"if(%s!==undefined&&%s!==%j)\", ref, ref, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genEncodeType(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i];\r\n        gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        var oneofFields = oneof.fieldsArray;\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType === undefined)\r\n                genEncodeType(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(23);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    var self = this;\r\n    Object.keys(values || {}).forEach(function(key) {\r\n        var val;\r\n        if (typeof values[key] === \"number\")\r\n            val = values[key];\r\n        else {\r\n            val = parseInt(key, 10);\r\n            key = values[key];\r\n        }\r\n        self.valuesById[self.values[key] = val] = key;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(23);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(17),\r\n    types     = require(34),\r\n    util      = require(35);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nObject.defineProperties(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: function() {\r\n            // defaults to packed=true if not explicity set to false\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(19);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        if (!Type)\r\n            Type = require(33);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            typeDefault = 0;\r\n        /* istanbul ignore next */\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved, determine the default value\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else {\r\n        if (this.options && this.options[\"default\"] !== undefined) {\r\n            this.defaultValue = this.options[\"default\"];\r\n            if (this.resolvedType instanceof Enum && typeof this.defaultValue === \"string\")\r\n                this.defaultValue = this.resolvedType.values[this.defaultValue] || 0;\r\n        } else\r\n            this.defaultValue = typeDefault;\r\n\r\n        if (this.long) {\r\n            this.defaultValue = util.Long.fromNumber(this.defaultValue, this.type.charAt(0) === \"u\");\r\n            if (Object.freeze)\r\n                Object.freeze(this.defaultValue); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n        } else if (this.bytes && typeof this.defaultValue === \"string\") {\r\n            var buf;\r\n            if (util.base64.test(this.defaultValue))\r\n                util.base64.decode(this.defaultValue, buf = util.newBuffer(util.base64.length(this.defaultValue)), 0);\r\n            else\r\n                util.utf8.write(this.defaultValue, buf = util.newBuffer(util.utf8.length(this.defaultValue)), 0);\r\n            this.defaultValue = buf;\r\n        }\r\n    }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(18);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(34),\r\n    util    = require(35);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar converters = require(14);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {JSONConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    return this.$type.convert(this, converters.json, options);\r\n};\r\n\r\n/**\r\n * Creates a message from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Options\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = function from(object, options) {\r\n    return this.$type.convert(object, converters.message, options);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Converts an object or runtime message of this type.\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\nMessage.convert = function convert(source, impl, options) {\r\n    return this.$type.convert(source, impl, options);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(23);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(33),\r\n    util = require(35);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(23);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(17),\r\n    Field   = require(18),\r\n    util    = require(35);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(33);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(31);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\nObject.defineProperties(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName + \" must be JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object must be \" + nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object must be an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            /* istanbul ignore next */\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(33);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(31);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.nestedArray;\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name Namespace#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(33);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(31);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(35);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(28);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(28);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (!Root)\r\n        Root = require(28);\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(23);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(18);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(OneOfPrototype, \"fieldsArray\", {\r\n    get: function() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(32),\r\n    Root      = require(28),\r\n    Type      = require(33),\r\n    Field     = require(18),\r\n    MapField  = require(19),\r\n    OneOf     = require(24),\r\n    Enum      = require(17),\r\n    Service   = require(31),\r\n    Method    = require(21),\r\n    types     = require(34),\r\n    util      = require(35);\r\n\r\nfunction isName(token) {\r\n    return /^[a-zA-Z_][a-zA-Z_0-9]*$/.test(token);\r\n}\r\n\r\nfunction isTypeRef(token) {\r\n    return /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction isFqTypeRef(token) {\r\n    return /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object.<string,*>}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object.<string,*>}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : camelCase;\r\n\r\n    function illegal(token, name) {\r\n        var filename = parse.filename;\r\n        parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && isTypeRef(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"max\": return 536870911;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!isTypeRef(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        isProto3 = syntax === \"proto3\";\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    default:\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (lower(type) === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        if (!isTypeRef(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable.\r\n        if (field.repeated && types.packed[type] !== undefined && !isProto3)\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        skip(\"{\");\r\n        while ((token = next()) !== \"}\") {\r\n            switch (token = lower(token)) {\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        }\r\n        skip(\";\", true);\r\n        parent.add(type).add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var enm = new Enum(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.add(name, value);\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (isFqTypeRef(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n\r\n                /* istanbul ignore next */\r\n                if (!isName(token))\r\n                    throw illegal(token, \"name\");\r\n\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(reference))\r\n            throw illegal(reference, \"reference\");\r\n\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(37);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(27);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\nvar Reader = require(26);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(22);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(18),\r\n    util   = require(35);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>|*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    // note that `json` actually must be of type `Object.<string,*>` but TypeScript\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\nvar initParser = function() {\r\n    try { // excluded in noparse builds\r\n        parse  = require(25);\r\n        common = require(12);\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    initParser = null;\r\n};\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (initParser)\r\n        initParser();\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            if (sync)\r\n                throw err;\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(30);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(35);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(22);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(21),\r\n    util   = require(35),\r\n    rpc    = require(29);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nObject.defineProperties(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.methodsArray.forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n\r\n            /* istanbul ignore next */\r\n            if (!request)\r\n                throw TypeError(\"request must not be null\");\r\n\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object.<string,*>} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n/**/\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type;\r\n\r\nvar Namespace = require(22);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(17),\r\n    OneOf     = require(24),\r\n    Field     = require(18),\r\n    Service   = require(31),\r\n    Class     = require(11),\r\n    Message   = require(20),\r\n    Reader    = require(26),\r\n    Writer    = require(39),\r\n    util      = require(35),\r\n    encoder   = require(16),\r\n    decoder   = require(15),\r\n    verifier  = require(38),\r\n    converter = require(13);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.fieldsArray.filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a JSON object by converting strings and numbers to their respective field types.\r\n * @param {Object.<string,*>} object JSON object\r\n * @param {MessageConversionOptions} [options] Conversion options\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.from = function from(object, options) {\r\n    return this.convert(object, converter.message, options);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = this.fieldsArray.map(function(fld) { return fld.resolve().resolvedType; });\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.convert = converter(this).eof(fullName + \"$convert\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Converts an object or runtime message.\r\n * @param {Message|Object} source Source object or runtime message\r\n * @param {ConverterImpl} impl Converter implementation to use, i.e. {@link converters.json} or {@link converters.message}\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {Message|Object} Converted object or runtime message\r\n */\r\nTypePrototype.convert = function convert_setup(source, impl, options) {\r\n    return this.setup().convert(source, impl, options); // overrides this method\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(35);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(37);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(3);\r\nutil.EventEmitter = require(4);\r\nutil.extend       = require(5);\r\nutil.fetch        = require(6);\r\nutil.path         = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    return object ? Object.values ? Object.values(object) : Object.keys(object).map(function(key) {\r\n        return object[key];\r\n    }) : [];\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    /* istanbul ignore next */\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n\r\n/**\r\n * Tests if two arrays are not equal.\r\n * @param {Array.<*>} a Array 1\r\n * @param {Array.<*>} b Array 2\r\n * @returns {boolean} `true` if not equal, otherwise `false`\r\n */\r\nutil.arrayNe = function arrayNe(a, b) {\r\n    if (a.length === b.length)\r\n        for (var i = 0; i < a.length; ++i)\r\n            if (a[i] !== b[i])\r\n                return true;\r\n    return false;\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(17),\r\n    util      = require(35);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.fullName.substring(1) + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e;\")\r\n            (\"if(e=types[%d].verify(%s))\", fieldIndex, ref)\r\n                (\"return e\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(37);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(40);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset()\r\n        .uint32(len)\r\n        .tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\nvar Writer = require(39);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(37);\r\n\r\nvar utf8   = util.utf8,\r\n    Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        val.copy(buf, pos, 0, val.length);\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser (if not excluded)\r\ntry {\r\n    protobuf.tokenize     = require(\"./tokenize\");\r\n    protobuf.parse        = require(\"./parse\");\r\n    protobuf.common       = require(\"./common\");\r\n} catch (e) {} // eslint-disable-line no-empty\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = require(\"./writer_buffer\");\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = require(\"./reader_buffer\");\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n/* istanbul ignore next */\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}