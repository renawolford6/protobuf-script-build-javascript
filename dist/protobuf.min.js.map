{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/common.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light.js","../src/index-minimal.js","../src/index","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/parse.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/tokenize.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","isLong","util","configure","module","1","require","asPromise","fn","ctx","params","i","arguments","length","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","n","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","t","j","b","String","fromCharCode","decode","offset","c","charCodeAt","Error","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","e","EventEmitter","_listeners","prototype","on","evt","off","listeners","splice","emit","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","toString","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","factory","Float32Array","writeFloat_f32_cpy","val","buf","pos","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","le","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","mantissa","pow","readFloat_ieee754","readUint","uint","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDouble_f64_cpy","f64","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","moduleName","mod","eval","path","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","utf8","len","read","chunk","write","c1","c2","common","json","commonRe","nested","google","Any","fields","type_url","type","id","value","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","oneof","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","genValuePartial_fromObject","field","fieldIndex","prop","resolvedType","Enum","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","fieldsArray","safeProp","toObject","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","hasKs2","index","_fieldsArray","indexOf","missing","decoder","filter","group","ref","types","long","basic","packed","rfield","required","genTypePartial","encoder","wireType","mapKey","optional","ReflectionObject","TypeError","valuesById","create","comments","constructor","className","fromJSON","toJSON","add","comment","isString","isInteger","allow_alias","remove","Field","extend","isObject","ruleRe","toLowerCase","message","defaultValue","bytes","extensionField","declaringField","_packed","Type","defineProperty","get","getOption","setOption","ifNotSet","resolved","defaults","parent","lookupTypeOrEnum","fromNumber","freeze","newBuffer","emptyObject","emptyArray","ctor","d","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","load","root","Root","loadSync","build","verifier","Namespace","OneOf","MapField","Service","Method","Message","Reader","BufferReader","Writer","BufferWriter","rpc","roots","wrappers","tokenize","parse","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","writer","encodeDelimited","reader","decodeDelimited","verify","object","toJSONOptions","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","setOptions","onAdd","onRemove","isArray","ptr","part","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Service_","defineProperties","unshift","_handleAdd","_handleRemove","Root_","fieldNames","addFieldsToParent","self","oneofName","oneOfGetter","set","oneOfSetter","camelCase","substring","camelCaseRe","toUpperCase","illegal","token","insideTryCatch","tn","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRanges","target","acceptStrings","parseId","base10Re","parseInt","base16Re","base8Re","numberRe","parseFloat","acceptNegative","base10NegRe","base16NegRe","base8NegRe","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","ifBlock","fnIf","fnElse","trailingLine","cmnt","nameRe","parseMapField","parseField","parseOneOf","extensions","reserved","isProto3","parseGroup","applyCase","parseInlineOptions","lcFirst","ucFirst","valueType","enm","parseEnumValue","dummy","isCustom","fqTypeRefRe","parseOptionValue","service","parseMethod","method","reference","pkg","imports","weakImports","syntax","head","keepCase","whichImports","package","indexOutOfRange","writeLength","RangeError","readLongVarint","bits","LongBits","readFixed32_end","readFixed64","create_array","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","double","skipType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","resolvePath","finish","cb","sync","process","parsed","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","requestCtor","responseCtor","request","endedByRPC","_methodsArray","inherited","methodsArray","rpcService","m","q","s","unescape","unescapeRe","unescapeMap","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","setComment","commentType","commentLine","lines","setCommentSplitRe","setCommentRe","trim","commentText","stack","repeat","curr","isComment","whitespaceRe","delimRe","expected","actual","ret","0","r","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","ctorProperties","isReservedId","isReservedName","setup","wrapper","originalThis","fork","ldelim","typeName","bake","o","a","decorateRoot","enumerable","decorateEnumIndex","zero","toNumber","zzEncode","zeroHash","from","fromString","low","high","unsigned","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","newError","CustomError","captureStackTrace","versions","node","Number","isFinite","isset","isSet","hasOwnProperty","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","longs","enums","encoding","allocUnsafe","invalid","genVerifyValue","genVerifyKey","seenFirstField","oneofProp","Op","noop","State","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":";;;;;;CAAA,SAAAA,EAAAC,GAAA,cAAA,SAAAC,EAAAC,EAAAC,GAOA,QAAAC,GAAAC,GACA,GAAAC,GAAAJ,EAAAG,EAGA,OAFAC,IACAL,EAAAI,GAAA,GAAAE,KAAAD,EAAAJ,EAAAG,IAAAG,YAAAJ,EAAAE,EAAAA,EAAAE,SACAF,EAAAE,QAIA,GAAAC,GAAAV,EAAAU,SAAAL,EAAAD,EAAA,GAGA,mBAAAO,SAAAA,OAAAC,KACAD,QAAA,QAAA,SAAAE,GAKA,MAJAA,IAAAA,EAAAC,SACAJ,EAAAK,KAAAF,KAAAA,EACAH,EAAAM,aAEAN,IAIA,gBAAAO,SAAAA,QAAAA,OAAAR,UACAQ,OAAAR,QAAAC,KAEAQ,GAAA,SAAAC,EAAAF,GCpBA,QAAAG,GAAAC,EAAAC,GAEA,IAAA,GADAC,MACAC,EAAA,EAAAA,EAAAC,UAAAC,QACAH,EAAAI,KAAAF,UAAAD,KACA,IAAAI,IAAA,CACA,OAAA,IAAAC,SAAA,SAAAC,EAAAC,GACAR,EAAAI,KAAA,SAAAK,GACA,GAAAJ,EAEA,GADAA,GAAA,EACAI,EACAD,EAAAC,OACA,CAEA,IAAA,GADAC,MACAT,EAAA,EAAAA,EAAAC,UAAAC,QACAO,EAAAN,KAAAF,UAAAD,KACAM,GAAAI,MAAA,KAAAD,KAIA,KACAZ,EAAAa,MAAAZ,GAAAa,KAAAZ,GACA,MAAAS,GACAJ,IACAA,GAAA,EACAG,EAAAC,OAlCAf,EAAAR,QAAAW,0BCMA,GAAAgB,GAAA3B,CAOA2B,GAAAV,OAAA,SAAAW,GACA,GAAAC,GAAAD,EAAAX,MACA,KAAAY,EACA,MAAA,EAEA,KADA,GAAAC,GAAA,IACAD,EAAA,EAAA,GAAA,MAAAD,EAAAG,OAAAF,MACAC,CACA,OAAAE,MAAAC,KAAA,EAAAL,EAAAX,QAAA,EAAAa,EAUA,KAAA,GANAI,GAAAC,MAAA,IAGAC,EAAAD,MAAA,KAGApB,EAAA,EAAAA,EAAA,IACAqB,EAAAF,EAAAnB,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,EAAAA,EAAA,GAAA,IAAAA,GASAY,GAAAU,OAAA,SAAAC,EAAAC,EAAAC,GAKA,IAJA,GAGAC,GAHAb,KACAb,EAAA,EACA2B,EAAA,EAEAH,EAAAC,GAAA,CACA,GAAAG,GAAAL,EAAAC,IACA,QAAAG,GACA,IAAA,GACAd,EAAAb,KAAAmB,EAAAS,GAAA,GACAF,GAAA,EAAAE,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAd,EAAAb,KAAAmB,EAAAO,EAAAE,GAAA,GACAF,GAAA,GAAAE,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAd,EAAAb,KAAAmB,EAAAO,EAAAE,GAAA,GACAf,EAAAb,KAAAmB,EAAA,GAAAS,GACAD,EAAA,GAUA,MANAA,KACAd,EAAAb,KAAAmB,EAAAO,GACAb,EAAAb,GAAA,GACA,IAAA2B,IACAd,EAAAb,EAAA,GAAA,KAEA6B,OAAAC,aAAApB,MAAAmB,OAAAhB,GAaAD,GAAAmB,OAAA,SAAAlB,EAAAU,EAAAS,GAIA,IAAA,GADAN,GAFAF,EAAAQ,EACAL,EAAA,EAEA3B,EAAA,EAAAA,EAAAa,EAAAX,QAAA,CACA,GAAA+B,GAAApB,EAAAqB,WAAAlC,IACA,IAAA,KAAAiC,GAAAN,EAAA,EACA,KACA,KAAAM,EAAAZ,EAAAY,MAAAxD,EACA,KAAA0D,OAnBA,mBAoBA,QAAAR,GACA,IAAA,GACAD,EAAAO,EACAN,EAAA,CACA,MACA,KAAA,GACAJ,EAAAS,KAAAN,GAAA,GAAA,GAAAO,IAAA,EACAP,EAAAO,EACAN,EAAA,CACA,MACA,KAAA,GACAJ,EAAAS,MAAA,GAAAN,IAAA,GAAA,GAAAO,IAAA,EACAP,EAAAO,EACAN,EAAA,CACA,MACA,KAAA,GACAJ,EAAAS,MAAA,EAAAN,IAAA,EAAAO,EACAN,EAAA,GAIA,GAAA,IAAAA,EACA,KAAAQ,OA1CA,mBA2CA,OAAAH,GAAAR,GAQAZ,EAAAwB,KAAA,SAAAvB,GACA,MAAA,sEAAAuB,KAAAvB,0BC3GA,QAAAwB,KAmBA,QAAAC,KAGA,IAFA,GAAA7B,MACAT,EAAA,EACAA,EAAAC,UAAAC,QACAO,EAAAN,KAAAF,UAAAD,KACA,IAAAuC,GAAAC,EAAA9B,MAAA,KAAAD,GACAgC,EAAAC,CACA,IAAAC,EAAAzC,OAAA,CACA,GAAA0C,GAAAD,EAAAA,EAAAzC,OAAA,EAGA2C,GAAAT,KAAAQ,GACAH,IAAAC,EACAI,EAAAV,KAAAQ,MACAH,EAGAM,EAAAX,KAAAQ,KAAAG,EAAAX,KAAAG,IACAE,IAAAC,EACAM,GAAA,GACAA,GAAAC,EAAAb,KAAAQ,KACAH,IAAAC,EACAM,GAAA,GAIAE,EAAAd,KAAAG,KACAE,IAAAC,GAEA,IAAA1C,EAAA,EAAAA,EAAAyC,IAAAzC,EACAuC,EAAA,KAAAA,CAEA,OADAI,GAAAxC,KAAAoC,GACAD,EASA,QAAAa,GAAArE,GACA,MAAA,YAAAA,EAAA,IAAAA,EAAAsE,QAAA,WAAA,KAAA,IAAA,IAAArD,EAAAsD,KAAA,KAAA,QAAAV,EAAAU,KAAA,MAAA,MAYA,QAAAC,GAAAxE,EAAAyE,GACA,gBAAAzE,KACAyE,EAAAzE,EACAA,EAAAL,EAEA,IAAA+E,GAAAlB,EAAAa,IAAArE,EACAuD,GAAAoB,SACAC,QAAAC,IAAA,oBAAAH,EAAAJ,QAAA,MAAA,MAAAA,QAAA,MAAA,MACA,IAAAQ,GAAAC,OAAAD,KAAAL,IAAAA,MACA,OAAAO,UAAApD,MAAA,KAAAkD,EAAAG,OAAA,UAAAP,IAAA9C,MAAA,KAAAkD,EAAAI,IAAA,SAAAC,GAAA,MAAAV,GAAAU,MA7EA,IAAA,GAJAlE,MACA4C,KACAD,EAAA,EACAM,GAAA,EACAhD,EAAA,EAAAA,EAAAC,UAAAC,QACAH,EAAAI,KAAAF,UAAAD,KAwFA,OA9BAsC,GAAAa,IAAAA,EA4BAb,EAAAgB,IAAAA,EAEAhB,EAGA,QAAAE,GAAA0B,GAGA,IAFA,GAAAzD,MACAT,EAAA,EACAA,EAAAC,UAAAC,QACAO,EAAAN,KAAAF,UAAAD,KAcA,IAbAA,EAAA,EACAkE,EAAAA,EAAAd,QAAA,aAAA,SAAAe,EAAAC,GACA,OAAAA,GACA,IAAA,IACA,MAAAnD,MAAAoD,MAAA5D,EAAAT,KACA,KAAA,IACA,OAAAS,EAAAT,IACA,KAAA,IACA,MAAAsE,MAAAC,UAAA9D,EAAAT,KACA,SACA,MAAAS,GAAAT,QAGAA,IAAAS,EAAAP,OACA,KAAAiC,OAAA,0BACA,OAAA+B,GAxIAzE,EAAAR,QAAAoD,CAEA,IAAAQ,GAAA,QACAK,EAAA,SACAH,EAAA,KACAD,EAAA,kDACAG,EAAA,+CAqIAZ,GAAAG,QAAAA,EACAH,EAAAmC,WAAA,CAAA,KAAAnC,EAAAmC,UAAA,IAAAnC,EAAA,IAAA,KAAA,cAAAiB,MAAA,EAAA,GAAA,MAAAmB,IACApC,EAAAoB,SAAA,wBCrIA,QAAAiB,KAOA/D,KAAAgE,KAfAlF,EAAAR,QAAAyF,EAyBAA,EAAAE,UAAAC,GAAA,SAAAC,EAAAjF,EAAAC,GAKA,OAJAa,KAAAgE,EAAAG,KAAAnE,KAAAgE,EAAAG,QAAA3E,MACAN,GAAAA,EACAC,IAAAA,GAAAa,OAEAA,MASA+D,EAAAE,UAAAG,IAAA,SAAAD,EAAAjF,GACA,GAAAiF,IAAArG,EACAkC,KAAAgE,SAEA,IAAA9E,IAAApB,EACAkC,KAAAgE,EAAAG,UAGA,KAAA,GADAE,GAAArE,KAAAgE,EAAAG,GACA9E,EAAA,EAAAA,EAAAgF,EAAA9E,QACA8E,EAAAhF,GAAAH,KAAAA,EACAmF,EAAAC,OAAAjF,EAAA,KAEAA,CAGA,OAAAW,OASA+D,EAAAE,UAAAM,KAAA,SAAAJ,GACA,GAAAE,GAAArE,KAAAgE,EAAAG,EACA,IAAAE,EAAA,CAGA,IAFA,GAAAvE,MACAT,EAAA,EACAA,EAAAC,UAAAC,QACAO,EAAAN,KAAAF,UAAAD,KACA,KAAAA,EAAA,EAAAA,EAAAgF,EAAA9E,QACA8E,EAAAhF,GAAAH,GAAAa,MAAAsE,EAAAhF,KAAAF,IAAAW,GAEA,MAAAE,6BCzCA,QAAAwE,GAAAC,EAAAC,EAAAC,GAOA,MANA,kBAAAD,IACAC,EAAAD,EACAA,MACAA,IACAA,MAEAC,GAIAD,EAAAE,KAAAC,GAAAA,EAAAC,SACAD,EAAAC,SAAAL,EAAA,SAAA5E,EAAAkF,GACA,MAAAlF,IAAA,mBAAAmF,gBACAR,EAAAI,IAAAH,EAAAC,EAAAC,GACA9E,EACA8E,EAAA9E,GACA8E,EAAA,KAAAD,EAAAO,OAAAF,EAAAA,EAAAG,SAAA,WAIAV,EAAAI,IAAAH,EAAAC,EAAAC,GAbA1F,EAAAuF,EAAAxE,KAAAyE,EAAAC,GAxCA5F,EAAAR,QAAAkG,CAEA,IAAAvF,GAAAD,EAAA,GACAmG,EAAAnG,EAAA,GAEA6F,EAAAM,EAAA,KAwEAX,GAAAI,IAAA,SAAAH,EAAAC,EAAAC,GACA,GAAAC,GAAA,GAAAI,eACAJ,GAAAQ,mBAAA,WAEA,GAAA,IAAAR,EAAAS,WACA,MAAAvH,EAKA,IAAA,IAAA8G,EAAAU,QAAA,MAAAV,EAAAU,OACA,MAAAX,GAAAnD,MAAA,UAAAoD,EAAAU,QAIA,IAAAZ,EAAAO,OAAA,CACA,GAAArE,GAAAgE,EAAAW,QACA,KAAA3E,EAAA,CACAA,IACA,KAAA,GAAAvB,GAAA,EAAAA,EAAAuF,EAAAY,aAAAjG,SAAAF,EACAuB,EAAApB,KAAA,IAAAoF,EAAAY,aAAAjE,WAAAlC,IAEA,MAAAsF,GAAA,KAAA,mBAAAc,YAAA,GAAAA,YAAA7E,GAAAA,GAEA,MAAA+D,GAAA,KAAAC,EAAAY,eAGAd,EAAAO,SAEA,oBAAAL,IACAA,EAAAc,iBAAA,sCACAd,EAAAe,aAAA,eAGAf,EAAAgB,KAAA,MAAAnB,GACAG,EAAAiB,qCC1BA,QAAAC,GAAAxH,GAwNA,MArNA,mBAAAyH,cAAA,WAMA,QAAAC,GAAAC,EAAAC,EAAAC,GACAC,EAAA,GAAAH,EACAC,EAAAC,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GAGA,QAAAC,GAAAL,EAAAC,EAAAC,GACAC,EAAA,GAAAH,EACAC,EAAAC,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GAQA,QAAAE,GAAAL,EAAAC,GAKA,MAJAE,GAAA,GAAAH,EAAAC,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAC,EAAA,GAGA,QAAAI,GAAAN,EAAAC,GAKA,MAJAE,GAAA,GAAAH,EAAAC,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAC,EAAA,GAtCA,GAAAA,GAAA,GAAAL,gBAAA,IACAM,EAAA,GAAAZ,YAAAW,EAAAxF,QACA6F,EAAA,MAAAJ,EAAA,EAmBA/H,GAAAoI,aAAAD,EAAAT,EAAAM,EAEAhI,EAAAqI,aAAAF,EAAAH,EAAAN,EAmBA1H,EAAAsI,YAAAH,EAAAF,EAAAC,EAEAlI,EAAAuI,YAAAJ,EAAAD,EAAAD,KAGA,WAEA,QAAAO,GAAAC,EAAAd,EAAAC,EAAAC,GACA,GAAAa,GAAAf,EAAA,EAAA,EAAA,CAGA,IAFAe,IACAf,GAAAA,GACA,IAAAA,EACAc,EAAA,EAAAd,EAAA,EAAA,EAAA,WAAAC,EAAAC,OACA,IAAAc,MAAAhB,GACAc,EAAA,WAAAb,EAAAC,OACA,IAAAF,EAAA,sBACAc,GAAAC,GAAA,GAAA,cAAA,EAAAd,EAAAC,OACA,IAAAF,EAAA,uBACAc,GAAAC,GAAA,GAAA1G,KAAA4G,MAAAjB,EAAA,0BAAA,EAAAC,EAAAC,OACA,CACA,GAAAgB,GAAA7G,KAAAoD,MAAApD,KAAA0C,IAAAiD,GAAA3F,KAAA8G,KACAC,EAAA,QAAA/G,KAAA4G,MAAAjB,EAAA3F,KAAAgH,IAAA,GAAAH,GAAA,QACAJ,IAAAC,GAAA,GAAAG,EAAA,KAAA,GAAAE,KAAA,EAAAnB,EAAAC,IAOA,QAAAoB,GAAAC,EAAAtB,EAAAC,GACA,GAAAsB,GAAAD,EAAAtB,EAAAC,GACAa,EAAA,GAAAS,GAAA,IAAA,EACAN,EAAAM,IAAA,GAAA,IACAJ,EAAA,QAAAI,CACA,OAAA,OAAAN,EACAE,EACAK,IACAV,GAAAW,EAAAA,GACA,IAAAR,EACA,sBAAAH,EAAAK,EACAL,EAAA1G,KAAAgH,IAAA,EAAAH,EAAA,MAAAE,EAAA,SAdA/I,EAAAoI,aAAAI,EAAAc,KAAA,KAAAC,GACAvJ,EAAAqI,aAAAG,EAAAc,KAAA,KAAAE,GAgBAxJ,EAAAsI,YAAAW,EAAAK,KAAA,KAAAG,GACAzJ,EAAAuI,YAAAU,EAAAK,KAAA,KAAAI,MAKA,mBAAAC,cAAA,WAMA,QAAAC,GAAAjC,EAAAC,EAAAC,GACAgC,EAAA,GAAAlC,EACAC,EAAAC,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GAGA,QAAA+B,GAAAnC,EAAAC,EAAAC,GACAgC,EAAA,GAAAlC,EACAC,EAAAC,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GACAH,EAAAC,EAAA,GAAAE,EAAA,GAQA,QAAAgC,GAAAnC,EAAAC,GASA,MARAE,GAAA,GAAAH,EAAAC,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAgC,EAAA,GAGA,QAAAG,GAAApC,EAAAC,GASA,MARAE,GAAA,GAAAH,EAAAC,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAE,EAAA,GAAAH,EAAAC,EAAA,GACAgC,EAAA,GAtDA,GAAAA,GAAA,GAAAF,gBAAA,IACA5B,EAAA,GAAAZ,YAAA0C,EAAAvH,QACA6F,EAAA,MAAAJ,EAAA,EA2BA/H,GAAAiK,cAAA9B,EAAAyB,EAAAE,EAEA9J,EAAAkK,cAAA/B,EAAA2B,EAAAF,EA2BA5J,EAAAmK,aAAAhC,EAAA4B,EAAAC,EAEAhK,EAAAoK,aAAAjC,EAAA6B,EAAAD,KAGA,WAEA,QAAAM,GAAA5B,EAAA6B,EAAAC,EAAA5C,EAAAC,EAAAC,GACA,GAAAa,GAAAf,EAAA,EAAA,EAAA,CAGA,IAFAe,IACAf,GAAAA,GACA,IAAAA,EACAc,EAAA,EAAAb,EAAAC,EAAAyC,GACA7B,EAAA,EAAAd,EAAA,EAAA,EAAA,WAAAC,EAAAC,EAAA0C,OACA,IAAA5B,MAAAhB,GACAc,EAAA,EAAAb,EAAAC,EAAAyC,GACA7B,EAAA,WAAAb,EAAAC,EAAA0C,OACA,IAAA5C,EAAA,uBACAc,EAAA,EAAAb,EAAAC,EAAAyC,GACA7B,GAAAC,GAAA,GAAA,cAAA,EAAAd,EAAAC,EAAA0C,OACA,CACA,GAAAxB,EACA,IAAApB,EAAA,wBACAoB,EAAApB,EAAA,OACAc,EAAAM,IAAA,EAAAnB,EAAAC,EAAAyC,GACA7B,GAAAC,GAAA,GAAAK,EAAA,cAAA,EAAAnB,EAAAC,EAAA0C,OACA,CACA,GAAA1B,GAAA7G,KAAAoD,MAAApD,KAAA0C,IAAAiD,GAAA3F,KAAA8G,IACA,QAAAD,IACAA,EAAA,MACAE,EAAApB,EAAA3F,KAAAgH,IAAA,GAAAH,GACAJ,EAAA,iBAAAM,IAAA,EAAAnB,EAAAC,EAAAyC,GACA7B,GAAAC,GAAA,GAAAG,EAAA,MAAA,GAAA,QAAAE,EAAA,WAAA,EAAAnB,EAAAC,EAAA0C,KAQA,QAAAC,GAAAtB,EAAAoB,EAAAC,EAAA3C,EAAAC,GACA,GAAA4C,GAAAvB,EAAAtB,EAAAC,EAAAyC,GACAI,EAAAxB,EAAAtB,EAAAC,EAAA0C,GACA7B,EAAA,GAAAgC,GAAA,IAAA,EACA7B,EAAA6B,IAAA,GAAA,KACA3B,EAAA,YAAA,QAAA2B,GAAAD,CACA,OAAA,QAAA5B,EACAE,EACAK,IACAV,GAAAW,EAAAA,GACA,IAAAR,EACA,OAAAH,EAAAK,EACAL,EAAA1G,KAAAgH,IAAA,EAAAH,EAAA,OAAAE,EAAA,kBAfA/I,EAAAiK,cAAAI,EAAAf,KAAA,KAAAC,EAAA,EAAA,GACAvJ,EAAAkK,cAAAG,EAAAf,KAAA,KAAAE,EAAA,EAAA,GAiBAxJ,EAAAmK,aAAAK,EAAAlB,KAAA,KAAAG,EAAA,EAAA,GACAzJ,EAAAoK,aAAAI,EAAAlB,KAAA,KAAAI,EAAA,EAAA,MAIA1J,EAKA,QAAAuJ,GAAA5B,EAAAC,EAAAC,GACAD,EAAAC,GAAA,IAAAF,EACAC,EAAAC,EAAA,GAAAF,IAAA,EAAA,IACAC,EAAAC,EAAA,GAAAF,IAAA,GAAA,IACAC,EAAAC,EAAA,GAAAF,IAAA,GAGA,QAAA6B,GAAA7B,EAAAC,EAAAC,GACAD,EAAAC,GAAAF,IAAA,GACAC,EAAAC,EAAA,GAAAF,IAAA,GAAA,IACAC,EAAAC,EAAA,GAAAF,IAAA,EAAA,IACAC,EAAAC,EAAA,GAAA,IAAAF,EAGA,QAAA8B,GAAA7B,EAAAC,GACA,OAAAD,EAAAC,GACAD,EAAAC,EAAA,IAAA,EACAD,EAAAC,EAAA,IAAA,GACAD,EAAAC,EAAA,IAAA,MAAA,EAGA,QAAA6B,GAAA9B,EAAAC,GACA,OAAAD,EAAAC,IAAA,GACAD,EAAAC,EAAA,IAAA,GACAD,EAAAC,EAAA,IAAA,EACAD,EAAAC,EAAA,MAAA,EA3UArH,EAAAR,QAAAwH,EAAAA,2BCOA,QAAAX,GAAA8D,GACA,IACA,GAAAC,GAAAC,KAAA,QAAA1G,QAAA,IAAA,OAAAwG,EACA,IAAAC,IAAAA,EAAA3J,QAAA2D,OAAAD,KAAAiG,GAAA3J,QACA,MAAA2J,GACA,MAAApF,IACA,MAAA,MAdAhF,EAAAR,QAAA6G,0BCMA,GAAAiE,GAAA9K,EAEA+K,EAMAD,EAAAC,WAAA,SAAAD,GACA,MAAA,eAAA3H,KAAA2H,IAGAE,EAMAF,EAAAE,UAAA,SAAAF,GACAA,EAAAA,EAAA3G,QAAA,MAAA,KACAA,QAAA,UAAA,IACA,IAAA8G,GAAAH,EAAAI,MAAA,KACAC,EAAAJ,EAAAD,GACAM,EAAA,EACAD,KACAC,EAAAH,EAAAI,QAAA,IACA,KAAA,GAAAtK,GAAA,EAAAA,EAAAkK,EAAAhK,QACA,OAAAgK,EAAAlK,GACAA,EAAA,GAAA,OAAAkK,EAAAlK,EAAA,GACAkK,EAAAjF,SAAAjF,EAAA,GACAoK,EACAF,EAAAjF,OAAAjF,EAAA,KAEAA,EACA,MAAAkK,EAAAlK,GACAkK,EAAAjF,OAAAjF,EAAA,KAEAA,CAEA,OAAAqK,GAAAH,EAAA7G,KAAA,KAUA0G,GAAAzJ,QAAA,SAAAiK,EAAAC,EAAAC,GAGA,MAFAA,KACAD,EAAAP,EAAAO,IACAR,EAAAQ,GACAA,GACAC,IACAF,EAAAN,EAAAM,KACAA,EAAAA,EAAAnH,QAAA,kBAAA,KAAAlD,OAAA+J,EAAAM,EAAA,IAAAC,GAAAA,0BCjCA,QAAAE,GAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAD,GAAA,KACAE,EAAAD,IAAA,EACAE,EAAA,KACAhJ,EAAA8I,CACA,OAAA,UAAAD,GACA,GAAAA,EAAA,GAAAA,EAAAE,EACA,MAAAJ,GAAAE,EACA7I,GAAA6I,EAAAC,IACAE,EAAAL,EAAAG,GACA9I,EAAA,EAEA,IAAA6E,GAAA+D,EAAA5L,KAAAgM,EAAAhJ,EAAAA,GAAA6I,EAGA,OAFA,GAAA7I,IACAA,EAAA,GAAA,EAAAA,IACA6E,GA5CApH,EAAAR,QAAAyL,2BCMA,GAAAO,GAAAhM,CAOAgM,GAAA/K,OAAA,SAAAW,GAGA,IAAA,GAFAqK,GAAA,EACAjJ,EAAA,EACAjC,EAAA,EAAAA,EAAAa,EAAAX,SAAAF,EACAiC,EAAApB,EAAAqB,WAAAlC,GACAiC,EAAA,IACAiJ,GAAA,EACAjJ,EAAA,KACAiJ,GAAA,EACA,QAAA,MAAAjJ,IAAA,QAAA,MAAApB,EAAAqB,WAAAlC,EAAA,OACAA,EACAkL,GAAA,GAEAA,GAAA,CAEA,OAAAA,IAUAD,EAAAE,KAAA,SAAA5J,EAAAC,EAAAC,GAEA,GADAA,EAAAD,EACA,EACA,MAAA,EAKA,KAJA,GAGAE,GAHAwI,EAAA,KACAkB,KACApL,EAAA,EAEAwB,EAAAC,GACAC,EAAAH,EAAAC,KACAE,EAAA,IACA0J,EAAApL,KAAA0B,EACAA,EAAA,KAAAA,EAAA,IACA0J,EAAApL,MAAA,GAAA0B,IAAA,EAAA,GAAAH,EAAAC,KACAE,EAAA,KAAAA,EAAA,KACAA,IAAA,EAAAA,IAAA,IAAA,GAAAH,EAAAC,OAAA,IAAA,GAAAD,EAAAC,OAAA,EAAA,GAAAD,EAAAC,MAAA,MACA4J,EAAApL,KAAA,OAAA0B,GAAA,IACA0J,EAAApL,KAAA,OAAA,KAAA0B,IAEA0J,EAAApL,MAAA,GAAA0B,IAAA,IAAA,GAAAH,EAAAC,OAAA,EAAA,GAAAD,EAAAC,KACAxB,EAAA,QACAkK,IAAAA,OAAA/J,KAAA0B,OAAAC,aAAApB,MAAAmB,OAAAuJ,IACApL,EAAA,EAGA,OAAAkK,IACAlK,GACAkK,EAAA/J,KAAA0B,OAAAC,aAAApB,MAAAmB,OAAAuJ,EAAAR,MAAA,EAAA5K,KACAkK,EAAA7G,KAAA,KAEAxB,OAAAC,aAAApB,MAAAmB,OAAAuJ,EAAAR,MAAA,EAAA5K,KAUAiL,EAAAI,MAAA,SAAAxK,EAAAU,EAAAS,GAIA,IAAA,GAFAsJ,GACAC,EAFA/J,EAAAQ,EAGAhC,EAAA,EAAAA,EAAAa,EAAAX,SAAAF,EACAsL,EAAAzK,EAAAqB,WAAAlC,GACAsL,EAAA,IACA/J,EAAAS,KAAAsJ,EACAA,EAAA,MACA/J,EAAAS,KAAAsJ,GAAA,EAAA,IACA/J,EAAAS,KAAA,GAAAsJ,EAAA,KACA,QAAA,MAAAA,IAAA,QAAA,OAAAC,EAAA1K,EAAAqB,WAAAlC,EAAA,MACAsL,EAAA,QAAA,KAAAA,IAAA,KAAA,KAAAC,KACAvL,EACAuB,EAAAS,KAAAsJ,GAAA,GAAA,IACA/J,EAAAS,KAAAsJ,GAAA,GAAA,GAAA,IACA/J,EAAAS,KAAAsJ,GAAA,EAAA,GAAA,IACA/J,EAAAS,KAAA,GAAAsJ,EAAA,MAEA/J,EAAAS,KAAAsJ,GAAA,GAAA,IACA/J,EAAAS,KAAAsJ,GAAA,EAAA,GAAA,IACA/J,EAAAS,KAAA,GAAAsJ,EAAA,IAGA,OAAAtJ,GAAAR,0BCjFA,QAAAgK,GAAA1M,EAAA2M,GACAC,EAAAtJ,KAAAtD,KACAA,EAAA,mBAAAA,EAAA,SACA2M,GAAAE,QAAAC,QAAAD,QAAAzM,UAAAyM,OAAAF,QAEAD,EAAA1M,GAAA2M,EA1BAhM,EAAAR,QAAAuM,CA6BA,IAAAE,GAAA,OAYAF,GAAA,OAUAK,KACAC,QACAC,UACAC,KAAA,SACAC,GAAA,GAEAC,OACAF,KAAA,QACAC,GAAA,MAMA,IAAAE,EAEAX,GAAA,YAUAY,SAAAD,GACAL,QACAO,SACAL,KAAA,QACAC,GAAA,GAEAK,OACAN,KAAA,QACAC,GAAA,OAMAT,EAAA,aAUAe,UAAAJ,IAGAX,EAAA,SAOAgB,OACAV,aAIAN,EAAA,UASAiB,QACAX,QACAA,QACAY,QAAA,SACAV,KAAA,QACAC,GAAA,KAkBAU,OACAC,QACAC,MACAC,OACA,YACA,cACA,cACA,YACA,cACA,eAIAhB,QACAiB,WACAf,KAAA,YACAC,GAAA,GAEAe,aACAhB,KAAA,SACAC,GAAA,GAEAgB,aACAjB,KAAA,SACAC,GAAA,GAEAiB,WACAlB,KAAA,OACAC,GAAA,GAEAkB,aACAnB,KAAA,SACAC,GAAA,GAEAmB,WACApB,KAAA,YACAC,GAAA,KAKAoB,WACAC,QACAC,WAAA,IAWAC,WACA1B,QACAwB,QACAG,KAAA,WACAzB,KAAA,QACAC,GAAA,OAMAT,EAAA,YASAkC,aACA5B,QACAI,OACAF,KAAA,SACAC,GAAA,KAYA0B,YACA7B,QACAI,OACAF,KAAA,QACAC,GAAA,KAYA2B,YACA9B,QACAI,OACAF,KAAA,QACAC,GAAA,KAYA4B,aACA/B,QACAI,OACAF,KAAA,SACAC,GAAA,KAYA6B,YACAhC,QACAI,OACAF,KAAA,QACAC,GAAA,KAYA8B,aACAjC,QACAI,OACAF,KAAA,SACAC,GAAA,KAYA+B,WACAlC,QACAI,OACAF,KAAA,OACAC,GAAA,KAYAgC,aACAnC,QACAI,OACAF,KAAA,SACAC,GAAA,KAYAiC,YACApC,QACAI,OACAF,KAAA,QACAC,GAAA,gCChVA,QAAAkC,GAAA7L,EAAA8L,EAAAC,EAAAC,GAEA,GAAAF,EAAAG,aACA,GAAAH,EAAAG,uBAAAC,GAAA,CAAAlM,EACA,eAAAgM,EACA,KAAA,GAAAhB,GAAAc,EAAAG,aAAAjB,OAAA1J,EAAAC,OAAAD,KAAA0J,GAAAtN,EAAA,EAAAA,EAAA4D,EAAA1D,SAAAF,EACAoO,EAAAK,UAAAnB,EAAA1J,EAAA5D,MAAAoO,EAAAM,aAAApM,EACA,YACAA,EACA,UAAAsB,EAAA5D,IACA,WAAAsN,EAAA1J,EAAA5D,KACA,SAAAsO,EAAAhB,EAAA1J,EAAA5D,KACA,QACAsC,GACA,SACAA,GACA,4BAAAgM,GACA,sBAAAF,EAAAO,SAAA,qBACA,gCAAAL,EAAAD,EAAAC,OACA,CACA,GAAAM,IAAA,CACA,QAAAR,EAAApC,MACA,IAAA,SACA,IAAA,QAAA1J,EACA,kBAAAgM,EAAAA,EACA,MACA,KAAA,SACA,IAAA,UAAAhM,EACA,cAAAgM,EAAAA,EACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,WAAAhM,EACA,YAAAgM,EAAAA,EACA,MACA,KAAA,SACAM,GAAA,CAEA,KAAA,QACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAtM,EACA,iBACA,6CAAAgM,EAAAA,EAAAM,GACA,iCAAAN,GACA,uBAAAA,EAAAA,GACA,iCAAAA,GACA,UAAAA,EAAAA,GACA,iCAAAA,GACA,+DAAAA,EAAAA,EAAAA,EAAAM,EAAA,OAAA,GACA,MACA,KAAA,QAAAtM,EACA,4BAAAgM,GACA,wEAAAA,EAAAA,EAAAA,GACA,sBAAAA,GACA,UAAAA,EAAAA,EACA,MACA,KAAA,SAAAhM,EACA,kBAAAgM,EAAAA,EACA,MACA,KAAA,OAAAhM,EACA,mBAAAgM,EAAAA,IAOA,MAAAhM,GAmEA,QAAAuM,GAAAvM,EAAA8L,EAAAC,EAAAC,GAEA,GAAAF,EAAAG,aACAH,EAAAG,uBAAAC,GAAAlM,EACA,iDAAAgM,EAAAD,EAAAC,EAAAA,GACAhM,EACA,gCAAAgM,EAAAD,EAAAC,OACA,CACA,GAAAM,IAAA,CACA,QAAAR,EAAApC,MACA,IAAA,SACA,IAAA,QAAA1J,EACA,6CAAAgM,EAAAA,EAAAA,EAAAA,EACA,MACA,KAAA,SACAM,GAAA,CAEA,KAAA,QACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAtM,EACA,4BAAAgM,GACA,uCAAAA,EAAAA,EAAAA,GACA,QACA,4IAAAA,EAAAA,EAAAA,EAAAA,EAAAM,EAAA,OAAA,GAAAN,EACA,MACA,KAAA,QAAAhM,EACA,gHAAAgM,EAAAA,EAAAA,EAAAA,EAAAA,EACA,MACA,SAAAhM,EACA,UAAAgM,EAAAA,IAIA,MAAAhM,GAvLA,GAAAwM,GAAA7P,EAEAuP,EAAA7O,EAAA,IACAJ,EAAAI,EAAA,GAwFAmP,GAAAC,WAAA,SAAAC,GAEA,GAAAlD,GAAAkD,EAAAC,YACA3M,EAAA/C,EAAA8C,QAAA,KACA,8BACA,WACA,KAAAyJ,EAAA5L,OAAA,MAAAoC,GACA,uBACAA,GACA,sBACA,KAAA,GAAAtC,GAAA,EAAAA,EAAA8L,EAAA5L,SAAAF,EAAA,CACA,GAAAoO,GAAAtC,EAAA9L,GAAAM,UACAgO,EAAA/O,EAAA2P,SAAAd,EAAAtP,KAGAsP,GAAApK,KAAA1B,EACA,WAAAgM,GACA,4BAAAA,GACA,sBAAAF,EAAAO,SAAA,qBACA,SAAAL,GACA,oDAAAA,GACAH,EAAA7L,EAAA8L,EAAApO,EAAAsO,EAAA,WACA,KACA,MAGAF,EAAAK,UAAAnM,EACA,WAAAgM,GACA,0BAAAA,GACA,sBAAAF,EAAAO,SAAA,oBACA,SAAAL,GACA,iCAAAA,GACAH,EAAA7L,EAAA8L,EAAApO,EAAAsO,EAAA,OACA,KACA,OAIAF,EAAAG,uBAAAC,IAAAlM,EACA,iBAAAgM,GACAH,EAAA7L,EAAA8L,EAAApO,EAAAsO,GACAF,EAAAG,uBAAAC,IAAAlM,EACA,MAEA,MAAAA,GACA,aAwDAwM,EAAAK,SAAA,SAAAH,GAEA,GAAAlD,GAAAkD,EAAAC,YAAArE,QAAAwE,KAAA7P,EAAA8P,kBACA,KAAAvD,EAAA5L,OACA,MAAAX,GAAA8C,UAAA,YAUA,KATA,GAAAC,GAAA/C,EAAA8C,QAAA,IAAA,KACA,UACA,QACA,YAEAiN,KACAC,KACAC,KACAxP,EAAA,EACAA,EAAA8L,EAAA5L,SAAAF,EACA8L,EAAA9L,GAAAyP,SACA3D,EAAA9L,GAAAM,UAAAmO,SAAAa,EACAxD,EAAA9L,GAAAgE,IAAAuL,EACAC,GAAArP,KAAA2L,EAAA9L,GAqBA,IAAAoO,GACAE,EAgBAoB,GAAA,CACA,KAAA1P,EAAA,EAAAA,EAAA8L,EAAA5L,SAAAF,EAAA,CACA,GAAAoO,GAAAtC,EAAA9L,GACA2P,EAAAX,EAAAY,EAAAC,QAAAzB,GACAE,EAAA/O,EAAA2P,SAAAd,EAAAtP,KACAsP,GAAApK,KACA0L,IAAAA,GAAA,EAAApN,EACA,YACAA,EACA,0CAAAgM,EAAAA,GACA,SAAAA,GACA,kCACAO,EAAAvM,EAAA8L,EAAAuB,EAAArB,EAAA,YACA,MACAF,EAAAK,UAAAnM,EACA,uBAAAgM,EAAAA,GACA,SAAAA,GACA,iCAAAA,GACAO,EAAAvM,EAAA8L,EAAAuB,EAAArB,EAAA,OACA,OACAhM,EACA,uCAAAgM,EAAAF,EAAAtP,MACA+P,EAAAvM,EAAA8L,EAAAuB,EAAArB,GACAF,EAAAqB,QAAAnN,EACA,gBACA,SAAA/C,EAAA2P,SAAAd,EAAAqB,OAAA3Q,MAAAsP,EAAAtP,OAEAwD,EACA,KAEA,MAAAA,GACA,+CCrRA,QAAAwN,GAAA1B,GACA,MAAA,qBAAAA,EAAAtP,KAAA,IAQA,QAAAiR,GAAAf,GAEA,GAAA1M,GAAA/C,EAAA8C,QAAA,IAAA,KACA,8BACA,sBACA,qDAAA2M,EAAAC,YAAAe,OAAA,SAAA5B,GAAA,MAAAA,GAAApK,MAAA9D,OAAA,KAAA,KACA,mBACA,mBACA8O,GAAAiB,OAAA3N,EACA,iBACA,SACAA,EACA,iBAGA,KADA,GAAAtC,GAAA,EACAA,EAAAgP,EAAAC,YAAA/O,SAAAF,EAAA,CACA,GAAAoO,GAAAY,EAAAY,EAAA5P,GAAAM,UACA0L,EAAAoC,EAAAG,uBAAAC,GAAA,QAAAJ,EAAApC,KACAkE,EAAA,IAAA3Q,EAAA2P,SAAAd,EAAAtP,KAAAwD,GACA,WAAA8L,EAAAnC,IAGAmC,EAAApK,KAAA1B,EACA,kBACA,4BAAA4N,GACA,QAAAA,GACA,WAAA9B,EAAA1B,SACA,WACAyD,EAAAC,KAAAhC,EAAA1B,WAAAjO,EACA0R,EAAAE,MAAArE,KAAAvN,EAAA6D,EACA,8EAAA4N,EAAAlQ,GACAsC,EACA,sDAAA4N,EAAAlE,GAEAmE,EAAAE,MAAArE,KAAAvN,EAAA6D,EACA,uCAAA4N,EAAAlQ,GACAsC,EACA,eAAA4N,EAAAlE,IAIAoC,EAAAK,UAAAnM,EAEA,uBAAA4N,EAAAA,GACA,QAAAA,GAGAC,EAAAG,OAAAtE,KAAAvN,GAAA6D,EACA,kBACA,2BACA,mBACA,kBAAA4N,EAAAlE,GACA,SAGAmE,EAAAE,MAAArE,KAAAvN,EAAA6D,EAAA8L,EAAAG,aAAA0B,MACA,+BACA,0CAAAC,EAAAlQ,GACAsC,EACA,kBAAA4N,EAAAlE,IAGAmE,EAAAE,MAAArE,KAAAvN,EAAA6D,EAAA8L,EAAAG,aAAA0B,MACA,yBACA,oCAAAC,EAAAlQ,GACAsC,EACA,YAAA4N,EAAAlE,GACA1J,EACA,SAWA,IATAA,EACA,YACA,mBACA,SAEA,KACA,KAGAtC,EAAA,EAAAA,EAAAgP,EAAAY,EAAA1P,SAAAF,EAAA,CACA,GAAAuQ,GAAAvB,EAAAY,EAAA5P,EACAuQ,GAAAC,UAAAlO,EACA,4BAAAiO,EAAAzR,MACA,4CAAAgR,EAAAS,IAGA,MAAAjO,GACA,YAtGA7C,EAAAR,QAAA8Q,CAEA,IAAAvB,GAAA7O,EAAA,IACAwQ,EAAAxQ,EAAA,IACAJ,EAAAI,EAAA,4CCWA,QAAA8Q,GAAAnO,EAAA8L,EAAAC,EAAA6B,GACA,MAAA9B,GAAAG,aAAA0B,MACA3N,EAAA,+CAAA+L,EAAA6B,GAAA9B,EAAAnC,IAAA,EAAA,KAAA,GAAAmC,EAAAnC,IAAA,EAAA,KAAA,GACA3J,EAAA,oDAAA+L,EAAA6B,GAAA9B,EAAAnC,IAAA,EAAA,KAAA,GAQA,QAAAyE,GAAA1B,GAWA,IAAA,GALAhP,GAAAkQ,EAJA5N,EAAA/C,EAAA8C,QAAA,IAAA,KACA,UACA,qBAKAyJ,EAAAkD,EAAAC,YAAArE,QAAAwE,KAAA7P,EAAA8P,mBAEArP,EAAA,EAAAA,EAAA8L,EAAA5L,SAAAF,EAAA,CACA,GAAAoO,GAAAtC,EAAA9L,GAAAM,UACAqP,EAAAX,EAAAY,EAAAC,QAAAzB,GACApC,EAAAoC,EAAAG,uBAAAC,GAAA,QAAAJ,EAAApC,KACA2E,EAAAR,EAAAE,MAAArE,EACAkE,GAAA,IAAA3Q,EAAA2P,SAAAd,EAAAtP,MAGAsP,EAAApK,KACA1B,EACA,sCAAA4N,EAAA9B,EAAAtP,MACA,mDAAAoR,GACA,4CAAA9B,EAAAnC,IAAA,EAAA,KAAA,EAAA,EAAAkE,EAAAS,OAAAxC,EAAA1B,SAAA0B,EAAA1B,SACAiE,IAAAlS,EAAA6D,EACA,oEAAAqN,EAAAO,GACA5N,EACA,qCAAA,GAAAqO,EAAA3E,EAAAkE,GACA5N,EACA,KACA,MAGA8L,EAAAK,UAAAnM,EACA,2BAAA4N,EAAAA,GAGA9B,EAAAkC,QAAAH,EAAAG,OAAAtE,KAAAvN,EAAA6D,EAEA,uBAAA8L,EAAAnC,IAAA,EAAA,KAAA,GACA,+BAAAiE,GACA,cAAAlE,EAAAkE,GACA,eAGA5N,EAEA,+BAAA4N,GACAS,IAAAlS,EACAgS,EAAAnO,EAAA8L,EAAAuB,EAAAO,EAAA,OACA5N,EACA,0BAAA8L,EAAAnC,IAAA,EAAA0E,KAAA,EAAA3E,EAAAkE,IAEA5N,EACA,OAIA8L,EAAAyC,UAAAvO,EACA,qCAAA4N,EAAA9B,EAAAtP,MAEA6R,IAAAlS,EACAgS,EAAAnO,EAAA8L,EAAAuB,EAAAO,GACA5N,EACA,uBAAA8L,EAAAnC,IAAA,EAAA0E,KAAA,EAAA3E,EAAAkE,IAKA,MAAA5N,GACA,YAhGA7C,EAAAR,QAAAyR,CAEA,IAAAlC,GAAA7O,EAAA,IACAwQ,EAAAxQ,EAAA,IACAJ,EAAAI,EAAA,4CCaA,QAAA6O,GAAA1P,EAAAwO,EAAAjI,GAGA,GAFAyL,EAAA9R,KAAA2B,KAAA7B,EAAAuG,GAEAiI,GAAA,gBAAAA,GACA,KAAAyD,WAAA,2BAwBA,IAlBApQ,KAAAqQ,cAMArQ,KAAA2M,OAAAzJ,OAAAoN,OAAAtQ,KAAAqQ,YAMArQ,KAAAuQ,YAMA5D,EACA,IAAA,GAAA1J,GAAAC,OAAAD,KAAA0J,GAAAtN,EAAA,EAAAA,EAAA4D,EAAA1D,SAAAF,EACA,gBAAAsN,GAAA1J,EAAA5D,MACAW,KAAAqQ,WAAArQ,KAAA2M,OAAA1J,EAAA5D,IAAAsN,EAAA1J,EAAA5D,KAAA4D,EAAA5D,IAhDAP,EAAAR,QAAAuP,CAGA,IAAAsC,GAAAnR,EAAA,MACA6O,EAAA5J,UAAAf,OAAAoN,OAAAH,EAAAlM,YAAAuM,YAAA3C,GAAA4C,UAAA,MAEA,IAAA7R,GAAAI,EAAA,GA2DA6O,GAAA6C,SAAA,SAAAvS,EAAA2M,GACA,MAAA,IAAA+C,GAAA1P,EAAA2M,EAAA6B,OAAA7B,EAAApG,UAOAmJ,EAAA5J,UAAA0M,OAAA,WACA,MAAA/R,GAAA4P,UACA,UAAAxO,KAAA0E,QACA,SAAA1E,KAAA2M,UAaAkB,EAAA5J,UAAA2M,IAAA,SAAAzS,EAAAmN,EAAAuF,GAGA,IAAAjS,EAAAkS,SAAA3S,GACA,KAAAiS,WAAA,wBAEA,KAAAxR,EAAAmS,UAAAzF,GACA,KAAA8E,WAAA,wBAEA,IAAApQ,KAAA2M,OAAAxO,KAAAL,EACA,KAAA0D,OAAA,iBAEA,IAAAxB,KAAAqQ,WAAA/E,KAAAxN,EAAA,CACA,IAAAkC,KAAA0E,UAAA1E,KAAA0E,QAAAsM,YACA,KAAAxP,OAAA,eACAxB,MAAA2M,OAAAxO,GAAAmN,MAEAtL,MAAAqQ,WAAArQ,KAAA2M,OAAAxO,GAAAmN,GAAAnN,CAGA,OADA6B,MAAAuQ,SAAApS,GAAA0S,GAAA,KACA7Q,MAUA6N,EAAA5J,UAAAgN,OAAA,SAAA9S,GAEA,IAAAS,EAAAkS,SAAA3S,GACA,KAAAiS,WAAA,wBAEA,IAAAnK,GAAAjG,KAAA2M,OAAAxO,EACA,IAAA8H,IAAAnI,EACA,KAAA0D,OAAA,sBAMA,cAJAxB,MAAAqQ,WAAApK,SACAjG,MAAA2M,OAAAxO,SACA6B,MAAAuQ,SAAApS,GAEA6B,wCChFA,QAAAkR,GAAA/S,EAAAmN,EAAAD,EAAAyB,EAAAqE,EAAAzM,GAYA,GAVA9F,EAAAwS,SAAAtE,IACApI,EAAAoI,EACAA,EAAAqE,EAAArT,GACAc,EAAAwS,SAAAD,KACAzM,EAAAyM,EACAA,EAAArT,GAGAqS,EAAA9R,KAAA2B,KAAA7B,EAAAuG,IAEA9F,EAAAmS,UAAAzF,IAAAA,EAAA,EACA,KAAA8E,WAAA,oCAEA,KAAAxR,EAAAkS,SAAAzF,GACA,KAAA+E,WAAA,wBAEA,IAAAtD,IAAAhP,IAAAuT,EAAA5P,KAAAqL,GAAAA,GAAAA,GAAAwE,eACA,KAAAlB,WAAA,6BAEA,IAAAe,IAAArT,IAAAc,EAAAkS,SAAAK,GACA,KAAAf,WAAA,0BAMApQ,MAAA8M,KAAAA,GAAA,aAAAA,EAAAA,EAAAhP,EAMAkC,KAAAqL,KAAAA,EAMArL,KAAAsL,GAAAA,EAMAtL,KAAAmR,OAAAA,GAAArT,EAMAkC,KAAA6P,SAAA,aAAA/C,EAMA9M,KAAAkQ,UAAAlQ,KAAA6P,SAMA7P,KAAA8N,SAAA,aAAAhB,EAMA9M,KAAAqD,KAAA,EAMArD,KAAAuR,QAAA,KAMAvR,KAAA8O,OAAA,KAMA9O,KAAA+N,YAAA,KAMA/N,KAAAwR,aAAA,KAMAxR,KAAAyP,OAAA7Q,EAAAF,MAAA8Q,EAAAC,KAAApE,KAAAvN,EAMAkC,KAAAyR,MAAA,UAAApG,EAMArL,KAAA4N,aAAA,KAMA5N,KAAA0R,eAAA,KAMA1R,KAAA2R,eAAA,KAOA3R,KAAA4R,EAAA,KAvLA9S,EAAAR,QAAA4S,CAGA,IAAAf,GAAAnR,EAAA,MACAkS,EAAAjN,UAAAf,OAAAoN,OAAAH,EAAAlM,YAAAuM,YAAAU,GAAAT,UAAA,OAEA,IAIAoB,GAJAhE,EAAA7O,EAAA,IACAwQ,EAAAxQ,EAAA,IACAJ,EAAAI,EAAA,IAIAqS,EAAA,8BAuBAH,GAAAR,SAAA,SAAAvS,EAAA2M,GACA,MAAA,IAAAoG,GAAA/S,EAAA2M,EAAAQ,GAAAR,EAAAO,KAAAP,EAAAgC,KAAAhC,EAAAqG,OAAArG,EAAApG,UA4JAxB,OAAA4O,eAAAZ,EAAAjN,UAAA,UACA8N,IAAA,WAIA,MAFA,QAAA/R,KAAA4R,IACA5R,KAAA4R,GAAA,IAAA5R,KAAAgS,UAAA,WACAhS,KAAA4R,KAOAV,EAAAjN,UAAAgO,UAAA,SAAA9T,EAAAoN,EAAA2G,GAGA,MAFA,WAAA/T,IACA6B,KAAA4R,EAAA,MACAzB,EAAAlM,UAAAgO,UAAA5T,KAAA2B,KAAA7B,EAAAoN,EAAA2G,IAuBAhB,EAAAjN,UAAA0M,OAAA,WACA,MAAA/R,GAAA4P,UACA,OAAA,aAAAxO,KAAA8M,MAAA9M,KAAA8M,MAAAhP,EACA,OAAAkC,KAAAqL,KACA,KAAArL,KAAAsL,GACA,SAAAtL,KAAAmR,OACA,UAAAnR,KAAA0E,WASAwM,EAAAjN,UAAAtE,QAAA,WAEA,GAAAK,KAAAmS,SACA,MAAAnS,KA0BA,KAxBAA,KAAA+N,YAAAyB,EAAA4C,SAAApS,KAAAqL,SAAAvN,IACAkC,KAAA4N,cAAA5N,KAAA2R,eAAA3R,KAAA2R,eAAAU,OAAArS,KAAAqS,QAAAC,iBAAAtS,KAAAqL,MACArL,KAAA4N,uBAAAiE,GACA7R,KAAA+N,YAAA,KAEA/N,KAAA+N,YAAA/N,KAAA4N,aAAAjB,OAAAzJ,OAAAD,KAAAjD,KAAA4N,aAAAjB,QAAA,KAIA3M,KAAA0E,SAAA,MAAA1E,KAAA0E,QAAA,UACA1E,KAAA+N,YAAA/N,KAAA0E,QAAA,QACA1E,KAAA4N,uBAAAC,IAAA,gBAAA7N,MAAA+N,cACA/N,KAAA+N,YAAA/N,KAAA4N,aAAAjB,OAAA3M,KAAA+N,eAIA/N,KAAA0E,WACA,IAAA1E,KAAA0E,QAAAiL,SAAA3P,KAAA0E,QAAAiL,SAAA7R,IAAAkC,KAAA4N,cAAA5N,KAAA4N,uBAAAC,WACA7N,MAAA0E,QAAAiL,OACAzM,OAAAD,KAAAjD,KAAA0E,SAAAnF,SACAS,KAAA0E,QAAA5G,IAIAkC,KAAAyP,KACAzP,KAAA+N,YAAAnP,EAAAF,KAAA6T,WAAAvS,KAAA+N,YAAA,MAAA/N,KAAAqL,KAAAhL,OAAA,IAGA6C,OAAAsP,QACAtP,OAAAsP,OAAAxS,KAAA+N,iBAEA,IAAA/N,KAAAyR,OAAA,gBAAAzR,MAAA+N,YAAA,CACA,GAAA7H,EACAtH,GAAAqB,OAAAwB,KAAAzB,KAAA+N,aACAnP,EAAAqB,OAAAmB,OAAApB,KAAA+N,YAAA7H,EAAAtH,EAAA6T,UAAA7T,EAAAqB,OAAAV,OAAAS,KAAA+N,cAAA,GAEAnP,EAAA0L,KAAAI,MAAA1K,KAAA+N,YAAA7H,EAAAtH,EAAA6T,UAAA7T,EAAA0L,KAAA/K,OAAAS,KAAA+N,cAAA,GACA/N,KAAA+N,YAAA7H,EAeA,MAXAlG,MAAAqD,IACArD,KAAAwR,aAAA5S,EAAA8T,YACA1S,KAAA8N,SACA9N,KAAAwR,aAAA5S,EAAA+T,WAEA3S,KAAAwR,aAAAxR,KAAA+N,YAGA/N,KAAAqS,iBAAAR,KACA7R,KAAAqS,OAAAO,KAAA3O,UAAAjE,KAAA7B,MAAA6B,KAAAwR,cAEArB,EAAAlM,UAAAtE,QAAAtB,KAAA2B,OAuBAkR,EAAA2B,EAAA,SAAAC,EAAAC,EAAAC,EAAAxB,GAUA,MAPA,kBAAAuB,GACAA,EAAAnU,EAAAqU,aAAAF,GAAA5U,KAGA4U,GAAA,gBAAAA,KACAA,EAAAnU,EAAAsU,aAAAH,GAAA5U,MAEA,SAAA8F,EAAAkP,GACAvU,EAAAqU,aAAAhP,EAAAuM,aACAI,IAAA,GAAAM,GAAAiC,EAAAL,EAAAC,EAAAC,GAAAI,QAAA5B,OAiBAN,EAAAmC,EAAA,SAAAC,GACAzB,EAAAyB,iDC9UA,QAAAC,GAAA9O,EAAA+O,EAAA7O,GAMA,MALA,kBAAA6O,IACA7O,EAAA6O,EACAA,EAAA,GAAAjV,GAAAkV,MACAD,IACAA,EAAA,GAAAjV,GAAAkV,MACAD,EAAAD,KAAA9O,EAAAE,GAqCA,QAAA+O,GAAAjP,EAAA+O,GAGA,MAFAA,KACAA,EAAA,GAAAjV,GAAAkV,MACAD,EAAAE,SAAAjP,GAnEA,GAAAlG,GAAAO,EAAAR,QAAAU,EAAA,GAEAT,GAAAoV,MAAA,QAoDApV,EAAAgV,KAAAA,EAgBAhV,EAAAmV,SAAAA,EAGAnV,EAAAwR,QAAA/Q,EAAA,IACAT,EAAA6Q,QAAApQ,EAAA,IACAT,EAAAqV,SAAA5U,EAAA,IACAT,EAAA4P,UAAAnP,EAAA,IAGAT,EAAA4R,iBAAAnR,EAAA,IACAT,EAAAsV,UAAA7U,EAAA,IACAT,EAAAkV,KAAAzU,EAAA,IACAT,EAAAsP,KAAA7O,EAAA,IACAT,EAAAsT,KAAA7S,EAAA,IACAT,EAAA2S,MAAAlS,EAAA,IACAT,EAAAuV,MAAA9U,EAAA,IACAT,EAAAwV,SAAA/U,EAAA,IACAT,EAAAyV,QAAAhV,EAAA,IACAT,EAAA0V,OAAAjV,EAAA,IAGAT,EAAA2V,QAAAlV,EAAA,IAGAT,EAAAiR,MAAAxQ,EAAA,IACAT,EAAAK,KAAAI,EAAA,IAGAT,EAAA4R,iBAAAkD,EAAA9U,EAAAkV,MACAlV,EAAAsV,UAAAR,EAAA9U,EAAAsT,KAAAtT,EAAAyV,SACAzV,EAAAkV,KAAAJ,EAAA9U,EAAAsT,MACAtT,EAAA2S,MAAAmC,EAAA9U,EAAAsT,0ICzEA,QAAAhT,KACAN,EAAA4V,OAAAd,EAAA9U,EAAA6V,cACA7V,EAAAK,KAAAyU,IA9BA,GAAA9U,GAAAD,CAQAC,GAAAoV,MAAA,UAGApV,EAAA8V,OAAArV,EAAA,IACAT,EAAA+V,aAAAtV,EAAA,IACAT,EAAA4V,OAAAnV,EAAA,IACAT,EAAA6V,aAAApV,EAAA,IAGAT,EAAAK,KAAAI,EAAA,IACAT,EAAAgW,IAAAvV,EAAA,IACAT,EAAAiW,MAAAxV,EAAA,IACAT,EAAAkW,SAAAzV,EAAA,IACAT,EAAAM,UAAAA,EAaAN,EAAA8V,OAAAhB,EAAA9U,EAAA+V,cACAzV,0ECnCA,GAAAN,GAAAO,EAAAR,QAAAU,EAAA,GAEAT,GAAAoV,MAAA,OAGApV,EAAAmW,SAAA1V,EAAA,IACAT,EAAAoW,MAAA3V,EAAA,IACAT,EAAAsM,OAAA7L,EAAA,IAGAT,EAAAkV,KAAAJ,EAAA9U,EAAAsT,KAAAtT,EAAAoW,MAAApW,EAAAsM,sDCUA,QAAAkJ,GAAA5V,EAAAmN,EAAAS,EAAAV,EAAA3G,GAIA,GAHAwM,EAAA7S,KAAA2B,KAAA7B,EAAAmN,EAAAD,EAAA3G,IAGA9F,EAAAkS,SAAA/E,GACA,KAAAqE,WAAA,2BAMApQ,MAAA+L,QAAAA,EAMA/L,KAAA4U,gBAAA,KAGA5U,KAAAqD,KAAA,EAxCAvE,EAAAR,QAAAyV,CAGA,IAAA7C,GAAAlS,EAAA,MACA+U,EAAA9P,UAAAf,OAAAoN,OAAAY,EAAAjN,YAAAuM,YAAAuD,GAAAtD,UAAA,UAEA,IAAAjB,GAAAxQ,EAAA,IACAJ,EAAAI,EAAA,GAyDA+U,GAAArD,SAAA,SAAAvS,EAAA2M,GACA,MAAA,IAAAiJ,GAAA5V,EAAA2M,EAAAQ,GAAAR,EAAAiB,QAAAjB,EAAAO,KAAAP,EAAApG,UAOAqP,EAAA9P,UAAA0M,OAAA,WACA,MAAA/R,GAAA4P,UACA,UAAAxO,KAAA+L,QACA,OAAA/L,KAAAqL,KACA,KAAArL,KAAAsL,GACA,SAAAtL,KAAAmR,OACA,UAAAnR,KAAA0E,WAOAqP,EAAA9P,UAAAtE,QAAA,WACA,GAAAK,KAAAmS,SACA,MAAAnS,KAGA,IAAAwP,EAAAS,OAAAjQ,KAAA+L,WAAAjO,EACA,KAAA0D,OAAA,qBAAAxB,KAAA+L,QAEA,OAAAmF,GAAAjN,UAAAtE,QAAAtB,KAAA2B,OAaA+T,EAAAlB,EAAA,SAAAC,EAAA+B,EAAAC,GAUA,MAPA,kBAAAA,GACAA,EAAAlW,EAAAqU,aAAA6B,GAAA3W,KAGA2W,GAAA,gBAAAA,KACAA,EAAAlW,EAAAsU,aAAA4B,GAAA3W,MAEA,SAAA8F,EAAAkP,GACAvU,EAAAqU,aAAAhP,EAAAuM,aACAI,IAAA,GAAAmD,GAAAZ,EAAAL,EAAA+B,EAAAC,8CC3GA,QAAAZ,GAAAa,GAEA,GAAAA,EACA,IAAA,GAAA9R,GAAAC,OAAAD,KAAA8R,GAAA1V,EAAA,EAAAA,EAAA4D,EAAA1D,SAAAF,EACAW,KAAAiD,EAAA5D,IAAA0V,EAAA9R,EAAA5D,IAfAP,EAAAR,QAAA4V,CAEA,IAAAtV,GAAAI,EAAA,GAuCAkV,GAAA5D,OAAA,SAAAyE,GACA,MAAA/U,MAAAgV,MAAA1E,OAAAyE,IAWAb,EAAAvT,OAAA,SAAA4Q,EAAA0D,GACA,MAAAjV,MAAAgV,MAAArU,OAAA4Q,EAAA0D,IAWAf,EAAAgB,gBAAA,SAAA3D,EAAA0D,GACA,MAAAjV,MAAAgV,MAAAE,gBAAA3D,EAAA0D,IAYAf,EAAA9S,OAAA,SAAA+T,GACA,MAAAnV,MAAAgV,MAAA5T,OAAA+T,IAYAjB,EAAAkB,gBAAA,SAAAD,GACA,MAAAnV,MAAAgV,MAAAI,gBAAAD,IAUAjB,EAAAmB,OAAA,SAAA9D,GACA,MAAAvR,MAAAgV,MAAAK,OAAA9D,IAUA2C,EAAA9F,WAAA,SAAAkH,GACA,MAAAtV,MAAAgV,MAAA5G,WAAAkH,IAWApB,EAAA1F,SAAA,SAAA+C,EAAA7M,GACA,MAAA1E,MAAAgV,MAAAxG,SAAA+C,EAAA7M,IAOAwP,EAAAjQ,UAAA0M,OAAA,WACA,MAAA3Q,MAAAgV,MAAAxG,SAAAxO,KAAApB,EAAA2W,4CCjHA,QAAAtB,GAAA9V,EAAAkN,EAAAmK,EAAA7P,EAAA8P,EAAAC,EAAAhR,GAYA,GATA9F,EAAAwS,SAAAqE,IACA/Q,EAAA+Q,EACAA,EAAAC,EAAA5X,GACAc,EAAAwS,SAAAsE,KACAhR,EAAAgR,EACAA,EAAA5X,GAIAuN,IAAAvN,IAAAc,EAAAkS,SAAAzF,GACA,KAAA+E,WAAA,wBAGA,KAAAxR,EAAAkS,SAAA0E,GACA,KAAApF,WAAA,+BAGA,KAAAxR,EAAAkS,SAAAnL,GACA,KAAAyK,WAAA,gCAEAD,GAAA9R,KAAA2B,KAAA7B,EAAAuG,GAMA1E,KAAAqL,KAAAA,GAAA,MAMArL,KAAAwV,YAAAA,EAMAxV,KAAAyV,gBAAAA,GAAA3X,EAMAkC,KAAA2F,aAAAA,EAMA3F,KAAA0V,iBAAAA,GAAA5X,EAMAkC,KAAA2V,oBAAA,KAMA3V,KAAA4V,qBAAA,KAtFA9W,EAAAR,QAAA2V,CAGA,IAAA9D,GAAAnR,EAAA,MACAiV,EAAAhQ,UAAAf,OAAAoN,OAAAH,EAAAlM,YAAAuM,YAAAyD,GAAAxD,UAAA,QAEA,IAAA7R,GAAAI,EAAA,GAqGAiV,GAAAvD,SAAA,SAAAvS,EAAA2M,GACA,MAAA,IAAAmJ,GAAA9V,EAAA2M,EAAAO,KAAAP,EAAA0K,YAAA1K,EAAAnF,aAAAmF,EAAA2K,cAAA3K,EAAA4K,eAAA5K,EAAApG,UAOAuP,EAAAhQ,UAAA0M,OAAA,WACA,MAAA/R,GAAA4P,UACA,OAAA,QAAAxO,KAAAqL,MAAArL,KAAAqL,MAAAvN,EACA,cAAAkC,KAAAwV,YACA,gBAAAxV,KAAAyV,cACA,eAAAzV,KAAA2F,aACA,iBAAA3F,KAAA0V,eACA,UAAA1V,KAAA0E,WAOAuP,EAAAhQ,UAAAtE,QAAA,WAGA,MAAAK,MAAAmS,SACAnS,MAEAA,KAAA2V,oBAAA3V,KAAAqS,OAAAwD,WAAA7V,KAAAwV,aACAxV,KAAA4V,qBAAA5V,KAAAqS,OAAAwD,WAAA7V,KAAA2F,cAEAwK,EAAAlM,UAAAtE,QAAAtB,KAAA2B,0CChGA,QAAA8V,GAAAC,GACA,IAAAA,IAAAA,EAAAxW,OACA,MAAAzB,EAEA,KAAA,GADAkY,MACA3W,EAAA,EAAAA,EAAA0W,EAAAxW,SAAAF,EACA2W,EAAAD,EAAA1W,GAAAlB,MAAA4X,EAAA1W,GAAAsR,QACA,OAAAqF,GAgBA,QAAAnC,GAAA1V,EAAAuG,GACAyL,EAAA9R,KAAA2B,KAAA7B,EAAAuG,GAMA1E,KAAAgL,OAAAlN,EAOAkC,KAAAiW,EAAA,KAGA,QAAAC,GAAAC,GAEA,MADAA,GAAAF,EAAA,KACAE,EAnFArX,EAAAR,QAAAuV,CAGA,IAAA1D,GAAAnR,EAAA,MACA6U,EAAA5P,UAAAf,OAAAoN,OAAAH,EAAAlM,YAAAuM,YAAAqD,GAAApD,UAAA,WAEA,IAIAoB,GACAmC,EALAnG,EAAA7O,EAAA,IACAkS,EAAAlS,EAAA,IACAJ,EAAAI,EAAA,GAwBA6U,GAAAnD,SAAA,SAAAvS,EAAA2M,GACA,MAAA,IAAA+I,GAAA1V,EAAA2M,EAAApG,SAAA0R,QAAAtL,EAAAE,SAkBA6I,EAAAiC,YAAAA,EAyCA5S,OAAA4O,eAAA+B,EAAA5P,UAAA,eACA8N,IAAA,WACA,MAAA/R,MAAAiW,IAAAjW,KAAAiW,EAAArX,EAAAyX,QAAArW,KAAAgL,YA4BA6I,EAAA5P,UAAA0M,OAAA,WACA,MAAA/R,GAAA4P,UACA,UAAAxO,KAAA0E,QACA,SAAAoR,EAAA9V,KAAAsW,gBASAzC,EAAA5P,UAAAmS,QAAA,SAAAG,GACA,GAAAC,GAAAxW,IAEA,IAAAuW,EACA,IAAA,GAAAvL,GAAAyL,EAAAvT,OAAAD,KAAAsT,GAAAlX,EAAA,EAAAA,EAAAoX,EAAAlX,SAAAF,EACA2L,EAAAuL,EAAAE,EAAApX,IACAmX,EAAA5F,KACA5F,EAAAG,SAAArN,EACA+T,EAAAnB,SACA1F,EAAA2B,SAAA7O,EACA+P,EAAA6C,SACA1F,EAAA0L,UAAA5Y,EACAkW,EAAAtD,SACA1F,EAAAM,KAAAxN,EACAoT,EAAAR,SACAmD,EAAAnD,UAAA+F,EAAApX,GAAA2L,GAIA,OAAAhL,OAQA6T,EAAA5P,UAAA8N,IAAA,SAAA5T,GACA,MAAA6B,MAAAgL,QAAAhL,KAAAgL,OAAA7M,IACA,MAUA0V,EAAA5P,UAAA0S,QAAA,SAAAxY,GACA,GAAA6B,KAAAgL,QAAAhL,KAAAgL,OAAA7M,YAAA0P,GACA,MAAA7N,MAAAgL,OAAA7M,GAAAwO,MACA,MAAAnL,OAAA,iBAUAqS,EAAA5P,UAAA2M,IAAA,SAAA0E,GAEA,KAAAA,YAAApE,IAAAoE,EAAAnE,SAAArT,GAAAwX,YAAAzD,IAAAyD,YAAAzH,IAAAyH,YAAAtB,IAAAsB,YAAAzB,IACA,KAAAzD,WAAA,uCAEA,IAAApQ,KAAAgL,OAEA,CACA,GAAA/I,GAAAjC,KAAA+R,IAAAuD,EAAAnX,KACA,IAAA8D,EAAA,CACA,KAAAA,YAAA4R,IAAAyB,YAAAzB,KAAA5R,YAAA4P,IAAA5P,YAAA+R,GAWA,KAAAxS,OAAA,mBAAA8T,EAAAnX,KAAA,QAAA6B,KARA,KAAA,GADAgL,GAAA/I,EAAAqU,YACAjX,EAAA,EAAAA,EAAA2L,EAAAzL,SAAAF,EACAiW,EAAA1E,IAAA5F,EAAA3L,GACAW,MAAAiR,OAAAhP,GACAjC,KAAAgL,SACAhL,KAAAgL,WACAsK,EAAAsB,WAAA3U,EAAAyC,SAAA,QAZA1E,MAAAgL,SAoBA,OAFAhL,MAAAgL,OAAAsK,EAAAnX,MAAAmX,EACAA,EAAAuB,MAAA7W,MACAkW,EAAAlW,OAUA6T,EAAA5P,UAAAgN,OAAA,SAAAqE,GAEA,KAAAA,YAAAnF,IACA,KAAAC,WAAA,oCACA,IAAAkF,EAAAjD,SAAArS,KACA,KAAAwB,OAAA8T,EAAA,uBAAAtV,KAOA,cALAA,MAAAgL,OAAAsK,EAAAnX,MACA+E,OAAAD,KAAAjD,KAAAgL,QAAAzL,SACAS,KAAAgL,OAAAlN,GAEAwX,EAAAwB,SAAA9W,MACAkW,EAAAlW,OASA6T,EAAA5P,UAAAzF,OAAA,SAAA4K,EAAA0B,GAEA,GAAAlM,EAAAkS,SAAA1H,GACAA,EAAAA,EAAAI,MAAA,SACA,KAAA/I,MAAAsW,QAAA3N,GACA,KAAAgH,WAAA,eACA,IAAAhH,GAAAA,EAAA7J,QAAA,KAAA6J,EAAA,GACA,KAAA5H,OAAA,wBAGA,KADA,GAAAwV,GAAAhX,KACAoJ,EAAA7J,OAAA,GAAA,CACA,GAAA0X,GAAA7N,EAAAO,OACA,IAAAqN,EAAAhM,QAAAgM,EAAAhM,OAAAiM,IAEA,MADAD,EAAAA,EAAAhM,OAAAiM,aACApD,IACA,KAAArS,OAAA,iDAEAwV,GAAApG,IAAAoG,EAAA,GAAAnD,GAAAoD,IAIA,MAFAnM,IACAkM,EAAAZ,QAAAtL,GACAkM,GAOAnD,EAAA5P,UAAAiT,WAAA,WAEA,IADA,GAAAlM,GAAAhL,KAAAsW,YAAAjX,EAAA,EACAA,EAAA2L,EAAAzL,QACAyL,EAAA3L,YAAAwU,GACA7I,EAAA3L,KAAA6X,aAEAlM,EAAA3L,KAAAM,SACA,OAAAK,MAAAL,WAUAkU,EAAA5P,UAAAkT,OAAA,SAAA/N,EAAAgO,EAAAC,GASA,GANA,iBAAAD,IACAC,EAAAD,EACAA,EAAAtZ,GACAsZ,IAAA3W,MAAAsW,QAAAK,KACAA,GAAAA,IAEAxY,EAAAkS,SAAA1H,IAAAA,EAAA7J,OAAA,CACA,GAAA,MAAA6J,EACA,MAAApJ,MAAAwT,IACApK,GAAAA,EAAAI,MAAA,SACA,KAAAJ,EAAA7J,OACA,MAAAS,KAGA,IAAA,KAAAoJ,EAAA,GACA,MAAApJ,MAAAwT,KAAA2D,OAAA/N,EAAAa,MAAA,GAAAmN,EAGA,IAAAE,GAAAtX,KAAA+R,IAAA3I,EAAA,GACA,IAAAkO,GACA,GAAA,IAAAlO,EAAA7J,QACA,IAAA6X,GAAAA,EAAAlI,QAAAoI,EAAA9G,cAAA,EACA,MAAA8G,OACA,IAAAA,YAAAzD,KAAAyD,EAAAA,EAAAH,OAAA/N,EAAAa,MAAA,GAAAmN,GAAA,IACA,MAAAE,OAIA,KAAA,GAAAjY,GAAA,EAAAA,EAAAW,KAAAsW,YAAA/W,SAAAF,EACA,GAAAW,KAAAiW,EAAA5W,YAAAwU,KAAAyD,EAAAtX,KAAAiW,EAAA5W,GAAA8X,OAAA/N,EAAAgO,GAAA,IACA,MAAAE,EAGA,OAAA,QAAAtX,KAAAqS,QAAAgF,EACA,KACArX,KAAAqS,OAAA8E,OAAA/N,EAAAgO,IAqBAvD,EAAA5P,UAAA4R,WAAA,SAAAzM,GACA,GAAAkO,GAAAtX,KAAAmX,OAAA/N,GAAAyI,GACA,KAAAyF,EACA,KAAA9V,OAAA,eACA,OAAA8V,IAUAzD,EAAA5P,UAAAsT,WAAA,SAAAnO,GACA,GAAAkO,GAAAtX,KAAAmX,OAAA/N,GAAAyE,GACA,KAAAyJ,EACA,KAAA9V,OAAA,iBAAA4H,EAAA,QAAApJ,KACA,OAAAsX,IAUAzD,EAAA5P,UAAAqO,iBAAA,SAAAlJ,GACA,GAAAkO,GAAAtX,KAAAmX,OAAA/N,GAAAyI,EAAAhE,GACA,KAAAyJ,EACA,KAAA9V,OAAA,yBAAA4H,EAAA,QAAApJ,KACA,OAAAsX,IAUAzD,EAAA5P,UAAAuT,cAAA,SAAApO,GACA,GAAAkO,GAAAtX,KAAAmX,OAAA/N,GAAA4K,GACA,KAAAsD,EACA,KAAA9V,OAAA,oBAAA4H,EAAA,QAAApJ,KACA,OAAAsX,IAGAzD,EAAAR,EAAA,SAAAC,EAAAmE,GACA5F,EAAAyB,EACAU,EAAAyD,iDC9XA,QAAAtH,GAAAhS,EAAAuG,GAEA,IAAA9F,EAAAkS,SAAA3S,GACA,KAAAiS,WAAA,wBAEA,IAAA1L,IAAA9F,EAAAwS,SAAA1M,GACA,KAAA0L,WAAA,4BAMApQ,MAAA0E,QAAAA,EAMA1E,KAAA7B,KAAAA,EAMA6B,KAAAqS,OAAA,KAMArS,KAAAmS,UAAA,EAMAnS,KAAA6Q,QAAA,KAMA7Q,KAAAyE,SAAA,KA1DA3F,EAAAR,QAAA6R,EAEAA,EAAAM,UAAA,kBAEA,IAEAgD,GAFA7U,EAAAI,EAAA,GAyDAkE,QAAAwU,iBAAAvH,EAAAlM,WAQAuP,MACAzB,IAAA,WAEA,IADA,GAAAiF,GAAAhX,KACA,OAAAgX,EAAA3E,QACA2E,EAAAA,EAAA3E,MACA,OAAA2E,KAUAhJ,UACA+D,IAAA,WAGA,IAFA,GAAA3I,IAAApJ,KAAA7B,MACA6Y,EAAAhX,KAAAqS,OACA2E,GACA5N,EAAAuO,QAAAX,EAAA7Y,MACA6Y,EAAAA,EAAA3E,MAEA,OAAAjJ,GAAA1G,KAAA,SAUAyN,EAAAlM,UAAA0M,OAAA,WACA,KAAAnP,UAQA2O,EAAAlM,UAAA4S,MAAA,SAAAxE,GACArS,KAAAqS,QAAArS,KAAAqS,SAAAA,GACArS,KAAAqS,OAAApB,OAAAjR,MACAA,KAAAqS,OAAAA,EACArS,KAAAmS,UAAA,CACA,IAAAqB,GAAAnB,EAAAmB,IACAA,aAAAC,IACAD,EAAAoE,EAAA5X,OAQAmQ,EAAAlM,UAAA6S,SAAA,SAAAzE,GACA,GAAAmB,GAAAnB,EAAAmB,IACAA,aAAAC,IACAD,EAAAqE,EAAA7X,MACAA,KAAAqS,OAAA,KACArS,KAAAmS,UAAA,GAOAhC,EAAAlM,UAAAtE,QAAA,WACA,MAAAK,MAAAmS,SACAnS,MACAA,KAAAwT,eAAAC,KACAzT,KAAAmS,UAAA,GACAnS,OAQAmQ,EAAAlM,UAAA+N,UAAA,SAAA7T,GACA,MAAA6B,MAAA0E,QACA1E,KAAA0E,QAAAvG,GACAL,GAUAqS,EAAAlM,UAAAgO,UAAA,SAAA9T,EAAAoN,EAAA2G,GAGA,MAFAA,IAAAlS,KAAA0E,SAAA1E,KAAA0E,QAAAvG,KAAAL,KACAkC,KAAA0E,UAAA1E,KAAA0E,aAAAvG,GAAAoN,GACAvL,MASAmQ,EAAAlM,UAAA2S,WAAA,SAAAlS,EAAAwN,GACA,GAAAxN,EACA,IAAA,GAAAzB,GAAAC,OAAAD,KAAAyB,GAAArF,EAAA,EAAAA,EAAA4D,EAAA1D,SAAAF,EACAW,KAAAiS,UAAAhP,EAAA5D,GAAAqF,EAAAzB,EAAA5D,IAAA6S,EACA,OAAAlS,OAOAmQ,EAAAlM,UAAAiB,SAAA,WACA,GAAAuL,GAAAzQ,KAAAwQ,YAAAC,UACAzC,EAAAhO,KAAAgO,QACA,OAAAA,GAAAzO,OACAkR,EAAA,IAAAzC,EACAyC,GAGAN,EAAAkD,EAAA,SAAAyE,GACArE,EAAAqE,+BClLA,QAAAhE,GAAA3V,EAAA4Z,EAAArT,GAQA,GAPAjE,MAAAsW,QAAAgB,KACArT,EAAAqT,EACAA,EAAAja,GAEAqS,EAAA9R,KAAA2B,KAAA7B,EAAAuG,GAGAqT,IAAAja,IAAA2C,MAAAsW,QAAAgB,GACA,KAAA3H,WAAA,8BAMApQ,MAAAmM,MAAA4L,MAOA/X,KAAAsO,eAuCA,QAAA0J,GAAA7L,GACA,GAAAA,EAAAkG,OACA,IAAA,GAAAhT,GAAA,EAAAA,EAAA8M,EAAAmC,YAAA/O,SAAAF,EACA8M,EAAAmC,YAAAjP,GAAAgT,QACAlG,EAAAkG,OAAAzB,IAAAzE,EAAAmC,YAAAjP,IAnFAP,EAAAR,QAAAwV,CAGA,IAAA3D,GAAAnR,EAAA,MACA8U,EAAA7P,UAAAf,OAAAoN,OAAAH,EAAAlM,YAAAuM,YAAAsD,GAAArD,UAAA,OAEA,IAAAS,GAAAlS,EAAA,IACAJ,EAAAI,EAAA,GAkDA8U,GAAApD,SAAA,SAAAvS,EAAA2M,GACA,MAAA,IAAAgJ,GAAA3V,EAAA2M,EAAAqB,MAAArB,EAAApG,UAOAoP,EAAA7P,UAAA0M,OAAA,WACA,MAAA/R,GAAA4P,UACA,UAAAxO,KAAA0E,QACA,QAAA1E,KAAAmM,SAuBA2H,EAAA7P,UAAA2M,IAAA,SAAAnD,GAGA,KAAAA,YAAAyD,IACA,KAAAd,WAAA,wBAQA,OANA3C,GAAA4E,QAAA5E,EAAA4E,SAAArS,KAAAqS,QACA5E,EAAA4E,OAAApB,OAAAxD,GACAzN,KAAAmM,MAAA3M,KAAAiO,EAAAtP,MACA6B,KAAAsO,YAAA9O,KAAAiO,GACAA,EAAAqB,OAAA9O,KACAgY,EAAAhY,MACAA,MAQA8T,EAAA7P,UAAAgN,OAAA,SAAAxD,GAGA,KAAAA,YAAAyD,IACA,KAAAd,WAAA,wBAEA,IAAApB,GAAAhP,KAAAsO,YAAAY,QAAAzB,EAGA,IAAAuB,EAAA,EACA,KAAAxN,OAAAiM,EAAA,uBAAAzN,KAUA,OARAA,MAAAsO,YAAAhK,OAAA0K,EAAA,GACAA,EAAAhP,KAAAmM,MAAA+C,QAAAzB,EAAAtP,MAGA6Q,GAAA,GACAhP,KAAAmM,MAAA7H,OAAA0K,EAAA,GAEAvB,EAAAqB,OAAA,KACA9O,MAMA8T,EAAA7P,UAAA4S,MAAA,SAAAxE,GACAlC,EAAAlM,UAAA4S,MAAAxY,KAAA2B,KAAAqS,EAGA,KAAA,GAFA4F,GAAAjY,KAEAX,EAAA,EAAAA,EAAAW,KAAAmM,MAAA5M,SAAAF,EAAA,CACA,GAAAoO,GAAA4E,EAAAN,IAAA/R,KAAAmM,MAAA9M,GACAoO,KAAAA,EAAAqB,SACArB,EAAAqB,OAAAmJ,EACAA,EAAA3J,YAAA9O,KAAAiO,IAIAuK,EAAAhY,OAMA8T,EAAA7P,UAAA6S,SAAA,SAAAzE;iCACA,IAAA,GAAA5E,GAAApO,EAAA,EAAAA,EAAAW,KAAAsO,YAAA/O,SAAAF,GACAoO,EAAAzN,KAAAsO,YAAAjP,IAAAgT,QACA5E,EAAA4E,OAAApB,OAAAxD,EACA0C,GAAAlM,UAAA6S,SAAAzY,KAAA2B,KAAAqS,IAmBAyB,EAAAjB,EAAA,WAEA,IAAA,GADAkF,MACA1Y,EAAA,EAAAA,EAAAC,UAAAC,SAAAF,EACA0Y,EAAAvY,KAAAF,UAAAD,GACA,OAAA,UAAA4E,EAAAiU,GACAtZ,EAAAqU,aAAAhP,EAAAuM,aACAI,IAAA,GAAAkD,GAAAoE,EAAAH,IACA7U,OAAA4O,eAAA7N,EAAAiU,GACAnG,IAAAnT,EAAAuZ,YAAAJ,GACAK,IAAAxZ,EAAAyZ,YAAAN,+CC7JA,QAAAO,GAAA9V,GACA,MAAAA,GAAA+V,UAAA,EAAA,GACA/V,EAAA+V,UAAA,GACA9V,QAAA+V,EAAA,SAAAhV,EAAAC,GAAA,MAAAA,GAAAgV,gBAgCA,QAAA9D,GAAA9R,EAAA2Q,EAAA9O,GA4BA,QAAAgU,GAAAC,EAAAxa,EAAAya,GACA,GAAAnU,GAAAkQ,EAAAlQ,QAGA,OAFAmU,KACAjE,EAAAlQ,SAAA,MACAjD,MAAA,YAAArD,GAAA,SAAA,KAAAwa,EAAA,OAAAlU,EAAAA,EAAA,KAAA,IAAA,QAAAoU,GAAAjX,OAAA,KAGA,QAAAkX,KACA,GACAH,GADAhM,IAEA,GAAA,CAEA,GAAA,OAAAgM,EAAAI,OAAA,MAAAJ,EACA,KAAAD,GAAAC,EAEAhM,GAAAnN,KAAAuZ,MACAC,GAAAL,GACAA,EAAAM,WACA,MAAAN,GAAA,MAAAA,EACA,OAAAhM,GAAAjK,KAAA,IAGA,QAAAwW,GAAAC,GACA,GAAAR,GAAAI,IACA,QAAAJ,GACA,IAAA,IACA,IAAA,IAEA,MADAnZ,IAAAmZ,GACAG,GACA,KAAA,OAAA,IAAA,OACA,OAAA,CACA,KAAA,QAAA,IAAA,QACA,OAAA,EAEA,IACA,MAAAM,GAAAT,GAAA,GACA,MAAA7U,GAGA,GAAAqV,GAAAE,EAAA5X,KAAAkX,GACA,MAAAA,EAGA,MAAAD,GAAAC,EAAA,UAIA,QAAAW,GAAAC,EAAAC,GACA,GAAAb,GAAA9X,CACA,KACA2Y,GAAA,OAAAb,EAAAM,OAAA,MAAAN,EAGAY,EAAA/Z,MAAAqB,EAAA4Y,EAAAV,MAAAC,GAAA,MAAA,GAAAS,EAAAV,MAAAlY,IAFA0Y,EAAA/Z,KAAAsZ,WAGAE,GAAA,KAAA,GACAA,IAAA,KAGA,QAAAI,GAAAT,EAAAC,GACA,GAAA5R,GAAA,CAKA,QAJA,MAAA2R,EAAAtY,OAAA,KACA2G,GAAA,EACA2R,EAAAA,EAAAJ,UAAA,IAEAI,GACA,IAAA,MAAA,IAAA,MAAA,IAAA,MACA,MAAA3R,IAAAW,EAAAA,EACA,KAAA,MAAA,IAAA,MAAA,IAAA,MAAA,IAAA,MACA,MAAAD,IACA,KAAA,IACA,MAAA,GAEA,GAAAgS,EAAAjY,KAAAkX,GACA,MAAA3R,GAAA2S,SAAAhB,EAAA,GACA,IAAAiB,EAAAnY,KAAAkX,GACA,MAAA3R,GAAA2S,SAAAhB,EAAA,GACA,IAAAkB,EAAApY,KAAAkX,GACA,MAAA3R,GAAA2S,SAAAhB,EAAA,EAGA,IAAAmB,EAAArY,KAAAkX,GACA,MAAA3R,GAAA+S,WAAApB,EAGA,MAAAD,GAAAC,EAAA,SAAAC,GAGA,QAAAa,GAAAd,EAAAqB,GACA,OAAArB,GACA,IAAA,MAAA,IAAA,MAAA,IAAA,MACA,MAAA,UACA,KAAA,IACA,MAAA,GAIA,IAAAqB,GAAA,MAAArB,EAAAtY,OAAA,GACA,KAAAqY,GAAAC,EAAA,KAEA,IAAAsB,EAAAxY,KAAAkX,GACA,MAAAgB,UAAAhB,EAAA,GACA,IAAAuB,EAAAzY,KAAAkX,GACA,MAAAgB,UAAAhB,EAAA,GAGA,IAAAwB,EAAA1Y,KAAAkX,GACA,MAAAgB,UAAAhB,EAAA,EAGA,MAAAD,GAAAC,EAAA,MAmDA,QAAAyB,GAAA/H,EAAAsG,GACA,OAAAA,GAEA,IAAA,SAGA,MAFA0B,GAAAhI,EAAAsG,GACAK,GAAA,MACA,CAEA,KAAA,UAEA,MADAsB,GAAAjI,EAAAsG,IACA,CAEA,KAAA,OAEA,MADA4B,GAAAlI,EAAAsG,IACA,CAEA,KAAA,UAEA,MADA6B,GAAAnI,EAAAsG,IACA,CAEA,KAAA,SAEA,MADA8B,GAAApI,EAAAsG,IACA,EAEA,OAAA,EAGA,QAAA+B,GAAA1E,EAAA2E,EAAAC,GACA,GAAAC,GAAAhC,GAAAjX,MAKA,IAJAoU,IACAA,EAAAnF,QAAAiK,KACA9E,EAAAvR,SAAAkQ,EAAAlQ,UAEAuU,GAAA,KAAA,GAAA,CAEA,IADA,GAAAL,GACA,OAAAA,EAAAI,OACA4B,EAAAhC,EACAK,IAAA,KAAA,OAEA4B,IACAA,IACA5B,GAAA,KACAhD,GAAA,gBAAAA,GAAAnF,UACAmF,EAAAnF,QAAAiK,GAAAD,IAIA,QAAAP,GAAAjI,EAAAsG,GAGA,IAAAoC,EAAAtZ,KAAAkX,EAAAI,MACA,KAAAL,GAAAC,EAAA,YAEA,IAAAtN,GAAA,GAAAwG,GAAA8G,EACA+B,GAAArP,EAAA,SAAAsN,GACA,IAAAyB,EAAA/O,EAAAsN,GAGA,OAAAA,GAEA,IAAA,MACAqC,EAAA3P,EACA,MAEA,KAAA,WACA,IAAA,WACA,IAAA,WACA4P,EAAA5P,EAAAsN,EACA,MAEA,KAAA,QACAuC,EAAA7P,EAAAsN,EACA,MAEA,KAAA,aACAW,EAAAjO,EAAA8P,aAAA9P,EAAA8P,eACA,MAEA,KAAA,WACA7B,EAAAjO,EAAA+P,WAAA/P,EAAA+P,cAAA,EACA,MAEA,SAEA,IAAAC,KAAAhC,EAAA5X,KAAAkX,GACA,KAAAD,GAAAC,EAEAnZ,IAAAmZ,GACAsC,EAAA5P,EAAA,eAIAgH,EAAAzB,IAAAvF,GAGA,QAAA4P,GAAA5I,EAAAvF,EAAAqE,GACA,GAAA9F,GAAA0N,IACA,IAAA,UAAA1N,EAEA,WADAiQ,GAAAjJ,EAAAvF,EAKA,KAAAuM,EAAA5X,KAAA4J,GACA,KAAAqN,GAAArN,EAAA,OAEA,IAAAlN,GAAA4a,IAGA,KAAAgC,EAAAtZ,KAAAtD,GACA,KAAAua,GAAAva,EAAA,OAEAA,GAAAod,GAAApd,GACA6a,GAAA,IAEA,IAAAvL,GAAA,GAAAyD,GAAA/S,EAAAsb,EAAAV,MAAA1N,EAAAyB,EAAAqE,EACAuJ,GAAAjN,EAAA,SAAAkL,GAGA,GAAA,WAAAA,EAIA,KAAAD,GAAAC,EAHA0B,GAAA5M,EAAAkL,GACAK,GAAA,MAIA,WACAwC,EAAA/N,KAEA4E,EAAAzB,IAAAnD,GAKA4N,KAAA5N,EAAAK,UAAA0B,EAAAG,OAAAtE,KAAAvN,GAAA0R,EAAAE,MAAArE,KAAAvN,GACA2P,EAAAwE,UAAA,UAAA,GAAA,GAGA,QAAAqJ,GAAAjJ,EAAAvF,GACA,GAAA3O,GAAA4a,IAGA,KAAAgC,EAAAtZ,KAAAtD,GACA,KAAAua,GAAAva,EAAA,OAEA,IAAAgV,GAAAvU,EAAA6c,QAAAtd,EACAA,KAAAgV,IACAhV,EAAAS,EAAA8c,QAAAvd,IACA6a,GAAA,IACA,IAAA1N,GAAAmO,EAAAV,MACA1N,EAAA,GAAAwG,GAAA1T,EACAkN,GAAAiE,OAAA,CACA,IAAA7B,GAAA,GAAAyD,GAAAiC,EAAA7H,EAAAnN,EAAA2O,EACAW,GAAAhJ,SAAAkQ,EAAAlQ,SACAiW,EAAArP,EAAA,SAAAsN,GACA,OAAAA,GAEA,IAAA,SACA0B,EAAAhP,EAAAsN,GACAK,GAAA,IACA,MAEA,KAAA,WACA,IAAA,WACA,IAAA,WACAiC,EAAA5P,EAAAsN,EACA,MAGA,SACA,KAAAD,GAAAC,MAGAtG,EAAAzB,IAAAvF,GACAuF,IAAAnD,GAGA,QAAAuN,GAAA3I,GACA2G,GAAA,IACA,IAAAjN,GAAAgN,IAGA,IAAAvJ,EAAAS,OAAAlE,KAAAjO,EACA,KAAA4a,GAAA3M,EAAA,OAEAiN,IAAA,IACA,IAAA2C,GAAA5C,IAGA,KAAAM,EAAA5X,KAAAka,GACA,KAAAjD,GAAAiD,EAAA,OAEA3C,IAAA,IACA,IAAA7a,GAAA4a,IAGA,KAAAgC,EAAAtZ,KAAAtD,GACA,KAAAua,GAAAva,EAAA,OAEA6a,IAAA,IACA,IAAAvL,GAAA,GAAAsG,GAAAwH,GAAApd,GAAAsb,EAAAV,MAAAhN,EAAA4P,EACAjB,GAAAjN,EAAA,SAAAkL,GAGA,GAAA,WAAAA,EAIA,KAAAD,GAAAC,EAHA0B,GAAA5M,EAAAkL,GACAK,GAAA,MAIA,WACAwC,EAAA/N,KAEA4E,EAAAzB,IAAAnD,GAGA,QAAAyN,GAAA7I,EAAAsG,GAGA,IAAAoC,EAAAtZ,KAAAkX,EAAAI,MACA,KAAAL,GAAAC,EAAA,OAEA,IAAAxM,GAAA,GAAA2H,GAAAyH,GAAA5C,GACA+B,GAAAvO,EAAA,SAAAwM,GACA,WAAAA,GACA0B,EAAAlO,EAAAwM,GACAK,GAAA,OAEAxZ,GAAAmZ,GACAsC,EAAA9O,EAAA,eAGAkG,EAAAzB,IAAAzE,GAGA,QAAAoO,GAAAlI,EAAAsG,GAGA,IAAAoC,EAAAtZ,KAAAkX,EAAAI,MACA,KAAAL,GAAAC,EAAA,OAEA,IAAAiD,GAAA,GAAA/N,GAAA8K,EACA+B,GAAAkB,EAAA,SAAAjD,GACA,WAAAA,GACA0B,EAAAuB,EAAAjD,GACAK,GAAA,MAEA6C,EAAAD,EAAAjD,KAEAtG,EAAAzB,IAAAgL,GAGA,QAAAC,GAAAxJ,EAAAsG,GAGA,IAAAoC,EAAAtZ,KAAAkX,GACA,KAAAD,GAAAC,EAAA,OAEAK,IAAA,IACA,IAAAzN,GAAAkO,EAAAV,MAAA,GACA+C,IACApB,GAAAoB,EAAA,SAAAnD,GAGA,GAAA,WAAAA,EAIA,KAAAD,GAAAC,EAHA0B,GAAAyB,EAAAnD,GACAK,GAAA,MAIA,WACAwC,EAAAM,KAEAzJ,EAAAzB,IAAA+H,EAAApN,EAAAuQ,EAAAjL,SAGA,QAAAwJ,GAAAhI,EAAAsG,GACA,GAAAoD,GAAA/C,GAAA,KAAA,EAGA,KAAAK,EAAA5X,KAAAkX,EAAAI,MACA,KAAAL,GAAAC,EAAA,OAEA,IAAAxa,GAAAwa,CACAoD,KACA/C,GAAA,KACA7a,EAAA,IAAAA,EAAA,IACAwa,EAAAM,KACA+C,EAAAva,KAAAkX,KACAxa,GAAAwa,EACAI,OAGAC,GAAA,KACAiD,EAAA5J,EAAAlU,GAGA,QAAA8d,GAAA5J,EAAAlU,GACA,GAAA6a,GAAA,KAAA,GACA,EAAA,CAEA,IAAA+B,EAAAtZ,KAAAkX,EAAAI,MACA,KAAAL,GAAAC,EAAA,OAEA,OAAAM,KACAgD,EAAA5J,EAAAlU,EAAA,IAAAwa,IAEAK,GAAA,KACA/G,EAAAI,EAAAlU,EAAA,IAAAwa,EAAAO,GAAA,YAEAF,GAAA,KAAA,QAEA/G,GAAAI,EAAAlU,EAAA+a,GAAA,IAIA,QAAAjH,GAAAI,EAAAlU,EAAAoN,GACA8G,EAAAJ,WACAI,EAAAJ,UAAA9T,EAAAoN,GAGA,QAAAiQ,GAAAnJ,GACA,GAAA2G,GAAA,KAAA,GAAA,CACA,GACAqB,EAAAhI,EAAA,gBACA2G,GAAA,KAAA,GACAA,IAAA,KAEA,MAAA3G,GAGA,QAAAmI,GAAAnI,EAAAsG,GAGA,IAAAoC,EAAAtZ,KAAAkX,EAAAI,MACA,KAAAL,GAAAC,EAAA,eAEA,IAAAuD,GAAA,GAAAlI,GAAA2E,EACA+B,GAAAwB,EAAA,SAAAvD,GACA,IAAAyB,EAAA8B,EAAAvD,GAAA,CAIA,GAAA,QAAAA,EAGA,KAAAD,GAAAC,EAFAwD,GAAAD,EAAAvD,MAIAtG,EAAAzB,IAAAsL,GAGA,QAAAC,GAAA9J,EAAAsG,GACA,GAAAtN,GAAAsN,CAGA,KAAAoC,EAAAtZ,KAAAkX,EAAAI,MACA,KAAAL,GAAAC,EAAA,OAEA,IACAnD,GAAAC,EACA9P,EAAA+P,EAFAvX,EAAAwa,CASA,IALAK,GAAA,KACAA,GAAA,UAAA,KACAvD,GAAA,IAGA4D,EAAA5X,KAAAkX,EAAAI,MACA,KAAAL,GAAAC,EAQA,IANAnD,EAAAmD,EACAK,GAAA,KAAAA,GAAA,WAAAA,GAAA,KACAA,GAAA,UAAA,KACAtD,GAAA,IAGA2D,EAAA5X,KAAAkX,EAAAI,MACA,KAAAL,GAAAC,EAEAhT,GAAAgT,EACAK,GAAA,IAEA,IAAAoD,GAAA,GAAAnI,GAAA9V,EAAAkN,EAAAmK,EAAA7P,EAAA8P,EAAAC,EACAgF,GAAA0B,EAAA,SAAAzD,GAGA,GAAA,WAAAA,EAIA,KAAAD,GAAAC,EAHA0B,GAAA+B,EAAAzD,GACAK,GAAA,OAKA3G,EAAAzB,IAAAwL,GAGA,QAAA3B,GAAApI,EAAAsG,GAGA,IAAAU,EAAA5X,KAAAkX,EAAAI,MACA,KAAAL,GAAAC,EAAA,YAEA,IAAA0D,GAAA1D,CACA+B,GAAA,KAAA,SAAA/B,GACA,OAAAA,GAEA,IAAA,WACA,IAAA,WACA,IAAA,WACAsC,EAAA5I,EAAAsG,EAAA0D,EACA,MAEA,SAEA,IAAAhB,KAAAhC,EAAA5X,KAAAkX,GACA,KAAAD,GAAAC,EACAnZ,IAAAmZ,GACAsC,EAAA5I,EAAA,WAAAgK,MA1lBA7I,YAAAC,KACA/O,EAAA8O,EACAA,EAAA,GAAAC,IAEA/O,IACAA,EAAAiQ,EAAAvC,SA4lBA,KA1lBA,GAQAkK,GACAC,EACAC,EACAC,EA8kBA9D,EAzlBAE,GAAAnE,EAAA7R,GACAkW,GAAAF,GAAAE,KACAvZ,GAAAqZ,GAAArZ,KACAyZ,GAAAJ,GAAAI,KACAD,GAAAH,GAAAG,KACA8B,GAAAjC,GAAAiC,KAEA4B,IAAA,EAKArB,IAAA,EAEArE,GAAAxD,EAEA+H,GAAA7W,EAAAiY,SAAA,SAAAxe,GAAA,MAAAA,IAAAma,EA0kBA,QAAAK,EAAAI,OACA,OAAAJ,GAEA,IAAA,UAGA,IAAA+D,GACA,KAAAhE,GAAAC,IA9dA,WAGA,GAAA2D,IAAAxe,EACA,KAAA4a,GAAA,UAKA,IAHA4D,EAAAvD,MAGAM,EAAA5X,KAAA6a,GACA,KAAA5D,GAAA4D,EAAA,OAEAtF,IAAAA,GAAAxY,OAAA8d,GACAtD,GAAA,OAodA,MAEA,KAAA,SAGA,IAAA0D,GACA,KAAAhE,GAAAC,IAvdA,WACA,GACAiE,GADAjE,EAAAM,IAEA,QAAAN,GACA,IAAA,OACAiE,EAAAJ,IAAAA,MACAzD,IACA,MACA,KAAA,SACAA,IAEA,SACA6D,EAAAL,IAAAA,MAGA5D,EAAAG,IACAE,GAAA,KACA4D,EAAApd,KAAAmZ,KAycA,MAEA,KAAA,SAGA,IAAA+D,GACA,KAAAhE,GAAAC,IA5cA,WAMA,GALAK,GAAA,KACAyD,EAAA3D,MACAuC,GAAA,WAAAoB,IAGA,WAAAA,EACA,KAAA/D,GAAA+D,EAAA,SAEAzD,IAAA,OAscA,MAEA,KAAA,SAGA,IAAA0D,GACA,KAAAhE,GAAAC,EAEA0B,GAAArD,GAAA2B,GACAK,GAAA,IACA,MAEA,SAGA,GAAAoB,EAAApD,GAAA2B,GAAA,CACA+D,IAAA,CACA,UAIA,KAAAhE,GAAAC,GAKA,MADAhE,GAAAlQ,SAAA,MAEAoY,QAAAP,EACAC,QAAAA,EACAC,YAAAA,EACAC,OAAAA,EACAjJ,KAAAA,GA/tBA1U,EAAAR,QAAAqW,EAEAA,EAAAlQ,SAAA,KACAkQ,EAAAvC,UAAAuK,UAAA,EAEA,IAAAjI,GAAA1V,EAAA,IACAyU,EAAAzU,EAAA,IACA6S,EAAA7S,EAAA,IACAkS,EAAAlS,EAAA,IACA+U,EAAA/U,EAAA,IACA8U,EAAA9U,EAAA,IACA6O,EAAA7O,EAAA,IACAgV,EAAAhV,EAAA,IACAiV,EAAAjV,EAAA,IACAwQ,EAAAxQ,EAAA,IACAJ,EAAAI,EAAA,IAEA0a,EAAA,gBACAO,EAAA,kBACAL,EAAA,qBACAM,EAAA,uBACAL,EAAA,YACAM,EAAA,cACAL,EAAA,oDACAiB,EAAA,2BACA1B,EAAA,mCACA2C,EAAA,iCAEAxD,EAAA,WAQA7D,GAAA2D,UAAAA,EACA3D,EAAAmF,SAAAA,0FC3BA,QAAAgD,GAAA3H,EAAA4H,GACA,MAAAC,YAAA,uBAAA7H,EAAAhP,IAAA,OAAA4W,GAAA,GAAA,MAAA5H,EAAA5K,KASA,QAAA4J,GAAAvT,GAMAZ,KAAAkG,IAAAtF,EAMAZ,KAAAmG,IAAA,EAMAnG,KAAAuK,IAAA3J,EAAArB,OA+EA,QAAA0d,KAEA,GAAAC,GAAA,GAAAC,GAAA,EAAA,GACA9d,EAAA,CACA,MAAAW,KAAAuK,IAAAvK,KAAAmG,IAAA,GAaA,CACA,KAAA9G,EAAA,IAAAA,EAAA,CAEA,GAAAW,KAAAmG,KAAAnG,KAAAuK,IACA,KAAAuS,GAAA9c,KAGA,IADAkd,EAAAnU,IAAAmU,EAAAnU,IAAA,IAAA/I,KAAAkG,IAAAlG,KAAAmG,OAAA,EAAA9G,KAAA,EACAW,KAAAkG,IAAAlG,KAAAmG,OAAA,IACA,MAAA+W,GAIA,MADAA,GAAAnU,IAAAmU,EAAAnU,IAAA,IAAA/I,KAAAkG,IAAAlG,KAAAmG,SAAA,EAAA9G,KAAA,EACA6d,EAxBA,KAAA7d,EAAA,IAAAA,EAGA,GADA6d,EAAAnU,IAAAmU,EAAAnU,IAAA,IAAA/I,KAAAkG,IAAAlG,KAAAmG,OAAA,EAAA9G,KAAA,EACAW,KAAAkG,IAAAlG,KAAAmG,OAAA,IACA,MAAA+W,EAKA,IAFAA,EAAAnU,IAAAmU,EAAAnU,IAAA,IAAA/I,KAAAkG,IAAAlG,KAAAmG,OAAA,MAAA,EACA+W,EAAAlU,IAAAkU,EAAAlU,IAAA,IAAAhJ,KAAAkG,IAAAlG,KAAAmG,OAAA,KAAA,EACAnG,KAAAkG,IAAAlG,KAAAmG,OAAA,IACA,MAAA+W,EAgBA,IAfA7d,EAAA,EAeAW,KAAAuK,IAAAvK,KAAAmG,IAAA,GACA,KAAA9G,EAAA,IAAAA,EAGA,GADA6d,EAAAlU,IAAAkU,EAAAlU,IAAA,IAAAhJ,KAAAkG,IAAAlG,KAAAmG,OAAA,EAAA9G,EAAA,KAAA,EACAW,KAAAkG,IAAAlG,KAAAmG,OAAA,IACA,MAAA+W,OAGA,MAAA7d,EAAA,IAAAA,EAAA,CAEA,GAAAW,KAAAmG,KAAAnG,KAAAuK,IACA,KAAAuS,GAAA9c,KAGA,IADAkd,EAAAlU,IAAAkU,EAAAlU,IAAA,IAAAhJ,KAAAkG,IAAAlG,KAAAmG,OAAA,EAAA9G,EAAA,KAAA,EACAW,KAAAkG,IAAAlG,KAAAmG,OAAA,IACA,MAAA+W,GAIA,KAAA1b,OAAA,2BAkCA,QAAA4b,GAAAlX,EAAApF,GACA,OAAAoF,EAAApF,EAAA,GACAoF,EAAApF,EAAA,IAAA,EACAoF,EAAApF,EAAA,IAAA,GACAoF,EAAApF,EAAA,IAAA,MAAA,EA+BA,QAAAuc,KAGA,GAAArd,KAAAmG,IAAA,EAAAnG,KAAAuK,IACA,KAAAuS,GAAA9c,KAAA,EAEA,OAAA,IAAAmd,GAAAC,EAAApd,KAAAkG,IAAAlG,KAAAmG,KAAA,GAAAiX,EAAApd,KAAAkG,IAAAlG,KAAAmG,KAAA,IAlPArH,EAAAR,QAAA6V,CAEA,IAEAC,GAFAxV,EAAAI,EAAA,IAIAme,EAAAve,EAAAue,SACA7S,EAAA1L,EAAA0L,KAkCAgT,EAAA,mBAAA7X,YACA,SAAA7E,GACA,GAAAA,YAAA6E,aAAAhF,MAAAsW,QAAAnW,GACA,MAAA,IAAAuT,GAAAvT,EACA,MAAAY,OAAA,mBAGA,SAAAZ,GACA,GAAAH,MAAAsW,QAAAnW,GACA,MAAA,IAAAuT,GAAAvT,EACA,MAAAY,OAAA,kBAUA2S,GAAA7D,OAAA1R,EAAA2e,OACA,SAAA3c,GACA,OAAAuT,EAAA7D,OAAA,SAAA1P,GACA,MAAAhC,GAAA2e,OAAAC,SAAA5c,GACA,GAAAwT,GAAAxT,GAEA0c,EAAA1c,KACAA,IAGA0c,EAEAnJ,EAAAlQ,UAAAwZ,EAAA7e,EAAA6B,MAAAwD,UAAAyZ,UAAA9e,EAAA6B,MAAAwD,UAAAgG,MAOAkK,EAAAlQ,UAAA0Z,OAAA,WACA,GAAApS,GAAA,UACA,OAAA,YACA,GAAAA,GAAA,IAAAvL,KAAAkG,IAAAlG,KAAAmG,QAAA,EAAAnG,KAAAkG,IAAAlG,KAAAmG,OAAA,IAAA,MAAAoF,EACA,IAAAA,GAAAA,GAAA,IAAAvL,KAAAkG,IAAAlG,KAAAmG,OAAA,KAAA,EAAAnG,KAAAkG,IAAAlG,KAAAmG,OAAA,IAAA,MAAAoF,EACA,IAAAA,GAAAA,GAAA,IAAAvL,KAAAkG,IAAAlG,KAAAmG,OAAA,MAAA,EAAAnG,KAAAkG,IAAAlG,KAAAmG,OAAA,IAAA,MAAAoF,EACA,IAAAA,GAAAA,GAAA,IAAAvL,KAAAkG,IAAAlG,KAAAmG,OAAA,MAAA,EAAAnG,KAAAkG,IAAAlG,KAAAmG,OAAA,IAAA,MAAAoF,EACA,IAAAA,GAAAA,GAAA,GAAAvL,KAAAkG,IAAAlG,KAAAmG,OAAA,MAAA,EAAAnG,KAAAkG,IAAAlG,KAAAmG,OAAA,IAAA,MAAAoF,EAGA,KAAAvL,KAAAmG,KAAA,GAAAnG,KAAAuK,IAEA,KADAvK,MAAAmG,IAAAnG,KAAAuK,IACAuS,EAAA9c,KAAA,GAEA,OAAAuL,OAQA4I,EAAAlQ,UAAA2Z,MAAA,WACA,MAAA,GAAA5d,KAAA2d,UAOAxJ,EAAAlQ,UAAA4Z,OAAA,WACA,GAAAtS,GAAAvL,KAAA2d,QACA,OAAApS,KAAA,IAAA,EAAAA,GAAA,GAqFA4I,EAAAlQ,UAAA6Z,KAAA,WACA,MAAA,KAAA9d,KAAA2d,UAcAxJ,EAAAlQ,UAAA8Z,QAAA,WAGA,GAAA/d,KAAAmG,IAAA,EAAAnG,KAAAuK,IACA,KAAAuS,GAAA9c,KAAA,EAEA,OAAAod,GAAApd,KAAAkG,IAAAlG,KAAAmG,KAAA,IAOAgO,EAAAlQ,UAAA+Z,SAAA,WAGA,GAAAhe,KAAAmG,IAAA,EAAAnG,KAAAuK,IACA,KAAAuS,GAAA9c,KAAA,EAEA,OAAA,GAAAod,EAAApd,KAAAkG,IAAAlG,KAAAmG,KAAA,IAmCAgO,EAAAlQ,UAAAga,MAAA,WAGA,GAAAje,KAAAmG,IAAA,EAAAnG,KAAAuK,IACA,KAAAuS,GAAA9c,KAAA,EAEA,IAAAuL,GAAA3M,EAAAqf,MAAArX,YAAA5G,KAAAkG,IAAAlG,KAAAmG,IAEA,OADAnG,MAAAmG,KAAA,EACAoF,GAQA4I,EAAAlQ,UAAAia,OAAA,WAGA,GAAAle,KAAAmG,IAAA,EAAAnG,KAAAuK,IACA,KAAAuS,GAAA9c,KAAA,EAEA,IAAAuL,GAAA3M,EAAAqf,MAAAxV,aAAAzI,KAAAkG,IAAAlG,KAAAmG,IAEA,OADAnG,MAAAmG,KAAA,EACAoF,GAOA4I,EAAAlQ,UAAAwN,MAAA,WACA,GAAAlS,GAAAS,KAAA2d,SACA9c,EAAAb,KAAAmG,IACArF,EAAAd,KAAAmG,IAAA5G,CAGA,IAAAuB,EAAAd,KAAAuK,IACA,KAAAuS,GAAA9c,KAAAT,EAGA,OADAS,MAAAmG,KAAA5G,EACAkB,MAAAsW,QAAA/W,KAAAkG,KACAlG,KAAAkG,IAAA+D,MAAApJ,EAAAC,GACAD,IAAAC,EACA,GAAAd,MAAAkG,IAAAsK,YAAA,GACAxQ,KAAAyd,EAAApf,KAAA2B,KAAAkG,IAAArF,EAAAC,IAOAqT,EAAAlQ,UAAA/D,OAAA,WACA,GAAAuR,GAAAzR,KAAAyR,OACA,OAAAnH,GAAAE,KAAAiH,EAAA,EAAAA,EAAAlS,SAQA4U,EAAAlQ,UAAA+U,KAAA,SAAAzZ,GACA,GAAA,gBAAAA,GAAA,CAEA,GAAAS,KAAAmG,IAAA5G,EAAAS,KAAAuK,IACA,KAAAuS,GAAA9c,KAAAT,EACAS,MAAAmG,KAAA5G,MAEA,IAEA,GAAAS,KAAAmG,KAAAnG,KAAAuK,IACA,KAAAuS,GAAA9c,YACA,IAAAA,KAAAkG,IAAAlG,KAAAmG,OAEA,OAAAnG,OAQAmU,EAAAlQ,UAAAka,SAAA,SAAAnO,GACA,OAAAA,GACA,IAAA,GACAhQ,KAAAgZ,MACA,MACA,KAAA,GACAhZ,KAAAgZ,KAAA,EACA,MACA,KAAA,GACAhZ,KAAAgZ,KAAAhZ,KAAA2d,SACA,MACA,KAAA,GACA,OAAA,CACA,GAAA,IAAA3N,EAAA,EAAAhQ,KAAA2d,UACA,KACA3d,MAAAme,SAAAnO,GAEA,KACA,KAAA,GACAhQ,KAAAgZ,KAAA,EACA,MAGA,SACA,KAAAxX,OAAA,qBAAAwO,EAAA,cAAAhQ,KAAAmG,KAEA,MAAAnG,OAGAmU,EAAAd,EAAA,SAAA+K,GACAhK,EAAAgK,CAEA,IAAAlf,GAAAN,EAAAF,KAAA,SAAA,UACAE,GAAAyf,MAAAlK,EAAAlQ,WAEAqa,MAAA,WACA,MAAArB,GAAA5e,KAAA2B,MAAAd,IAAA,IAGAqf,OAAA,WACA,MAAAtB,GAAA5e,KAAA2B,MAAAd,IAAA,IAGAsf,OAAA,WACA,MAAAvB,GAAA5e,KAAA2B,MAAAye,WAAAvf,IAAA,IAGAwf,QAAA,WACA,MAAArB,GAAAhf,KAAA2B,MAAAd,IAAA,IAGAyf,SAAA,WACA,MAAAtB,GAAAhf,KAAA2B,MAAAd,IAAA,mCClYA,QAAAkV,GAAAxT,GACAuT,EAAA9V,KAAA2B,KAAAY,GAhBA9B,EAAAR,QAAA8V,CAGA,IAAAD,GAAAnV,EAAA,KACAoV,EAAAnQ,UAAAf,OAAAoN,OAAA6D,EAAAlQ,YAAAuM,YAAA4D,CAEA,IAAAxV,GAAAI,EAAA,GAoBAJ,GAAA2e,SACAnJ,EAAAnQ,UAAAwZ,EAAA7e,EAAA2e,OAAAtZ,UAAAgG,OAKAmK,EAAAnQ,UAAA/D,OAAA,WACA,GAAAqK,GAAAvK,KAAA2d,QACA,OAAA3d,MAAAkG,IAAA0Y,UAAA5e,KAAAmG,IAAAnG,KAAAmG,IAAA7F,KAAAue,IAAA7e,KAAAmG,IAAAoE,EAAAvK,KAAAuK,yCCZA,QAAAkJ,GAAA/O,GACAmP,EAAAxV,KAAA2B,KAAA,GAAA0E,GAMA1E,KAAA8e,YAMA9e,KAAA+e,SA6BA,QAAAC,MAmMA,QAAAC,GAAAzL,EAAA/F,GACA,GAAAyR,GAAAzR,EAAA4E,OAAA8E,OAAA1J,EAAA0D,OACA,IAAA+N,EAAA,CACA,GAAAC,GAAA,GAAAjO,GAAAzD,EAAAO,SAAAP,EAAAnC,GAAAmC,EAAApC,KAAAoC,EAAAX,KAAAhP,EAAA2P,EAAA/I,QAIA,OAHAya,GAAAxN,eAAAlE,EACAA,EAAAiE,eAAAyN,EACAD,EAAAtO,IAAAuO,IACA,EAEA,OAAA,EA5QArgB,EAAAR,QAAAmV,CAGA,IAAAI,GAAA7U,EAAA,MACAyU,EAAAxP,UAAAf,OAAAoN,OAAAuD,EAAA5P,YAAAuM,YAAAiD,GAAAhD,UAAA,MAEA,IAKAoB,GACA8C,EACA9J,EAPAqG,EAAAlS,EAAA,IACA6O,EAAA7O,EAAA,IACA8U,EAAA9U,EAAA,IACAJ,EAAAI,EAAA,GAmCAyU,GAAA/C,SAAA,SAAA5F,EAAA0I,GAKA,MAJAA,KACAA,EAAA,GAAAC,IACA3I,EAAApG,SACA8O,EAAAoD,WAAA9L,EAAApG,SACA8O,EAAA4C,QAAAtL,EAAAE,SAWAyI,EAAAxP,UAAAmb,YAAAxgB,EAAAwK,KAAAzJ,QAaA8T,EAAAxP,UAAAsP,KAAA,QAAAA,GAAA9O,EAAAC,EAAAC,GAYA,QAAA0a,GAAAxf,EAAA2T,GAEA,GAAA7O,EAAA,CAEA,GAAA2a,GAAA3a,CAEA,IADAA,EAAA,KACA4a,EACA,KAAA1f,EACAyf,GAAAzf,EAAA2T,IAIA,QAAAgM,GAAA/a,EAAA5B,GACA,IAGA,GAFAjE,EAAAkS,SAAAjO,IAAA,MAAAA,EAAAxC,OAAA,KACAwC,EAAAc,KAAAgR,MAAA9R,IACAjE,EAAAkS,SAAAjO,GAEA,CACA8R,EAAAlQ,SAAAA,CACA,IACA0N,GADAsN,EAAA9K,EAAA9R,EAAAoV,EAAAvT,GAEArF,EAAA,CACA,IAAAogB,EAAAlD,QACA,KAAAld,EAAAogB,EAAAlD,QAAAhd,SAAAF,GACA8S,EAAA8F,EAAAmH,YAAA3a,EAAAgb,EAAAlD,QAAAld,MACAmF,EAAA2N,EACA,IAAAsN,EAAAjD,YACA,IAAAnd,EAAA,EAAAA,EAAAogB,EAAAjD,YAAAjd,SAAAF,GACA8S,EAAA8F,EAAAmH,YAAA3a,EAAAgb,EAAAjD,YAAAnd,MACAmF,EAAA2N,GAAA,OAbA8F,GAAArB,WAAA/T,EAAA6B,SAAA0R,QAAAvT,EAAAmI,QAeA,MAAAnL,GACAwf,EAAAxf,GAEA0f,GAAAG,GACAL,EAAA,KAAApH,GAIA,QAAAzT,GAAAC,EAAAkb,GAGA,GAAAC,GAAAnb,EAAAob,YAAA,mBACA,IAAAD,GAAA,EAAA,CACA,GAAAE,GAAArb,EAAA8T,UAAAqH,EACAE,KAAAjV,KACApG,EAAAqb,GAIA,KAAA7H,EAAA8G,MAAA7P,QAAAzK,IAAA,GAAA,CAKA,GAHAwT,EAAA8G,MAAAvf,KAAAiF,GAGAA,IAAAoG,GAUA,YATA0U,EACAC,EAAA/a,EAAAoG,EAAApG,OAEAib,EACAK,WAAA,aACAL,EACAF,EAAA/a,EAAAoG,EAAApG,OAOA,IAAA8a,EAAA,CACA,GAAA1c,EACA,KACAA,EAAAjE,EAAAiG,GAAAmb,aAAAvb,GAAAS,SAAA,QACA,MAAArF,GAGA,YAFA8f,GACAN,EAAAxf,IAGA2f,EAAA/a,EAAA5B,SAEA6c,EACA9gB,EAAA4F,MAAAC,EAAA,SAAA5E,EAAAgD,GAGA,KAFA6c,EAEA/a,EAEA,MAAA9E,QAEA8f,EAEAD,GACAL,EAAA,KAAApH,GAFAoH,EAAAxf,QAKA2f,GAAA/a,EAAA5B,MA1GA,kBAAA6B,KACAC,EAAAD,EACAA,EAAA5G,EAEA,IAAAma,GAAAjY,IACA,KAAA2E,EACA,MAAA/F,GAAAK,UAAAsU,EAAA0E,EAAAxT,EAAAC,EAEA,IAAA6a,GAAA5a,IAAAqa,EAsGAU,EAAA,CAIA9gB,GAAAkS,SAAArM,KACAA,GAAAA,GACA,KAAA,GAAA0N,GAAA9S,EAAA,EAAAA,EAAAoF,EAAAlF,SAAAF,GACA8S,EAAA8F,EAAAmH,YAAA,GAAA3a,EAAApF,MACAmF,EAAA2N,EAEA,OAAAoN,GACAtH,GACAyH,GACAL,EAAA,KAAApH,GACAna,IAiCA2V,EAAAxP,UAAAyP,SAAA,SAAAjP,EAAAC,GACA,IAAA9F,EAAAqhB,OACA,KAAAze,OAAA,gBACA,OAAAxB,MAAAuT,KAAA9O,EAAAC,EAAAsa,IAMAvL,EAAAxP,UAAAiT,WAAA,WACA,GAAAlX,KAAA8e,SAAAvf,OACA,KAAAiC,OAAA,4BAAAxB,KAAA8e,SAAAzb,IAAA,SAAAoK,GACA,MAAA,WAAAA,EAAA0D,OAAA,QAAA1D,EAAA4E,OAAArE,WACAtL,KAAA,MACA,OAAAmR,GAAA5P,UAAAiT,WAAA7Y,KAAA2B,MAIA,IAAAkgB,GAAA,QA4BAzM,GAAAxP,UAAA2T,EAAA,SAAAtC,GACA,GAAAA,YAAApE,GAEAoE,EAAAnE,SAAArT,GAAAwX,EAAA5D,gBACAuN,EAAAjf,KAAAsV,IACAtV,KAAA8e,SAAAtf,KAAA8V,OAEA,IAAAA,YAAAzH,GAEAqS,EAAAze,KAAA6T,EAAAnX,QACAmX,EAAAjD,OAAAiD,EAAAnX,MAAAmX,EAAA3I,YAEA,MAAA2I,YAAAxB,IAAA,CAEA,GAAAwB,YAAAzD,GACA,IAAA,GAAAxS,GAAA,EAAAA,EAAAW,KAAA8e,SAAAvf,QACA0f,EAAAjf,KAAAA,KAAA8e,SAAAzf,IACAW,KAAA8e,SAAAxa,OAAAjF,EAAA,KAEAA,CACA,KAAA,GAAA2B,GAAA,EAAAA,EAAAsU,EAAAgB,YAAA/W,SAAAyB,EACAhB,KAAA4X,EAAAtC,EAAAW,EAAAjV,GACAkf,GAAAze,KAAA6T,EAAAnX,QACAmX,EAAAjD,OAAAiD,EAAAnX,MAAAmX,KAcA7B,EAAAxP,UAAA4T,EAAA,SAAAvC,GACA,GAAAA,YAAApE,IAEA,GAAAoE,EAAAnE,SAAArT,EACA,GAAAwX,EAAA5D,eACA4D,EAAA5D,eAAAW,OAAApB,OAAAqE,EAAA5D,gBACA4D,EAAA5D,eAAA,SACA,CACA,GAAA1C,GAAAhP,KAAA8e,SAAA5P,QAAAoG,EAEAtG,IAAA,GACAhP,KAAA8e,SAAAxa,OAAA0K,EAAA,QAIA,IAAAsG,YAAAzH,GAEAqS,EAAAze,KAAA6T,EAAAnX,aACAmX,GAAAjD,OAAAiD,EAAAnX,UAEA,IAAAmX,YAAAzB,GAAA,CAEA,IAAA,GAAAxU,GAAA,EAAAA,EAAAiW,EAAAgB,YAAA/W,SAAAF,EACAW,KAAA6X,EAAAvC,EAAAW,EAAA5W,GAEA6gB,GAAAze,KAAA6T,EAAAnX,aACAmX,GAAAjD,OAAAiD,EAAAnX,QAKAsV,EAAAJ,EAAA,SAAAC,EAAA6M,EAAAC,GACAvO,EAAAyB,EACAqB,EAAAwL,EACAtV,EAAAuV,uDC5VAthB,EAAAR,oCCKAA,EA6BA0V,QAAAhV,EAAA,gCCMA,QAAAgV,GAAAqM,EAAAC,EAAAC,GAEA,GAAA,kBAAAF,GACA,KAAAjQ,WAAA,6BAEAxR,GAAAmF,aAAA1F,KAAA2B,MAMAA,KAAAqgB,QAAAA,EAMArgB,KAAAsgB,mBAAAA,EAMAtgB,KAAAugB,oBAAAA,EA/DAzhB,EAAAR,QAAA0V,CAEA,IAAApV,GAAAI,EAAA,KAGAgV,EAAA/P,UAAAf,OAAAoN,OAAA1R,EAAAmF,aAAAE,YAAAuM,YAAAwD,EAwEAA,EAAA/P,UAAAuc,QAAA,QAAAA,GAAApE,EAAAqE,EAAAC,EAAAC,EAAAhc,GAEA,IAAAgc,EACA,KAAAvQ,WAAA,4BAEA,IAAA6H,GAAAjY,IACA,KAAA2E,EACA,MAAA/F,GAAAK,UAAAuhB,EAAAvI,EAAAmE,EAAAqE,EAAAC,EAAAC,EAEA,KAAA1I,EAAAoI,QAEA,MADAN,YAAA,WAAApb,EAAAnD,MAAA,mBAAA,GACA1D,CAGA,KACA,MAAAma,GAAAoI,QACAjE,EACAqE,EAAAxI,EAAAqI,iBAAA,kBAAA,UAAAK,GAAAtB,SACA,SAAAxf,EAAA0F,GAEA,GAAA1F,EAEA,MADAoY,GAAA1T,KAAA,QAAA1E,EAAAuc,GACAzX,EAAA9E,EAGA,IAAA,OAAA0F,EAEA,MADA0S,GAAAnX,KAAA,GACAhD,CAGA,MAAAyH,YAAAmb,IACA,IACAnb,EAAAmb,EAAAzI,EAAAsI,kBAAA,kBAAA,UAAAhb,GACA,MAAA1F,GAEA,MADAoY,GAAA1T,KAAA,QAAA1E,EAAAuc,GACAzX,EAAA9E,GAKA,MADAoY,GAAA1T,KAAA,OAAAgB,EAAA6W,GACAzX,EAAA,KAAAY,KAGA,MAAA1F,GAGA,MAFAoY,GAAA1T,KAAA,QAAA1E,EAAAuc,GACA2D,WAAA,WAAApb,EAAA9E,IAAA,GACA/B,IASAkW,EAAA/P,UAAAnD,IAAA,SAAA8f,GAOA,MANA5gB,MAAAqgB,UACAO,GACA5gB,KAAAqgB,QAAA,KAAA,KAAA,MACArgB,KAAAqgB,QAAA,KACArgB,KAAAuE,KAAA,OAAAH,OAEApE,kCCxHA,QAAAgU,GAAA7V,EAAAuG,GACAmP,EAAAxV,KAAA2B,KAAA7B,EAAAuG,GAMA1E,KAAA0W,WAOA1W,KAAA6gB,EAAA,KAqDA,QAAA3K,GAAAgG,GAEA,MADAA,GAAA2E,EAAA,KACA3E,EAxFApd,EAAAR,QAAA0V,CAGA,IAAAH,GAAA7U,EAAA,MACAgV,EAAA/P,UAAAf,OAAAoN,OAAAuD,EAAA5P,YAAAuM,YAAAwD,GAAAvD,UAAA,SAEA,IAAAwD,GAAAjV,EAAA,IACAJ,EAAAI,EAAA,IACAuV,EAAAvV,EAAA,GA0CAgV,GAAAtD,SAAA,SAAAvS,EAAA2M,GACA,GAAAoR,GAAA,GAAAlI,GAAA7V,EAAA2M,EAAApG,QAEA,IAAAoG,EAAA4L,QACA,IAAA,GAAAD,GAAAvT,OAAAD,KAAA6H,EAAA4L,SAAArX,EAAA,EAAAA,EAAAoX,EAAAlX,SAAAF,EACA6c,EAAAtL,IAAAqD,EAAAvD,SAAA+F,EAAApX,GAAAyL,EAAA4L,QAAAD,EAAApX,KAGA,OAFAyL,GAAAE,QACAkR,EAAA9F,QAAAtL,EAAAE,QACAkR,GAOAlI,EAAA/P,UAAA0M,OAAA,WACA,GAAAmQ,GAAAjN,EAAA5P,UAAA0M,OAAAtS,KAAA2B,KACA,OAAApB,GAAA4P,UACA,UAAAsS,GAAAA,EAAApc,SAAA5G,EACA,UAAA+V,EAAAiC,YAAA9V,KAAA+gB,kBACA,SAAAD,GAAAA,EAAA9V,QAAAlN,KAUAoF,OAAA4O,eAAAkC,EAAA/P,UAAA,gBACA8N,IAAA,WACA,MAAA/R,MAAA6gB,IAAA7gB,KAAA6gB,EAAAjiB,EAAAyX,QAAArW,KAAA0W,aAYA1C,EAAA/P,UAAA8N,IAAA,SAAA5T,GACA,MAAA6B,MAAA0W,QAAAvY,IACA0V,EAAA5P,UAAA8N,IAAA1T,KAAA2B,KAAA7B,IAMA6V,EAAA/P,UAAAiT,WAAA,WAEA,IAAA,GADAR,GAAA1W,KAAA+gB,aACA1hB,EAAA,EAAAA,EAAAqX,EAAAnX,SAAAF,EACAqX,EAAArX,GAAAM,SACA,OAAAkU,GAAA5P,UAAAtE,QAAAtB,KAAA2B,OAMAgU,EAAA/P,UAAA2M,IAAA,SAAA0E,GAGA,GAAAtV,KAAA+R,IAAAuD,EAAAnX,MACA,KAAAqD,OAAA,mBAAA8T,EAAAnX,KAAA,QAAA6B,KAEA,OAAAsV,aAAArB,IACAjU,KAAA0W,QAAApB,EAAAnX,MAAAmX,EACAA,EAAAjD,OAAArS,KACAkW,EAAAlW,OAEA6T,EAAA5P,UAAA2M,IAAAvS,KAAA2B,KAAAsV,IAMAtB,EAAA/P,UAAAgN,OAAA,SAAAqE,GACA,GAAAA,YAAArB,GAAA,CAGA,GAAAjU,KAAA0W,QAAApB,EAAAnX,QAAAmX,EACA,KAAA9T,OAAA8T,EAAA,uBAAAtV,KAIA,cAFAA,MAAA0W,QAAApB,EAAAnX,MACAmX,EAAAjD,OAAA,KACA6D,EAAAlW,MAEA,MAAA6T,GAAA5P,UAAAgN,OAAA5S,KAAA2B,KAAAsV,IAUAtB,EAAA/P,UAAAqM,OAAA,SAAA+P,EAAAC,EAAAC,GAEA,IAAA,GADAS,GAAA,GAAAzM,GAAAP,QAAAqM,EAAAC,EAAAC,GACAlhB,EAAA,EAAAA,EAAAW,KAAA+gB,aAAAxhB,SAAAF,EACA2hB,EAAApiB,EAAA6c,QAAAzb,KAAA6gB,EAAAxhB,GAAAM,UAAAxB,OAAAS,EAAA8C,QAAA,IAAA,KAAA,kCAAAiB,IAAA/D,EAAA6c,QAAAzb,KAAA6gB,EAAAxhB,GAAAlB,OACA8iB,EAAAjhB,KAAA6gB,EAAAxhB,GACA6hB,EAAAlhB,KAAA6gB,EAAAxhB,GAAAsW,oBAAA/C,KACAuO,EAAAnhB,KAAA6gB,EAAAxhB,GAAAuW,qBAAAhD,MAGA,OAAAoO,kDCtIA,QAAAI,GAAA5e,GACA,MAAAA,GAAAC,QAAA4e,EAAA,SAAA7d,EAAAC,GACA,OAAAA,GACA,IAAA,KACA,IAAA,GACA,MAAAA,EACA,SACA,MAAA6d,GAAA7d,IAAA,MAuEA,QAAAiR,GAAA7R,GAsBA,QAAA6V,GAAA6I,GACA,MAAA/f,OAAA,WAAA+f,EAAA,UAAA3f,EAAA,KAQA,QAAAkX,KACA,GAAA0I,GAAA,MAAAC,EAAAC,EAAAC,CACAH,GAAAI,UAAAvgB,EAAA,CACA,IAAAwgB,GAAAL,EAAAM,KAAAjf,EACA,KAAAgf,EACA,KAAAnJ,GAAA,SAIA,OAHArX,GAAAmgB,EAAAI,UACApiB,EAAAiiB,GACAA,EAAA,KACAL,EAAAS,EAAA,IASA,QAAAxhB,GAAA8F,GACA,MAAAtD,GAAAxC,OAAA8F,GAUA,QAAA4b,GAAAlhB,EAAAC,GACAkhB,EAAAnf,EAAAxC,OAAAQ,KACAohB,EAAArgB,CAIA,KAAA,GAHAsgB,GAAArf,EACA0V,UAAA1X,EAAAC,GACA0I,MAAA2Y,GACA9iB,EAAA,EAAAA,EAAA6iB,EAAA3iB,SAAAF,EACA6iB,EAAA7iB,GAAA6iB,EAAA7iB,GAAAoD,QAAA2f,EAAA,IAAAC,MACAC,GAAAJ,EACAxf,KAAA,MACA2f,OAQA,QAAAtJ,KACA,GAAAwJ,EAAAhjB,OAAA,EACA,MAAAgjB,GAAA5Y,OACA,IAAA8X,EACA,MAAA3I,IACA,IAAA0J,GACAvgB,EACAwgB,EACA5hB,EACA6hB,CACA,GAAA,CACA,GAAArhB,IAAA9B,EACA,MAAA,KAEA,KADAijB,GAAA,EACAG,EAAAlhB,KAAAghB,EAAApiB,EAAAgB,KAGA,GAFA,OAAAohB,KACA7gB,IACAP,IAAA9B,EACA,MAAA,KAEA,IAAA,MAAAc,EAAAgB,GAAA,CACA,KAAAA,IAAA9B,EACA,KAAAmZ,GAAA,UACA,IAAA,MAAArY,EAAAgB,GAAA,CAEA,IADAqhB,EAAA,MAAAriB,EAAAQ,EAAAQ,EAAA,GACA,OAAAhB,IAAAgB,IACA,GAAAA,IAAA9B,EACA,MAAA,QACA8B,EACAqhB,GACAX,EAAAlhB,EAAAQ,EAAA,KACAO,EACA4gB,GAAA,MACA,CAAA,GAAA,OAAAC,EAAApiB,EAAAgB,IAeA,MAAA,GAdAqhB,GAAA,MAAAriB,EAAAQ,EAAAQ,EAAA,EACA,GAAA,CAGA,GAFA,OAAAohB,KACA7gB,IACAP,IAAA9B,EACA,KAAAmZ,GAAA,UACAzW,GAAAwgB,EACAA,EAAApiB,EAAAgB,SACA,MAAAY,GAAA,MAAAwgB,KACAphB,EACAqhB,GACAX,EAAAlhB,EAAAQ,EAAA,GACAmhB,GAAA,UAIAA,EAIA,IAAA1hB,GAAAO,CAGA,IAFAuhB,EAAAhB,UAAA,GACAgB,EAAAnhB,KAAApB,EAAAS,MAEA,KAAAA,EAAAvB,IAAAqjB,EAAAnhB,KAAApB,EAAAS,OACAA,CACA,IAAA6X,GAAA9V,EAAA0V,UAAAlX,EAAAA,EAAAP,EAGA,OAFA,MAAA6X,GAAA,MAAAA,IACA8I,EAAA9I,GACAA,EASA,QAAAnZ,GAAAmZ,GACA4J,EAAA/iB,KAAAmZ,GAQA,QAAAM,KACA,IAAAsJ,EAAAhjB,OAAA,CACA,GAAAoZ,GAAAI,GACA,IAAA,OAAAJ,EACA,MAAA,KACAnZ,GAAAmZ,GAEA,MAAA4J,GAAA,GAWA,QAAAvJ,GAAA6J,EAAA3S,GACA,GAAA4S,GAAA7J,GAEA,IADA6J,IAAAD,EAGA,MADA9J,MACA,CAEA,KAAA7I,EACA,KAAAwI,GAAA,UAAAoK,EAAA,OAAAD,EAAA,aACA,QAAA,EASA,QAAA/H,GAAAD,GACA,GAAAkI,EAUA,OATAlI,KAAA/c,EACAilB,EAAAd,IAAArgB,EAAA,GAAA0gB,GAAA,MAEAA,GACArJ,IACA8J,EAAAd,IAAApH,GAAA,MAAAmH,GAAAM,GAAA,MAEAN,EAAAM,EAAA,KACAL,EAAA,EACAc,EA5MAlgB,EAAAA,GAAAA,CAEA,IAAAxB,GAAA,EACA9B,EAAAsD,EAAAtD,OACAqC,EAAA,EACAogB,EAAA,KACAM,EAAA,KACAL,EAAA,EAEAM,KAEAd,EAAA,IAoMA,QACA1I,KAAAA,EACAE,KAAAA,EACAzZ,KAAAA,EACAwZ,KAAAA,EACApX,KAAA,WACA,MAAAA,IAEAkZ,KAAAA,GAhUAhc,EAAAR,QAAAoW,CAEA,IAAAkO,GAAA,uBACAjB,EAAA,kCACAD,EAAA,kCAEAU,EAAA,cACAD,EAAA,MACAQ,EAAA,KACAtB,EAAA,UAEAC,GACA0B,EAAA,KACAC,EAAA,KACA7iB,EAAA,KACAW,EAAA,KAsBA2T,GAAA0M,SAAAA,yBCRA,QAAAvP,GAAA1T,EAAAuG,GACAmP,EAAAxV,KAAA2B,KAAA7B,EAAAuG,GAMA1E,KAAAmL,UAMAnL,KAAAiM,OAAAnO,EAMAkC,KAAAmb,WAAArd,EAMAkC,KAAAob,SAAAtd,EAMAkC,KAAAsP,MAAAxR,EAOAkC,KAAAkjB,EAAA,KAOAljB,KAAAiP,EAAA,KAOAjP,KAAAmjB,EAAA,KAOAnjB,KAAAojB,EAAA,KA0HA,QAAAlN,GAAA7K,GAKA,MAJAA,GAAA6X,EAAA7X,EAAA4D,EAAA5D,EAAA8X,EAAA,WACA9X,GAAA1K,aACA0K,GAAAjK,aACAiK,GAAAgK,OACAhK,EAvNAvM,EAAAR,QAAAuT,CAGA,IAAAgC,GAAA7U,EAAA,MACA6S,EAAA5N,UAAAf,OAAAoN,OAAAuD,EAAA5P,YAAAuM,YAAAqB,GAAApB,UAAA,MAEA,IAAA5C,GAAA7O,EAAA,IACA8U,EAAA9U,EAAA,IACAkS,EAAAlS,EAAA,IACA+U,EAAA/U,EAAA,IACAgV,EAAAhV,EAAA,IACAkV,EAAAlV,EAAA,IACAmV,EAAAnV,EAAA,IACAqV,EAAArV,EAAA,IACAJ,EAAAI,EAAA,IACA+Q,EAAA/Q,EAAA,IACAoQ,EAAApQ,EAAA,IACA4U,EAAA5U,EAAA,IACAmP,EAAAnP,EAAA,IACAyV,EAAAzV,EAAA,GAwEAkE,QAAAwU,iBAAA7F,EAAA5N,WAQAof,YACAtR,IAAA,WAGA,GAAA/R,KAAAkjB,EACA,MAAAljB,MAAAkjB,CAEAljB,MAAAkjB,IACA,KAAA,GAAAzM,GAAAvT,OAAAD,KAAAjD,KAAAmL,QAAA9L,EAAA,EAAAA,EAAAoX,EAAAlX,SAAAF,EAAA,CACA,GAAAoO,GAAAzN,KAAAmL,OAAAsL,EAAApX,IACAiM,EAAAmC,EAAAnC,EAGA,IAAAtL,KAAAkjB,EAAA5X,GACA,KAAA9J,OAAA,gBAAA8J,EAAA,OAAAtL,KAEAA,MAAAkjB,EAAA5X,GAAAmC,EAEA,MAAAzN,MAAAkjB,IAUA5U,aACAyD,IAAA,WACA,MAAA/R,MAAAiP,IAAAjP,KAAAiP,EAAArQ,EAAAyX,QAAArW,KAAAmL,WAUAmY,aACAvR,IAAA,WACA,MAAA/R,MAAAmjB,IAAAnjB,KAAAmjB,EAAAvkB,EAAAyX,QAAArW,KAAAiM,WAUA2G,MACAb,IAAA,WACA,MAAA/R,MAAAojB,IAAApjB,KAAA4S,KAAAf,EAAA0R,oBAAAvjB,MAAA2C,IAAA3C,KAAA7B,QAEAia,IAAA,SAAAxF,GAGA,GAAA3O,GAAA2O,EAAA3O,SACAA,aAAAiQ,MACAtB,EAAA3O,UAAA,GAAAiQ,IAAA1D,YAAAoC,EACAhU,EAAAyf,MAAAzL,EAAA3O,UAAAA,IAIA2O,EAAAoC,MAAApC,EAAA3O,UAAA+Q,MAAAhV,KAGApB,EAAAyf,MAAAzL,EAAAsB,GAAA,GAEAlU,KAAAojB,EAAAxQ,CAIA,KADA,GAAAvT,GAAA,EACAA,EAAAW,KAAAsO,YAAA/O,SAAAF,EACAW,KAAAiP,EAAA5P,GAAAM,SAGA,IAAA6jB,KACA,KAAAnkB,EAAA,EAAAA,EAAAW,KAAAsjB,YAAA/jB,SAAAF,EACAmkB,EAAAxjB,KAAAmjB,EAAA9jB,GAAAM,UAAAxB,OACA4T,IAAAnT,EAAAuZ,YAAAnY,KAAAmjB,EAAA9jB,GAAA8M,OACAiM,IAAAxZ,EAAAyZ,YAAArY,KAAAmjB,EAAA9jB,GAAA8M,OAEA9M,IACA6D,OAAAwU,iBAAA9E,EAAA3O,UAAAuf,OAUA3R,EAAA0R,oBAAA,SAAAlY,GAIA,IAAA,GAAAoC,GAFA9L,EAAA/C,EAAA8C,QAAA,KAEArC,EAAA,EAAAA,EAAAgM,EAAAiD,YAAA/O,SAAAF,GACAoO,EAAApC,EAAA4D,EAAA5P,IAAAgE,IAAA1B,EACA,YAAA/C,EAAA2P,SAAAd,EAAAtP,OACAsP,EAAAK,UAAAnM,EACA,YAAA/C,EAAA2P,SAAAd,EAAAtP,MACA,OAAAwD,GACA,yEACA,yBA6BAkQ,EAAAnB,SAAA,SAAAvS,EAAA2M,GACA,GAAAO,GAAA,GAAAwG,GAAA1T,EAAA2M,EAAApG,QACA2G,GAAA8P,WAAArQ,EAAAqQ,WACA9P,EAAA+P,SAAAtQ,EAAAsQ,QAGA,KAFA,GAAA3E,GAAAvT,OAAAD,KAAA6H,EAAAK,QACA9L,EAAA,EACAA,EAAAoX,EAAAlX,SAAAF,EACAgM,EAAAuF,KACA,IAAA9F,EAAAK,OAAAsL,EAAApX,IAAA0M,QACAgI,EAAArD,SACAQ,EAAAR,UAAA+F,EAAApX,GAAAyL,EAAAK,OAAAsL,EAAApX,KAEA,IAAAyL,EAAAmB,OACA,IAAAwK,EAAAvT,OAAAD,KAAA6H,EAAAmB,QAAA5M,EAAA,EAAAA,EAAAoX,EAAAlX,SAAAF,EACAgM,EAAAuF,IAAAkD,EAAApD,SAAA+F,EAAApX,GAAAyL,EAAAmB,OAAAwK,EAAApX,KACA,IAAAyL,EAAAE,OACA,IAAAyL,EAAAvT,OAAAD,KAAA6H,EAAAE,QAAA3L,EAAA,EAAAA,EAAAoX,EAAAlX,SAAAF,EAAA,CACA,GAAA2L,GAAAF,EAAAE,OAAAyL,EAAApX,GACAgM,GAAAuF,KACA5F,EAAAM,KAAAxN,EACAoT,EAAAR,SACA1F,EAAAG,SAAArN,EACA+T,EAAAnB,SACA1F,EAAA2B,SAAA7O,EACA+P,EAAA6C,SACA1F,EAAA0L,UAAA5Y,EACAkW,EAAAtD,SACAmD,EAAAnD,UAAA+F,EAAApX,GAAA2L,IASA,MANAF,GAAAqQ,YAAArQ,EAAAqQ,WAAA5b,SACA8L,EAAA8P,WAAArQ,EAAAqQ,YACArQ,EAAAsQ,UAAAtQ,EAAAsQ,SAAA7b,SACA8L,EAAA+P,SAAAtQ,EAAAsQ,UACAtQ,EAAAwE,QACAjE,EAAAiE,OAAA,GACAjE,GAOAwG,EAAA5N,UAAA0M,OAAA,WACA,GAAAmQ,GAAAjN,EAAA5P,UAAA0M,OAAAtS,KAAA2B,KACA,OAAApB,GAAA4P,UACA,UAAAsS,GAAAA,EAAApc,SAAA5G,EACA,SAAA+V,EAAAiC,YAAA9V,KAAAsjB,aACA,SAAAzP,EAAAiC,YAAA9V,KAAAsO,YAAAe,OAAA,SAAA2G,GAAA,OAAAA,EAAArE,sBACA,aAAA3R,KAAAmb,YAAAnb,KAAAmb,WAAA5b,OAAAS,KAAAmb,WAAArd,EACA,WAAAkC,KAAAob,UAAApb,KAAAob,SAAA7b,OAAAS,KAAAob,SAAAtd,EACA,QAAAkC,KAAAsP,OAAAxR,EACA,SAAAgjB,GAAAA,EAAA9V,QAAAlN,KAOA+T,EAAA5N,UAAAiT,WAAA,WAEA,IADA,GAAA/L,GAAAnL,KAAAsO,YAAAjP,EAAA,EACAA,EAAA8L,EAAA5L,QACA4L,EAAA9L,KAAAM,SACA,IAAAsM,GAAAjM,KAAAsjB,WACA,KADAjkB,EAAA,EACAA,EAAA4M,EAAA1M,QACA0M,EAAA5M,KAAAM,SACA,OAAAkU,GAAA5P,UAAAiT,WAAA7Y,KAAA2B,OAMA6R,EAAA5N,UAAA8N,IAAA,SAAA5T,GACA,MAAA6B,MAAAmL,OAAAhN,IACA6B,KAAAiM,QAAAjM,KAAAiM,OAAA9N,IACA6B,KAAAgL,QAAAhL,KAAAgL,OAAA7M,IACA,MAUA0T,EAAA5N,UAAA2M,IAAA,SAAA0E,GAEA,GAAAtV,KAAA+R,IAAAuD,EAAAnX,MACA,KAAAqD,OAAA,mBAAA8T,EAAAnX,KAAA,QAAA6B,KAEA,IAAAsV,YAAApE,IAAAoE,EAAAnE,SAAArT,EAAA,CAMA,GAAAkC,KAAAkjB,EAAAljB,KAAAkjB,EAAA5N,EAAAhK,IAAAtL,KAAAqjB,WAAA/N,EAAAhK,IACA,KAAA9J,OAAA,gBAAA8T,EAAAhK,GAAA,OAAAtL,KACA,IAAAA,KAAAyjB,aAAAnO,EAAAhK,IACA,KAAA9J,OAAA,MAAA8T,EAAAhK,GAAA,mBAAAtL,KACA,IAAAA,KAAA0jB,eAAApO,EAAAnX,MACA,KAAAqD,OAAA,SAAA8T,EAAAnX,KAAA,oBAAA6B,KAOA,OALAsV,GAAAjD,QACAiD,EAAAjD,OAAApB,OAAAqE,GACAtV,KAAAmL,OAAAmK,EAAAnX,MAAAmX,EACAA,EAAA/D,QAAAvR,KACAsV,EAAAuB,MAAA7W,MACAkW,EAAAlW,MAEA,MAAAsV,aAAAxB,IACA9T,KAAAiM,SACAjM,KAAAiM,WACAjM,KAAAiM,OAAAqJ,EAAAnX,MAAAmX,EACAA,EAAAuB,MAAA7W,MACAkW,EAAAlW,OAEA6T,EAAA5P,UAAA2M,IAAAvS,KAAA2B,KAAAsV,IAUAzD,EAAA5N,UAAAgN,OAAA,SAAAqE,GACA,GAAAA,YAAApE,IAAAoE,EAAAnE,SAAArT,EAAA,CAIA,IAAAkC,KAAAmL,QAAAnL,KAAAmL,OAAAmK,EAAAnX,QAAAmX,EACA,KAAA9T,OAAA8T,EAAA,uBAAAtV,KAKA,cAHAA,MAAAmL,OAAAmK,EAAAnX,MACAmX,EAAAjD,OAAA,KACAiD,EAAAwB,SAAA9W,MACAkW,EAAAlW,MAEA,GAAAsV,YAAAxB,GAAA,CAGA,IAAA9T,KAAAiM,QAAAjM,KAAAiM,OAAAqJ,EAAAnX,QAAAmX,EACA,KAAA9T,OAAA8T,EAAA,uBAAAtV,KAKA,cAHAA,MAAAiM,OAAAqJ,EAAAnX,MACAmX,EAAAjD,OAAA,KACAiD,EAAAwB,SAAA9W,MACAkW,EAAAlW,MAEA,MAAA6T,GAAA5P,UAAAgN,OAAA5S,KAAA2B,KAAAsV,IAQAzD,EAAA5N,UAAAwf,aAAA,SAAAnY,GACA,GAAAtL,KAAAob,SACA,IAAA,GAAA/b,GAAA,EAAAA,EAAAW,KAAAob,SAAA7b,SAAAF,EACA,GAAA,gBAAAW,MAAAob,SAAA/b,IAAAW,KAAAob,SAAA/b,GAAA,IAAAiM,GAAAtL,KAAAob,SAAA/b,GAAA,IAAAiM,EACA,OAAA,CACA,QAAA,GAQAuG,EAAA5N,UAAAyf,eAAA,SAAAvlB,GACA,GAAA6B,KAAAob,SACA,IAAA,GAAA/b,GAAA,EAAAA,EAAAW,KAAAob,SAAA7b,SAAAF,EACA,GAAAW,KAAAob,SAAA/b,KAAAlB,EACA,OAAA,CACA,QAAA,GAQA0T,EAAA5N,UAAAqM,OAAA,SAAAyE,GACA,MAAA,IAAA/U,MAAA4S,KAAAmC,IAOAlD,EAAA5N,UAAA0f,MAAA,WAMA,IAAA,GAFA3V,GAAAhO,KAAAgO,SACAwB,KACAnQ,EAAA,EAAAA,EAAAW,KAAAsO,YAAA/O,SAAAF,EACAmQ,EAAAhQ,KAAAQ,KAAAiP,EAAA5P,GAAAM,UAAAiO,aAGA5N,MAAAW,OAAAoP,EAAA/P,MAAA2C,IAAAqL,EAAA,WACAqG,OAAAA,EACA7E,MAAAA,EACA5Q,KAAAA,IAEAoB,KAAAoB,OAAAgO,EAAApP,MAAA2C,IAAAqL,EAAA,WACAmG,OAAAA,EACA3E,MAAAA,EACA5Q,KAAAA,IAEAoB,KAAAqV,OAAAzB,EAAA5T,MAAA2C,IAAAqL,EAAA,WACAwB,MAAAA,EACA5Q,KAAAA,IAEAoB,KAAAoO,WAAAD,EAAAC,WAAApO,MAAA2C,IAAAqL,EAAA,eACAwB,MAAAA,EACA5Q,KAAAA,IAEAoB,KAAAwO,SAAAL,EAAAK,SAAAxO,MAAA2C,IAAAqL,EAAA,aACAwB,MAAAA,EACA5Q,KAAAA,GAIA,IAAAglB,GAAAnP,EAAAzG,EACA,IAAA4V,EAAA,CACA,GAAAC,GAAA3gB,OAAAoN,OAAAtQ,KAEA6jB,GAAAzV,WAAApO,KAAAoO,WACApO,KAAAoO,WAAAwV,EAAAxV,WAAAxG,KAAAic,GAGAA,EAAArV,SAAAxO,KAAAwO,SACAxO,KAAAwO,SAAAoV,EAAApV,SAAA5G,KAAAic,GAIA,MAAA7jB,OASA6R,EAAA5N,UAAAtD,OAAA,SAAA4Q,EAAA0D,GACA,MAAAjV,MAAA2jB,QAAAhjB,OAAA4Q,EAAA0D,IASApD,EAAA5N,UAAAiR,gBAAA,SAAA3D,EAAA0D,GACA,MAAAjV,MAAAW,OAAA4Q,EAAA0D,GAAAA,EAAA1K,IAAA0K,EAAA6O,OAAA7O,GAAA8O,UAWAlS,EAAA5N,UAAA7C,OAAA,SAAA+T,EAAA5V,GACA,MAAAS,MAAA2jB,QAAAviB,OAAA+T,EAAA5V,IAUAsS,EAAA5N,UAAAmR,gBAAA,SAAAD,GAGA,MAFAA,aAAAhB,KACAgB,EAAAhB,EAAA7D,OAAA6E,IACAnV,KAAAoB,OAAA+T,EAAAA,EAAAwI,WAQA9L,EAAA5N,UAAAoR,OAAA,SAAA9D,GACA,MAAAvR,MAAA2jB,QAAAtO,OAAA9D,IAQAM,EAAA5N,UAAAmK,WAAA,SAAAkH,GACA,MAAAtV,MAAA2jB,QAAAvV,WAAAkH,IA4BAzD,EAAA5N,UAAAuK,SAAA,SAAA+C,EAAA7M,GACA,MAAA1E,MAAA2jB,QAAAnV,SAAA+C,EAAA7M,IAkBAmN,EAAAgB,EAAA,SAAAmR,GACA,MAAA,UAAAzK,GACA3a,EAAAqU,aAAAsG,EAAAyK,uHCjjBA,QAAAC,GAAAtX,EAAAtL,GACA,GAAAhC,GAAA,EAAA6kB,IAEA,KADA7iB,GAAA,EACAhC,EAAAsN,EAAApN,QAAA2kB,EAAA/C,EAAA9hB,EAAAgC,IAAAsL,EAAAtN,IACA,OAAA6kB,GA1BA,GAAA1U,GAAAlR,EAEAM,EAAAI,EAAA,IAEAmiB,GACA,SACA,QACA,QACA,SACA,SACA,UACA,WACA,QACA,SACA,SACA,UACA,WACA,OACA,SACA,QA8BA3R,GAAAE,MAAAuU,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAwBAzU,EAAA4C,SAAA6R,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACArlB,EAAA+T,WACA,OAaAnD,EAAAC,KAAAwU,GACA,EACA,EACA,EACA,EACA,GACA,GAmBAzU,EAAAS,OAAAgU,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GAoBAzU,EAAAG,OAAAsU,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,gCC5LA,GAIApS,GACAhE,EALAjP,EAAAE,EAAAR,QAAAU,EAAA,IAEAwV,EAAAxV,EAAA,GAKAJ,GAAA8C,QAAA1C,EAAA,GACAJ,EAAA4F,MAAAxF,EAAA,GACAJ,EAAAwK,KAAApK,EAAA,GAMAJ,EAAAiG,GAAAjG,EAAAuG,QAAA,MAOAvG,EAAAyX,QAAA,SAAAf,GACA,GAAAS,KACA,IAAAT,EACA,IAAA,GAAArS,GAAAC,OAAAD,KAAAqS,GAAAjW,EAAA,EAAAA,EAAA4D,EAAA1D,SAAAF,EACA0W,EAAAvW,KAAA8V,EAAArS,EAAA5D,IACA,OAAA0W,IAQAnX,EAAA4P,SAAA,SAAAuH,GAEA,IAAA,GADAT,MACAjW,EAAA,EAAAA,EAAA0W,EAAAxW,OAAAF,GAAA,EAAA,CACA,GAAAiE,GAAAyS,EAAA1W,GACA4G,EAAA8P,EAAA1W,EAAA,EACA4G,KAAAnI,IACAwX,EAAAhS,GAAA2C,GAEA,MAAAqP,GAWA1W,GAAA2P,SAAA,SAAAZ,GACA,MAAA,KAAAA,EAAAlL,QATA,MASA,QAAAA,QARA,KAQA,OAAA,MAQA7D,EAAA8c,QAAA,SAAAlZ,GACA,MAAAA,GAAAnC,OAAA,GAAAoY,cAAAjW,EAAA+V,UAAA,IASA3Z,EAAA8P,kBAAA,SAAAyV,EAAAljB,GACA,MAAAkjB,GAAA7Y,GAAArK,EAAAqK,IAWA1M,EAAAqU,aAAA,SAAAL,EAAAoR,GAGA,GAAApR,EAAAoC,MAMA,MALAgP,IAAApR,EAAAoC,MAAA7W,OAAA6lB,IACAplB,EAAAwlB,aAAAnT,OAAA2B,EAAAoC,OACApC,EAAAoC,MAAA7W,KAAA6lB,EACAplB,EAAAwlB,aAAAxT,IAAAgC,EAAAoC,QAEApC,EAAAoC,KAIAnD,KACAA,EAAA7S,EAAA,IAEA,IAAAqM,GAAA,GAAAwG,GAAAmS,GAAApR,EAAAzU,KAKA,OAJAS,GAAAwlB,aAAAxT,IAAAvF,GACAA,EAAAuH,KAAAA,EACA1P,OAAA4O,eAAAc,EAAA,SAAArH,MAAAF,EAAAgZ,YAAA,IACAnhB,OAAA4O,eAAAc,EAAA3O,UAAA,SAAAsH,MAAAF,EAAAgZ,YAAA,IACAhZ,EAGA,IAAAiZ,GAAA,CAOA1lB,GAAAsU,aAAA,SAAAoC,GAGA,GAAAA,EAAAN,MACA,MAAAM,GAAAN,KAGAnH,KACAA,EAAA7O,EAAA,IAEA,IAAA4c,GAAA,GAAA/N,GAAA,OAAAyW,IAAAhP,EAGA,OAFA1W,GAAAwlB,aAAAxT,IAAAgL,GACA1Y,OAAA4O,eAAAwD,EAAA,SAAA/J,MAAAqQ,EAAAyI,YAAA,IACAzI,GASA1Y,OAAA4O,eAAAlT,EAAA,gBACAmT,IAAA,WACA,MAAAyC,GAAA,YAAAA,EAAA,UAAA,IAAAxV,EAAA,yECrIA,QAAAme,GAAApU,EAAAC,GASAhJ,KAAA+I,GAAAA,IAAA,EAMA/I,KAAAgJ,GAAAA,IAAA,EA3BAlK,EAAAR,QAAA6e,CAEA,IAAAve,GAAAI,EAAA,IAiCAulB,EAAApH,EAAAoH,KAAA,GAAApH,GAAA,EAAA,EAEAoH,GAAAC,SAAA,WAAA,MAAA,IACAD,EAAAE,SAAAF,EAAA9F,SAAA,WAAA,MAAAze,OACAukB,EAAAhlB,OAAA,WAAA,MAAA,GAOA,IAAAmlB,GAAAvH,EAAAuH,SAAA,kBAOAvH,GAAA5K,WAAA,SAAAhH,GACA,GAAA,IAAAA,EACA,MAAAgZ,EACA,IAAAvd,GAAAuE,EAAA,CACAvE,KACAuE,GAAAA,EACA,IAAAxC,GAAAwC,IAAA,EACAvC,GAAAuC,EAAAxC,GAAA,aAAA,CAUA,OATA/B,KACAgC,GAAAA,IAAA,EACAD,GAAAA,IAAA,IACAA,EAAA,aACAA,EAAA,IACAC,EAAA,aACAA,EAAA,KAGA,GAAAmU,GAAApU,EAAAC,IAQAmU,EAAAwH,KAAA,SAAApZ,GACA,GAAA,gBAAAA,GACA,MAAA4R,GAAA5K,WAAAhH,EACA,IAAA3M,EAAAkS,SAAAvF,GAAA,CAEA,IAAA3M,EAAAF,KAGA,MAAAye,GAAA5K,WAAAoH,SAAApO,EAAA,IAFAA,GAAA3M,EAAAF,KAAAkmB,WAAArZ,GAIA,MAAAA,GAAAsZ,KAAAtZ,EAAAuZ,KAAA,GAAA3H,GAAA5R,EAAAsZ,MAAA,EAAAtZ,EAAAuZ,OAAA,GAAAP,GAQApH,EAAAlZ,UAAAugB,SAAA,SAAAO,GACA,IAAAA,GAAA/kB,KAAAgJ,KAAA,GAAA,CACA,GAAAD,GAAA,GAAA/I,KAAA+I,KAAA,EACAC,GAAAhJ,KAAAgJ,KAAA,CAGA,OAFAD,KACAC,EAAAA,EAAA,IAAA,KACAD,EAAA,WAAAC,GAEA,MAAAhJ,MAAA+I,GAAA,WAAA/I,KAAAgJ,IAQAmU,EAAAlZ,UAAA+gB,OAAA,SAAAD,GACA,MAAAnmB,GAAAF,KACA,GAAAE,GAAAF,KAAA,EAAAsB,KAAA+I,GAAA,EAAA/I,KAAAgJ,KAAA+b,IAEAF,IAAA,EAAA7kB,KAAA+I,GAAA+b,KAAA,EAAA9kB,KAAAgJ,GAAA+b,WAAAA,GAGA,IAAAxjB,GAAAL,OAAA+C,UAAA1C,UAOA4b,GAAA8H,SAAA,SAAAC,GACA,MAAAA,KAAAR,EACAH,EACA,GAAApH,IACA5b,EAAAlD,KAAA6mB,EAAA,GACA3jB,EAAAlD,KAAA6mB,EAAA,IAAA,EACA3jB,EAAAlD,KAAA6mB,EAAA,IAAA,GACA3jB,EAAAlD,KAAA6mB,EAAA,IAAA,MAAA,GAEA3jB,EAAAlD,KAAA6mB,EAAA,GACA3jB,EAAAlD,KAAA6mB,EAAA,IAAA,EACA3jB,EAAAlD,KAAA6mB,EAAA,IAAA,GACA3jB,EAAAlD,KAAA6mB,EAAA,IAAA,MAAA,IAQA/H,EAAAlZ,UAAAkhB,OAAA,WACA,MAAAjkB,QAAAC,aACA,IAAAnB,KAAA+I,GACA/I,KAAA+I,KAAA,EAAA,IACA/I,KAAA+I,KAAA,GAAA,IACA/I,KAAA+I,KAAA,GACA,IAAA/I,KAAAgJ,GACAhJ,KAAAgJ,KAAA,EAAA,IACAhJ,KAAAgJ,KAAA,GAAA,IACAhJ,KAAAgJ,KAAA,KAQAmU,EAAAlZ,UAAAwgB,SAAA,WACA,GAAAW,GAAAplB,KAAAgJ,IAAA,EAGA,OAFAhJ,MAAAgJ,KAAAhJ,KAAAgJ,IAAA,EAAAhJ,KAAA+I,KAAA,IAAAqc,KAAA,EACAplB,KAAA+I,IAAA/I,KAAA+I,IAAA,EAAAqc,KAAA,EACAplB,MAOAmd,EAAAlZ,UAAAwa,SAAA,WACA,GAAA2G,KAAA,EAAAplB,KAAA+I,GAGA,OAFA/I,MAAA+I,KAAA/I,KAAA+I,KAAA,EAAA/I,KAAAgJ,IAAA,IAAAoc,KAAA,EACAplB,KAAAgJ,IAAAhJ,KAAAgJ,KAAA,EAAAoc,KAAA,EACAplB,MAOAmd,EAAAlZ,UAAA1E,OAAA,WACA,GAAA8lB,GAAArlB,KAAA+I,GACAuc,GAAAtlB,KAAA+I,KAAA,GAAA/I,KAAAgJ,IAAA,KAAA,EACAuc,EAAAvlB,KAAAgJ,KAAA,EACA,OAAA,KAAAuc,EACA,IAAAD,EACAD,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,QAAA,EAAA,EACAC,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,QAAA,EAAA,EACAC,EAAA,IAAA,EAAA,kCCqCA,QAAAlH,GAAAmH,EAAAxjB,EAAAkQ,GACA,IAAA,GAAAjP,GAAAC,OAAAD,KAAAjB,GAAA3C,EAAA,EAAAA,EAAA4D,EAAA1D,SAAAF,EACAmmB,EAAAviB,EAAA5D,MAAAvB,GAAAoU,IACAsT,EAAAviB,EAAA5D,IAAA2C,EAAAiB,EAAA5D,IACA,OAAAmmB,GAoBA,QAAAC,GAAAtnB,GAEA,QAAAunB,GAAAnU,EAAAwD,GAEA,KAAA/U,eAAA0lB,IACA,MAAA,IAAAA,GAAAnU,EAAAwD,EAKA7R,QAAA4O,eAAA9R,KAAA,WAAA+R,IAAA,WAAA,MAAAR,MAGA/P,MAAAmkB,kBACAnkB,MAAAmkB,kBAAA3lB,KAAA0lB,GAEAxiB,OAAA4O,eAAA9R,KAAA,SAAAuL,MAAA/J,QAAA+gB,OAAA,KAEAxN,GACAsJ,EAAAre,KAAA+U,GAWA,OARA2Q,EAAAzhB,UAAAf,OAAAoN,OAAA9O,MAAAyC,YAAAuM,YAAAkV,EAEAxiB,OAAA4O,eAAA4T,EAAAzhB,UAAA,QAAA8N,IAAA,WAAA,MAAA5T,MAEAunB,EAAAzhB,UAAAiB,SAAA,WACA,MAAAlF,MAAA7B,KAAA,KAAA6B,KAAAuR,SAGAmU,EAhSA,GAAA9mB,GAAAN,CAGAM,GAAAK,UAAAD,EAAA,GAGAJ,EAAAqB,OAAAjB,EAAA,GAGAJ,EAAAmF,aAAA/E,EAAA,GAGAJ,EAAAqf,MAAAjf,EAAA,GAGAJ,EAAAuG,QAAAnG,EAAA,GAGAJ,EAAA0L,KAAAtL,EAAA,IAGAJ,EAAAmL,KAAA/K,EAAA,GAGAJ,EAAAue,SAAAne,EAAA,IAQAJ,EAAA+T,WAAAzP,OAAAsP,OAAAtP,OAAAsP,cAOA5T,EAAA8T,YAAAxP,OAAAsP,OAAAtP,OAAAsP,cAQA5T,EAAAqhB,UAAApiB,EAAA2hB,SAAA3hB,EAAA2hB,QAAAoG,UAAA/nB,EAAA2hB,QAAAoG,SAAAC,MAQAjnB,EAAAmS,UAAA+U,OAAA/U,WAAA,SAAAxF,GACA,MAAA,gBAAAA,IAAAwa,SAAAxa,IAAAjL,KAAAoD,MAAA6H,KAAAA,GAQA3M,EAAAkS,SAAA,SAAAvF,GACA,MAAA,gBAAAA,IAAAA,YAAArK,SAQAtC,EAAAwS,SAAA,SAAA7F,GACA,MAAAA,IAAA,gBAAAA,IAWA3M,EAAAonB,MAQApnB,EAAAqnB,MAAA,SAAAjQ,EAAArI,GACA,GAAApC,GAAAyK,EAAArI,EACA,SAAA,MAAApC,IAAAyK,EAAAkQ,eAAAvY,MACA,gBAAApC,KAAA9K,MAAAsW,QAAAxL,GAAAA,EAAAhM,OAAA2D,OAAAD,KAAAsI,GAAAhM,QAAA,IAeAX,EAAA2e,OAAA,WACA,IACA,GAAAA,GAAA3e,EAAAuG,QAAA,UAAAoY,MAEA,OAAAA,GAAAtZ,UAAAkiB,UAAA5I,EAAA,KACA,MAAAzZ,GAEA,MAAA,UAYAlF,EAAAwnB,EAAA,KASAxnB,EAAAynB,EAAA,KAOAznB,EAAA6T,UAAA,SAAA6T,GAEA,MAAA,gBAAAA,GACA1nB,EAAA2e,OACA3e,EAAAynB,EAAAC,GACA,GAAA1nB,GAAA6B,MAAA6lB,GACA1nB,EAAA2e,OACA3e,EAAAwnB,EAAAE,GACA,mBAAA7gB,YACA6gB,EACA,GAAA7gB,YAAA6gB,IAOA1nB,EAAA6B,MAAA,mBAAAgF,YAAAA,WAAAhF,MAgBA7B,EAAAF,KAAAb,EAAA0oB,SAAA1oB,EAAA0oB,QAAA7nB,MAAAE,EAAAuG,QAAA,QAOAvG,EAAA4nB,OAAA,mBAOA5nB,EAAA6nB,QAAA,wBAOA7nB,EAAA8nB,QAAA,6CAOA9nB,EAAA+nB,WAAA,SAAApb,GACA,MAAAA,GACA3M,EAAAue,SAAAwH,KAAApZ,GAAA4Z,SACAvmB,EAAAue,SAAAuH,UASA9lB,EAAAgoB,aAAA,SAAA1B,EAAAH,GACA,GAAA7H,GAAAte,EAAAue,SAAA8H,SAAAC,EACA,OAAAtmB,GAAAF,KACAE,EAAAF,KAAAmoB,SAAA3J,EAAAnU,GAAAmU,EAAAlU,GAAA+b,GACA7H,EAAAsH,WAAAO,IAkBAnmB,EAAAyf,MAAAA,EAOAzf,EAAA6c,QAAA,SAAAjZ,GACA,MAAAA,GAAAnC,OAAA,GAAAiR,cAAA9O,EAAA+V,UAAA,IA0CA3Z,EAAA6mB,SAAAA,EAmBA7mB,EAAAkoB,cAAArB,EAAA,iBAoBA7mB,EAAAuZ,YAAA,SAAAJ,GAEA,IAAA,GADAgP,MACA1nB,EAAA,EAAAA,EAAA0Y,EAAAxY,SAAAF,EACA0nB,EAAAhP,EAAA1Y,IAAA,CAOA,OAAA,YACA,IAAA,GAAA4D,GAAAC,OAAAD,KAAAjD,MAAAX,EAAA4D,EAAA1D,OAAA,EAAAF,GAAA,IAAAA,EACA,GAAA,IAAA0nB,EAAA9jB,EAAA5D,KAAAW,KAAAiD,EAAA5D,MAAAvB,GAAA,OAAAkC,KAAAiD,EAAA5D,IACA,MAAA4D,GAAA5D,KAiBAT,EAAAyZ,YAAA,SAAAN,GAQA,MAAA,UAAA5Z,GACA,IAAA,GAAAkB,GAAA,EAAAA,EAAA0Y,EAAAxY,SAAAF,EACA0Y,EAAA1Y,KAAAlB,SACA6B,MAAA+X,EAAA1Y,MAoBAT,EAAA2W,eACAyR,MAAA9lB,OACA+lB,MAAA/lB,OACAuQ,MAAAvQ,OACA4J,MAAA,GAGAlM,EAAAyU,EAAA,WACA,GAAAkK,GAAA3e,EAAA2e,MAEA,KAAAA,EAEA,YADA3e,EAAAwnB,EAAAxnB,EAAAynB,EAAA,KAKAznB,GAAAwnB,EAAA7I,EAAAoH,OAAAlf,WAAAkf,MAAApH,EAAAoH,MAEA,SAAApZ,EAAA2b,GACA,MAAA,IAAA3J,GAAAhS,EAAA2b,IAEAtoB,EAAAynB,EAAA9I,EAAA4J,aAEA,SAAAjd,GACA,MAAA,IAAAqT,GAAArT,+DC1ZA,QAAAkd,GAAA3Z,EAAAoV,GACA,MAAApV,GAAAtP,KAAA,KAAA0kB,GAAApV,EAAAK,UAAA,UAAA+U,EAAA,KAAApV,EAAApK,KAAA,WAAAwf,EAAA,MAAApV,EAAA1B,QAAA,IAAA,IAAA,YAYA,QAAAsb,GAAA1lB,EAAA8L,EAAAC,EAAA6B,GAEA,GAAA9B,EAAAG,aACA,GAAAH,EAAAG,uBAAAC,GAAA,CAAAlM,EACA,cAAA4N,GACA,YACA,WAAA6X,EAAA3Z,EAAA,cACA,KAAA,GAAAxK,GAAAC,OAAAD,KAAAwK,EAAAG,aAAAjB,QAAA3L,EAAA,EAAAA,EAAAiC,EAAA1D,SAAAyB,EAAAW,EACA,WAAA8L,EAAAG,aAAAjB,OAAA1J,EAAAjC,IACAW,GACA,SACA,SACAA,GACA,8BAAA+L,EAAA6B,GACA,SACA,aAAA9B,EAAAtP,KAAA,SAEA,QAAAsP,EAAApC,MACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAA1J,EACA,0BAAA4N,GACA,WAAA6X,EAAA3Z,EAAA,WACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAA9L,EACA,kFAAA4N,EAAAA,EAAAA,EAAAA,GACA,WAAA6X,EAAA3Z,EAAA,gBACA,MACA,KAAA,QACA,IAAA,SAAA9L,EACA,2BAAA4N,GACA,WAAA6X,EAAA3Z,EAAA,UACA,MACA,KAAA,OAAA9L,EACA,4BAAA4N,GACA,WAAA6X,EAAA3Z,EAAA,WACA,MACA,KAAA,SAAA9L,EACA,yBAAA4N,GACA,WAAA6X,EAAA3Z,EAAA,UACA,MACA,KAAA,QAAA9L,EACA,4DAAA4N,EAAAA,EAAAA,GACA,WAAA6X,EAAA3Z,EAAA,WAIA,MAAA9L,GAYA,QAAA2lB,GAAA3lB,EAAA8L,EAAA8B,GAEA,OAAA9B,EAAA1B,SACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAApK,EACA,6BAAA4N,GACA,WAAA6X,EAAA3Z,EAAA,eACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAA9L,EACA,6BAAA4N,GACA,WAAA6X,EAAA3Z,EAAA,oBACA,MACA,KAAA,OAAA9L,EACA,4BAAA4N,GACA,WAAA6X,EAAA3Z,EAAA,gBAGA,MAAA9L,GASA,QAAAiS,GAAAvF,GAGA,GAAA1M,GAAA/C,EAAA8C,QAAA,KACA,qCACA,WAAA,mBACAuK,EAAAoC,EAAAiV,YACAiE,IACAtb,GAAA1M,QAAAoC,EACA,WAEA,KAAA,GAAAtC,GAAA,EAAAA,EAAAgP,EAAAC,YAAA/O,SAAAF,EAAA,CACA,GAAAoO,GAAAY,EAAAY,EAAA5P,GAAAM,UACA4P,EAAA,IAAA3Q,EAAA2P,SAAAd,EAAAtP;+CAMA,IAJAsP,EAAAyC,UAAAvO,EACA,sCAAA4N,EAAA9B,EAAAtP,MAGAsP,EAAApK,IAAA1B,EACA,yBAAA4N,GACA,WAAA6X,EAAA3Z,EAAA,WACA,wBAAA8B,GACA,gCACA+X,EAAA3lB,EAAA8L,EAAA,QACA4Z,EAAA1lB,EAAA8L,EAAApO,EAAAkQ,EAAA,UACA,SAGA,IAAA9B,EAAAK,SAAAnM,EACA,yBAAA4N,GACA,WAAA6X,EAAA3Z,EAAA,UACA,gCAAA8B,GACA8X,EAAA1lB,EAAA8L,EAAApO,EAAAkQ,EAAA,OACA,SAGA,CACA,GAAA9B,EAAAqB,OAAA,CACA,GAAA0Y,GAAA5oB,EAAA2P,SAAAd,EAAAqB,OAAA3Q,KACA,KAAAopB,EAAA9Z,EAAAqB,OAAA3Q,OAAAwD,EACA,cAAA6lB,GACA,WAAA/Z,EAAAqB,OAAA3Q,KAAA,qBACAopB,EAAA9Z,EAAAqB,OAAA3Q,MAAA,EACAwD,EACA,QAAA6lB,GAEAH,EAAA1lB,EAAA8L,EAAApO,EAAAkQ,GAEA9B,EAAAyC,UAAAvO,EACA,KAEA,MAAAA,GACA,eAzKA7C,EAAAR,QAAAsV,CAEA,IAAA/F,GAAA7O,EAAA,IACAJ,EAAAI,EAAA,wCCGA,GAAAyV,GAAAnW,EAEA4V,EAAAlV,EAAA,GA6BAyV,GAAA,yBAEArG,WAAA,SAAAkH,GAGA,GAAAA,GAAAA,EAAA,SAAA,CACA,GAAAjK,GAAArL,KAAAmX,OAAA7B,EAAA,SAEA,IAAAjK,EACA,MAAAA,GAAA+C,WAAAkH,GAGA,MAAAtV,MAAAoO,WAAAkH,IAGA9G,SAAA,SAAA+C,EAAA7M,GAGA,GAAAA,GAAAA,EAAAoG,MAAAyG,EAAAnG,UAAAmG,EAAAhG,MAAA,CACA,GAAAF,GAAArL,KAAAmX,OAAA5F,EAAAnG,SAEAC,KACAkG,EAAAlG,EAAAjK,OAAAmQ,EAAAhG,QAIA,KAAAgG,YAAAvR,MAAA4S,OAAArB,YAAA2C,GAAA,CACA,GAAAoB,GAAA/D,EAAAyD,MAAAxG,SAAA+C,EAAA7M,EAEA,OADA4Q,GAAA,SAAA/D,EAAAyD,MAAAhH,SACAsH,EAGA,MAAAtV,MAAAwO,SAAA+C,EAAA7M,iCClDA,QAAA+iB,GAAAvoB,EAAAqL,EAAAtE,GAMAjG,KAAAd,GAAAA,EAMAc,KAAAuK,IAAAA,EAMAvK,KAAA+Y,KAAAjb,EAMAkC,KAAAiG,IAAAA,EAIA,QAAAyhB,MAWA,QAAAC,GAAA1S,GAMAjV,KAAA0c,KAAAzH,EAAAyH,KAMA1c,KAAA4nB,KAAA3S,EAAA2S,KAMA5nB,KAAAuK,IAAA0K,EAAA1K,IAMAvK,KAAA+Y,KAAA9D,EAAA4S,OAQA,QAAAxT,KAMArU,KAAAuK,IAAA,EAMAvK,KAAA0c,KAAA,GAAA+K,GAAAC,EAAA,EAAA,GAMA1nB,KAAA4nB,KAAA5nB,KAAA0c,KAMA1c,KAAA6nB,OAAA,KAqDA,QAAAC,GAAA7hB,EAAAC,EAAAC,GACAD,EAAAC,GAAA,IAAAF,EAGA,QAAA8hB,GAAA9hB,EAAAC,EAAAC,GACA,KAAAF,EAAA,KACAC,EAAAC,KAAA,IAAAF,EAAA,IACAA,KAAA,CAEAC,GAAAC,GAAAF,EAYA,QAAA+hB,GAAAzd,EAAAtE,GACAjG,KAAAuK,IAAAA,EACAvK,KAAA+Y,KAAAjb,EACAkC,KAAAiG,IAAAA,EA8CA,QAAAgiB,GAAAhiB,EAAAC,EAAAC,GACA,KAAAF,EAAA+C,IACA9C,EAAAC,KAAA,IAAAF,EAAA8C,GAAA,IACA9C,EAAA8C,IAAA9C,EAAA8C,KAAA,EAAA9C,EAAA+C,IAAA,MAAA,EACA/C,EAAA+C,MAAA,CAEA,MAAA/C,EAAA8C,GAAA,KACA7C,EAAAC,KAAA,IAAAF,EAAA8C,GAAA,IACA9C,EAAA8C,GAAA9C,EAAA8C,KAAA,CAEA7C,GAAAC,KAAAF,EAAA8C,GA2CA,QAAAmf,GAAAjiB,EAAAC,EAAAC,GACAD,EAAAC,GAAA,IAAAF,EACAC,EAAAC,EAAA,GAAAF,IAAA,EAAA,IACAC,EAAAC,EAAA,GAAAF,IAAA,GAAA,IACAC,EAAAC,EAAA,GAAAF,IAAA,GAtSAnH,EAAAR,QAAA+V,CAEA,IAEAC,GAFA1V,EAAAI,EAAA,IAIAme,EAAAve,EAAAue,SACAld,EAAArB,EAAAqB,OACAqK,EAAA1L,EAAA0L,IAwHA+J,GAAA/D,OAAA1R,EAAA2e,OACA,WACA,OAAAlJ,EAAA/D,OAAA,WACA,MAAA,IAAAgE,QAIA,WACA,MAAA,IAAAD,IAQAA,EAAArK,MAAA,SAAAE,GACA,MAAA,IAAAtL,GAAA6B,MAAAyJ,IAKAtL,EAAA6B,QAAAA,QACA4T,EAAArK,MAAApL,EAAAmL,KAAAsK,EAAArK,MAAApL,EAAA6B,MAAAwD,UAAAyZ,WAUArJ,EAAApQ,UAAAkkB,EAAA,SAAAjpB,EAAAqL,EAAAtE,GAGA,MAFAjG,MAAA4nB,KAAA5nB,KAAA4nB,KAAA7O,KAAA,GAAA0O,GAAAvoB,EAAAqL,EAAAtE,GACAjG,KAAAuK,KAAAA,EACAvK,MA8BAgoB,EAAA/jB,UAAAf,OAAAoN,OAAAmX,EAAAxjB,WACA+jB,EAAA/jB,UAAA/E,GAAA6oB,EAOA1T,EAAApQ,UAAA0Z,OAAA,SAAApS,GAWA,MARAvL,MAAAuK,MAAAvK,KAAA4nB,KAAA5nB,KAAA4nB,KAAA7O,KAAA,GAAAiP,IACAzc,KAAA,GACA,IAAA,EACAA,EAAA,MAAA,EACAA,EAAA,QAAA,EACAA,EAAA,UAAA,EACA,EACAA,IAAAhB,IACAvK,MASAqU,EAAApQ,UAAA2Z,MAAA,SAAArS,GACA,MAAAA,GAAA,EACAvL,KAAAmoB,EAAAF,EAAA,GAAA9K,EAAA5K,WAAAhH,IACAvL,KAAA2d,OAAApS,IAQA8I,EAAApQ,UAAA4Z,OAAA,SAAAtS,GACA,MAAAvL,MAAA2d,QAAApS,GAAA,EAAAA,GAAA,MAAA,IAsBA8I,EAAApQ,UAAAsa,OAAA,SAAAhT,GACA,GAAA2R,GAAAC,EAAAwH,KAAApZ,EACA,OAAAvL,MAAAmoB,EAAAF,EAAA/K,EAAA3d,SAAA2d,IAUA7I,EAAApQ,UAAAqa,MAAAjK,EAAApQ,UAAAsa,OAQAlK,EAAApQ,UAAAua,OAAA,SAAAjT,GACA,GAAA2R,GAAAC,EAAAwH,KAAApZ,GAAAkZ,UACA,OAAAzkB,MAAAmoB,EAAAF,EAAA/K,EAAA3d,SAAA2d,IAQA7I,EAAApQ,UAAA6Z,KAAA,SAAAvS,GACA,MAAAvL,MAAAmoB,EAAAL,EAAA,EAAAvc,EAAA,EAAA,IAeA8I,EAAApQ,UAAA8Z,QAAA,SAAAxS,GACA,MAAAvL,MAAAmoB,EAAAD,EAAA,EAAA3c,IAAA,IASA8I,EAAApQ,UAAA+Z,SAAA3J,EAAApQ,UAAA8Z,QAQA1J,EAAApQ,UAAAya,QAAA,SAAAnT,GACA,GAAA2R,GAAAC,EAAAwH,KAAApZ,EACA,OAAAvL,MAAAmoB,EAAAD,EAAA,EAAAhL,EAAAnU,IAAAof,EAAAD,EAAA,EAAAhL,EAAAlU,KAUAqL,EAAApQ,UAAA0a,SAAAtK,EAAApQ,UAAAya,QAQArK,EAAApQ,UAAAga,MAAA,SAAA1S,GACA,MAAAvL,MAAAmoB,EAAAvpB,EAAAqf,MAAAvX,aAAA,EAAA6E,IASA8I,EAAApQ,UAAAia,OAAA,SAAA3S,GACA,MAAAvL,MAAAmoB,EAAAvpB,EAAAqf,MAAA1V,cAAA,EAAAgD,GAGA,IAAA6c,GAAAxpB,EAAA6B,MAAAwD,UAAAmU,IACA,SAAAnS,EAAAC,EAAAC,GACAD,EAAAkS,IAAAnS,EAAAE,IAGA,SAAAF,EAAAC,EAAAC,GACA,IAAA,GAAA9G,GAAA,EAAAA,EAAA4G,EAAA1G,SAAAF,EACA6G,EAAAC,EAAA9G,GAAA4G,EAAA5G,GAQAgV,GAAApQ,UAAAwN,MAAA,SAAAlG,GACA,GAAAhB,GAAAgB,EAAAhM,SAAA,CACA,KAAAgL,EACA,MAAAvK,MAAAmoB,EAAAL,EAAA,EAAA,EACA,IAAAlpB,EAAAkS,SAAAvF,GAAA,CACA,GAAArF,GAAAmO,EAAArK,MAAAO,EAAAtK,EAAAV,OAAAgM,GACAtL,GAAAmB,OAAAmK,EAAArF,EAAA,GACAqF,EAAArF,EAEA,MAAAlG,MAAA2d,OAAApT,GAAA4d,EAAAC,EAAA7d,EAAAgB,IAQA8I,EAAApQ,UAAA/D,OAAA,SAAAqL,GACA,GAAAhB,GAAAD,EAAA/K,OAAAgM,EACA,OAAAhB,GACAvK,KAAA2d,OAAApT,GAAA4d,EAAA7d,EAAAI,MAAAH,EAAAgB,GACAvL,KAAAmoB,EAAAL,EAAA,EAAA,IAQAzT,EAAApQ,UAAA6f,KAAA,WAIA,MAHA9jB,MAAA6nB,OAAA,GAAAF,GAAA3nB,MACAA,KAAA0c,KAAA1c,KAAA4nB,KAAA,GAAAH,GAAAC,EAAA,EAAA,GACA1nB,KAAAuK,IAAA,EACAvK,MAOAqU,EAAApQ,UAAAokB,MAAA,WAUA,MATAroB,MAAA6nB,QACA7nB,KAAA0c,KAAA1c,KAAA6nB,OAAAnL,KACA1c,KAAA4nB,KAAA5nB,KAAA6nB,OAAAD,KACA5nB,KAAAuK,IAAAvK,KAAA6nB,OAAAtd,IACAvK,KAAA6nB,OAAA7nB,KAAA6nB,OAAA9O,OAEA/Y,KAAA0c,KAAA1c,KAAA4nB,KAAA,GAAAH,GAAAC,EAAA,EAAA,GACA1nB,KAAAuK,IAAA,GAEAvK,MAOAqU,EAAApQ,UAAA8f,OAAA,WACA,GAAArH,GAAA1c,KAAA0c,KACAkL,EAAA5nB,KAAA4nB,KACArd,EAAAvK,KAAAuK,GAOA,OANAvK,MAAAqoB,QAAA1K,OAAApT,GACAA,IACAvK,KAAA4nB,KAAA7O,KAAA2D,EAAA3D,KACA/Y,KAAA4nB,KAAAA,EACA5nB,KAAAuK,KAAAA,GAEAvK,MAOAqU,EAAApQ,UAAAob,OAAA,WAIA,IAHA,GAAA3C,GAAA1c,KAAA0c,KAAA3D,KACA7S,EAAAlG,KAAAwQ,YAAAxG,MAAAhK,KAAAuK,KACApE,EAAA,EACAuW,GACAA,EAAAxd,GAAAwd,EAAAzW,IAAAC,EAAAC,GACAA,GAAAuW,EAAAnS,IACAmS,EAAAA,EAAA3D,IAGA,OAAA7S,IAGAmO,EAAAhB,EAAA,SAAAiV,GACAhU,EAAAgU,+BCzbA,QAAAhU,KACAD,EAAAhW,KAAA2B,MAsCA,QAAAuoB,GAAAtiB,EAAAC,EAAAC,GACAF,EAAA1G,OAAA,GACAX,EAAA0L,KAAAI,MAAAzE,EAAAC,EAAAC,GAEAD,EAAAigB,UAAAlgB,EAAAE,GA3DArH,EAAAR,QAAAgW,CAGA,IAAAD,GAAArV,EAAA,KACAsV,EAAArQ,UAAAf,OAAAoN,OAAA+D,EAAApQ,YAAAuM,YAAA8D,CAEA,IAAA1V,GAAAI,EAAA,IAEAue,EAAA3e,EAAA2e,MAiBAjJ,GAAAtK,MAAA,SAAAE,GACA,OAAAoK,EAAAtK,MAAApL,EAAAynB,GAAAnc,GAGA,IAAAse,GAAAjL,GAAAA,EAAAtZ,oBAAAwB,aAAA,QAAA8X,EAAAtZ,UAAAmU,IAAAja,KACA,SAAA8H,EAAAC,EAAAC,GACAD,EAAAkS,IAAAnS,EAAAE,IAIA,SAAAF,EAAAC,EAAAC,GACA,GAAAF,EAAAwiB,KACAxiB,EAAAwiB,KAAAviB,EAAAC,EAAA,EAAAF,EAAA1G,YACA,KAAA,GAAAF,GAAA,EAAAA,EAAA4G,EAAA1G,QACA2G,EAAAC,KAAAF,EAAA5G,KAMAiV,GAAArQ,UAAAwN,MAAA,SAAAlG,GACA3M,EAAAkS,SAAAvF,KACAA,EAAA3M,EAAAwnB,EAAA7a,EAAA,UACA,IAAAhB,GAAAgB,EAAAhM,SAAA,CAIA,OAHAS,MAAA2d,OAAApT,GACAA,GACAvK,KAAAmoB,EAAAK,EAAAje,EAAAgB,GACAvL,MAaAsU,EAAArQ,UAAA/D,OAAA,SAAAqL,GACA,GAAAhB,GAAAgT,EAAAmL,WAAAnd,EAIA,OAHAvL,MAAA2d,OAAApT,GACAA,GACAvK,KAAAmoB,EAAAI,EAAAhe,EAAAgB,GACAvL","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            if (Long && Long.isLong) {\r\n                protobuf.util.Long = Long;\r\n                protobuf.configure();\r\n            }\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object.<string,*>} google/protobuf/any.proto Any\r\n * @property {Object.<string,*>} google/protobuf/duration.proto Duration\r\n * @property {Object.<string,*>} google/protobuf/empty.proto Empty\r\n * @property {Object.<string,*>} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object.<string,*>} google/protobuf/timestamp.proto Timestamp\r\n * @property {Object.<string,*>} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n *\r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\r\nfunction common(name, json) {\r\n    if (!commonRe.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\nvar commonRe = /\\/|\\./;\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/field_mask.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Any message.\r\n     * @interface IAny\r\n     * @type {Object}\r\n     * @property {string} [typeUrl]\r\n     * @property {Uint8Array} [bytes]\r\n     * @memberof common\r\n     */\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Duration message.\r\n     * @interface IDuration\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Timestamp message.\r\n     * @interface ITimestamp\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Empty message.\r\n     * @interface IEmpty\r\n     * @memberof common\r\n     */\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Struct message.\r\n     * @interface IStruct\r\n     * @type {Object}\r\n     * @property {Object.<string,IValue>} [fields]\r\n     * @memberof common\r\n     */\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Value message.\r\n     * @interface IValue\r\n     * @type {Object}\r\n     * @property {string} [kind]\r\n     * @property {0} [nullValue]\r\n     * @property {number} [numberValue]\r\n     * @property {string} [stringValue]\r\n     * @property {boolean} [boolValue]\r\n     * @property {IStruct} [structValue]\r\n     * @property {IListValue} [listValue]\r\n     * @memberof common\r\n     */\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.ListValue message.\r\n     * @interface IListValue\r\n     * @type {Object}\r\n     * @property {Array.<IValue>} [values]\r\n     * @memberof common\r\n     */\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.DoubleValue message.\r\n     * @interface IDoubleValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.FloatValue message.\r\n     * @interface IFloatValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int64Value message.\r\n     * @interface IInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt64Value message.\r\n     * @interface IUInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int32Value message.\r\n     * @interface IInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt32Value message.\r\n     * @interface IUInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BoolValue message.\r\n     * @interface IBoolValue\r\n     * @type {Object}\r\n     * @property {boolean} [value]\r\n     * @memberof common\r\n     */\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.StringValue message.\r\n     * @interface IStringValue\r\n     * @type {Object}\r\n     * @property {string} [value]\r\n     * @memberof common\r\n     */\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BytesValue message.\r\n     * @interface IBytesValue\r\n     * @type {Object}\r\n     * @property {Uint8Array} [value]\r\n     * @memberof common\r\n     */\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(15),\r\n    util = require(37);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        normalFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (!fields[i].partOf)\r\n            ( fields[i].resolve().repeated ? repeatedFields\r\n            : fields[i].map ? mapFields\r\n            : normalFields).push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (normalFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0; i < normalFields.length; ++i) {\r\n            var field = normalFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    var hasKs2 = false;\r\n    for (i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            index = mtype._fieldsArray.indexOf(field),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.map) {\r\n            if (!hasKs2) { hasKs2 = true; gen\r\n    (\"var ks2\");\r\n            } gen\r\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\r\n        (\"d%s={}\", prop)\r\n        (\"for(var j=0;j<ks2.length;++j){\");\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\r\n        (\"}\");\r\n        } else { gen\r\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\r\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        }\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(36),\r\n    util    = require(37);\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(36),\r\n    util     = require(37);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = mtype._fieldsArray.indexOf(field),\r\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name) // !== undefined && !== null\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n            // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            } gen\r\n    (\"}\");\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (field.optional) gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\r\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @returns {IEnum} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"values\"  , this.values\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id\");\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(15),\r\n    types = require(36),\r\n    util  = require(37);\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @returns {IField} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options\r\n    ]);\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary options\r\n    if (this.options) {\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\r\n    };\r\n};\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\nField._configure = function configure(Type_) {\r\n    Type = Type_;\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(18);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(14);\r\nprotobuf.decoder          = require(13);\r\nprotobuf.verifier         = require(40);\r\nprotobuf.converter        = require(12);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(24);\r\nprotobuf.Namespace        = require(23);\r\nprotobuf.Root             = require(29);\r\nprotobuf.Enum             = require(15);\r\nprotobuf.Type             = require(35);\r\nprotobuf.Field            = require(16);\r\nprotobuf.OneOf            = require(25);\r\nprotobuf.MapField         = require(20);\r\nprotobuf.Service          = require(33);\r\nprotobuf.Method           = require(22);\r\n\r\n// Runtime\r\nprotobuf.Message          = require(21);\r\n\r\n// Utility\r\nprotobuf.types            = require(36);\r\nprotobuf.util             = require(37);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\nprotobuf.Field._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(42);\r\nprotobuf.BufferWriter = require(43);\r\nprotobuf.Reader       = require(27);\r\nprotobuf.BufferReader = require(28);\r\n\r\n// Utility\r\nprotobuf.util         = require(39);\r\nprotobuf.rpc          = require(31);\r\nprotobuf.roots        = require(30);\r\nprotobuf.wrappers     = require(41);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"full\";\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(34);\r\nprotobuf.parse            = require(26);\r\nprotobuf.common           = require(11);\r\n\r\n// Configure parser\r\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(16);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(36),\r\n    util    = require(37);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @returns {IMapField} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"keyType\" , this.keyType,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\r\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\r\n\r\n    // submessage value: decorate the submessage and use its name as the type\r\n    if (typeof fieldValueType === \"function\")\r\n        fieldValueType = util.decorateType(fieldValueType).name;\r\n\r\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldValueType && typeof fieldValueType === \"object\")\r\n        fieldValueType = util.decorateEnum(fieldValueType).name;\r\n\r\n    return function mapFieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Properties<T>} [properties] Properties to set\r\n * @template T extends object\r\n */\r\nfunction Message(properties) {\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/*eslint-disable valid-jsdoc*/\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<T>} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.create = function create(properties) {\r\n    return this.$type.create(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {T} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {T} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n\r\n/*eslint-enable valid-jsdoc*/","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {IMethod} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @returns {IMethod} Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        \"requestType\"    , this.requestType,\r\n        \"requestStream\"  , this.requestStream,\r\n        \"responseType\"   , this.responseType,\r\n        \"responseStream\" , this.responseStream,\r\n        \"options\"        , this.options\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(15),\r\n    Field    = require(16),\r\n    util     = require(37);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @interface INamespace\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionField\r\n * @type {IExtensionField|IExtensionMapField}\r\n */\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedObject\r\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\r\n */\r\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @returns {INamespace} Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"nested\"  , arrayToJSON(this.nestedArray)\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterTypes === \"boolean\") {\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    } else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n\r\n    // Otherwise try each nested namespace\r\n    } else\r\n        for (var i = 0; i < this.nestedArray.length; ++i)\r\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\r\n                return found;\r\n\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(37);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {?string}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(16),\r\n    util  = require(37);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n}\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {IOneOf} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @returns {IOneOf} Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"oneof\"   , this.oneof\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} oneofName OneOf name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param {...string} fieldNames Field names\r\n * @returns {OneOfDecorator} Decorator function\r\n * @template T extends string\r\n */\r\nOneOf.d = function decorateOneOf() {\r\n    var fieldNames = [];\r\n    for (var i = 0; i < arguments.length; ++i)\r\n        fieldNames.push(arguments[i]);\r\n    return function oneOfDecorator(prototype, oneofName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new OneOf(oneofName, fieldNames));\r\n        Object.defineProperty(prototype, oneofName, {\r\n            get: util.oneOfGetter(fieldNames),\r\n            set: util.oneOfSetter(fieldNames)\r\n        });\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(34),\r\n    Root      = require(29),\r\n    Type      = require(35),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    OneOf     = require(25),\r\n    Enum      = require(15),\r\n    Service   = require(33),\r\n    Method    = require(22),\r\n    types     = require(36),\r\n    util      = require(37);\r\n\r\nvar base10Re    = /^[1-9][0-9]*$/,\r\n    base10NegRe = /^-?[1-9][0-9]*$/,\r\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\r\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\r\n    base8Re     = /^0[0-7]+$/,\r\n    base8NegRe  = /^-?0[0-7]+$/,\r\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\r\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nvar camelCaseRe = /_([a-z])/g;\r\n\r\nfunction camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\nparse.camelCase = camelCase;\r\nparse.numberRe = numberRe;\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @interface IParserResult\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @interface IParseOptions\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name, insideTryCatch) {\r\n        var filename = parse.filename;\r\n        if (!insideTryCatch)\r\n            parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            /* istanbul ignore if */\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (token) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\": case \"TRUE\":\r\n                return true;\r\n            case \"false\": case \"FALSE\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token, /* insideTryCatch */ true);\r\n        } catch (e) {\r\n\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRanges(target, acceptStrings) {\r\n        var token, start;\r\n        do {\r\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\r\n                target.push(readString());\r\n            else\r\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\r\n        } while (skip(\",\", true));\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseNumber(token, insideTryCatch) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        switch (token) {\r\n            case \"inf\": case \"INF\": case \"Inf\":\r\n                return sign * Infinity;\r\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\r\n                return NaN;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n        if (base10Re.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (base16Re.test(token))\r\n            return sign * parseInt(token, 16);\r\n        if (base8Re.test(token))\r\n            return sign * parseInt(token, 8);\r\n\r\n        /* istanbul ignore else */\r\n        if (numberRe.test(token))\r\n            return sign * parseFloat(token);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\", insideTryCatch);\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        switch (token) {\r\n            case \"max\": case \"MAX\": case \"Max\":\r\n                return 536870911;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!acceptNegative && token.charAt(0) === \"-\")\r\n            throw illegal(token, \"id\");\r\n\r\n        if (base10NegRe.test(token))\r\n            return parseInt(token, 10);\r\n        if (base16NegRe.test(token))\r\n            return parseInt(token, 16);\r\n\r\n        /* istanbul ignore else */\r\n        if (base8NegRe.test(token))\r\n            return parseInt(token, 8);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n\r\n        /* istanbul ignore if */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n\r\n        pkg = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = readString();\r\n        isProto3 = syntax === \"proto3\";\r\n\r\n        /* istanbul ignore if */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function ifBlock(obj, fnIf, fnElse) {\r\n        var trailingLine = tn.line();\r\n        if (obj) {\r\n            obj.comment = cmnt(); // try block-type comment\r\n            obj.filename = parse.filename;\r\n        }\r\n        if (skip(\"{\", true)) {\r\n            var token;\r\n            while ((token = next()) !== \"}\")\r\n                fnIf(token);\r\n            skip(\";\", true);\r\n        } else {\r\n            if (fnElse)\r\n                fnElse();\r\n            skip(\";\");\r\n            if (obj && typeof obj.comment !== \"string\")\r\n                obj.comment = cmnt(trailingLine); // try line-type comment if no block\r\n        }\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"type name\");\r\n\r\n        var type = new Type(token);\r\n        ifBlock(type, function parseType_block(token) {\r\n            if (parseCommon(type, token))\r\n                return;\r\n\r\n            switch (token) {\r\n\r\n                case \"map\":\r\n                    parseMapField(type, token);\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                case \"oneof\":\r\n                    parseOneOf(type, token);\r\n                    break;\r\n\r\n                case \"extensions\":\r\n                    readRanges(type.extensions || (type.extensions = []));\r\n                    break;\r\n\r\n                case \"reserved\":\r\n                    readRanges(type.reserved || (type.reserved = []), true);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n\r\n                    push(token);\r\n                    parseField(type, \"optional\");\r\n                    break;\r\n            }\r\n        });\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n\r\n        var field = new Field(name, parseId(next()), type, rule, extend);\r\n        ifBlock(field, function parseField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\r\n        // all known packable types and anything that could be an enum (= is not a basic type).\r\n        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        field.filename = parse.filename;\r\n        ifBlock(type, function parseGroup_block(token) {\r\n            switch (token) {\r\n\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        });\r\n        parent.add(type)\r\n              .add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n\r\n        skip(\",\");\r\n        var valueType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n\r\n        skip(\">\");\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        skip(\"=\");\r\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\r\n        ifBlock(field, function parseMapField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseMapField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var oneof = new OneOf(applyCase(token));\r\n        ifBlock(oneof, function parseOneOf_block(token) {\r\n            if (token === \"option\") {\r\n                parseOption(oneof, token);\r\n                skip(\";\");\r\n            } else {\r\n                push(token);\r\n                parseField(oneof, \"optional\");\r\n            }\r\n        });\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var enm = new Enum(token);\r\n        ifBlock(enm, function parseEnum_block(token) {\r\n            if (token === \"option\") {\r\n                parseOption(enm, token);\r\n                skip(\";\");\r\n            } else\r\n                parseEnumValue(enm, token);\r\n        });\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            dummy = {};\r\n        ifBlock(dummy, function parseEnumValue_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(dummy, token); // skip\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseEnumValue_line() {\r\n            parseInlineOptions(dummy); // skip\r\n        });\r\n        parent.add(token, value, dummy.comment);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var isCustom = skip(\"(\", true);\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        if (isCustom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\r\n            do {\r\n                /* istanbul ignore if */\r\n                if (!nameRe.test(token = next()))\r\n                    throw illegal(token, \"name\");\r\n\r\n                if (peek() === \"{\")\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n                else {\r\n                    skip(\":\");\r\n                    setOption(parent, name + \".\" + token, readValue(true));\r\n                }\r\n            } while (!skip(\"}\", true));\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var service = new Service(token);\r\n        ifBlock(service, function parseService_block(token) {\r\n            if (parseCommon(service, token))\r\n                return;\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"rpc\")\r\n                parseMethod(service, token);\r\n            else\r\n                throw illegal(token);\r\n        });\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token,\r\n            requestType, requestStream,\r\n            responseType, responseStream;\r\n\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        ifBlock(method, function parseMethod_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(method, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        });\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"reference\");\r\n\r\n        var reference = token;\r\n        ifBlock(null, function parseExtension_block(token) {\r\n            switch (token) {\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                case \"optional\":\r\n                    parseField(parent, token, reference);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n                    push(token);\r\n                    parseField(parent, \"optional\", reference);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        switch (token) {\r\n\r\n            case \"package\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(39);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(27);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(39);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(16),\r\n    Enum    = require(15),\r\n    OneOf   = require(25),\r\n    util    = require(37);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {?string} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(32);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(39);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(22),\r\n    util   = require(37),\r\n    rpc    = require(31);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property {Object.<string,IMethod>} methods Method descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {IService} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    return service;\r\n};\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @returns {IService} Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return util.toObject([\r\n        \"options\" , inherited && inherited.options || undefined,\r\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        \"nested\"  , inherited && inherited.nested || undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst(this._methodsArray[i].resolve().name)] = util.codegen(\"r\",\"c\")(\"return this.rpcCall(m,q,s,r,c)\").eof(util.lcFirst(this._methodsArray[i].name), {\r\n            m: this._methodsArray[i],\r\n            q: this._methodsArray[i].resolvedRequestType.ctor,\r\n            s: this._methodsArray[i].resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nvar setCommentRe = /^ *[*/]+ */,\r\n    setCommentSplitRe = /\\n/g,\r\n    whitespaceRe = /\\s/,\r\n    unescapeRe = /\\\\(.?)/g;\r\n\r\nvar unescapeMap = {\r\n    \"0\": \"\\0\",\r\n    \"r\": \"\\r\",\r\n    \"n\": \"\\n\",\r\n    \"t\": \"\\t\"\r\n};\r\n\r\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @ignore\r\n */\r\nfunction unescape(str) {\r\n    return str.replace(unescapeRe, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            default:\r\n                return unescapeMap[$1] || \"\";\r\n        }\r\n    });\r\n}\r\n\r\ntokenize.unescape = unescape;\r\n\r\n/**\r\n * Gets the current line number.\r\n * @typedef TokenizerHandleLine\r\n * @type {function}\r\n * @returns {number} Line number\r\n */\r\n\r\n/**\r\n * Gets the next token and advances.\r\n * @typedef TokenizerHandleNext\r\n * @type {function}\r\n * @returns {?string} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Peeks for the next token.\r\n * @typedef TokenizerHandlePeek\r\n * @type {function}\r\n * @returns {?string} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Pushes a token back to the stack.\r\n * @typedef TokenizerHandlePush\r\n * @type {function}\r\n * @param {string} token Token\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Skips the next token.\r\n * @typedef TokenizerHandleSkip\r\n * @type {function}\r\n * @param {string} expected Expected token\r\n * @param {boolean} [optional=false] If optional\r\n * @returns {boolean} Whether the token matched\r\n * @throws {Error} If the token didn't match and is not optional\r\n */\r\n\r\n/**\r\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\r\n * @typedef TokenizerHandleCmnt\r\n * @type {function}\r\n * @param {number} [line] Line number\r\n * @returns {?string} Comment text or `null` if none\r\n */\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @interface ITokenizerHandle\r\n * @property {TokenizerHandleLine} line Gets the current line number\r\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\r\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\r\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\r\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {ITokenizerHandle} Tokenizer handle\r\n * @property {function(string):string} unescape Unescapes a string\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        var lines = source\r\n            .substring(start, end)\r\n            .split(setCommentSplitRe);\r\n        for (var i = 0; i < lines.length; ++i)\r\n            lines[i] = lines[i].replace(setCommentRe, \"\").trim();\r\n        commentText = lines\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isComment;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (whitespaceRe.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    isComment = charAt(start = offset + 1) === \"/\";\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 1);\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    isComment = charAt(start = offset + 1) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            throw illegal(\"comment\");\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 2);\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        // offset !== length if we got here\r\n\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a comment.\r\n     * @param {number} [trailingLine] Trailing line number if applicable\r\n     * @returns {?string} Comment text\r\n     * @inner\r\n     */\r\n    function cmnt(trailingLine) {\r\n        var ret;\r\n        if (trailingLine === undefined)\r\n            ret = commentLine === line - 1 && commentText || null;\r\n        else {\r\n            if (!commentText)\r\n                peek();\r\n            ret = commentLine === trailingLine && commentType === \"/\" && commentText || null;\r\n        }\r\n        commentType = commentText = null;\r\n        commentLine = 0;\r\n        return ret;\r\n    }\r\n\r\n    return {\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        line: function() {\r\n            return line;\r\n        },\r\n        cmnt: cmnt\r\n    };\r\n    /* eslint-enable callback-return */\r\n}\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(25),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    Service   = require(33),\r\n    Message   = require(21),\r\n    Reader    = require(27),\r\n    Writer    = require(42),\r\n    util      = require(37),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(40),\r\n    converter = require(12),\r\n    wrappers  = require(41);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {Constructor<{}>}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type {Constructor<{}>}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this.ctor = Type.generateConstructor(this).eof(this.name));\r\n        },\r\n        set: function(ctor) {\r\n\r\n            // Ensure proper prototype\r\n            var prototype = ctor.prototype;\r\n            if (!(prototype instanceof Message)) {\r\n                (ctor.prototype = new Message()).constructor = ctor;\r\n                util.merge(ctor.prototype, prototype);\r\n            }\r\n\r\n            // Classes and messages reference their reflected type\r\n            ctor.$type = ctor.prototype.$type = this;\r\n\r\n            // Mix in static methods\r\n            util.merge(ctor, Message, true);\r\n\r\n            this._ctor = ctor;\r\n\r\n            // Messages have non-enumerable default values on their prototype\r\n            var i = 0;\r\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\r\n                this._fieldsArray[i].resolve(); // ensures a proper value\r\n\r\n            // Messages have non-enumerable getters and setters for each virtual oneof field\r\n            var ctorProperties = {};\r\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\r\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\r\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\r\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\r\n                };\r\n            if (i)\r\n                Object.defineProperties(ctor.prototype, ctorProperties);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} type Type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nType.generateConstructor = function generateConstructor(type) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"p\");\r\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\r\n    for (var i = 0, field; i < type.fieldsArray.length; ++i)\r\n        if ((field = type._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    return gen\r\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\r\n        (\"this[ks[i]]=p[ks[i]]\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Message type descriptor.\r\n * @interface IType\r\n * @extends INamespace\r\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,IField>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {number[][]} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {IType} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @returns {IType} Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return util.toObject([\r\n        \"options\"    , inherited && inherited.options || undefined,\r\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray),\r\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"group\"      , this.group || undefined,\r\n        \"nested\"     , inherited && inherited.nested || undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (typeof this.reserved[i] !== \"string\" && this.reserved[i][0] <= id && this.reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (this.reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n\r\n    // Replace setup methods with type-specific generated functions\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n\r\n    // Inject custom wrappers for common types\r\n    var wrapper = wrappers[fullName];\r\n    if (wrapper) {\r\n        var originalThis = Object.create(this);\r\n        // if (wrapper.fromObject) {\r\n            originalThis.fromObject = this.fromObject;\r\n            this.fromObject = wrapper.fromObject.bind(originalThis);\r\n        // }\r\n        // if (wrapper.toObject) {\r\n            originalThis.toObject = this.toObject;\r\n            this.toObject = wrapper.toObject.bind(originalThis);\r\n        // }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError<{}>} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @interface IConversionOptions\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Type.d} (TypeScript).\r\n * @typedef TypeDecorator\r\n * @type {function}\r\n * @param {Constructor<T>} target Target constructor\r\n * @returns {undefined}\r\n * @template T extends Message<T>\r\n */\r\n\r\n/**\r\n * Type decorator (TypeScript).\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {TypeDecorator<T>} Decorator function\r\n * @template T extends Message<T>\r\n */\r\nType.d = function decorateType(typeName) {\r\n    return function typeDecorator(target) {\r\n        util.decorateType(target, typeName);\r\n    };\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(37);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {null} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(39);\r\n\r\nvar roots = require(30);\r\n\r\nvar Type, // cyclic\r\n    Enum;\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\n/**\r\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\r\n * @param {Array.<*>} array Array to convert\r\n * @returns {Object.<string,*>} Converted object\r\n */\r\nutil.toObject = function toObject(array) {\r\n    var object = {};\r\n    for (var i = 0; i < array.length; i += 2) {\r\n        var key = array[i    ],\r\n            val = array[i + 1];\r\n        if (val !== undefined)\r\n            object[key] = val;\r\n    }\r\n    return object;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n\r\n/**\r\n * Decorator helper for types (TypeScript).\r\n * @param {Constructor<T>} ctor Constructor function\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {Type} Reflected type\r\n * @template T extends Message<T>\r\n * @property {Root} root Decorators root\r\n */\r\nutil.decorateType = function decorateType(ctor, typeName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (ctor.$type) {\r\n        if (typeName && ctor.$type.name !== typeName) {\r\n            util.decorateRoot.remove(ctor.$type);\r\n            ctor.$type.name = typeName;\r\n            util.decorateRoot.add(ctor.$type);\r\n        }\r\n        return ctor.$type;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(35);\r\n\r\n    var type = new Type(typeName || ctor.name);\r\n    util.decorateRoot.add(type);\r\n    type.ctor = ctor; // sets up .encode, .decode etc.\r\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\r\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\r\n    return type;\r\n};\r\n\r\nvar decorateEnumIndex = 0;\r\n\r\n/**\r\n * Decorator helper for enums (TypeScript).\r\n * @param {Object} object Enum object\r\n * @returns {Enum} Reflected enum\r\n */\r\nutil.decorateEnum = function decorateEnum(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (object.$type)\r\n        return object.$type;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Enum)\r\n        Enum = require(15);\r\n\r\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\r\n    util.decorateRoot.add(enm);\r\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Decorator root (TypeScript).\r\n * @name util.decorateRoot\r\n * @type {Root}\r\n * @readonly\r\n */\r\nObject.defineProperty(util, \"decorateRoot\", {\r\n    get: function() {\r\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(29))());\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(39);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// float handling accross browsers\r\nutil.float = require(6);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(7);\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(10);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(9);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(38);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/*\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @typedef Buffer\r\n * @type {Uint8Array}\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Internal alias of or polyfull for Buffer.from.\r\n * @type {?function}\r\n * @param {string|number[]} value Value\r\n * @param {string} [encoding] Encoding if value is a string\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_from = null;\r\n\r\n/**\r\n * Internal alias of or polyfill for Buffer.allocUnsafe.\r\n * @type {?function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/*\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(37);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %d:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen(\"m\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = {};\r\n    if (oneofs.length) gen\r\n    (\"var p={}\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        if (field.optional) gen\r\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(!util.isObject(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"object\"))\r\n            (\"var k=Object.keys(%s)\", ref)\r\n            (\"for(var i=0;i<k.length;++i){\");\r\n                genVerifyKey(gen, field, \"k[i]\");\r\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(!Array.isArray(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"array\"))\r\n            (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                genVerifyValue(gen, field, i, ref + \"[i]\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (field.partOf) {\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            }\r\n            genVerifyValue(gen, field, i, ref);\r\n        }\r\n        if (field.optional) gen\r\n        (\"}\");\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\n\r\n/**\r\n * Wrappers for common types.\r\n * @type {Object.<string,IWrapper>}\r\n * @const\r\n */\r\nvar wrappers = exports;\r\n\r\nvar Message = require(21);\r\n\r\n/**\r\n * From object converter part of an {@link IWrapper}.\r\n * @typedef WrapperFromObjectConverter\r\n * @type {function}\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message<{}>}\r\n * @this Type\r\n */\r\n\r\n/**\r\n * To object converter part of an {@link IWrapper}.\r\n * @typedef WrapperToObjectConverter\r\n * @type {function}\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>}\r\n * @this Type\r\n */\r\n\r\n/**\r\n * Common type wrapper part of {@link wrappers}.\r\n * @interface IWrapper\r\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\r\n * @property {WrapperToObjectConverter} [toObject] To object converter\r\n */\r\n\r\n// Custom wrapper for Any\r\nwrappers[\".google.protobuf.Any\"] = {\r\n\r\n    fromObject: function(object) {\r\n\r\n        // unwrap value type if mapped\r\n        if (object && object[\"@type\"]) {\r\n            var type = this.lookup(object[\"@type\"]);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                return type.fromObject(object);\r\n        }\r\n\r\n        return this.fromObject(object);\r\n    },\r\n\r\n    toObject: function(message, options) {\r\n\r\n        // decode value if requested and unmapped\r\n        if (options && options.json && message.type_url && message.value) {\r\n            var type = this.lookup(message.type_url);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                message = type.decode(message.value);\r\n        }\r\n\r\n        // wrap value if unmapped\r\n        if (!(message instanceof this.ctor) && message instanceof Message) {\r\n            var object = message.$type.toObject(message, options);\r\n            object[\"@type\"] = message.$type.fullName;\r\n            return object;\r\n        }\r\n\r\n        return this.toObject(message, options);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(39);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(42);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(39);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"sourceRoot":"."}