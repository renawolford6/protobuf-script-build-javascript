{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","src/class.js","src/common.js","src/decode.js","src/encode.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/base64/index.js","src/util/codegen/index.js","src/util/eventemitter/index.js","src/util/longbits.js","src/util/pool/index.js","src/util/runtime.js","src/util/utf8/index.js","src/verify.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","Class","type","create","Message","Type","util","_TypeError","ctor","clazz","MessageCtor","properties","this","constructor","prototype","merge","$type","getFieldsArray","forEach","field","resolve","name","Array","isArray","defaultValue","emptyArray","isObject","emptyObject","getOneofsArray","oneof","prop","get","keys","Object","indexOf","set","setCtor","common","json","test","nested","google","protobuf","Any","fields","type_url","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","decode","readerOrBuffer","getFieldsById","reader","Reader","limit","undefined","len","pos","message","getCtor","tag","resolvedType","Enum","map","resolvedKeyType","uint32","ks","vs","types","basic","longToHash","repeated","packed","wireType","plimit","skipType","generate","mtype","gen","codegen","safeProp","encode","writer","Writer","fi","fork","mapKey","ldelim","required","long","longNeq","reset","keyWireType","options","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","extend","props","valuesById","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","getValuesById","remove","Field","toString","toLowerCase","optional","partOf","Long","extensionField","declaringField","_packed","FieldPrototype","MapField","isPacked","getOption","setOption","ifNotSet","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","String","Number","toNumber","charAt","MapFieldPrototype","MessagePrototype","asJSON","k","push","key","array","j","fieldsOnly","encodeDelimited","decodeDelimited","verify","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","Namespace","_nestedArray","namespace","arrayToJSON","obj","NamespacePrototype","Service","nestedTypes","nestedError","join","nestedArray","toArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","object","prev","setOptions","onAdd","onRemove","define","path","split","ptr","part","shift","resolveAll","parentAlreadyChecked","getRoot","slice","found","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","substring","toUpperCase","_fields","addFieldsToParent","OneOfPrototype","index","splice","lower","token","parse","source","illegal","tn","line","s_bclose","readString","next","s_dq","s_sq","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRange","start","parseId","end","s_semi","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","s_name","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","p3","isProto3","parseCommon","s_option","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","s_open","s_close","parseMapField","s_required","s_optional","s_repeated","parseField","parseOneOf","extensions","reserved","s_type","camelCase","parseInlineOptions","valueType","parseEnumField","custom","s_bopen","fqTypeRefRe","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","package","indexOutOfRange","writeLength","RangeError","buf","Tag","readLongVarint","lo","hi","b","LongBits","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readLongFixed","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","BufferReader","initBufferReader","readStringBuffer_utf8Slice","utf8Slice","readStringBuffer_toString","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","ieee754","utf8","ArrayImpl","Uint8Array","Buffer","isBuffer","_slice","subarray","int32","octet","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","float","readDouble","Float64Array","f64","double","bytes","string","finish","remain","BufferReaderPrototype","readStringBuffer","readFloatLE","readDoubleLE","_configure","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","filename","callback","err","cb","process","JSON","parsed","self","fetch","sync","queued","weak","idx","altname","setTimeout","fs","readFileSync","asPromise","loadSync","newDeferred","rpc","rpcImpl","EventEmitter","$rpc","ServicePrototype","endedByRPC","emit","off","_methodsArray","methodsArray","methodName","inherited","getMethodsArray","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","str","replace","$0","$1","subject","re","stringDelim","stringDoubleRe","stringSingleRe","lastIndex","match","exec","stack","repeat","curr","s_nl","s_sl","s_as","delimRe","delim","expected","actual","equals","_fieldsById","_fieldsArray","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","fieldName","oneOfName","supported","eof","fld","bake","fn","ctx","args","arguments","Promise","reject","apply","concat","onload","xhr","status","responseText","readFile","XMLHttpRequest","onreadystatechange","readyState","open","send","isAbsolutePath","normalizePath","parts","prefix","description","TypeError","eval","originPath","importPath","alreadyNormalized","dst","src","underScore","newBuffer","size","allocUnsafe","runtime","base64","p","ceil","b64","fromCharCode","s64","invalidEncoding","charCodeAt","sprintf","level","indent","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","scope","verbose","console","Function","format","params","param","stringify","_listeners","EventEmitterPrototype","on","evt","listeners","LongBitsPrototype","zero","zzEncode","fromNumber","from","fromString","low","high","unsigned","fromHash","hash","toHash","mask","part0","part1","part2","pool","alloc","SIZE","MAX","slab","isNode","global","versions","node","dcodeIO","isFinite","longFromHash","bits","fromBits","target","descriptors","descriptor","ie8","ucKey","defineProperty","freeze","strlen","c1","c2","invalid","verifyValue","reason","verifyKey","genVerifyValue","fieldIndex","ref","genVerifyKey","Op","val","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","WriterPrototype","op","writeFloat","writeDouble","writeBytes","BufferWriterPrototype","writeStringBuffer","utf8Write","byteLength","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(9),\r\n    Type    = require(21),\r\n    util    = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n * @abstract\r\n */\r\nfunction Class(type) {\r\n    return Class.create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = function create(type, ctor) {\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    var clazz = ctor;\r\n    if (clazz) {\r\n        if (typeof clazz !== 'function')\r\n            throw _TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        clazz = (function(MessageCtor) { // eslint-disable-line wrap-iife\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    clazz.constructor = Class;\r\n    \r\n    // new Class() -> Message.prototype\r\n    var prototype = clazz.prototype = new Message();\r\n    prototype.constructor = clazz;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(clazz, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    clazz.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.getFieldsArray().forEach(function(field) {\r\n        field.resolve();\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue)\r\n            ? util.emptyObject\r\n            : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                var keys = Object.keys(this);\r\n                for (var i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                var keys = oneof.oneof;\r\n                for (var i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.setCtor(clazz);\r\n\r\n    return prototype;\r\n};\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = decode;\r\n\r\nvar Enum    = require(6),\r\n    Reader  = require(15),\r\n    types   = require(22),\r\n    util    = require(23);\r\n\r\n/**\r\n * General purpose message decoder.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Populated runtime message\r\n * @this Type\r\n * @property {GenerateDecoder} generate Generates a type specific decoder\r\n */\r\nfunction decode(readerOrBuffer, length) {\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.getFieldsById(),\r\n        reader  = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new (this.getCtor())();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.tag(),\r\n            field    = fields[tag.id].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                    length  = reader.uint32();\r\n                var map = message[field.name] = {};\r\n                if (length) {\r\n                    length += reader.pos;\r\n                    var ks = [], vs = [];\r\n                    while (reader.pos < length) {\r\n                        if (reader.tag().id === 1)\r\n                            ks[ks.length] = reader[keyType]();\r\n                        else if (types.basic[type] !== undefined)\r\n                            vs[vs.length] = reader[type]();\r\n                        else\r\n                            vs[vs.length] = field.resolvedType.decode(reader, reader.uint32());\r\n                    }\r\n                    for (var i = 0; i < ks.length; ++i)\r\n                        map[typeof ks[i] === 'object' ? util.longToHash(ks[i]) : ks[i]] = vs[i];\r\n                }\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] && message[field.name].length ? message[field.name] : message[field.name] = [];\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && tag.wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values[values.length] = reader[type]();\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] !== undefined)\r\n                    values[values.length] = reader[type]();\r\n                else\r\n                    values[values.length] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] !== undefined)\r\n                message[field.name] = reader[type]();\r\n              else\r\n                message[field.name] = field.resolvedType.decode(reader, reader.uint32());\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(tag.wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @typedef GenerateDecoder\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\ndecode.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.tag()\")\r\n        (\"switch(t.id){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"var n=r.uint32(),o={}\")\r\n                (\"if(n){\")\r\n                    (\"n+=r.pos\")\r\n                    (\"var k=[],v=[]\")\r\n                    (\"while(r.pos<n){\")\r\n                        (\"if(r.tag().id===1)\")\r\n                            (\"k[k.length]=r.%s()\", keyType);\r\n\r\n                        if (types.basic[type] !== undefined) gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=r.%s()\", type);\r\n\r\n                        else gen\r\n\r\n                        (\"else\")\r\n                            (\"v[v.length]=types[%d].decode(r,r.uint32())\", i, i);\r\n                    gen\r\n                    (\"}\")\r\n                    (\"for(var i=0;i<k.length;++i)\")\r\n                        (\"o[typeof(k[i])==='object'?util.longToHash(k[i]):k[i]]=v[i]\")\r\n                (\"}\")\r\n                (\"m%s=o\", prop);\r\n\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s&&m%s.length?m%s:m%s=[]\", prop, prop, prop, prop);\r\n\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n                (\"if(t.wireType===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s[m%s.length]=r.%s()\", prop, prop, type)\r\n                (\"}else\");\r\n            }\r\n\r\n            if (types.basic[type] !== undefined) gen\r\n\r\n                    (\"m%s[m%s.length]=r.%s()\", prop, prop, type);\r\n\r\n            else gen\r\n\r\n                    (\"m%s[m%s.length]=types[%d].decode(r,r.uint32())\", prop, prop, i, i);\r\n\r\n        } else if (types.basic[type] !== undefined) { gen\r\n\r\n                (\"m%s=r.%s()\", prop, type);\r\n\r\n        } else { gen\r\n\r\n                (\"m%s=types[%d].decode(r,r.uint32())\", prop, i, i);\r\n\r\n        } gen\r\n                (\"break\");\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t.wireType)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = encode;\r\n\r\nvar Enum    = require(6),\r\n    Writer  = require(32),\r\n    types   = require(22),\r\n    util    = require(23);\r\n\r\n/**\r\n * General purpose message encoder.\r\n * @param {Message|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n * @this Type\r\n * @property {GenerateEncoder} generate Generates a type specific encoder\r\n */\r\nfunction encode(message, writer) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer.create();\r\n    var fields = this.getFieldsArray(), fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            var value, keys;\r\n            if ((value = message[field.name]) && (keys = Object.keys(value)).length) {\r\n                writer.fork();\r\n                for (var i = 0; i < keys.length; ++i) {\r\n                    writer.tag(1, types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType !== undefined)\r\n                        writer.tag(2, wireType)[type](value[keys[i]]);\r\n                    else\r\n                        field.resolvedType.encode(value[keys[i]], writer.tag(2,2).fork()).ldelim();\r\n                }\r\n                writer.ldelim(field.id);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    writer.fork();\r\n                    var i = 0;\r\n                    while (i < values.length)\r\n                        writer[type](values[i++]);\r\n                    writer.ldelim(field.id);\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType !== undefined)\r\n                        while (i < values.length)\r\n                            writer.tag(field.id, wireType)[type](values[i++]);\r\n                    else\r\n                        while (i < values.length)\r\n                            field.resolvedType.encode(values[i++], writer.tag(field.id,2).fork()).ldelim();\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name];\r\n            if (field.required || value !== undefined && field.long ? util.longNeq(value, field.defaultValue) : value !== field.defaultValue) {\r\n                if (wireType !== undefined)\r\n                    writer.tag(field.id, wireType)[type](value);\r\n                else {\r\n                    field.resolvedType.encode(value, writer.fork());\r\n                    if (writer.len || field.required)\r\n                        writer.ldelim(field.id);\r\n                    else\r\n                        writer.reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates an {@link Encoder|encoder} specific to the specified message type.\r\n * @typedef GenerateEncoder\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\nencode.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = util.safeProp(field.name);\r\n        \r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType     = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType,\r\n                keyWireType = types.mapKey[keyType];\r\n            gen\r\n\r\n    (\"if(m%s){\", prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0,ks=Object.keys(m%s);i<ks.length;++i){\", prop)\r\n            (\"w.tag(1,%d).%s(ks[i])\", keyWireType, keyType);\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n            (\"w.tag(2,%d).%s(m%s[ks[i]])\", wireType, type, prop);\r\n\r\n            else gen\r\n            \r\n            (\"types[%d].encode(m%s[ks[i]],w.tag(2,2).fork()).ldelim()\", i, prop);\r\n\r\n            gen\r\n        (\"}\")\r\n        (\"w.len&&w.ldelim(%d)||w.reset()\", field.id)\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.fork()\")\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim(%d)\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.tag(%d,%d).%s(m%s[i])\", field.id, wireType, type, prop);\r\n                else gen\r\n            (\"types[%d].encode(m%s[i],w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(m%s!==undefined&&util.longNeq(m%s,%j))\", prop, prop, field.defaultValue);\r\n                else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n\r\n        (\"w.tag(%d,%d).%s(m%s)\", field.id, wireType, type, prop);\r\n\r\n            else if (field.required) gen\r\n            \r\n        (\"types[%d].encode(m%s,w.tag(%d,2).fork()).ldelim()\", i, prop, field.id);\r\n        \r\n            else gen\r\n\r\n        (\"types[%d].encode(m%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", i, prop, field.id);\r\n    \r\n        }\r\n    }\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(12);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nvar util = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error('duplicate name \"' + name + '\" in ' + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error('\"' + name + '\" is not a name of ' + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(12);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nvar Type      = require(21),\r\n    Enum      = require(6),\r\n    MapField  = require(8),\r\n    types     = require(22),\r\n    util      = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object} [rule=\"optional\"] Field rule\r\n * @param {string|Object} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== 'optional' ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined)\r\n        return MapField.fromJSON(name, json);\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options['default']) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n    \r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Message#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (this.resolvedType instanceof Enum && options['enum'] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        else if (this.long && options.long)\r\n            return options.long === Number\r\n                ? typeof value === 'number'\r\n                ? value\r\n                : util.Long.fromValue(value).toNumber()\r\n                : util.Long.fromValue(value, this.type.charAt(0) === 'u').toString();\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(7);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nvar Enum    = require(6),\r\n    types   = require(22),\r\n    util    = require(23);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * \r\n * This method should be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @extends {Object}\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @abstract\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {*} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {*} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @param {boolean} [options.defaults=false] Also sets default values on the resulting object\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    if (!options)\r\n        options = {};\r\n    var fields = this.$type.fields,\r\n        json   = {};\r\n    var keys;\r\n    if (options.defaults) {\r\n        keys = [];\r\n        for (var k in this) // eslint-disable-line guard-for-in\r\n            keys.push(k);\r\n    } else\r\n        keys = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && value.length) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (!options.fieldsOnly)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(12);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nvar Type = require(21),\r\n    util = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (type && !util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    this.resolvedResponseType = resolved;\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(12);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nvar Enum    = require(6),\r\n    Type    = require(21),\r\n    Field   = require(7),\r\n    Service = require(19),\r\n    util    = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\nvar nestedTypes = [ Enum, Type, Service, Field, Namespace ],\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(', ');\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson)\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw _TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split('.');\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split('.');\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found instanceof Namespace && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.extend = extend;\r\n\r\nvar Root = require(16),\r\n    util = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join('.');\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Lets the specified constructor extend this class.\r\n * @memberof ReflectionObject\r\n * @param {*} constructor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this ReflectionObject\r\n */\r\nfunction extend(constructor) {\r\n    var prototype = constructor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = constructor;\r\n    constructor.extend = extend;\r\n    return prototype;\r\n}\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Constructor name, space, full name\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    return this.constructor.name + \" \" + this.getFullName();\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(12);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nvar Field = require(7),\r\n    util  = require(23);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = this.name.substring(0, 1).toUpperCase() + this.name.substring(1);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fields = [];\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fields.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fields.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fields.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fields.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fields.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize  = require(20),\r\n    Root      = require(16),\r\n    Type      = require(21),\r\n    Field     = require(7),\r\n    MapField  = require(8),\r\n    OneOf     = require(13),\r\n    Enum      = require(6),\r\n    Service   = require(19),\r\n    Method    = require(10),\r\n    types     = require(22),\r\n    util      = require(23);\r\nvar camelCase = util.camelCase;\r\n\r\nvar nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nvar s_required = \"required\",\r\n    s_repeated = \"repeated\",\r\n    s_optional = \"optional\",\r\n    s_option   = \"option\",\r\n    s_name     = \"name\",\r\n    s_type     = \"type\";\r\nvar s_open     = \"{\",\r\n    s_close    = \"}\",\r\n    s_bopen    = '(',\r\n    s_bclose   = ')',\r\n    s_semi     = \";\",\r\n    s_dq       = '\"',\r\n    s_sq       = \"'\";\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} [root] Root to populate\r\n * @returns {ParserResult} Parser result\r\n */\r\nfunction parse(source, root) {\r\n    /* eslint-disable callback-return */\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    function illegal(token, name) {\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (line \" + tn.line() + s_bclose);\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== s_dq && token !== s_sq)\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === s_dq || token === s_sq);\r\n        return values.join('');\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case s_sq:\r\n            case s_dq:\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(s_semi);\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === '-') {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, 'number');\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"min\": return 1;\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === '-' && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, s_name);\r\n        ptr = ptr.define(pkg);\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(s_semi);\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        var p3;\r\n        if ([ \"proto2\", p3 = \"proto3\" ].indexOf(syntax) < 0)\r\n            throw illegal(syntax, \"syntax\");\r\n        isProto3 = syntax === p3;\r\n        skip(s_semi);\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case s_option:\r\n                parseOption(parent, token);\r\n                skip(s_semi);\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n                    case s_required:\r\n                    case s_optional:\r\n                    case s_repeated:\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, s_optional);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, s_type);\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, s_type);\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, s_type);\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        name = camelCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (token === s_option) {\r\n                    parseOption(oneof, token);\r\n                    skip(s_semi);\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, s_optional);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (lower(token) === s_option)\r\n                    parseOption(enm);\r\n                else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, s_name);\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(s_bopen, true);\r\n        var name = next();\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, s_name);\r\n        if (custom) {\r\n            skip(s_bclose);\r\n            name = s_bopen + name + s_bclose;\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                if (!nameRe.test(token))\r\n                    throw illegal(token, s_name);\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, s_option);\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(s_semi);\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(service, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, s_name);\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(s_bopen);\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(s_bclose); skip(\"returns\"); skip(s_bopen);\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(s_bclose);\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_option:\r\n                        parseOption(method, tokenLower);\r\n                        skip(s_semi);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(s_open, true)) {\r\n            while ((token = next()) !== s_close) {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case s_required:\r\n                    case s_repeated:\r\n                    case s_optional:\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, s_optional, reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(s_semi, true);\r\n        } else\r\n            skip(s_semi);\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case s_option:\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(s_semi);\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    return {\r\n        'package'     : pkg,\r\n        'imports'     : imports,\r\n        'weakImports' : weakImports,\r\n        'syntax'      : syntax,\r\n        'root'        : root\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util      = require(29),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = function create(buffer) {\r\n    return new (util.Buffer && util.Buffer.isBuffer(buffer) && BufferReader || Reader)(buffer);\r\n};\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice;\r\n\r\n/**\r\n * Tag read.\r\n * @constructor\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @ignore\r\n */\r\nfunction Tag(id, wireType) {\r\n    this.id = id;\r\n    this.wireType = wireType;\r\n}\r\n\r\n/**\r\n * Reads a tag.\r\n * @returns {{id: number, wireType: number}} Field id and wire type\r\n */\r\nReaderPrototype.tag = function read_tag() {\r\n    if (this.pos >= this.len)\r\n        throw indexOutOfRange(this);\r\n    return new Tag(this.buf[this.pos] >>> 3, this.buf[this.pos++] & 7);\r\n};\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    // 1 byte\r\n    var octet = this.buf[this.pos++],\r\n        value = octet & 127;\r\n    if (octet > 127) { // false if octet is undefined (pos >= len)\r\n        // 2 bytes\r\n        octet = this.buf[this.pos++];\r\n        value |= (octet & 127) << 7;\r\n        if (octet > 127) {\r\n            // 3 bytes\r\n            octet = this.buf[this.pos++];\r\n            value |= (octet & 127) << 14;\r\n            if (octet > 127) {\r\n                // 4 bytes\r\n                octet = this.buf[this.pos++];\r\n                value |= (octet & 127) << 21;\r\n                if (octet > 127) {\r\n                    // 5 bytes\r\n                    octet = this.buf[this.pos++];\r\n                    value |= octet << 28;\r\n                    if (octet > 127) {\r\n                        // 6..10 bytes (sign extended)\r\n                        this.pos += 5;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (this.pos > this.len) {\r\n        this.pos = this.len;\r\n        throw indexOutOfRange(this);\r\n    }\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    return this.int32() >>> 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.int32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    var lo = 0, hi = 0,\r\n        i  = 0, b  = 0;\r\n    if (this.len - this.pos > 9) { // fast route\r\n        for (i = 0; i < 4; ++i) {\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            lo |= (b & 127) << i * 7;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        b = this.buf[this.pos++];\r\n        lo |= (b & 127) << 28;\r\n        hi |= (b & 127) >> 4;\r\n        if (b < 128)\r\n            return new LongBits(lo >>> 0, hi >>> 0);\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            b = this.buf[this.pos++];\r\n            hi |= (b & 127) << i * 7 + 3;\r\n            if (b < 128)\r\n                return new LongBits(lo >>> 0, hi >>> 0);\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.int32() !== 0;\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    this.pos += 4;\r\n    return this.buf[this.pos - 4]\r\n         | this.buf[this.pos - 3] << 8\r\n         | this.buf[this.pos - 2] << 16\r\n         | this.buf[this.pos - 1] << 24;\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongFixed() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    ,\r\n      ( this.buf[this.pos++]\r\n      | this.buf[this.pos++] << 8\r\n      | this.buf[this.pos++] << 16\r\n      | this.buf[this.pos++] << 24 ) >>> 0\r\n    );\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readLongFixed.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readLongFixed.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readLongFixed.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readLongFixed.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[3] = buf[pos  ];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[0] = buf[pos  ];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[3] = buf[pos++];\r\n                f8b[4] = buf[pos++];\r\n                f8b[5] = buf[pos++];\r\n                f8b[6] = buf[pos++];\r\n                f8b[7] = buf[pos  ];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos++];\r\n                f8b[6] = buf[pos++];\r\n                f8b[5] = buf[pos++];\r\n                f8b[4] = buf[pos++];\r\n                f8b[3] = buf[pos++];\r\n                f8b[2] = buf[pos++];\r\n                f8b[1] = buf[pos++];\r\n                f8b[0] = buf[pos  ];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                var tag = this.tag();\r\n                if (tag.wireType === 4)\r\n                    break;\r\n                this.skipType(tag.wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    if (!util.Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n    readStringBuffer = util.Buffer.prototype.utf8Slice // around forever, but not present in browser buffer\r\n        ? readStringBuffer_utf8Slice\r\n        : readStringBuffer_toString;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nif (typeof Float32Array === 'undefined') // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nif (typeof Float64Array === 'undefined') // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\nvar readStringBuffer;\r\n\r\nfunction readStringBuffer_utf8Slice(buf, start, end) {\r\n    return buf.utf8Slice(start, end); // fastest\r\n}\r\n\r\nfunction readStringBuffer_toString(buf, start, end) {\r\n    return buf.toString(\"utf8\", start, end); // 2nd, again assertions\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.int32() >>> 0,\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return readStringBuffer(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(11);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nvar Field  = require(7),\r\n    util   = require(23),\r\n    common = require(3);\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.resolvePath;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, callback) {\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                var parsed = require(14)(source, self);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Promise<Root>} Promise\r\n * @variation 2\r\n */\r\n// function load(filename:string):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename) {\r\n    return this.load(filename, SYNC);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.toString = function toString() {\r\n    return this.constructor.name;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(18);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar EventEmitter = require(26);\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit('end').off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(11);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nvar Method = require(10),\r\n    util   = require(23),\r\n    rpc    = require(17);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl RPC implementation ({@link RPCImpl|see})\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[method.name.substring(0, 1).toLowerCase() + method.name.substring(1)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited && method.resolvedRequestType.encodeDelimited(request) || method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === 'function' && setImmediate || setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit('error', err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited && method.resolvedResponseType.decodeDelimited(responseData) || method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit('error', err2, method);\r\n                    return callback ? callback('error', err2) : undefined;\r\n                }\r\n                rpcService.emit('data', response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n\r\nvar s_nl = \"\\n\",\r\n    s_sl = '/',\r\n    s_as = '*';\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === '\"' ? stringDoubleRe : stringSingleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === s_nl)\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === s_sl) {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === s_sl) { // Line\r\n                    while (charAt(++offset) !== s_nl)\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === s_as) { /* Block */\r\n                    do {\r\n                        if (curr === s_nl)\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== s_as || curr !== s_sl);\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return s_sl;\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === '\"' || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(11);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nvar Enum      = require(6),\r\n    OneOf     = require(13),\r\n    Field     = require(7),\r\n    Service   = require(19),\r\n    Class     = require(2),\r\n    Message   = require(9),\r\n    Reader    = require(15),\r\n    Writer    = require(32),\r\n    util      = require(23);\r\nvar encode    = require(5),\r\n    decode    = require(4),\r\n    verify    = require(31);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + '\" in ' + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object|*} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new (this.getCtor())(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return (this.encode = util.codegen.supported\r\n        ? encode.generate(this).eof(this.getFullName() + \"$encode\", {\r\n              Writer : Writer,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : encode\r\n    ).call(this, message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return (this.decode = util.codegen.supported\r\n        ? decode.generate(this).eof(this.getFullName() + \"$decode\", {\r\n              Reader : Reader,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : decode\r\n    ).call(this, readerOrBuffer, length);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return (this.verify = util.codegen.supported\r\n        ? verify.generate(this).eof(this.getFullName() + \"$verify\", {\r\n              types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util  : util\r\n          })\r\n        : verify\r\n    ).call(this, message);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(23);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = exports;\r\n\r\nutil.codegen = require(25);\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Returns a promise from a node-style function.\r\n * @memberof util\r\n * @param {function(Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var args = [];\r\n    for (var i = 2; i < arguments.length; ++i)\r\n        args.push(arguments[i]);\r\n    return new Promise(function(resolve, reject) {\r\n        fn.apply(ctx, args.concat(\r\n            function(err/*, varargs */) {\r\n                if (err) reject(err);\r\n                else resolve.apply(null, Array.prototype.slice.call(arguments, 1));\r\n            }\r\n        ));\r\n    });\r\n}\r\n\r\nutil.asPromise = asPromise;\r\n\r\n/**\r\n * Filesystem, if available.\r\n * @memberof util\r\n * @type {?Object}\r\n */\r\nvar fs = null; // Hide this from webpack. There is probably another, better way.\r\ntry { fs = eval(['req','uire'].join(''))(\"fs\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n\r\nutil.fs = fs;\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, util, path);\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", callback);\r\n    var xhr = new XMLHttpRequest();\r\n    function onload() {\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n        if (util.isString(xhr.responseText))\r\n            return callback(null, xhr.responseText);\r\n        return callback(Error(\"request failed\"));\r\n    }\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4)\r\n            onload();\r\n    };\r\n    xhr.open(\"GET\", path, true);\r\n    xhr.send();\r\n    return undefined;\r\n}\r\n\r\nutil.fetch = fetch;\r\n\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @memberof util\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\nfunction isAbsolutePath(path) {\r\n    return /^(?:\\/|[a-zA-Z0-9]+:)/.test(path);\r\n}\r\n\r\nutil.isAbsolutePath = isAbsolutePath;\r\n\r\n/**\r\n * Normalizes the specified path.\r\n * @memberof util\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\nfunction normalizePath(path) {\r\n    path = path.replace(/\\\\/g, '/')\r\n               .replace(/\\/{2,}/g, '/');\r\n    var parts = path.split('/');\r\n    var abs = isAbsolutePath(path);\r\n    var prefix = \"\";\r\n    if (abs)\r\n        prefix = parts.shift() + '/';\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === '..') {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (abs)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === '.')\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join('/');\r\n}\r\n\r\nutil.normalizePath = normalizePath;\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path that was used to fetch the origin file\r\n * @param {string} importPath Import path specified in the origin file\r\n * @param {boolean} [alreadyNormalized] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the imported file\r\n */\r\nutil.resolvePath = function resolvePath(originPath, importPath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        importPath = normalizePath(importPath);\r\n    if (isAbsolutePath(importPath))\r\n        return importPath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalizePath(originPath);\r\n    originPath = originPath.replace(/(?:\\/|^)[^/]+$/, '');\r\n    return originPath.length ? normalizePath(originPath + '/' + importPath) : importPath;\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"['\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/'/g, \"\\\\'\") + \"']\";\r\n};\r\n\r\n/**\r\n * Converts a string to camel case notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Converts a string to underscore notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.underScore = function underScore(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) { return \"_\" + $1.toLowerCase(); });\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe && util.Buffer.allocUnsafe(size) || new util.Buffer(size)\r\n        : new (typeof Uint8Array !== 'undefined' && Uint8Array || Array)(size);\r\n};\r\n\r\nvar runtime = require(29);\r\n\r\nutil.EventEmitter = require(26);\r\n\r\n// Merge in runtime utility\r\nutil.merge(util, runtime);\r\n\r\nutil._configure = function configure() {\r\n    runtime.Long = util.Long;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the base64 byte length of a string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === '=')\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = [\r\n    65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\r\n    81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102,\r\n    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,\r\n    119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47\r\n];\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\n// Base64 decoding table\r\nvar s64 = []; for (var i = 0; i < b64.length; ++i) s64[b64[i]] = i;\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var args   = Array.prototype.slice.call(arguments),\r\n        src    = ['\\t\"use strict\"'],\r\n        indent = 1,\r\n        inCase = false;\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var line = sprintf.apply(null, arguments);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (var index = 0; index < level; ++index)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + args.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === 'object') {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var params = Array.prototype.slice.call(arguments, 1),\r\n        index  = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var param = params[index++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(param);\r\n            default:\r\n                return String(param);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        for (var i = 0; i < listeners.length; ++i)\r\n            listeners[i].fn.apply(listeners[i].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(23);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    switch (typeof value) {\r\n        case 'number':\r\n            return LongBits.fromNumber(value);\r\n        case 'string':\r\n            if (util.Long)\r\n                value = util.Long.fromString(value);\r\n                // fallthrough\r\n            else\r\n                return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return (value.low || value.high) && new LongBits(value.low >>> 0, value.high >>> 0) || zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo, this.hi, unsigned)\r\n        : { low: this.lo, high: this.hi, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nvar LongBits = util.LongBits = require(\"./longbits\");\r\n\r\nutil.base64 = require(\"./base64\");\r\nutil.utf8   = require(\"./utf8\");\r\nutil.pool   = require(\"./pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nvar isNode = util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Buffer = null;\r\n\r\nif (isNode)\r\n    try { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || null;\r\n\r\nif (!util.Long && isNode)\r\n    try { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === 'object');\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : '\\0\\0\\0\\0\\0\\0\\0\\0';\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === 'number'\r\n         ? typeof b === 'number'\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === 'number'\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ie8 = !-[1,];\r\n    var ucKey = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n    if (descriptor.get)\r\n        target['get' + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target['set' + ucKey] = ie8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (ie8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze([]);\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze({});\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var strlen = string.length >>> 0;\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < strlen; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len > 0) {\r\n        var string = [],\r\n            i = 0, // char offset\r\n            t;     // temporary\r\n        while (start < end) {\r\n            t = buffer[start++];\r\n            if (t < 128)\r\n                string[i++] = t;\r\n            else if (t > 191 && t < 224)\r\n                string[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n            else if (t > 239 && t < 365) {\r\n                t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n                string[i++] = 0xD800 + (t >> 10);\r\n                string[i++] = 0xDC00 + (t & 1023);\r\n            } else\r\n                string[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        }\r\n        return String.fromCharCode.apply(String, string.slice(0, i));\r\n    }\r\n    return \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = verify;\r\n\r\nvar Enum      = require(6),\r\n    Type      = require(21),\r\n    util      = require(23);\r\nvar isInteger = util.isInteger;\r\n\r\nfunction invalid(field, expected) {\r\n    return \"invalid value for field \" + field.getFullName() + \" (\" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected)\";\r\n}\r\n\r\nfunction verifyValue(field, value) {\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\":\r\n            if (typeof value !== 'number')\r\n                return invalid(field, \"number\");\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (!isInteger(value))\r\n                return invalid(field, \"integer\");\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (!(isInteger(value) || value && isInteger(value.low) && isInteger(value.high)))\r\n                return invalid(field, \"integer|Long\");\r\n            break;\r\n        case \"bool\":\r\n            if (typeof value !== 'boolean')\r\n                return invalid(field, \"boolean\");\r\n            break;\r\n        case \"string\":\r\n            if (!util.isString(value))\r\n                return invalid(field, \"string\");\r\n            break;\r\n        case \"bytes\":\r\n            if (!(value && typeof value.length === 'number' || util.isString(value)))\r\n                return invalid(field, \"buffer\");\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) {\r\n                if (typeof field.resolvedType.getValuesById()[value] !== 'number')\r\n                    return invalid(field, \"enum value\");\r\n            } else if (field.resolvedType instanceof Type) {\r\n                var reason = field.resolvedType.verify(value);\r\n                if (reason)\r\n                    return reason;\r\n            }\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction verifyKey(field, value) {\r\n    switch (field.keyType) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (/^[\\x00-\\xff]{8}$/.test(value)) // eslint-disable-line no-control-regex\r\n                return null;\r\n            // fallthrough\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (/^-?(?:0|[1-9]\\d*)$/.test(value))\r\n                return invalid(field, \"integer key\");\r\n            break;\r\n        case \"bool\":\r\n            if (/^true|false|0|1$/.test(value))\r\n                return invalid(field, \"boolean key\");\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * General purpose message verifier.\r\n * @param {Message|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n * @this {Type}\r\n * @property {GenerateVerifier} generate Generates a type specific verifier\r\n */\r\nfunction verify(message) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    var fields = this.getFieldsArray(),\r\n        i = 0,\r\n        reason;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        // map fields\r\n        if (field.map) {\r\n\r\n            if (value !== undefined) {\r\n                if (!util.isObject(value))\r\n                    return invalid(field, \"object\");\r\n                var keys = Object.keys(value);\r\n                for (var j = 0; j < keys.length; ++j) {\r\n                    if (reason = verifyKey(field, keys[j])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n                    if (reason = verifyValue(field, value[keys[j]])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n                }\r\n            }\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            if (value !== undefined) {\r\n                if (!Array.isArray(value))\r\n                    return invalid(field, \"array\");\r\n                for (var j = 0; j < value.length; ++j)\r\n                    if (reason = verifyValue(field, value[j])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n            }\r\n\r\n        // required or present fields\r\n        } else if (field.required || value !== undefined) {\r\n            \r\n            if (reason = verifyValue(field, value)) // eslint-disable-line no-cond-assign\r\n                return reason;\r\n        }\r\n\r\n    }\r\n    return null;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\": gen\r\n            (\"if(typeof %s!=='number')\", ref)\r\n                (\"return%j\", invalid(field, \"number\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.isInteger(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!(util.isInteger(%s)||%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                (\"return%j\", invalid(field, \"integer|Long\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(typeof %s!=='boolean')\", ref)\r\n                (\"return%j\", invalid(field, \"boolean\"));\r\n            break;\r\n        case \"string\": gen\r\n            (\"if(!util.isString(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"string\"));\r\n            break;\r\n        case \"bytes\": gen\r\n            (\"if(!(%s&&typeof %s.length==='number'||util.isString(%s))\", ref, ref, ref)\r\n                (\"return%j\", invalid(field, \"buffer\"));\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) { gen\r\n                (\"switch(%s){\", ref)\r\n                    (\"default:\")\r\n                        (\"return%j\", invalid(field, \"enum value\"));\r\n                var values = util.toArray(field.resolvedType.values);\r\n                for (var j = 0; j < values.length; ++j) gen\r\n                    (\"case %d:\", values[j]);\r\n                gen\r\n                        (\"break\")\r\n                (\"}\");\r\n            } else if (field.resolvedType instanceof Type) { gen\r\n                (\"var r;\")\r\n                (\"if(r=types[%d].verify(%s))\", fieldIndex, ref)\r\n                    (\"return r\");\r\n            }\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"bool\":\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @typedef GenerateVerifier\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\nverify.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!util.isObject(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(m%s)\", prop)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!Array.isArray(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<m%s.length;++i){\", prop);\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) gen\r\n            (\"if(m%s!==undefined){\", prop);\r\n                genVerifyValue(gen, field, i, \"m\" + prop);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util      = require(29),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {*} val Value to write\r\n * @param {number} len Value byte length\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, val, len) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {?Writer.Op}\r\n     */\r\n    this.next = null;\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @param {State} next Next state entry\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer, next) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = next;\r\n}\r\n\r\nWriter.State = State;\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = function create() {\r\n    return new (util.Buffer && BufferWriter || Writer);\r\n};\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new ArrayImpl(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (ArrayImpl !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    var op = new Op(fn, val, len);\r\n    this.tail.next = op;\r\n    this.tail = op;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\n/**\r\n * Writes a tag.\r\n * @param {number} id Field id\r\n * @param {number} wireType Wire type\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.tag = function write_tag(id, wireType) {\r\n    return this.push(writeByte, 1, id << 3 | wireType & 7);\r\n};\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value >>>= 0;\r\n    return value < 128\r\n        ? this.push(writeByte, 1, value)\r\n        : this.push(writeVarint32,\r\n              value < 16384     ? 2\r\n            : value < 2097152   ? 3\r\n            : value < 268435456 ? 4\r\n            :                     5\r\n        , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32(value << 1 ^ value >> 31);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    // tends to deoptimize. stays optimized when using bits directly.\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== 'undefined'\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === 'string' && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#}, {@link Writer#reset} or {@link Writer#finish} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this, this.states);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend as a tag where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (id !== undefined)\r\n        this.tag(id, 2);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of write operations and frees all resources.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len);\r\n    this.reset();\r\n    var pos = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    BufferWriter.alloc = util.Buffer.allocUnsafe\r\n        ? util.Buffer.allocUnsafe\r\n        : function allocUnsafeNew(size) { return new util.Buffer(size); };\r\n    return BufferWriter.alloc(size);\r\n};\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(val, buf, pos) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float32Array === 'undefined') // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(val, buf, pos) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float64Array === 'undefined') // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(val, buf, pos) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === 'string')\r\n        value = util.Buffer.from && util.Buffer.from(value, \"base64\") || new util.Buffer(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nvar writeStringBuffer = (function() { // eslint-disable-line wrap-iife\r\n    return util.Buffer && util.Buffer.prototype.utf8Write // around forever, but not present in browser buffer\r\n        ? function writeString_buffer_utf8Write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.utf8Write(val, pos);\r\n        }\r\n        : function writeString_buffer_write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.write(val, pos);\r\n        };\r\n    // Note that the plain JS encoder is faster for short strings, probably because of redundant assertions.\r\n    // For a raw utf8Write, the breaking point is about 20 characters, for write it is around 40 characters.\r\n    // Unfortunately, this does not translate 1:1 to real use cases, hence the common \"good enough\" limit of 40.\r\n})();\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = value.length < 40\r\n        ? utf8.length(value)\r\n        : util.Buffer.byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === 'function') {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = protobuf.Writer.BufferWriter;\r\n               var Reader =\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = protobuf.Reader.BufferReader;\r\nprotobuf.encode           = require(\"./encode\");\r\nprotobuf.decode           = require(\"./decode\");\r\nprotobuf.verify           = require(\"./verify\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\n                 var util =\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    util._configure();\r\n    Reader._configure();\r\n}\r\n\r\n// Be nice to AMD\r\nif (typeof define === 'function' && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}