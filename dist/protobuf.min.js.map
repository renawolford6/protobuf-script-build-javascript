{"version":3,"sources":["lib/prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/converter.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/index-light.js","src/index-minimal.js","src/index","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/minimal.js","src/util/protocolerror.js","src/verifier.js","src/writer.js","src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","util","configure","module","1","require","asPromise","fn","ctx","params","i","arguments","length","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","n","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","t","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","Error","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","e","EventEmitter","_listeners","prototype","on","evt","off","listeners","splice","emit","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","toString","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","moduleName","mod","eval","path","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","ctor","Type","TypeError","Message","constructor","merge","$type","fieldsArray","_fieldsArray","isArray","defaultValue","emptyArray","isObject","long","emptyObject","ctorProperties","oneofsArray","_oneofsArray","get","oneOfGetter","oneof","set","oneOfSetter","defineProperties","create","common","json","commonRe","nested","google","Any","fields","type_url","id","value","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","genValuePartial_fromObject","field","fieldIndex","prop","resolvedType","Enum","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","safeProp","toObject","repeatedFields","mapFields","otherFields","valuesById","low","high","unsigned","toNumber","bytes","missing","decoder","group","ref","types","basic","compat","packed","rfield","required","genTypePartial","encoder","partOf","wireType","mapKey","indexOf","ReflectionObject","comments","className","fromJSON","toJSON","add","comment","isString","isInteger","allow_alias","remove","val","Field","extend","ruleRe","toLowerCase","optional","message","extensionField","declaringField","_packed","defineProperty","getOption","setOption","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","load","root","Root","loadSync","build","verifier","Namespace","OneOf","MapField","Service","Method","_configure","Reader","BufferReader","roots","Writer","BufferWriter","rpc","tokenize","parse","resolvedKeyType","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","setOptions","onAdd","onRemove","ptr","part","resolveAll","filterType","parentAlreadyChecked","found","lookupService","lookupEnum","Type_","Service_","unshift","_handleAdd","_handleRemove","Root_","fieldNames","addFieldsToParent","index","self","lower","token","camelCase","substring","camelCaseRe","toUpperCase","illegal","insideTryCatch","tn","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRanges","target","acceptStrings","parseId","sign","tokenLower","Infinity","NaN","base10Re","parseInt","base16Re","base8Re","numberRe","parseFloat","acceptNegative","base10NegRe","base16NegRe","base8NegRe","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","nameRe","cmnt","parseMapField","parseField","parseOneOf","extensions","reserved","parseGroup","applyCase","trailingLine","parseInlineOptions","fieldName","lcFirst","ucFirst","valueType","enm","parseEnumValue","custom","fqTypeRefRe","parseOptionValue","service","parseMethod","method","reference","head","keepCase","package","indexOutOfRange","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","readFixed32","readFixed64","create_array","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","uint","exponent","mantissa","pow","float","readDouble","Float64Array","f64","double","skipType","BufferReader_","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","resolvePath","finish","cb","sync","process","parsed","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","requestCtor","responseCtor","request","endedByRPC","_methodsArray","inherited","methodsArray","rpcService","m","q","s","unescape","unescapeRe","unescapeMap","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","setComment","commentType","commentLine","lines","setCommentSplitRe","setCommentRe","trim","commentText","stack","repeat","curr","isComment","whitespaceRe","delimRe","delim","expected","actual","equals","ret","0","r","_fieldsById","_ctor","fieldsById","filter","isReservedId","isReservedName","setup","fork","ldelim","bake","o","safePropBackslashRe","safePropQuoteRe","zero","zzEncode","zeroHash","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ProtocolError","versions","node","Number","isFinite","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","dst","fieldMap","lazyResolve","lazyTypes","mkError","additionalProperties","longs","enums","encoding","allocUnsafe","messageText","messageInstance","instance","invalid","genVerifyValue","genVerifyKey","Op","noop","State","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.configure();\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(6);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(21),\r\n    util    = require(36);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction Class(type, ctor) {\r\n    if (!Type)\r\n        Type = require(34);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        // create named constructor functions (codegen is required anyway)\r\n        ctor = util.codegen(\"p\")(\"return c.call(this,p)\").eof(type.name, {\r\n            c: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    (ctor.prototype = new Message()).constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    ctor.prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    var i = 0;\r\n    for (; i < /* initializes */ type.fieldsArray.length; ++i) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        ctor.prototype[type._fieldsArray[i].name] = Array.isArray(type._fieldsArray[i].resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(type._fieldsArray[i].defaultValue) && !type._fieldsArray[i].long\r\n              ? util.emptyObject\r\n              : type._fieldsArray[i].defaultValue; // if a long, it is frozen when initialized\r\n    }\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    var ctorProperties = {};\r\n    for (i = 0; i < /* initializes */ type.oneofsArray.length; ++i)\r\n        ctorProperties[type._oneofsArray[i].resolve().name] = {\r\n            get: util.oneOfGetter(type._oneofsArray[i].oneof),\r\n            set: util.oneOfSetter(type._oneofsArray[i].oneof)\r\n        };\r\n    if (i)\r\n        Object.defineProperties(ctor.prototype, ctorProperties);\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return ctor.prototype;\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @function\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = Class;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object.<string,*>} google/protobuf/any.proto Any\r\n * @property {Object.<string,*>} google/protobuf/duration.proto Duration\r\n * @property {Object.<string,*>} google/protobuf/empty.proto Empty\r\n * @property {Object.<string,*>} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object.<string,*>} google/protobuf/timestamp.proto Timestamp\r\n * @property {Object.<string,*>} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n * \r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\r\nfunction common(name, json) {\r\n    if (!commonRe.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\nvar commonRe = /\\/|\\./;\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/field_mask.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(15),\r\n    util = require(36);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        otherFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (fields[i].resolve().repeated)\r\n            repeatedFields.push(fields[i]);\r\n        else if (fields[i].map)\r\n            mapFields.push(fields[i]);\r\n        else\r\n            otherFields.push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0, field; i < otherFields.length; ++i) {\r\n            var field = otherFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    for (i = 0, field; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m%s!==undefined&&m%s!==null&&m.hasOwnProperty(%j)){\", prop, prop, field.name);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, i, prop);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(35),\r\n    util    = require(36);\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,m)\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(35),\r\n    util     = require(36);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field    = mtype._fieldsArray[i].resolve();\r\n        if (field.partOf) // see below for oneofs\r\n            continue;\r\n        var type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length&&m.hasOwnProperty(%j)){\", ref, ref, field.name)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n                else if (field.bytes || field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j))\", ref, field.name);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < /* initializes */ mtype.oneofsArray.length; ++i) {\r\n        var oneof = mtype._oneofsArray[i]; gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        for (var j = 0; j < /* direct */ oneof.fieldsArray.length; ++j) {\r\n            var field    = oneof.fieldsArray[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name); gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, mtype._fieldsArray.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n    \r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id\");\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(15),\r\n    types = require(35),\r\n    util  = require(36);\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n\r\n        /* istanbul ignore if */\r\n        if (!Type)\r\n            Type = require(34);\r\n\r\n        var scope = this.declaringField ? this.declaringField.parent : this.parent;\r\n        if (this.resolvedType = scope.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = scope.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type + \" in \" + scope);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary packed option (parser adds this) if not referencing an enum\r\n    if (this.options && this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n        delete this.options.packed;\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(18);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(14);\r\nprotobuf.decoder          = require(13);\r\nprotobuf.verifier         = require(40);\r\nprotobuf.converter        = require(12);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(24);\r\nprotobuf.Namespace        = require(23);\r\nprotobuf.Root             = require(29);\r\nprotobuf.Enum             = require(15);\r\nprotobuf.Type             = require(34);\r\nprotobuf.Field            = require(16);\r\nprotobuf.OneOf            = require(25);\r\nprotobuf.MapField         = require(20);\r\nprotobuf.Service          = require(32);\r\nprotobuf.Method           = require(22);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(10);\r\nprotobuf.Message          = require(21);\r\n\r\n// Utility\r\nprotobuf.types            = require(35);\r\nprotobuf.util             = require(36);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n * \r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n * \r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(41);\r\nprotobuf.BufferWriter = require(42);\r\nprotobuf.Reader       = require(27);\r\nprotobuf.BufferReader = require(28);\r\n\r\n// Utility\r\nprotobuf.util         = require(38);\r\nprotobuf.rpc          = require(30);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"full\";\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(33);\r\nprotobuf.parse            = require(26);\r\nprotobuf.common           = require(11);\r\n\r\n// Configure parser\r\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(16);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(35),\r\n    util    = require(36);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(15),\r\n    Field    = require(16),\r\n    util     = require(36);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterType || found instanceof filterType)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(36);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {?string}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(16);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n}\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(33),\r\n    Root      = require(29),\r\n    Type      = require(34),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    OneOf     = require(25),\r\n    Enum      = require(15),\r\n    Service   = require(32),\r\n    Method    = require(22),\r\n    types     = require(35),\r\n    util      = require(36);\r\n\r\nvar base10Re    = /^[1-9][0-9]*$/,\r\n    base10NegRe = /^-?[1-9][0-9]*$/,\r\n    base16Re    = /^0[x][0-9a-f]+$/,\r\n    base16NegRe = /^-?0[x][0-9a-f]+$/,\r\n    base8Re     = /^0[0-7]+$/,\r\n    base8NegRe  = /^-?0[0-7]+$/,\r\n    numberRe    = /^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/,\r\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nvar camelCaseRe = /_([a-z])(?=[a-z]|$)/g;\r\n\r\nfunction camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object.<string,*>}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object.<string,*>}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name, insideTryCatch) {\r\n        var filename = parse.filename;\r\n        if (!insideTryCatch)\r\n            parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        /* istanbul ignore next */\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token, /* insideTryCatch */ true);\r\n        } catch (e) {\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRanges(target, acceptStrings) {\r\n        var token, start;\r\n        do {\r\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\r\n                target.push(readString());\r\n            else\r\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\r\n        } while (skip(\",\", true));\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseNumber(token, insideTryCatch) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (base10Re.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (base16Re.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (base8Re.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (numberRe.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\", insideTryCatch);\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"max\": return 536870911;\r\n            case \"0\": return 0;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (base10NegRe.test(token))\r\n            return parseInt(token, 10);\r\n        if (base16NegRe.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        /* istanbul ignore else */\r\n        if (base8NegRe.test(token))\r\n            return parseInt(token, 8);\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        /* istanbul ignore next */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        isProto3 = syntax === \"proto3\";\r\n        /* istanbul ignore next */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        type.comment = cmnt();\r\n        type.filename = parse.filename;\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"extensions\":\r\n                        readRanges(type.extensions || (type.extensions = []));\r\n                        break;\r\n\r\n                    case \"reserved\":\r\n                        readRanges(type.reserved || (type.reserved = []), true);\r\n                        break;\r\n\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var field = new Field(name, parseId(next()), type, rule, extend),\r\n            trailingLine = tn.line();\r\n        field.comment = cmnt();\r\n        field.filename = parse.filename;\r\n        parseInlineOptions(field);\r\n        if (!field.comment)\r\n            field.comment = cmnt(trailingLine);\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\r\n        // any type (not just packable types) because enums also use varint encoding and it is not\r\n        // yet known whether a type is an enum or not.\r\n        if (!isProto3 && field.repeated)\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        type.comment = cmnt();\r\n        var field = new Field(fieldName, id, name, rule);\r\n        type.filename = field.filename = parse.filename;\r\n        skip(\"{\");\r\n        while ((token = next()) !== \"}\") {\r\n            switch (token = lower(token)) {\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        }\r\n        skip(\";\", true);\r\n        parent.add(type).add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var field = new MapField(name, parseId(next()), keyType, valueType),\r\n            trailingLine = tn.line();\r\n        field.comment = cmnt();\r\n        field.filename = parse.filename;\r\n        parseInlineOptions(field);\r\n        if (!field.comment)\r\n            field.comment = cmnt(trailingLine);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        var oneof = new OneOf(name),\r\n            trailingLine = tn.line();\r\n        oneof.comment = cmnt();\r\n        oneof.filename = parse.filename;\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else {\r\n            skip(\";\");\r\n            if (!oneof.comment)\r\n                oneof.comment = cmnt(trailingLine);\r\n        }\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var enm = new Enum(name);\r\n        enm.comment = cmnt();\r\n        enm.filename = parse.filename;\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumValue(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            trailingLine = tn.line();\r\n        parent.add(name, value, cmnt());\r\n        parseInlineOptions({}); // skips enum value options\r\n        if (!parent.comments[name])\r\n            parent.comments[name] = cmnt(trailingLine);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\r\n            /* istanbul ignore next */\r\n            do {\r\n                if (!nameRe.test(token = next()))\r\n                    throw illegal(token, \"name\");\r\n                if (peek() === \"{\")\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n                else {\r\n                    skip(\":\");\r\n                    setOption(parent, name + \".\" + token, readValue(true));\r\n                }\r\n            } while (!skip(\"}\", true));\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var name = token;\r\n        var service = new Service(name);\r\n        service.comment = cmnt();\r\n        service.filename = parse.filename;\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream),\r\n            trailingLine = tn.line();\r\n        method.comment = cmnt();\r\n        method.filename = parse.filename;\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else {\r\n            skip(\";\");\r\n            if (!method.comment)\r\n                method.comment = cmnt(trailingLine);\r\n        }\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!typeRefRe.test(reference))\r\n            throw illegal(reference, \"reference\");\r\n\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !typeRefRe.test(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(38);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[0] = buf[pos + 3];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[3] = buf[pos    ];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[0] = buf[pos + 7];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[7] = buf[pos    ];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(27);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(38);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(16),\r\n    Enum    = require(15),\r\n    util    = require(36);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {?string} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore next */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore next */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else /* istanbul ignore next */ if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {   \r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(31);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(38);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n * \r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n * \r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(22),\r\n    util   = require(36),\r\n    rpc    = require(30);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst(this._methodsArray[i].resolve().name)] = util.codegen(\"r\",\"c\")(\"return this.rpcCall(m,q,s,r,c)\").eof(util.lcFirst(this._methodsArray[i].name), {\r\n            m: this._methodsArray[i],\r\n            q: this._methodsArray[i].resolvedRequestType.ctor,\r\n            s: this._methodsArray[i].resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nvar setCommentRe = /^ *[*/]+ */,\r\n    setCommentSplitRe = /\\n/g,\r\n    whitespaceRe = /\\s/,\r\n    unescapeRe = /\\\\(.?)/g;\r\n\r\nvar unescapeMap = {\r\n    \"0\": \"\\0\",\r\n    \"r\": \"\\r\",\r\n    \"n\": \"\\n\",\r\n    \"t\": \"\\t\"\r\n};\r\n\r\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @ignore\r\n */\r\nfunction unescape(str) {\r\n    return str.replace(unescapeRe, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            default:\r\n                return unescapeMap[$1] || \"\";\r\n        }\r\n    });\r\n}\r\n\r\ntokenize.unescape = unescape;\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object.<string,*>} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {function(number=):?string} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n * @property {function(string):string} unescape Unescapes a string\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        var lines = source\r\n            .substring(start, end)\r\n            .split(setCommentSplitRe);\r\n        for (var i = 0; i < lines.length; ++i)\r\n            lines[i] = lines[i].replace(setCommentRe, \"\").trim();\r\n        commentText = lines\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isComment;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (whitespaceRe.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    isComment = charAt(start = offset + 1) === \"/\";\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 1);\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    isComment = charAt(start = offset + 1) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            throw illegal(\"comment\");\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 2);\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        // offset !== length if we got here\r\n\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        line: function() {\r\n            return line;\r\n        },\r\n        cmnt: function(trailingLine) {\r\n            var ret;\r\n            if (trailingLine === undefined)\r\n                ret = commentLine === line - 1 && commentText || null;\r\n            else {\r\n                if (!commentText)\r\n                    peek();\r\n                ret = commentLine === trailingLine && commentType === \"/\" && commentText || null;\r\n            }\r\n            if (ret) {\r\n                commentType = commentText = null;\r\n                commentLine = 0;\r\n            }\r\n            return ret;\r\n        }\r\n    };\r\n    /* eslint-enable callback-return */\r\n}\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(25),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    Service   = require(32),\r\n    Class     = require(10),\r\n    Message   = require(21),\r\n    Reader    = require(27),\r\n    Writer    = require(41),\r\n    util      = require(36),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(40),\r\n    converter = require(12);\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            /* istanbul ignore next */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n        \r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        /* istanbul ignore next */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        /* istanbul ignore next */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (typeof this.reserved[i] !== \"string\" && this.reserved[i][0] <= id && this.reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (this.reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.from = Type.prototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(36);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(38);\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(7);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(38);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(6);\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(9);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(8);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(37);\r\n\r\n// error subclass indicating a protocol specifc error\r\nutil.ProtocolError = require(39);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Internal alias of or polyfull for Buffer.from.\r\n * @type {?function}\r\n * @param {string|number[]} value Value\r\n * @param {string} [encoding] Encoding if value is a string\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_from = null;\r\n\r\n/**\r\n * Internal alias of or polyfill for Buffer.allocUnsafe.\r\n * @type {?function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Makes an error object with additional properties.\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>=} additionalProperties Additional properties\r\n * @returns {Error} Error object\r\n*/\r\nutil.mkError = function mkError(message, additionalProperties) {\r\n    var err = Error(message);\r\n    if (additionalProperties)\r\n        util.merge(err, additionalProperties);\r\n    return err;\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations. Converts longs, enums and bytes to strings.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = ProtocolError;\r\n\r\n// extends Error\r\n(ProtocolError.prototype = Object.create(Error.prototype)).constructor = Error;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @constructor\r\n * @param {string} messageText Error message text\r\n * @param {Message=} messageInstance So far decoded message instance, if applicable\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nfunction ProtocolError(messageText, messageInstance) {\r\n\r\n    if (!(this instanceof ProtocolError))\r\n        return new ProtocolError(messageText, messageInstance);\r\n\r\n    this.name = \"ProtocolError\";\r\n    this.message = messageText;\r\n    this.stack = (new Error()).stack;\r\n\r\n    /**\r\n     * So far decoded message instance, if applicable.\r\n     * @type {?Message}\r\n     */\r\n    this.instance = messageInstance || null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(36);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %d:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen(\"m\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(38);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(41);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(38);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"sourceRoot":"."}