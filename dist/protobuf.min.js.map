{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/fs/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/decode.js","src/encode.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verify.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","ceil","b64","Array","s64","encode","start","end","j","b","String","fromCharCode","invalidEncoding","decode","charCodeAt","undefined","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","test","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","keys","Object","Function","concat","map","key","format","$0","$1","arg","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","chunk","c1","c2","Class","type","Type","Message","util","_TypeError","MessageCtor","properties","merge","$type","getFieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","emptyObject","getOneofsArray","oneof","prop","get","indexOf","set","setCtor","common","json","nested","google","protobuf","Any","fields","type_url","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","readerOrBuffer","getFieldsById","reader","Reader","limit","pos","message","getCtor","tag","uint32","wireType","resolvedType","Enum","resolvedKeyType","skip","longToHash","types","basic","repeated","packed","plimit","group","skipType","generate","mtype","safeProp","encodeType","writer","fork","required","ldelim","reset","Writer","fi","mapKey","partOf","long","longNe","low","high","genEncodeType","fieldIndex","ref","alwaysRequired","oneofFields","options","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","className","props","valuesById","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","getValuesById","remove","Field","toString","toLowerCase","optional","Long","bytes","extensionField","declaringField","_packed","FieldPrototype","MapField","isPacked","getOption","setOption","ifNotSet","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","asJSON","Number","LongBits","from","toNumber","Buffer","isBuffer","MapFieldPrototype","keyWireType","MessagePrototype","array","fieldsOnly","encodeDelimited","decodeDelimited","verify","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","_nestedArray","namespace","arrayToJSON","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","object","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","parentAlreadyChecked","getRoot","found","lookupType","lookupService","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","substring","toUpperCase","_fieldsArray","addFieldsToParent","OneOfPrototype","index","isName","token","isTypeRef","isFqTypeRef","lower","parse","illegal","filename","tn","readString","next","peek","readValue","acceptTypeRef","parseNumber","readRange","parseId","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","parseMapField","parseField","parseOneOf","extensions","reserved","parseGroup","applyCase","parseInlineOptions","fieldName","lcFirst","ucFirst","valueType","parseEnumField","custom","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","keepCase","camelCase","package","indexOutOfRange","writeLength","RangeError","readLongVarint","bits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","BufferReader","initBufferReader","readStringBuffer_utf8Slice","utf8Slice","readStringBuffer_toString","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","ieee754","ArrayImpl","Uint8Array","_slice","subarray","read_uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","float","readDouble","Float64Array","f64","double","finish","remain","BufferReaderPrototype","readStringBuffer","readFloatLE","readDoubleLE","_configure","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","cb","process","parsed","self","sync","queued","weak","idx","altname","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","methodsArray","methodName","inherited","getMethodsArray","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","stack","repeat","curr","delimRe","delim","expected","actual","equals","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","oneOfName","setup","fld","bake","description","TypeError","dst","underScore","newBuffer","allocUnsafe","LongBitsPrototype","zero","zzEncode","fromNumber","fromString","unsigned","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","dcodeIO","isFinite","longFromHash","fromBits","longNeq","val","target","descriptors","descriptor","ie8","ucKey","defineProperty","freeze","invalid","verifyValue","reason","verifyKey","genVerifyValue","genVerifyKey","Op","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","WriterPrototype","writeFloat","writeDouble","writeBytes","BufferWriterPrototype","writeStringBuffer","utf8Write","byteLength","roots","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(2);\r\nvar fs        = require(8);\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @name fs\r\n * @memberof util\r\n * @type {Object}\r\n */\r\n/**/\r\ntry { module.exports = eval([\"req\",\"uire\"].join(\"\"))(\"fs\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = [],\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            parts.push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (i)\r\n        parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n    return parts.join(\"\");\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(33);\r\n\r\nvar Type; // cyclic\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return Class.create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = function create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(31);\r\n    if (!(type instanceof Type))\r\n        throw _TypeError(\"type\", \"a Type\");\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw _TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) { // eslint-disable-line wrap-iife\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n    \r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.getFieldsArray().forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue)\r\n            ? util.emptyObject\r\n            : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.setCtor(ctor);\r\n\r\n    return prototype;\r\n};\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = decode;\r\n\r\nvar Enum    = require(16),\r\n    Reader  = require(25),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * General purpose message decoder.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Populated runtime message\r\n * @this Type\r\n * @property {GenerateDecoder} generate Generates a type specific decoder\r\n */\r\nfunction decode(readerOrBuffer, length) {\r\n    /* eslint-disable no-invalid-this, block-scoped-var, no-redeclare */\r\n    var fields  = this.getFieldsById(),\r\n        reader  = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer),\r\n        limit   = length === undefined ? reader.len : reader.pos + length,\r\n        message = new (this.getCtor())();\r\n    while (reader.pos < limit) {\r\n        var tag      = reader.uint32(),\r\n            wireType = tag & 7;\r\n\r\n        // End group\r\n        if (wireType === 4)\r\n            break;\r\n\r\n        var field    = fields[tag >>> 3].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type;\r\n        \r\n        // Known fields\r\n        if (field) {\r\n\r\n            // Map fields\r\n            if (field.map) {\r\n                var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n                reader.skip();\r\n                reader.pos++; // assumes id 1\r\n                if (message[field.name] === util.emptyObject)\r\n                    message[field.name] = {};\r\n                var key = reader[keyType]();\r\n                if (typeof key === \"object\")\r\n                    key = util.longToHash(key);\r\n                reader.pos++; // assumes id 2\r\n                message[field.name][key] = types.basic[type] === undefined\r\n                    ? field.resolvedType.decode(reader, reader.uint32())\r\n                    : reader[type]();\r\n\r\n            // Repeated fields\r\n            } else if (field.repeated) {\r\n                var values = message[field.name] && message[field.name].length ? message[field.name] : message[field.name] = [];\r\n\r\n                // Packed\r\n                if (field.packed && types.packed[type] !== undefined && wireType === 2) {\r\n                    var plimit = reader.uint32() + reader.pos;\r\n                    while (reader.pos < plimit)\r\n                        values.push(reader[type]());\r\n\r\n                // Non-packed\r\n                } else if (types.basic[type] === undefined)\r\n                    values.push(field.resolvedType.decode(reader, field.resolvedType.group ? undefined : reader.uint32()));\r\n                else\r\n                    values.push(reader[type]());\r\n\r\n            // Non-repeated\r\n            } else if (types.basic[type] === undefined)\r\n                message[field.name] = field.resolvedType.decode(reader, field.resolvedType.group ? undefined : reader.uint32());\r\n            else\r\n                message[field.name] = reader[type]();\r\n\r\n        // Unknown fields\r\n        } else\r\n            reader.skipType(wireType);\r\n    }\r\n    return message;\r\n    /* eslint-enable no-invalid-this, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @typedef GenerateDecoder\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\ndecode.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.int32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\")\r\n                (\"if(m%s===util.emptyObject)\", prop)\r\n                    (\"m%s={}\", prop)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\");\r\n            if (types.basic[type] === undefined) gen\r\n                (\"m%s[k]=types[%d].decode(r,r.uint32())\", prop, i);\r\n            else gen\r\n                (\"m%s[k]=r.%s()\", prop, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s&&m%s.length?m%s:m%s=[]\", prop, prop, prop, prop);\r\n\r\n            // Packed\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s.push(r.%s())\", prop, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"m%s.push(types[%d].decode(r))\"\r\n                    : \"m%s.push(types[%d].decode(r,r.uint32()))\", prop, i);\r\n            else gen\r\n                    (\"m%s.push(r.%s())\", prop, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"m%s=types[%d].decode(r)\"\r\n                : \"m%s=types[%d].decode(r,r.uint32())\", prop, i);\r\n        else gen\r\n                (\"m%s=r.%s()\", prop, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = encode;\r\n\r\nvar Enum     = require(16),\r\n    Writer   = require(37),\r\n    types    = require(32),\r\n    util     = require(33);\r\nvar safeProp = util.safeProp;\r\n\r\nfunction encodeType(field, value, writer) {\r\n    if (field.resolvedType.group)\r\n        field.resolvedType.encode(value, writer.uint32((field.id << 3 | 3) >>> 0)).uint32((field.id << 3 | 4) >>> 0);\r\n    else if (field.resolvedType.encode(value, writer.fork()).len || field.required)\r\n        writer.ldelim(field.id);\r\n    else\r\n        writer.reset();\r\n}\r\n\r\n/**\r\n * General purpose message encoder.\r\n * @param {Message|Object} message Runtime message or plain object to encode\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n * @this Type\r\n * @property {GenerateEncoder} generate Generates a type specific encoder\r\n */\r\nfunction encode(message, writer) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    if (!writer)\r\n        writer = Writer.create();\r\n    var fields = this.getFieldsArray(), fi = 0;\r\n    while (fi < fields.length) {\r\n        var field    = fields[fi++].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            if (message[field.name] && message[field.name] !== util.emptyObject) {\r\n                for (var keys = Object.keys(message[field.name]), i = 0; i < keys.length; ++i) {\r\n                    writer.uint32((field.id << 3 | 2) >>> 0).fork()\r\n                          .uint32(/*1*/8 | types.mapKey[keyType])[keyType](keys[i]);\r\n                    if (wireType === undefined)\r\n                        field.resolvedType.encode(message[field.name][keys[i]], writer.uint32(/*2,2*/18).fork()).ldelim();\r\n                    else\r\n                        writer.uint32(/*2*/16 | wireType)[type](message[field.name][keys[i]]);\r\n                    writer.ldelim();\r\n                }\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n            var values = message[field.name];\r\n            if (values && values.length) {\r\n\r\n                // Packed repeated\r\n                if (field.packed && types.packed[type] !== undefined) {\r\n                    if (values.length) {\r\n                        writer.uint32((field.id << 3 | 2) >>> 0).fork();\r\n                        var i = 0;\r\n                        while (i < values.length)\r\n                            writer[type](values[i++]);\r\n                        writer.ldelim();\r\n                    }\r\n\r\n                // Non-packed\r\n                } else {\r\n                    var i = 0;\r\n                    if (wireType === undefined)\r\n                        while (i < values.length)\r\n                            encodeType(field, values[i++], writer);\r\n                    else\r\n                        while (i < values.length)\r\n                            writer.uint32((field.id << 3 | wireType) >>> 0)[type](values[i++]);\r\n                }\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            var value = message[field.name];\r\n            if (\r\n                field.partOf && message[field.partOf.name] === field.name\r\n                ||\r\n                (field.required || value !== undefined) && (field.long ? util.longNe(value, field.defaultValue.low, field.defaultValue.high) : value !== field.defaultValue)\r\n            ) {\r\n                if (wireType === undefined)\r\n                    encodeType(field, value, writer);\r\n                else\r\n                    writer.uint32((field.id << 3 | wireType) >>> 0)[type](value);\r\n            }\r\n        }\r\n    }\r\n    return writer;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n}\r\n\r\nfunction genEncodeType(gen, field, fieldIndex, ref, alwaysRequired) {\r\n    if (field.resolvedType.group)\r\n        return gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0);\r\n    return alwaysRequired || field.required\r\n      ? gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0)\r\n      : gen(\"types[%d].encode(%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", fieldIndex, ref, field.id);\r\n}\r\n\r\n/**\r\n * Generates an {@link Encoder|encoder} specific to the specified message type.\r\n * @typedef GenerateEncoder\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\nencode.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.getFieldsArray();\r\n    var oneofs = mtype.getOneofsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    var i;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(m%s&&m%s!==util.emptyObject){\", prop, prop)\r\n        (\"for(var ks=Object.keys(m%s),i=0;i<ks.length;++i){\", prop)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(m%s[ks[i]],w.uint32(18).fork()).ldelim()\", i, prop); // can't be groups\r\n            else gen\r\n            (\"w.uint32(%d).%s(m%s[ks[i]])\", 16 | wireType, type, prop);\r\n            gen\r\n            (\"w.ldelim()\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim()\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType !== undefined) gen\r\n            (\"w.uint32(%d).%s(m%s[i])\", (field.id << 3 | wireType) >>> 0, type, prop);\r\n                else\r\n            genEncodeType(gen, field, i, \"m\" + prop + \"[i]\", true);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) {\r\n                    gen\r\n    (\"if(m%s!==undefined&&util.longNe(m%s,%d,%d))\", prop, prop, field.defaultValue.low, field.defaultValue.high);\r\n                } else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType !== undefined) gen\r\n        (\"w.uint32(%d).%s(m%s)\", (field.id << 3 | wireType) >>> 0, type, prop);\r\n            else\r\n         genEncodeType(gen, field, i, \"m\" + prop);\r\n\r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i],\r\n            prop  = safeProp(oneof.name);\r\n        gen\r\n        (\"switch(m%s){\", prop);\r\n        var oneofFields = oneof.getFieldsArray();\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type],\r\n                prop     = safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType !== undefined) gen\r\n                (\"w.uint32(%d).%s(m%s)\", (field.id << 3 | wireType) >>> 0, type, prop);\r\n            else\r\n                genEncodeType(gen, field, fields.indexOf(field), \"m\" + prop);\r\n\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");        \r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(33);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(\"./object\");\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Message = require(\"./message\"),\r\n    Enum      = require(\"./enum\"),\r\n    types     = require(\"./types\"),\r\n    util      = require(\"./util\");\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object} [rule=\"optional\"] Field rule\r\n * @param {string|Object} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw _TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw _TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw _TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(\"./mapfield\");\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        var resolved = this.parent.lookup(this.type);\r\n        if (!Type)\r\n            Type = require(\"./type\");\r\n        if (resolved instanceof Type) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = null;\r\n        } else if (resolved instanceof Enum) {\r\n            this.resolvedType = resolved;\r\n            typeDefault = 0;\r\n        } else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options[\"default\"]) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Message#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (value instanceof Message)\r\n            return value.asJSON(options);\r\n        if (this.resolvedType instanceof Enum && options[\"enum\"] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        if (options.long && this.long)\r\n            return options.long === Number\r\n                ? typeof value === \"number\"\r\n                    ? value\r\n                    : util.LongBits.from(value).toNumber(this.type.charAt(0) === \"u\")\r\n                : util.Long.fromValue(value, this.type.charAt(0) === \"u\").toString();\r\n        if (options.bytes && this.bytes) {\r\n            if (options.bytes === String)\r\n                return util.base64.encode(value, 0, value.length);\r\n            if (options.bytes === Array)\r\n                return Array.prototype.slice.call(value);\r\n            if (options.bytes === util.Buffer && !util.Buffer.isBuffer(value))\r\n                return util.Buffer.from ? util.Buffer.from(value) : new Buffer(value);\r\n        }\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(17);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar Enum    = require(16),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable map key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This method should be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @extends {Object}\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @abstract\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {*} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {*} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @param {*} [options.bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @param {boolean} [options.defaults=false] Also sets default values on the resulting object\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    if (!options)\r\n        options = {};\r\n    var fields = this.$type.fields,\r\n        json   = {};\r\n    var keys;\r\n    if (options.defaults) {\r\n        keys = Object.keys(fields);\r\n    } else\r\n        keys = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && (value.length || options.defaults)) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (!options.fieldsOnly)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(31),\r\n    util = require(33);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (type && !util.isString(type))\r\n        throw _TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw _TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw _TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var resolved = this.parent.lookup(this.requestType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    this.resolvedRequestType = resolved;\r\n    resolved = this.parent.lookup(this.responseType);\r\n    if (!(resolved && resolved instanceof Type))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n    this.resolvedResponseType = resolved;\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(16),\r\n    Field   = require(17),\r\n    util    = require(33);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\nfunction initNested() {\r\n    if (!Type)\r\n        Type = require(31);\r\n    if (!Service)\r\n        Service = require(29);\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw _TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw _TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw _TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (!Type)\r\n                Type = require(31);\r\n            if (!Service)\r\n                Service = require(29);\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw _TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, parentAlreadyChecked) {\r\n    if (util.isString(path)) {\r\n        if (!path.length)\r\n            return null;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1));\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && (path.length === 1 || found instanceof Namespace && (found = found.lookup(path.slice(1), true))))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path);\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path);\r\n    if (!Type)\r\n        Type = require(31);\r\n    if (!(found instanceof Type))\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path);\r\n    if (!Service)\r\n        Service = require(29);\r\n    if (!(found instanceof Service))\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(33);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw _TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw _TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className;\r\n    var fullName = this.getFullName();\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(17),\r\n    util  = require(33);\r\n\r\nvar _TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw _TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = this.name.substring(0, 1).toUpperCase() + this.name.substring(1);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nutil.prop(OneOfPrototype, \"fieldsArray\", {\r\n    get: function getFieldsArray() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw _TypeError(\"field\", \"a Field\");\r\n    var index = this._fieldsArray.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize  = require(30),\r\n    Root      = require(26),\r\n    Type      = require(31),\r\n    Field     = require(17),\r\n    MapField  = require(18),\r\n    OneOf     = require(23),\r\n    Enum      = require(16),\r\n    Service   = require(29),\r\n    Method    = require(20),\r\n    types     = require(32),\r\n    util      = require(33);\r\n\r\nfunction isName(token) {\r\n    return /^[a-zA-Z_][a-zA-Z_0-9]*$/.test(token);\r\n}\r\n\r\nfunction isTypeRef(token) {\r\n    return /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction isFqTypeRef(token) {\r\n    return /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        root = new Root();\r\n        options = root || {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\r\n\r\n    function illegal(token, name) {\r\n        var filename = parse.filename;\r\n        parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && isTypeRef(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!isTypeRef(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        isProto3 = syntax === \"proto3\";\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                        \r\n                    default:\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (lower(type) === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        if (!isTypeRef(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        skip(\"{\");\r\n        while ((token = next()) !== \"}\") {\r\n            switch (token = lower(token)) {\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        }\r\n        skip(\";\", true);\r\n        parent.add(type).add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!isTypeRef(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!isName(token))\r\n            throw illegal(token, \"name\");\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n        if (!isTypeRef(name))\r\n            throw illegal(name, \"name\");\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (!isFqTypeRef(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (!isName(token))\r\n                    throw illegal(token, \"name\");\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!isName(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!isTypeRef(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {ParserResult} Parser result\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util      = require(35),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = function create(buffer) {\r\n    return new (util.Buffer ? BufferReader : Reader)(buffer);\r\n};\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice;\r\n\r\nvar read_uint32 = \r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    // FIXME: tends to soft-deopt with \"Insufficient type feedback for generic named access\", which\r\n    // is not a problem, but with --trace-deopt, node v4-v7 always crashes when the above happens.\r\n    var value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n    if ((this.pos += 5) > this.len) {\r\n        this.pos = this.len;\r\n        throw indexOutOfRange(this, 10);\r\n    }\r\n    return value;\r\n};\r\n\r\n// See comment above. While unnecessary code, this prevents crashing with --trace-deopt (node 6.9.1).\r\nread_uint32.call({\r\n    buf: [255,255,255,255,15],\r\n    pos: 0,\r\n    len: 5\r\n});\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0),\r\n        i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return buf[end - 4]\r\n         | buf[end - 3] << 8\r\n         | buf[end - 2] << 16\r\n         | buf[end - 1] << 24;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                wireType = this.uint32() & 7;\r\n                if (wireType === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    var Buffer = util.Buffer;\r\n    if (!Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = Buffer.prototype.slice;\r\n    readStringBuffer = Buffer.prototype.utf8Slice // around forever, but not present in browser buffer\r\n        ? readStringBuffer_utf8Slice\r\n        : readStringBuffer_toString;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nif (typeof Float32Array === \"undefined\") // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nif (typeof Float64Array === \"undefined\") // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\nvar readStringBuffer;\r\n\r\nfunction readStringBuffer_utf8Slice(buf, start, end) {\r\n    return buf.utf8Slice(start, end); // fastest\r\n}\r\n\r\nfunction readStringBuffer_toString(buf, start, end) {\r\n    return buf.toString(\"utf8\", start, end); // 2nd, again assertions\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return readStringBuffer(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(17),\r\n    util   = require(33),\r\n    common = require(13);\r\n\r\nvar parse; // cyclic\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (!parse)\r\n        parse = require(24);\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename) {\r\n    return this.load(filename, SYNC);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(28);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(33);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(33),\r\n    rpc    = require(27);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl RPC implementation ({@link RPCImpl|see})\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n/**/\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(16),\r\n    OneOf     = require(23),\r\n    Field     = require(17),\r\n    Service   = require(29),\r\n    Class     = require(12),\r\n    Message   = require(19),\r\n    Reader    = require(25),\r\n    Writer    = require(37),\r\n    util      = require(33);\r\n\r\nvar encode, // might become cyclic\r\n    decode, // might become cyclic\r\n    verify; // cyclic\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object|*} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new (this.getCtor())(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode}, {@link Type#decode} and {@link Type#verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    if (!encode) {\r\n        encode = require(15);\r\n        decode = require(14);\r\n        verify = require(36);\r\n    }\r\n    this.encode = util.codegen.supported\r\n        ? encode.generate(this).eof(this.getFullName() + \"$encode\", {\r\n              Writer : Writer,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : encode;\r\n    this.decode = util.codegen.supported\r\n        ? decode.generate(this).eof(this.getFullName() + \"$decode\", {\r\n              Reader : Reader,\r\n              types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util   : util\r\n          })\r\n        : decode;\r\n    this.verify = util.codegen.supported\r\n        ? verify.generate(this).eof(this.getFullName() + \"$verify\", {\r\n              types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n              util  : util\r\n          })\r\n        : verify;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(33);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(35);\r\n\r\nutil.asPromise    = require(2);\r\nutil.codegen      = require(4);\r\nutil.EventEmitter = require(5);\r\nutil.extend       = require(6);\r\nutil.fetch        = require(7);\r\nutil.fs           = require(8);\r\nutil.path         = require(9);\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts a string to camel case notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Converts a string to underscore notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.underScore = function underScore(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) { return \"_\" + $1.toLowerCase(); });\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Converts the second character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe ? util.Buffer.allocUnsafe(size) : new util.Buffer(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo, this.hi, unsigned)\r\n        : { low: this.lo, high: this.hi, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nvar LongBits =\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nvar isNode = util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Optional buffer class to use.\r\n * If you assign any compatible buffer implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Buffer = null;\r\n\r\nif (isNode)\r\n    try { util.Buffer = require(\"buffer\").Buffer; } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Optional Long class to use.\r\n * If you assign any compatible long implementation to this property, the library will use it.\r\n * @type {*}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || null;\r\n\r\nif (!util.Long && isNode)\r\n    try { util.Long = require(\"long\"); } catch (e) {} // eslint-disable-line no-empty\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === \"object\");\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? LongBits.from(value).toHash()\r\n        : \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n * @deprecated\r\n * @see Use {@link util.longNe} instead\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === \"number\"\r\n         ? typeof b === \"number\"\r\n            ? a !== b\r\n            : (a = LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === \"number\"\r\n            ? (b = LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ie8 = !-[1,];\r\n    var ucKey = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n    if (descriptor.get)\r\n        target[\"get\" + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target[\"set\" + ucKey] = ie8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (ie8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze([]);\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze({});\r\n","\"use strict\";\r\nmodule.exports = verify;\r\n\r\nvar Enum      = require(16),\r\n    Type      = require(31),\r\n    util      = require(33);\r\nvar isInteger = util.isInteger;\r\n\r\nfunction invalid(field, expected) {\r\n    return \"invalid value for field \" + field.getFullName() + \" (\" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected)\";\r\n}\r\n\r\nfunction verifyValue(field, value) {\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\":\r\n            if (typeof value !== \"number\")\r\n                return invalid(field, \"number\");\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (!isInteger(value))\r\n                return invalid(field, \"integer\");\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (!isInteger(value) && !(value && isInteger(value.low) && isInteger(value.high)))\r\n                return invalid(field, \"integer|Long\");\r\n            break;\r\n        case \"bool\":\r\n            if (typeof value !== \"boolean\")\r\n                return invalid(field, \"boolean\");\r\n            break;\r\n        case \"string\":\r\n            if (!util.isString(value))\r\n                return invalid(field, \"string\");\r\n            break;\r\n        case \"bytes\":\r\n            if (!(value && typeof value.length === \"number\" || util.isString(value)))\r\n                return invalid(field, \"buffer\");\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) {\r\n                if (typeof field.resolvedType.getValuesById()[value] !== \"number\")\r\n                    return invalid(field, \"enum value\");\r\n            } else if (field.resolvedType instanceof Type) {\r\n                var reason = field.resolvedType.verify(value);\r\n                if (reason)\r\n                    return reason;\r\n            }\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction verifyKey(field, value) {\r\n    switch (field.keyType) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\":\r\n            if (/^[\\x00-\\xff]{8}$/.test(value)) // eslint-disable-line no-control-regex\r\n                return null;\r\n            // fallthrough\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\":\r\n            if (/^-?(?:0|[1-9]\\d*)$/.test(value))\r\n                return invalid(field, \"integer key\");\r\n            break;\r\n        case \"bool\":\r\n            if (/^true|false|0|1$/.test(value))\r\n                return invalid(field, \"boolean key\");\r\n            break;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * General purpose message verifier.\r\n * @param {Message|Object} message Runtime message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n * @this {Type}\r\n * @property {GenerateVerifier} generate Generates a type specific verifier\r\n */\r\nfunction verify(message) {\r\n    /* eslint-disable block-scoped-var, no-redeclare */\r\n    var fields = this.getFieldsArray(),\r\n        i = 0,\r\n        reason;\r\n    while (i < fields.length) {\r\n        var field = fields[i++].resolve(),\r\n            value = message[field.name];\r\n\r\n        // map fields\r\n        if (field.map) {\r\n\r\n            if (value !== undefined) {\r\n                if (!util.isObject(value))\r\n                    return invalid(field, \"object\");\r\n                var keys = Object.keys(value);\r\n                for (var j = 0; j < keys.length; ++j) {\r\n                    if (reason = verifyKey(field, keys[j])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n                    if (reason = verifyValue(field, value[keys[j]])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n                }\r\n            }\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            if (value !== undefined) {\r\n                if (!Array.isArray(value))\r\n                    return invalid(field, \"array\");\r\n                for (var j = 0; j < value.length; ++j)\r\n                    if (reason = verifyValue(field, value[j])) // eslint-disable-line no-cond-assign\r\n                        return reason;\r\n            }\r\n\r\n        // required or present fields\r\n        } else if (field.required || value !== undefined) {\r\n\r\n            if (reason = verifyValue(field, value)) // eslint-disable-line no-cond-assign\r\n                return reason;\r\n        }\r\n\r\n    }\r\n    return null;\r\n    /* eslint-enable block-scoped-var, no-redeclare */\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.type) {\r\n        case \"double\":\r\n        case \"float\": gen\r\n            (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                (\"return%j\", invalid(field, \"number\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.isInteger(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                (\"return%j\", invalid(field, \"integer|Long\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                (\"return%j\", invalid(field, \"boolean\"));\r\n            break;\r\n        case \"string\": gen\r\n            (\"if(!util.isString(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"string\"));\r\n            break;\r\n        case \"bytes\": gen\r\n            (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                (\"return%j\", invalid(field, \"buffer\"));\r\n            break;\r\n        default:\r\n            if (field.resolvedType instanceof Enum) { gen\r\n                (\"switch(%s){\", ref)\r\n                    (\"default:\")\r\n                        (\"return%j\", invalid(field, \"enum value\"));\r\n                var values = util.toArray(field.resolvedType.values);\r\n                for (var j = 0; j < values.length; ++j) gen\r\n                    (\"case %d:\", values[j]);\r\n                gen\r\n                        (\"break\")\r\n                (\"}\");\r\n            } else if (field.resolvedType instanceof Type) { gen\r\n                (\"var r;\")\r\n                (\"if(r=types[%d].verify(%s))\", fieldIndex, ref)\r\n                    (\"return r\");\r\n            }\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @typedef GenerateVerifier\r\n * @type {function}\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\n/**/\r\nverify.generate = function generate(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!util.isObject(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(m%s)\", prop)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!Array.isArray(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<m%s.length;++i){\", prop);\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType instanceof Type) gen\r\n            (\"if(m%s!==undefined&&m%s!==null){\", prop, prop);\r\n                else gen\r\n            (\"if(m%s!==undefined){\", prop);\r\n            }\r\n                genVerifyValue(gen, field, i, \"m\" + prop);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util      = require(35),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    // this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\nWriter.State = State;\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = function create() {\r\n    return new (util.Buffer ? BufferWriter : Writer);\r\n};\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new ArrayImpl(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (ArrayImpl !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset} or {@link Writer#ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend as a tag where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (typeof id === \"number\")\r\n        this.uint32((id << 3 | 2) >>> 0);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    this.head = this.tail = null; // gc\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    BufferWriter.alloc = util.Buffer.allocUnsafe\r\n        ? util.Buffer.allocUnsafe\r\n        : function allocUnsafeNew(size) { return new util.Buffer(size); };\r\n    return BufferWriter.alloc(size);\r\n};\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(val, buf, pos) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float32Array === \"undefined\") // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(val, buf, pos) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float64Array === \"undefined\") // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(val, buf, pos) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = util.Buffer.from ? util.Buffer.from(value, \"base64\") : new util.Buffer(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nvar writeStringBuffer = (function() { // eslint-disable-line wrap-iife\r\n    return util.Buffer && util.Buffer.prototype.utf8Write // around forever, but not present in browser buffer\r\n        ? function writeString_buffer_utf8Write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.utf8Write(val, pos);\r\n        }\r\n        : function writeString_buffer_write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.write(val, pos);\r\n        };\r\n    // Note that the plain JS encoder is faster for short strings, probably because of redundant assertions.\r\n    // For a raw utf8Write, the breaking point is about 20 characters, for write it is around 40 characters.\r\n    // Unfortunately, this does not translate 1:1 to real use cases, hence the common \"good enough\" limit of 40.\r\n})();\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = value.length < 40\r\n        ? utf8.length(value)\r\n        : util.Buffer.byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nvar Writer =\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = Writer.BufferWriter;\r\nvar Reader =\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = Reader.BufferReader;\r\nprotobuf.encode           = require(\"./encode\");\r\nprotobuf.decode           = require(\"./decode\");\r\nprotobuf.verify           = require(\"./verify\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    Reader._configure();\r\n}\r\n\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}