{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","ceil","b64","Array","s64","encode","start","end","j","b","String","fromCharCode","invalidEncoding","decode","charCodeAt","undefined","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","test","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","keys","Object","Function","concat","map","key","format","$0","$1","arg","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","chunk","c1","c2","Class","type","Type","TypeError","MessageCtor","properties","Message","util","merge","$type","getFieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","emptyObject","getOneofsArray","oneof","prop","get","indexOf","set","setCtor","_TypeError","common","json","nested","google","protobuf","Any","fields","type_url","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","decoder","mtype","group","resolvedType","Enum","safeProp","resolvedKeyType","types","basic","repeated","packed","genEncodeType","fieldIndex","ref","alwaysRequired","required","encoder","wireType","mapKey","partOf","long","low","high","oneofFields","options","ReflectionObject","_valuesById","clearCache","enm","EnumPrototype","className","props","valuesById","testJSON","Boolean","fromJSON","toJSON","add","isString","isInteger","getValuesById","remove","Field","toString","toLowerCase","optional","message","Long","bytes","extensionField","declaringField","_packed","FieldPrototype","MapField","isPacked","getOption","setOption","ifNotSet","resolved","typeDefault","defaults","parent","lookup","optionDefault","fromValue","jsonConvert","asJSON","Number","LongBits","from","toNumber","Buffer","isBuffer","MapFieldPrototype","keyWireType","MessagePrototype","array","fieldsOnly","writer","encodeDelimited","readerOrBuffer","decodeDelimited","verify","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","_nestedArray","namespace","arrayToJSON","obj","NamespacePrototype","nestedArray","toArray","methods","addJSON","getNestedArray","nestedJson","ns","nestedName","object","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","getRoot","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","root","fullName","getFullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","ucName","substring","toUpperCase","_fieldsArray","addFieldsToParent","OneOfPrototype","index","isName","token","isTypeRef","isFqTypeRef","lower","parse","illegal","filename","tn","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","readRange","parseId","sign","tokenLower","parseInt","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","parseMapField","parseField","parseOneOf","extensions","reserved","parseGroup","applyCase","parseInlineOptions","fieldName","lcFirst","ucFirst","valueType","parseEnumField","custom","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","keepCase","camelCase","package","indexOutOfRange","reader","writeLength","RangeError","pos","Reader","readLongVarint","bits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","BufferReader","initBufferReader","readStringBuffer_utf8Slice","utf8Slice","readStringBuffer_toString","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","ieee754","ArrayImpl","Uint8Array","_slice","subarray","read_uint32","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","float","readDouble","Float64Array","f64","double","skipType","reset","finish","remain","BufferReaderPrototype","readStringBuffer","readFloatLE","readDoubleLE","_configure","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","load","cb","process","parsed","self","sync","queued","weak","idx","altname","setTimeout","readFileSync","loadSync","newDeferred","rpc","rpcImpl","$rpc","ServicePrototype","endedByRPC","_methodsArray","methodsArray","methodName","inherited","getMethodsArray","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","stack","repeat","curr","delimRe","delim","expected","actual","equals","_fieldsById","_repeatedFieldsArray","_oneofsArray","_ctor","TypePrototype","verifier","Writer","fieldsById","names","fieldsArray","repeatedFieldsArray","filter","oneofsArray","oneOfName","getFieldsById","getCtor","setup","fld","fork","ldelim","bake","description","dst","underScore","newBuffer","allocUnsafe","LongBitsPrototype","zero","zzEncode","fromNumber","fromString","unsigned","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","versions","node","dcodeIO","isFinite","longToHash","longFromHash","fromBits","longNeq","longNe","val","target","descriptors","descriptor","ie8","ucKey","defineProperty","freeze","invalid","genVerifyValue","rtype","genVerifyKey","Op","noop","State","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","BufferWriter","writeFloatBuffer","writeFloatLE","writeDoubleBuffer","writeDoubleLE","writeBytesBuffer","copy","WriterPrototype","writeFloat","writeDouble","writeBytes","BufferWriterPrototype","Buffer_from","encoding","writeStringBuffer","utf8Write","byteLength","roots","amd"],"mappings":";;;;;;CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCkCAA,EAAAK,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAxB,GAAAyB,EACAC,EAAA,EAAAF,EAAAD,EAAA,EACAI,GAAA,GAAAD,GAAA,EACAE,EAAAD,GAAA,EACAE,GAAA,EACApB,EAAAa,EAAA,EAAAE,EAAA,EACAM,EAAAR,EAAA,GAAA,EACAlB,EAAAgB,EAAAC,EAAAZ,EAOA,KALAA,GAAAqB,EAEA9B,EAAAI,GAAA,IAAAyB,GAAA,EACAzB,KAAAyB,EACAA,GAAAH,EACAG,EAAA,EAAA7B,EAAA,IAAAA,EAAAoB,EAAAC,EAAAZ,GAAAA,GAAAqB,EAAAD,GAAA,GAKA,IAHAJ,EAAAzB,GAAA,IAAA6B,GAAA,EACA7B,KAAA6B,EACAA,GAAAN,EACAM,EAAA,EAAAJ,EAAA,IAAAA,EAAAL,EAAAC,EAAAZ,GAAAA,GAAAqB,EAAAD,GAAA,GAEA,GAAA,IAAA7B,EACAA,EAAA,EAAA4B,MACA,CAAA,GAAA5B,IAAA2B,EACA,MAAAF,GAAAM,KAAA3B,GAAA,EAAA,IAAA4B,EAAAA,EAEAP,IAAAQ,KAAAC,IAAA,EAAAX,GACAvB,GAAA4B,EAEA,OAAAxB,GAAA,EAAA,GAAAqB,EAAAQ,KAAAC,IAAA,EAAAlC,EAAAuB,IAGAT,EAAAqB,MAAA,SAAAf,EAAAgB,EAAAf,EAAAC,EAAAC,EAAAC,GACA,GAAAxB,GAAAyB,EAAAY,EACAX,EAAA,EAAAF,EAAAD,EAAA,EACAI,GAAA,GAAAD,GAAA,EACAE,EAAAD,GAAA,EACAW,EAAA,KAAAf,EAAAU,KAAAC,IAAA,GAAA,IAAAD,KAAAC,IAAA,GAAA,IAAA,EACAzB,EAAAa,EAAAE,EAAA,EAAA,EACAM,EAAAR,GAAA,EAAA,EACAlB,EAAAgC,EAAA,GAAA,IAAAA,GAAA,EAAAA,EAAA,EAAA,EAAA,CAmCA,KAjCAA,EAAAH,KAAAM,IAAAH,GAEAI,MAAAJ,IAAAA,IAAAJ,EAAAA,GACAP,EAAAe,MAAAJ,GAAA,EAAA,EACApC,EAAA2B,IAEA3B,EAAAiC,KAAAQ,MAAAR,KAAAS,IAAAN,GAAAH,KAAAU,KACAP,GAAAC,EAAAJ,KAAAC,IAAA,GAAAlC,IAAA,IACAA,IACAqC,GAAA,GAGAD,GADApC,EAAA4B,GAAA,EACAU,EAAAD,EAEAC,EAAAL,KAAAC,IAAA,EAAA,EAAAN,GAEAQ,EAAAC,GAAA,IACArC,IACAqC,GAAA,GAGArC,EAAA4B,GAAAD,GACAF,EAAA,EACAzB,EAAA2B,GACA3B,EAAA4B,GAAA,GACAH,GAAAW,EAAAC,EAAA,GAAAJ,KAAAC,IAAA,EAAAX,GACAvB,GAAA4B,IAEAH,EAAAW,EAAAH,KAAAC,IAAA,EAAAN,EAAA,GAAAK,KAAAC,IAAA,EAAAX,GACAvB,EAAA,IAIAuB,GAAA,EAAAH,EAAAC,EAAAZ,GAAA,IAAAgB,EAAAhB,GAAAqB,EAAAL,GAAA,IAAAF,GAAA,GAIA,IAFAvB,EAAAA,GAAAuB,EAAAE,EACAC,GAAAH,EACAG,EAAA,EAAAN,EAAAC,EAAAZ,GAAA,IAAAT,EAAAS,GAAAqB,EAAA9B,GAAA,IAAA0B,GAAA,GAEAN,EAAAC,EAAAZ,EAAAqB,IAAA,IAAA1B,2BCpHA,YAWA,SAAAwC,GAAAC,EAAAC,GAEA,IAAA,GADAC,MACAtC,EAAA,EAAAA,EAAAuC,UAAAhC,QACA+B,EAAAE,KAAAD,UAAAvC,KACA,IAAAyC,IAAA,CACA,OAAA,IAAAC,SAAA,SAAAC,EAAAC,GACAN,EAAAE,KAAA,SAAAK,GACA,GAAAJ,EAEA,GADAA,GAAA,EACAI,EACAD,EAAAC,OACA,CAEA,IAAA,GADAC,MACA9C,EAAA,EAAAA,EAAAuC,UAAAhC,QACAuC,EAAAN,KAAAD,UAAAvC,KACA2C,GAAAI,MAAA,KAAAD,KAIA,KACAV,EAAAW,MAAAV,GAAAW,KAAAV,GACA,MAAAO,GACAJ,IACAA,GAAA,EACAG,EAAAC,OAlCApC,EAAAJ,QAAA8B,0BCDA,YAOA,IAAAc,GAAA5C,CAOA4C,GAAA1C,OAAA,SAAA2C,GACA,GAAAC,GAAAD,EAAA3C,MACA,KAAA4C,EACA,MAAA,EAEA,KADA,GAAA1D,GAAA,IACA0D,EAAA,EAAA,GAAA,MAAAD,EAAAE,OAAAD,MACA1D,CACA,OAAA+B,MAAA6B,KAAA,EAAAH,EAAA3C,QAAA,EAAAd,EAUA,KAAA,GANA6D,GAAA,GAAAC,OAAA,IAGAC,EAAA,GAAAD,OAAA,KAGAvD,EAAA,EAAAA,EAAA,IACAwD,EAAAF,EAAAtD,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,EAAAA,EAAA,GAAA,IAAAA,GASAiD,GAAAQ,OAAA,SAAA9C,EAAA+C,EAAAC,GAKA,IAJA,GAGAnE,GAHA0D,KACAlD,EAAA,EACA4D,EAAA,EAEAF,EAAAC,GAAA,CACA,GAAAE,GAAAlD,EAAA+C,IACA,QAAAE,GACA,IAAA,GACAV,EAAAlD,KAAAsD,EAAAO,GAAA,GACArE,GAAA,EAAAqE,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAV,EAAAlD,KAAAsD,EAAA9D,EAAAqE,GAAA,GACArE,GAAA,GAAAqE,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAV,EAAAlD,KAAAsD,EAAA9D,EAAAqE,GAAA,GACAX,EAAAlD,KAAAsD,EAAA,GAAAO,GACAD,EAAA,GAUA,MANAA,KACAV,EAAAlD,KAAAsD,EAAA9D,GACA0D,EAAAlD,GAAA,GACA,IAAA4D,IACAV,EAAAlD,EAAA,GAAA,KAEA8D,OAAAC,aAAAhB,MAAAe,OAAAZ,GAGA,IAAAc,GAAA,kBAUAf,GAAAgB,OAAA,SAAAf,EAAAvC,EAAAC,GAIA,IAAA,GADApB,GAFAkE,EAAA9C,EACAgD,EAAA,EAEA5D,EAAA,EAAAA,EAAAkD,EAAA3C,QAAA,CACA,GAAAqB,GAAAsB,EAAAgB,WAAAlE,IACA,IAAA,KAAA4B,GAAAgC,EAAA,EACA,KACA,IAAAO,UAAAvC,EAAA4B,EAAA5B,IACA,KAAA1B,OAAA8D,EACA,QAAAJ,GACA,IAAA,GACApE,EAAAoC,EACAgC,EAAA,CACA,MACA,KAAA,GACAjD,EAAAC,KAAApB,GAAA,GAAA,GAAAoC,IAAA,EACApC,EAAAoC,EACAgC,EAAA,CACA,MACA,KAAA,GACAjD,EAAAC,MAAA,GAAApB,IAAA,GAAA,GAAAoC,IAAA,EACApC,EAAAoC,EACAgC,EAAA,CACA,MACA,KAAA,GACAjD,EAAAC,MAAA,EAAApB,IAAA,EAAAoC,EACAgC,EAAA,GAIA,GAAA,IAAAA,EACA,KAAA1D,OAAA8D,EACA,OAAApD,GAAA8C,2BCtHA,YAmBA,SAAAU,KAmBA,QAAAC,KAGA,IAFA,GAAAvB,MACA9C,EAAA,EACAA,EAAAuC,UAAAhC,QACAuC,EAAAN,KAAAD,UAAAvC,KACA,IAAAsE,GAAAC,EAAAxB,MAAA,KAAAD,GACA0B,EAAAC,CACA,IAAAC,EAAAnE,OAAA,CACA,GAAAoE,GAAAD,EAAAA,EAAAnE,OAAA,EAGAqE,GAAAC,KAAAF,GACAH,IAAAC,EACAK,EAAAD,KAAAF,MACAH,EAGAO,EAAAF,KAAAF,KAAAI,EAAAF,KAAAP,IACAE,IAAAC,EACAO,GAAA,GACAA,GAAAC,EAAAJ,KAAAF,KACAH,IAAAC,EACAO,GAAA,GAIAE,EAAAL,KAAAP,KACAE,IAAAC,GAEA,IAAAzE,EAAA,EAAAA,EAAAwE,IAAAxE,EACAsE,EAAA,KAAAA,CAEA,OADAI,GAAAlC,KAAA8B,GACAD,EASA,QAAAc,GAAAC,GACA,MAAA,aAAAA,EAAAA,EAAAC,QAAA,WAAA,KAAA,IAAA,IAAA/C,EAAAgD,KAAA,MAAA,QAAAZ,EAAAY,KAAA,MAAA,MAYA,QAAAC,GAAAH,EAAAI,GACA,gBAAAJ,KACAI,EAAAJ,EACAA,EAAAjB,OAEA,IAAAsB,GAAApB,EAAAc,IAAAC,EACAhB,GAAAsB,SACAC,QAAA1D,IAAA,oBAAAwD,EAAAJ,QAAA,MAAA,MAAAA,QAAA,MAAA,MACA,IAAAO,GAAAC,OAAAD,KAAAJ,IAAAA,MACA,OAAAM,UAAA/C,MAAA,KAAA6C,EAAAG,OAAA,UAAAN,IAAA1C,MAAA,KAAA6C,EAAAI,IAAA,SAAAC,GAAA,MAAAT,GAAAS,MA7EA,IAAA,GAJA3D,MACAoC,KACAD,EAAA,EACAO,GAAA,EACAhF,EAAA,EAAAA,EAAAuC,UAAAhC,QACA+B,EAAAE,KAAAD,UAAAvC,KAwFA,OA9BAqE,GAAAc,IAAAA,EA4BAd,EAAAkB,IAAAA,EAEAlB,EAGA,QAAAE,GAAA2B,GAGA,IAFA,GAAApD,MACA9C,EAAA,EACAA,EAAAuC,UAAAhC,QACAuC,EAAAN,KAAAD,UAAAvC,KAEA,OADAA,GAAA,EACAkG,EAAAb,QAAA,YAAA,SAAAc,EAAAC,GACA,GAAAC,GAAAvD,EAAA9C,IACA,QAAAoG,GACA,IAAA,IACA,MAAAE,MAAAC,UAAAF,EACA,SACA,MAAAvC,QAAAuC,MA/HA5F,EAAAJ,QAAA+D,CAEA,IAAAQ,GAAA,QACAM,EAAA,SACAH,EAAA,KACAD,EAAA,gDACAG,EAAA,sCA8HAb,GAAAoC,WAAA,CAAA,KAAApC,EAAAoC,UAAA,IAAApC,EAAA,IAAA,KAAA,cAAAmB,MAAA,EAAA,GAAA,MAAAhG,IACA6E,EAAAsB,SAAA,0BCtIA,YASA,SAAAe,KAOAzD,KAAA0D,KAfAjG,EAAAJ,QAAAoG,CAmBA,IAAAE,GAAAF,EAAAG,SASAD,GAAAE,GAAA,SAAAC,EAAA1E,EAAAC,GAKA,OAJAW,KAAA0D,EAAAI,KAAA9D,KAAA0D,EAAAI,QAAAtE,MACAJ,GAAAA,EACAC,IAAAA,GAAAW,OAEAA,MASA2D,EAAAI,IAAA,SAAAD,EAAA1E,GACA,GAAA+B,SAAA2C,EACA9D,KAAA0D,SAEA,IAAAvC,SAAA/B,EACAY,KAAA0D,EAAAI,UAGA,KAAA,GADAE,GAAAhE,KAAA0D,EAAAI,GACA9G,EAAA,EAAAA,EAAAgH,EAAAzG,QACAyG,EAAAhH,GAAAoC,KAAAA,EACA4E,EAAAC,OAAAjH,EAAA,KAEAA,CAGA,OAAAgD,OASA2D,EAAAO,KAAA,SAAAJ,GACA,GAAAE,GAAAhE,KAAA0D,EAAAI,EACA,IAAAE,EAAA,CAGA,IAFA,GAAAlE,MACA9C,EAAA,EACAA,EAAAuC,UAAAhC,QACAuC,EAAAN,KAAAD,UAAAvC,KACA,KAAAA,EAAA,EAAAA,EAAAgH,EAAAzG,QACAyG,EAAAhH,GAAAoC,GAAAW,MAAAiE,EAAAhH,KAAAqC,IAAAS,GAEA,MAAAE,+BC7EA,YAUA,SAAAmE,GAAAC,GAGA,IAAA,GADAxB,GAAAC,OAAAD,KAAA5C,MACAhD,EAAA,EAAAA,EAAA4F,EAAArF,SAAAP,EACAoH,EAAAxB,EAAA5F,IAAAgD,KAAA4C,EAAA5F,GAEA,IAAA4G,GAAAQ,EAAAR,UAAAf,OAAAwB,OAAArE,KAAA4D,UAEA,OADAA,GAAAU,YAAAF,EACAR,EAjBAnG,EAAAJ,QAAA8G,0BCDA,YAwBA,SAAAI,GAAAC,EAAAC,GACA,MAAAA,GAEAC,GAAAA,EAAAC,SACAD,EAAAC,SAAAH,EAAA,OAAA,SAAA3E,EAAA+E,GACA,MAAA/E,IAAA,mBAAAgF,gBACAC,EAAAN,EAAAC,GACAA,EAAA5E,EAAA+E,KAEAE,EAAAN,EAAAC,GAPAtF,EAAAoF,EAAAvE,KAAAwE,GAUA,QAAAM,GAAAN,EAAAC,GACA,GAAAM,GAAA,GAAAF,eACAE,GAAAC,mBAAA,WACA,MAAA,KAAAD,EAAAE,WACA,IAAAF,EAAAG,QAAA,MAAAH,EAAAG,OACAT,EAAA,KAAAM,EAAAI,cACAV,EAAAvH,MAAA,UAAA6H,EAAAG,SACA/D,QAKA4D,EAAAK,KAAA,MAAAZ,GACAO,EAAAM,OAhDA5H,EAAAJ,QAAAkH,CAEA,IAAApF,GAAApC,EAAA,GACAuI,EAAAvI,EAAA,GAEA2H,EAAAY,EAAA,sDCNA,YASA,SAAAA,SAAAC,YACA,IACA,GAAAC,KAAAC,KAAA,QAAApD,QAAA,IAAA,OAAAkD,WACA,IAAAC,MAAAA,IAAAjI,QAAAsF,OAAAD,KAAA4C,KAAAjI,QACA,MAAAiI,KACA,MAAAjJ,IACA,MAAA,MAdAkB,OAAAJ,QAAAiI,gCCDA,YAOA,IAAAd,GAAAnH,EAEAqI,EAMAlB,EAAAkB,WAAA,SAAAlB,GACA,MAAA,eAAA3C,KAAA2C,IAGAmB,EAMAnB,EAAAmB,UAAA,SAAAnB,GACAA,EAAAA,EAAAnC,QAAA,MAAA,KACAA,QAAA,UAAA,IACA,IAAAuD,GAAApB,EAAAqB,MAAA,KACAC,EAAAJ,EAAAlB,GACAuB,EAAA,EACAD,KACAC,EAAAH,EAAAI,QAAA,IACA,KAAA,GAAAhJ,GAAA,EAAAA,EAAA4I,EAAArI,QACA,OAAAqI,EAAA5I,GACAA,EAAA,EACA4I,EAAA3B,SAAAjH,EAAA,GACA8I,EACAF,EAAA3B,OAAAjH,EAAA,KAEAA,EACA,MAAA4I,EAAA5I,GACA4I,EAAA3B,OAAAjH,EAAA,KAEAA,CAEA,OAAA+I,GAAAH,EAAAtD,KAAA,KAUAkC,GAAA7E,QAAA,SAAAsG,EAAAC,EAAAC,GAGA,MAFAA,KACAD,EAAAP,EAAAO,IACAR,EAAAQ,GACAA,GACAC,IACAF,EAAAN,EAAAM,KACAA,EAAAA,EAAA5D,QAAA,kBAAA,KAAA9E,OAAAoI,EAAAM,EAAA,IAAAC,GAAAA,6BC/DA,YA8BA,SAAAE,GAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAD,GAAA,KACAE,EAAAD,IAAA,EACAE,EAAA,KACA9I,EAAA4I,CACA,OAAA,UAAAD,GACA,GAAAA,EAAA,GAAAA,EAAAE,EACA,MAAAJ,GAAAE,EACA3I,GAAA2I,EAAAC,IACAE,EAAAL,EAAAG,GACA5I,EAAA,EAEA,IAAA+I,GAAAL,EAAAhJ,KAAAoJ,EAAA9I,EAAAA,GAAA2I,EAGA,OAFA,GAAA3I,IACAA,GAAA,EAAAA,GAAA,GACA+I,GA5CAlJ,EAAAJ,QAAA+I,2BCDA,YAOA,IAAAQ,GAAAvJ,CAOAuJ,GAAArJ,OAAA,SAAA2C,GAGA,IAAA,GAFA2G,GAAA,EACAjI,EAAA,EACA5B,EAAA,EAAAA,EAAAkD,EAAA3C,SAAAP,EACA4B,EAAAsB,EAAAgB,WAAAlE,GACA4B,EAAA,IACAiI,GAAA,EACAjI,EAAA,KACAiI,GAAA,EACA,SAAA,MAAAjI,IAAA,SAAA,MAAAsB,EAAAgB,WAAAlE,EAAA,OACAA,EACA6J,GAAA,GAEAA,GAAA,CAEA,OAAAA,IAUAD,EAAAlJ,KAAA,SAAAC,EAAA+C,EAAAC,GACA,GAAAkG,GAAAlG,EAAAD,CACA,IAAAmG,EAAA,EACA,MAAA,EAKA,KAJA,GAGArK,GAHAoJ,KACAkB,KACA9J,EAAA,EAEA0D,EAAAC,GACAnE,EAAAmB,EAAA+C,KACAlE,EAAA,IACAsK,EAAA9J,KAAAR,EACAA,EAAA,KAAAA,EAAA,IACAsK,EAAA9J,MAAA,GAAAR,IAAA,EAAA,GAAAmB,EAAA+C,KACAlE,EAAA,KAAAA,EAAA,KACAA,IAAA,EAAAA,IAAA,IAAA,GAAAmB,EAAA+C,OAAA,IAAA,GAAA/C,EAAA+C,OAAA,EAAA,GAAA/C,EAAA+C,MAAA,MACAoG,EAAA9J,KAAA,OAAAR,GAAA,IACAsK,EAAA9J,KAAA,OAAA,KAAAR,IAEAsK,EAAA9J,MAAA,GAAAR,IAAA,IAAA,GAAAmB,EAAA+C,OAAA,EAAA,GAAA/C,EAAA+C,KACA1D,EAAA,OACA4I,EAAApG,KAAAsB,OAAAC,aAAAhB,MAAAe,OAAAgG,IACA9J,EAAA,EAKA,OAFAA,IACA4I,EAAApG,KAAAsB,OAAAC,aAAAhB,MAAAe,OAAAgG,EAAAR,MAAA,EAAAtJ,KACA4I,EAAAtD,KAAA,KAUAsE,EAAAlI,MAAA,SAAAwB,EAAAvC,EAAAC,GAIA,IAAA,GAFAmJ,GACAC,EAFAtG,EAAA9C,EAGAZ,EAAA,EAAAA,EAAAkD,EAAA3C,SAAAP,EACA+J,EAAA7G,EAAAgB,WAAAlE,GACA+J,EAAA,IACApJ,EAAAC,KAAAmJ,EACAA,EAAA,MACApJ,EAAAC,KAAAmJ,GAAA,EAAA,IACApJ,EAAAC,KAAA,GAAAmJ,EAAA,KACA,SAAA,MAAAA,IAAA,SAAA,OAAAC,EAAA9G,EAAAgB,WAAAlE,EAAA,MACA+J,EAAA,QAAA,KAAAA,IAAA,KAAA,KAAAC,KACAhK,EACAW,EAAAC,KAAAmJ,GAAA,GAAA,IACApJ,EAAAC,KAAAmJ,GAAA,GAAA,GAAA,IACApJ,EAAAC,KAAAmJ,GAAA,EAAA,GAAA,IACApJ,EAAAC,KAAA,GAAAmJ,EAAA,MAEApJ,EAAAC,KAAAmJ,GAAA,GAAA,IACApJ,EAAAC,KAAAmJ,GAAA,EAAA,GAAA,IACApJ,EAAAC,KAAA,GAAAmJ,EAAA,IAGA,OAAAnJ,GAAA8C,4BCpGA,YAgBA,SAAAuG,GAAAC,GACA,MAAA7C,GAAA6C,GAUA,QAAA7C,GAAA6C,EAAA9C,GAGA,GAFA+C,IACAA,EAAApK,EAAA,OACAmK,YAAAC,IACA,KAAAC,GAAA,OAAA,SACA,IAAAhD,GACA,GAAA,kBAAAA,GACA,KAAAgD,GAAA,OAAA,kBAEAhD,GAAA,SAAAiD,GACA,MAAA,UAAAC,GACAD,EAAA/J,KAAA0C,KAAAsH,KAEAC,EAGAnD,GAAAE,YAAA2C,CAGA,IAAArD,GAAAQ,EAAAR,UAAA,GAAA2D,EA2CA,OA1CA3D,GAAAU,YAAAF,EAGAoD,EAAAC,MAAArD,EAAAmD,GAAA,GAGAnD,EAAAsD,MAAAR,EACAtD,EAAA8D,MAAAR,EAGAA,EAAAS,iBAAAC,QAAA,SAAAC,GAIAjE,EAAAiE,EAAAzF,MAAA7B,MAAAuH,QAAAD,EAAAlI,UAAAoI,cACAP,EAAAQ,WACAR,EAAAS,SAAAJ,EAAAE,cACAP,EAAAU,YACAL,EAAAE,eAIAb,EAAAiB,iBAAAP,QAAA,SAAAQ,GACAZ,EAAAa,KAAAzE,EAAAwE,EAAAzI,UAAAyC,MACAkG,IAAA,WAEA,IAAA,GAAA1F,GAAAC,OAAAD,KAAA5C,MAAAhD,EAAA4F,EAAArF,OAAA,EAAAP,GAAA,IAAAA,EACA,GAAAoL,EAAAA,MAAAG,QAAA3F,EAAA5F,KAAA,EACA,MAAA4F,GAAA5F,IAGAwL,IAAA,SAAA7J,GACA,IAAA,GAAAiE,GAAAwF,EAAAA,MAAApL,EAAA,EAAAA,EAAA4F,EAAArF,SAAAP,EACA4F,EAAA5F,KAAA2B,SACAqB,MAAA4C,EAAA5F,SAMAkK,EAAAuB,QAAArE,GAEAR,EAxFAnG,EAAAJ,QAAA4J,CAEA,IAGAE,GAHAI,EAAAxK,EAAA,IACAyK,EAAAzK,EAAA,IAIAqK,EAAAI,EAAAkB,CAoFAzB,GAAA5C,OAAAA,EAGA4C,EAAArD,UAAA2D,4CC/FA,YAgBA,SAAAoB,GAAAvG,EAAAwG,GACA,QAAA/G,KAAAO,KACAA,EAAA,mBAAAA,EAAA,SACAwG,GAAAC,QAAAC,QAAAD,QAAAE,UAAAF,OAAAD,QAEAD,EAAAvG,GAAAwG,EAnBAnL,EAAAJ,QAAAsL,EA6BAA,EAAA,OACAK,KACAC,QACAC,UACAhC,KAAA,SACAiC,GAAA,GAEAxK,OACAuI,KAAA,QACAiC,GAAA,MAMA,IAAAC,EAEAT,GAAA,YACAU,SAAAD,GACAH,QACAK,SACApC,KAAA,QACAiC,GAAA,GAEAI,OACArC,KAAA,QACAiC,GAAA,OAMAR,EAAA,aACAa,UAAAJ,IAGAT,EAAA,SACAc,OACAR,aAIAN,EAAA,UACAe,QACAT,QACAA,QACAU,QAAA,SACAzC,KAAA,QACAiC,GAAA,KAIAS,OACAC,QACAC,MACA1B,OAAA,YAAA,cAAA,cAAA,YAAA,cAAA,eAGAa,QACAc,WACA7C,KAAA,YACAiC,GAAA,GAEAa,aACA9C,KAAA,SACAiC,GAAA,GAEAc,aACA/C,KAAA,SACAiC,GAAA,GAEAe,WACAhD,KAAA,OACAiC,GAAA,GAEAgB,aACAjD,KAAA,SACAiC,GAAA,GAEAiB,WACAlD,KAAA,YACAiC,GAAA,KAIAkB,WACAC,QACAC,WAAA,IAGAC,WACAvB,QACAqB,QACAG,KAAA,WACAvD,KAAA,QACAiC,GAAA,gCC9HA,YAYA,SAAAuB,GAAAC,GAEA,GAAA1B,GAAA0B,EAAAhD,iBACAtG,EAAAmG,EAAApG,QAAA,IAAA,KAEA,6CACA,2DACA,mBACA,kBACAuJ,GAAAC,OAAAvJ,EACA,iBACA,SACAA,EACA,iBAEA,KAAA,GAAArE,GAAA,EAAAA,EAAAiM,EAAA1L,SAAAP,EAAA,CACA,GAAA6K,GAAAoB,EAAAjM,GAAA2C,UACAuH,EAAAW,EAAAgD,uBAAAC,GAAA,SAAAjD,EAAAX,KACAmB,EAAAb,EAAAuD,SAAAlD,EAAAzF,KAKA,IAJAf,EACA,WAAAwG,EAAAsB,IAGAtB,EAAA7E,IAAA,CAEA,GAAA2G,GAAA9B,EAAAmD,gBAAA,SAAAnD,EAAA8B,OACAtI,GACA,kBACA,6BAAAgH,GACA,SAAAA,GACA,eAAAsB,GACA,2BACA,wBACA,WACAxI,SAAA8J,EAAAC,MAAAhE,GAAA7F,EACA,wCAAAgH,EAAArL,GACAqE,EACA,gBAAAgH,EAAAnB,OAGAW,GAAAsD,UAAA9J,EAEA,6BAAAgH,EAAAA,EAAAA,EAAAA,GAGAR,EAAAuD,QAAAjK,SAAA8J,EAAAG,OAAAlE,IAAA7F,EACA,kBACA,0BACA,kBACA,mBAAAgH,EAAAnB,GACA,SAGA/F,SAAA8J,EAAAC,MAAAhE,GAAA7F,EAAAwG,EAAAgD,aAAAD,MACA,gCACA,2CAAAvC,EAAArL,GACAqE,EACA,mBAAAgH,EAAAnB,IAGA/F,SAAA8J,EAAAC,MAAAhE,GAAA7F,EAAAwG,EAAAgD,aAAAD,MACA,0BACA,qCAAAvC,EAAArL,GACAqE,EACA,aAAAgH,EAAAnB,EACA7F,GACA,SAGA,MAAAA,GACA,YACA,mBACA,SACA,KACA,KACA,YAtFA5D,EAAAJ,QAAAqN,CAEA,IAAAI,GAAA/N,EAAA,IACAkO,EAAAlO,EAAA,IACAyK,EAAAzK,EAAA,8CCLA,YASA,SAAAsO,GAAAhK,EAAAwG,EAAAyD,EAAAC,EAAAC,GACA,MAAA3D,GAAAgD,aAAAD,MACAvJ,EAAA,+CAAAiK,EAAAC,GAAA1D,EAAAsB,IAAA,EAAA,KAAA,GAAAtB,EAAAsB,IAAA,EAAA,KAAA,GACAqC,GAAA3D,EAAA4D,SACApK,EAAA,oDAAAiK,EAAAC,GAAA1D,EAAAsB,IAAA,EAAA,KAAA,GACA9H,EAAA,6DAAAiK,EAAAC,EAAA1D,EAAAsB,IAQA,QAAAuC,GAAAf,GAQA,IAAA,GADA3N,GALAiM,EAAA0B,EAAAhD,iBACAkC,EAAAc,EAAAxC,iBACA9G,EAAAmG,EAAApG,QAAA,IAAA,KACA,0BAGApE,EAAA,EAAAA,EAAAiM,EAAA1L,SAAAP,EAAA,CACA,GAAA6K,GAAAoB,EAAAjM,GAAA2C,UACAuH,EAAAW,EAAAgD,uBAAAC,GAAA,SAAAjD,EAAAX,KACAyE,EAAAV,EAAAC,MAAAhE,GACAmB,EAAA0C,EAAAlD,EAAAzF,KAGA,IAAAyF,EAAA7E,IAAA,CACA,GAAA2G,GAAA9B,EAAAmD,gBAAA,SAAAnD,EAAA8B,OACAtI,GACA,mCAAAgH,EAAAA,GACA,oDAAAA,GACA,4CAAAR,EAAAsB,IAAA,EAAA,KAAA,EAAA,EAAA8B,EAAAW,OAAAjC,GAAAA,GACAxI,SAAAwK,EAAAtK,EACA,4DAAArE,EAAAqL,GACAhH,EACA,8BAAA,GAAAsK,EAAAzE,EAAAmB,GACAhH,EACA,cACA,KACA,SAGAwG,GAAAsD,SAGAtD,EAAAuD,QAAAjK,SAAA8J,EAAAG,OAAAlE,GAAA7F,EAEA,uBAAAgH,EAAAA,GACA,uBAAAR,EAAAsB,IAAA,EAAA,KAAA,GACA,gCAAAd,GACA,eAAAnB,EAAAmB,GACA,aAAAR,EAAAsB,IACA,MAGA9H,EAEA,UAAAgH,GACA,gCAAAA,GACAlH,SAAAwK,EACAN,EAAAhK,EAAAwG,EAAA7K,EAAA,IAAAqL,EAAA,OAAA,GACAhH,EACA,2BAAAwG,EAAAsB,IAAA,EAAAwC,KAAA,EAAAzE,EAAAmB,IAKAR,EAAAgE,SACAhE,EAAA4D,WAEA5D,EAAAiE,KACAzK,EACA,8CAAAgH,EAAAA,EAAAR,EAAAE,aAAAgE,IAAAlE,EAAAE,aAAAiE,MACA3K,EACA,gCAAAgH,EAAAA,EAAAR,EAAAE,eAIA5G,SAAAwK,EACAN,EAAAhK,EAAAwG,EAAA7K,EAAA,IAAAqL,GACAhH,EACA,wBAAAwG,EAAAsB,IAAA,EAAAwC,KAAA,EAAAzE,EAAAmB,IAIA,IAAA,GAAArL,GAAA,EAAAA,EAAA6M,EAAAtM,SAAAP,EAAA,CACA,GAAAoL,GAAAyB,EAAA7M,GACAqL,EAAA0C,EAAA3C,EAAAhG,KACAf,GACA,eAAAgH,EAEA,KAAA,GADA4D,GAAA7D,EAAAT,iBACA/G,EAAA,EAAAA,EAAAqL,EAAA1O,SAAAqD,EAAA,CACA,GAAAiH,GAAAoE,EAAArL,GACAsG,EAAAW,EAAAgD,uBAAAC,GAAA,SAAAjD,EAAAX,KACAyE,EAAAV,EAAAC,MAAAhE,GACAmB,EAAA0C,EAAAlD,EAAAzF,KACAf,GACA,UAAAwG,EAAAzF,MAEAjB,SAAAwK,EACAN,EAAAhK,EAAAwG,EAAAoB,EAAAV,QAAAV,GAAA,IAAAQ,GACAhH,EACA,wBAAAwG,EAAAsB,IAAA,EAAAwC,KAAA,EAAAzE,EAAAmB,GAEAhH,EACA,UAEAA,EACA,KAGA,MAAAA,GACA,YA1HA5D,EAAAJ,QAAAqO,CAEA,IAAAZ,GAAA/N,EAAA,IACAkO,EAAAlO,EAAA,IACAyK,EAAAzK,EAAA,IAEAgO,EAAAvD,EAAAuD,mDCPA,YAsBA,SAAAD,GAAA1I,EAAAkI,EAAA4B,GACAC,EAAA7O,KAAA0C,KAAAoC,EAAA8J,GAMAlM,KAAAsK,OAAAA,MAOAtK,KAAAoM,EAAA,KAkCA,QAAAC,GAAAC,GAEA,MADAA,GAAAF,EAAA,KACAE,EAvEA7O,EAAAJ,QAAAyN,CAEA,IAAAqB,GAAApP,EAAA,IAEAwP,EAAAJ,EAAAhI,OAAA2G,EAEAA,GAAA0B,UAAA,MAEA,IAAAhF,GAAAzK,EAAA,IAEAqK,EAAAI,EAAAkB,CA4BAlB,GAAAiF,MAAAF,GAQAG,YACApE,IAAA,WAUA,MATAtI,MAAAoM,IACApM,KAAAoM,KACAvJ,OAAAD,KAAA5C,KAAAsK,QAAA1C,QAAA,SAAAxF,GACA,GAAA+G,GAAAnJ,KAAAsK,OAAAlI,EACA,IAAApC,KAAAoM,EAAAjD,GACA,KAAAjM,OAAA,gBAAAiM,EAAA,OAAAnJ,KACAA,MAAAoM,EAAAjD,GAAA/G,GACApC,OAEAA,KAAAoM,MAsBAtB,EAAA6B,SAAA,SAAA/D,GACA,MAAAgE,SAAAhE,GAAAA,EAAA0B,SAUAQ,EAAA+B,SAAA,SAAAzK,EAAAwG,GACA,MAAA,IAAAkC,GAAA1I,EAAAwG,EAAA0B,OAAA1B,EAAAsD,UAMAK,EAAAO,OAAA,WACA,OACAZ,QAAAlM,KAAAkM,QACA5B,OAAAtK,KAAAsK,SAYAiC,EAAAQ,IAAA,SAAA3K,EAAA+G,GACA,IAAA3B,EAAAwF,SAAA5K,GACA,KAAAgF,GAAA,OACA,KAAAI,EAAAyF,UAAA9D,IAAAA,EAAA,EACA,KAAA/B,GAAA,KAAA,yBACA,IAAAjG,SAAAnB,KAAAsK,OAAAlI,GACA,KAAAlF,OAAA,mBAAAkF,EAAA,QAAApC,KACA,IAAAmB,SAAAnB,KAAAkN,gBAAA/D,GACA,KAAAjM,OAAA,gBAAAiM,EAAA,OAAAnJ,KAEA,OADAA,MAAAsK,OAAAlI,GAAA+G,EACAkD,EAAArM,OAUAuM,EAAAY,OAAA,SAAA/K,GACA,IAAAoF,EAAAwF,SAAA5K,GACA,KAAAgF,GAAA,OACA,IAAAjG,SAAAnB,KAAAsK,OAAAlI,GACA,KAAAlF,OAAA,IAAAkF,EAAA,sBAAApC,KAEA,cADAA,MAAAsK,OAAAlI,GACAiK,EAAArM,2CC3IA,YA+BA,SAAAoN,GAAAhL,EAAA+G,EAAAjC,EAAAuD,EAAAtG,EAAA+H,GASA,GARA1E,EAAAS,SAAAwC,IACAyB,EAAAzB,EACAA,EAAAtG,EAAAhD,QACAqG,EAAAS,SAAA9D,KACA+H,EAAA/H,EACAA,EAAAhD,QAEAgL,EAAA7O,KAAA0C,KAAAoC,EAAA8J,IACA1E,EAAAyF,UAAA9D,IAAAA,EAAA,EACA,KAAA/B,GAAA,KAAA,yBACA,KAAAI,EAAAwF,SAAA9F,GACA,KAAAE,GAAA,OACA,IAAAjG,SAAAgD,IAAAqD,EAAAwF,SAAA7I,GACA,KAAAiD,GAAA,SACA,IAAAjG,SAAAsJ,IAAA,+BAAA5I,KAAA4I,EAAAA,EAAA4C,WAAAC,eACA,KAAAlG,GAAA,OAAA,sBAMApH,MAAAyK,KAAAA,GAAA,aAAAA,EAAAA,EAAAtJ,OAMAnB,KAAAkH,KAAAA,EAMAlH,KAAAmJ,GAAAA,EAMAnJ,KAAAmE,OAAAA,GAAAhD,OAMAnB,KAAAyL,SAAA,aAAAhB,EAMAzK,KAAAuN,UAAAvN,KAAAyL,SAMAzL,KAAAmL,SAAA,aAAAV,EAMAzK,KAAAgD,KAAA,EAMAhD,KAAAwN,QAAA,KAMAxN,KAAA6L,OAAA,KAMA7L,KAAA+H,aAAA,KAMA/H,KAAA8L,OAAAtE,EAAAiG,MAAAtM,SAAA8J,EAAAa,KAAA5E,GAMAlH,KAAA0N,MAAA,UAAAxG,EAMAlH,KAAA6K,aAAA,KAMA7K,KAAA2N,eAAA,KAMA3N,KAAA4N,eAAA,KAOA5N,KAAA6N,EAAA,KArJApQ,EAAAJ,QAAA+P,CAEA,IAAAjB,GAAApP,EAAA,IAEA+Q,EAAA3B,EAAAhI,OAAAiJ,EAEAA,GAAAZ,UAAA,OAEA,IAKArF,GACA4G,EANAxG,EAAAxK,EAAA,IACA+N,EAAA/N,EAAA,IACAkO,EAAAlO,EAAA,IACAyK,EAAAzK,EAAA,IAKAqK,EAAAI,EAAAkB,CAwIAlB,GAAAiF,MAAAqB,GAQA1C,QACA9C,IAAAwF,EAAAE,SAAA,WAGA,MAFA,QAAAhO,KAAA6N,IACA7N,KAAA6N,EAAA7N,KAAAiO,UAAA,aAAA,GACAjO,KAAA6N,MAeAC,EAAAI,UAAA,SAAA9L,EAAAzD,EAAAwP,GAGA,MAFA,WAAA/L,IACApC,KAAA6N,EAAA,MACA1B,EAAAvI,UAAAsK,UAAA5Q,KAAA0C,KAAAoC,EAAAzD,EAAAwP,IAQAf,EAAAT,SAAA,SAAA/D,GACA,MAAAgE,SAAAhE,GAAAzH,SAAAyH,EAAAO,KAUAiE,EAAAP,SAAA,SAAAzK,EAAAwG,GACA,MAAAzH,UAAAyH,EAAAe,SACAoE,IACAA,EAAAhR,EAAA,KACAgR,EAAAlB,SAAAzK,EAAAwG,IAEA,GAAAwE,GAAAhL,EAAAwG,EAAAO,GAAAP,EAAA1B,KAAA0B,EAAA6B,KAAA7B,EAAAzE,OAAAyE,EAAAsD,UAMA4B,EAAAhB,OAAA,WACA,OACArC,KAAA,aAAAzK,KAAAyK,MAAAzK,KAAAyK,MAAAtJ,OACA+F,KAAAlH,KAAAkH,KACAiC,GAAAnJ,KAAAmJ,GACAhF,OAAAnE,KAAAmE,OACA+H,QAAAlM,KAAAkM,UASA4B,EAAAnO,QAAA,WACA,GAAAK,KAAAoO,SACA,MAAApO,KAEA,IAAAqO,GAAApD,EAAAqD,SAAAtO,KAAAkH,KAGA,IAAA/F,SAAAkN,EAGA,GAFAlH,IACAA,EAAApK,EAAA,KACAiD,KAAA6K,aAAA7K,KAAAuO,OAAAC,OAAAxO,KAAAkH,KAAAC,GACAkH,EAAA,SACA,CAAA,KAAArO,KAAA6K,aAAA7K,KAAAuO,OAAAC,OAAAxO,KAAAkH,KAAA4D,IAGA,KAAA5N,OAAA,4BAAA8C,KAAAkH,KAFAmH,GAAA,EAMA,GAAAI,EAaA,OAZAzO,MAAAgD,IACAhD,KAAA+H,gBACA/H,KAAAmL,SACAnL,KAAA+H,gBACA/H,KAAAkM,SAAA/K,UAAAsN,EAAAzO,KAAAkM,QAAA,SACAlM,KAAA+H,aAAA0G,EAEAzO,KAAA+H,aAAAsG,EAEArO,KAAA8L,OACA9L,KAAA+H,aAAAP,EAAAiG,KAAAiB,UAAA1O,KAAA+H,eAEAoE,EAAAvI,UAAAjE,QAAArC,KAAA0C,OAUA8N,EAAAa,YAAA,SAAAhQ,EAAAuN,GACA,GAAAA,EAAA,CACA,GAAAvN,YAAA4I,GACA,MAAA5I,GAAAiQ,OAAA1C,EACA,IAAAlM,KAAA6K,uBAAAC,IAAAoB,EAAA,OAAApL,OACA,MAAAd,MAAA6K,aAAAqC,gBAAAvO,EACA,IAAAuN,EAAAJ,MAAA9L,KAAA8L,KACA,MAAAI,GAAAJ,OAAA+C,OACA,gBAAAlQ,GACAA,EACA6I,EAAAsH,SAAAC,KAAApQ,GAAAqQ,SAAA,MAAAhP,KAAAkH,KAAA9G,OAAA,IACAoH,EAAAiG,KAAAiB,UAAA/P,EAAA,MAAAqB,KAAAkH,KAAA9G,OAAA,IAAAiN,UACA,IAAAnB,EAAAwB,OAAA1N,KAAA0N,MAAA,CACA,GAAAxB,EAAAwB,QAAA5M,OACA,MAAA0G,GAAAvH,OAAAQ,OAAA9B,EAAA,EAAAA,EAAApB,OACA,IAAA2O,EAAAwB,QAAAnN,MACA,MAAAA,OAAAqD,UAAA0C,MAAAhJ,KAAAqB,EACA,IAAAuN,EAAAwB,QAAAlG,EAAAyH,SAAAzH,EAAAyH,OAAAC,SAAAvQ,GACA,MAAA6I,GAAAyH,OAAAF,KAAAvH,EAAAyH,OAAAF,KAAApQ,GAAA,GAAA6I,GAAAyH,OAAAtQ,IAGA,MAAAA,sECpSA,YA0BA,SAAAoP,GAAA3L,EAAA+G,EAAAQ,EAAAzC,EAAAgF,GAEA,GADAkB,EAAA9P,KAAA0C,KAAAoC,EAAA+G,EAAAjC,EAAAgF,IACA1E,EAAAwF,SAAArD,GACA,KAAAnC,GAAAkB,EAAA,UAMA1I,MAAA2J,QAAAA,EAMA3J,KAAAgL,gBAAA,KAGAhL,KAAAgD,KAAA,EA3CAvF,EAAAJ,QAAA0Q,CAEA,IAAAX,GAAArQ,EAAA,IAEA+Q,EAAAV,EAAAxJ,UAEAuL,EAAA/B,EAAAjJ,OAAA4J,EAEAA,GAAAvB,UAAA,UAEA,IAAA1B,GAAA/N,EAAA,IACAkO,EAAAlO,EAAA,IACAyK,EAAAzK,EAAA,GAuCAgR,GAAApB,SAAA,SAAA/D,GACA,MAAAwE,GAAAT,SAAA/D,IAAAzH,SAAAyH,EAAAe,SAUAoE,EAAAlB,SAAA,SAAAzK,EAAAwG,GACA,MAAA,IAAAmF,GAAA3L,EAAAwG,EAAAO,GAAAP,EAAAe,QAAAf,EAAA1B,KAAA0B,EAAAsD,UAMAiD,EAAArC,OAAA,WACA,OACAnD,QAAA3J,KAAA2J,QACAzC,KAAAlH,KAAAkH,KACAiC,GAAAnJ,KAAAmJ,GACAhF,OAAAnE,KAAAmE,OACA+H,QAAAlM,KAAAkM,UAOAiD,EAAAxP,QAAA,WACA,GAAAK,KAAAoO,SACA,MAAApO,KAGA,IAAAoP,GAAAnE,EAAAW,OAAA5L,KAAA2J,QACA,IAAAxI,SAAAiO,EAAA,CACA,GAAAhB,GAAApO,KAAAuO,OAAAC,OAAAxO,KAAA2J,QACA,MAAAyE,YAAAtD,IACA,KAAA5N,OAAA,0BAAA8C,KAAA2J,QACA3J,MAAAgL,gBAAAoD,EAGA,MAAAN,GAAAnO,QAAArC,KAAA0C,uDChGA,YAcA,SAAAuH,GAAAD,GACA,GAAAA,EAEA,IAAA,GADA1E,GAAAC,OAAAD,KAAA0E,GACAtK,EAAA,EAAAA,EAAA4F,EAAArF,SAAAP,EACAgD,KAAA4C,EAAA5F,IAAAsK,EAAA1E,EAAA5F,IAjBAS,EAAAJ,QAAAkK,CAsBA,IAAA8H,GAAA9H,EAAA3D,SAkBAyL,GAAAT,OAAA,SAAA1C,GACAA,IACAA,KACA,IAEAtJ,GAFAqG,EAAAjJ,KAAA0H,MAAAuB,OACAL,IAGAhG,GADAsJ,EAAAoC,SACAzL,OAAAD,KAAAqG,GAEApG,OAAAD,KAAA5C,KACA,KAAA,GAAAiD,GAAAjG,EAAA,EAAAA,EAAA4F,EAAArF,SAAAP,EAAA,CACA,GAAA6K,GAAAoB,EAAAhG,EAAAL,EAAA5F,IACA2B,EAAAqB,KAAAiD,EACA,IAAA4E,EACA,GAAAA,EAAAsD,UACA,GAAAxM,IAAAA,EAAApB,QAAA2O,EAAAoC,UAAA,CAEA,IAAA,GADAgB,GAAA,GAAA/O,OAAA5B,EAAApB,QACAqD,EAAA,EAAAxD,EAAAuB,EAAApB,OAAAqD,EAAAxD,IAAAwD,EACA0O,EAAA1O,GAAAiH,EAAA8G,YAAAhQ,EAAAiC,GAAAsL,EACAtD,GAAA3F,GAAAqM,OAGA1G,GAAA3F,GAAA4E,EAAA8G,YAAAhQ,EAAAuN,OACAA,GAAAqD,aACA3G,EAAA3F,GAAAtE,GAEA,MAAAiK,IAuBArB,EAAA9G,OAAA,SAAA+M,EAAAgC,GACA,MAAAxP,MAAA0H,MAAAjH,OAAA+M,EAAAgC,IASAjI,EAAAkI,gBAAA,SAAAjC,EAAAgC,GACA,MAAAxP,MAAA0H,MAAA+H,gBAAAjC,EAAAgC,IAUAjI,EAAAtG,OAAA,SAAAyO,GACA,MAAA1P,MAAA0H,MAAAzG,OAAAyO,IAUAnI,EAAAoI,gBAAA,SAAAD,GACA,MAAA1P,MAAA0H,MAAAiI,gBAAAD,IAUAnI,EAAAqI,OAAA,SAAApC,GACA,MAAAxN,MAAA0H,MAAAkI,OAAApC,6BCtIA,YA2BA,SAAAqC,GAAAzN,EAAA8E,EAAA4I,EAAAC,EAAAC,EAAAC,EAAA/D,GAQA,GAPA1E,EAAAS,SAAA+H,IACA9D,EAAA8D,EACAA,EAAAC,EAAA9O,QACAqG,EAAAS,SAAAgI,KACA/D,EAAA+D,EACAA,EAAA9O,QAEA+F,IAAAM,EAAAwF,SAAA9F,GACA,KAAAE,GAAA,OACA,KAAAI,EAAAwF,SAAA8C,GACA,KAAA1I,GAAA,cACA,KAAAI,EAAAwF,SAAA+C,GACA,KAAA3I,GAAA,eAEA+E,GAAA7O,KAAA0C,KAAAoC,EAAA8J,GAMAlM,KAAAkH,KAAAA,GAAA,MAMAlH,KAAA8P,YAAAA,EAMA9P,KAAAgQ,gBAAAA,GAAA7O,OAMAnB,KAAA+P,aAAAA,EAMA/P,KAAAiQ,iBAAAA,GAAA9O,OAMAnB,KAAAkQ,oBAAA,KAMAlQ,KAAAmQ,qBAAA,KAnFA1S,EAAAJ,QAAAwS,CAEA,IAAA1D,GAAApP,EAAA,IAEAqT,EAAAjE,EAAAhI,OAAA0L,EAEAA,GAAArD,UAAA,QAEA,IAAArF,GAAApK,EAAA,IACAyK,EAAAzK,EAAA,IAEAqK,EAAAI,EAAAkB,CAgFAmH,GAAAlD,SAAA,SAAA/D,GACA,MAAAgE,SAAAhE,GAAAzH,SAAAyH,EAAAkH,cAUAD,EAAAhD,SAAA,SAAAzK,EAAAwG,GACA,MAAA,IAAAiH,GAAAzN,EAAAwG,EAAA1B,KAAA0B,EAAAkH,YAAAlH,EAAAmH,aAAAnH,EAAAoH,cAAApH,EAAAqH,eAAArH,EAAAsD,UAMAkE,EAAAtD,OAAA,WACA,OACA5F,KAAA,QAAAlH,KAAAkH,MAAAlH,KAAAkH,MAAA/F,OACA2O,YAAA9P,KAAA8P,YACAE,cAAAhQ,KAAAgQ,eAAA7O,OACA4O,aAAA/P,KAAA+P,aACAE,eAAAjQ,KAAAiQ,gBAAA9O,OACA+K,QAAAlM,KAAAkM,UAOAkE,EAAAzQ,QAAA,WACA,GAAAK,KAAAoO,SACA,MAAApO,KAEA,MAAAA,KAAAkQ,oBAAAlQ,KAAAuO,OAAAC,OAAAxO,KAAA8P,YAAA3I,IACA,KAAAjK,OAAA,8BAAA8C,KAAA8P,YACA,MAAA9P,KAAAmQ,qBAAAnQ,KAAAuO,OAAAC,OAAAxO,KAAA+P,aAAA5I,IACA,KAAAjK,OAAA,+BAAA8C,KAAA8P,YAEA,OAAA3D,GAAAvI,UAAAjE,QAAArC,KAAA0C,iDCrIA,YAkBA,SAAAqQ,KACAlJ,IACAA,EAAApK,EAAA,KACAuT,IACAA,EAAAvT,EAAA,KACAwT,GAAAzF,EAAA3D,EAAAmJ,EAAAlD,EAAAoD,GACAC,EAAA,UAAAF,EAAAvN,IAAA,SAAAoB,GAAA,MAAAA,GAAAhC,OAAAE,KAAA,MAaA,QAAAkO,GAAApO,EAAA8J,GACAC,EAAA7O,KAAA0C,KAAAoC,EAAA8J,GAMAlM,KAAA6I,OAAA1H,OAOAnB,KAAA0Q,EAAA,KAGA,QAAArE,GAAAsE,GAEA,MADAA,GAAAD,EAAA,KACAC,EA8DA,QAAAC,GAAAtB,GACA,GAAAA,GAAAA,EAAA/R,OAAA,CAGA,IAAA,GADAsT,MACA7T,EAAA,EAAAA,EAAAsS,EAAA/R,SAAAP,EACA6T,EAAAvB,EAAAtS,GAAAoF,MAAAkN,EAAAtS,GAAA8P,QACA,OAAA+D,IA3HApT,EAAAJ,QAAAmT,CAEA,IAAArE,GAAApP,EAAA,IAEA+T,EAAA3E,EAAAhI,OAAAqM,EAEAA,GAAAhE,UAAA,WAEA,IAIArF,GACAmJ,EAEAC,EACAE,EARA3F,EAAA/N,EAAA,IACAqQ,EAAArQ,EAAA,IACAyK,EAAAzK,EAAA,IAgBAqK,EAAAI,EAAAkB,CAgCAlB,GAAAiF,MAAAqE,GAQAC,aACAzI,IAAA,WACA,MAAAtI,MAAA0Q,IAAA1Q,KAAA0Q,EAAAlJ,EAAAwJ,QAAAhR,KAAA6I,aAWA2H,EAAA7D,SAAA,SAAA/D,GACA,MAAAgE,SAAAhE,IACAA,EAAAK,SACAL,EAAA0B,QACAnJ,SAAAyH,EAAAO,KACAP,EAAAR,QACAQ,EAAAqI,SACA9P,SAAAyH,EAAAkH,cAWAU,EAAA3D,SAAA,SAAAzK,EAAAwG,GACA,MAAA,IAAA4H,GAAApO,EAAAwG,EAAAsD,SAAAgF,QAAAtI,EAAAC,SAMAiI,EAAAhE,OAAA,WACA,OACAZ,QAAAlM,KAAAkM,QACArD,OAAA+H,EAAA5Q,KAAAmR,oBAmBAX,EAAAI,YAAAA,EAOAE,EAAAI,QAAA,SAAAE,GACA,GAAAC,GAAArR,IAYA,OAXAoR,KACAb,GACAF,IACAxN,OAAAD,KAAAwO,GAAAxJ,QAAA,SAAA0J,GAEA,IAAA,GADAzI,GAAAuI,EAAAE,GACA1Q,EAAA,EAAAA,EAAA2P,EAAAhT,SAAAqD,EACA,GAAA2P,EAAA3P,GAAA+L,SAAA9D,GACA,MAAAwI,GAAAtE,IAAAwD,EAAA3P,GAAAiM,SAAAyE,EAAAzI,GACA,MAAAzB,GAAA,UAAAkK,EAAA,YAAAb,MAGAzQ,MAQA8Q,EAAAxI,IAAA,SAAAlG,GACA,MAAAjB,UAAAnB,KAAA6I,OACA,KACA7I,KAAA6I,OAAAzG,IAAA,MAUA0O,EAAA/D,IAAA,SAAAwE,GAGA,GAFAhB,GACAF,KACAkB,GAAAhB,EAAAhI,QAAAgJ,EAAAjN,aAAA,EACA,KAAA8C,GAAA,SAAAqJ,EACA,IAAAc,YAAAnE,IAAAjM,SAAAoQ,EAAApN,OACA,KAAAiD,GAAA,SAAA,6CACA,IAAApH,KAAA6I,OAEA,CACA,GAAAlH,GAAA3B,KAAAsI,IAAAiJ,EAAAnP,KACA,IAAAT,EAAA,CAKA,GAJAwF,IACAA,EAAApK,EAAA,KACAuT,IACAA,EAAAvT,EAAA,OACA4E,YAAA6O,IAAAe,YAAAf,KAAA7O,YAAAwF,IAAAxF,YAAA2O,GAUA,KAAApT,OAAA,mBAAAqU,EAAAnP,KAAA,QAAApC,KAPA,KAAA,GADA6I,GAAAlH,EAAAwP,iBACAnU,EAAA,EAAAA,EAAA6L,EAAAtL,SAAAP,EACAuU,EAAAxE,IAAAlE,EAAA7L,GACAgD,MAAAmN,OAAAxL,GACA3B,KAAA6I,SACA7I,KAAA6I,WACA0I,EAAAC,WAAA7P,EAAAuK,SAAA,QAhBAlM,MAAA6I,SAuBA,OAFA7I,MAAA6I,OAAA0I,EAAAnP,MAAAmP,EACAA,EAAAE,MAAAzR,MACAqM,EAAArM,OAUA8Q,EAAA3D,OAAA,SAAAoE,GACA,KAAAA,YAAApF,IACA,KAAA/E,GAAA,SAAA,qBACA,IAAAmK,EAAAhD,SAAAvO,OAAAA,KAAA6I,OACA,KAAA3L,OAAAqU,EAAA,uBAAAvR,KAKA,cAJAA,MAAA6I,OAAA0I,EAAAnP,MACAS,OAAAD,KAAA5C,KAAA6I,QAAAtL,SACAyC,KAAA6I,OAAA1H,QACAoQ,EAAAG,SAAA1R,MACAqM,EAAArM,OASA8Q,EAAAa,OAAA,SAAAnN,EAAAoE,GACApB,EAAAwF,SAAAxI,GACAA,EAAAA,EAAAqB,MAAA,KACAtF,MAAAuH,QAAAtD,KACAoE,EAAApE,EACAA,EAAArD,OAEA,IAAAyQ,GAAA5R,IACA,IAAAwE,EACA,KAAAA,EAAAjH,OAAA,GAAA,CACA,GAAAsU,GAAArN,EAAAwB,OACA,IAAA4L,EAAA/I,QAAA+I,EAAA/I,OAAAgJ,IAEA,GADAD,EAAAA,EAAA/I,OAAAgJ,KACAD,YAAApB,IACA,KAAAtT,OAAA,iDAEA0U,GAAA7E,IAAA6E,EAAA,GAAApB,GAAAqB,IAIA,MAFAjJ,IACAgJ,EAAAV,QAAAtI,GACAgJ,GAOAd,EAAAgB,WAAA,WAEA,IADA,GAAAjJ,GAAA7I,KAAAmR,iBAAAnU,EAAA,EACAA,EAAA6L,EAAAtL,QACAsL,EAAA7L,YAAAwT,GACA3H,EAAA7L,KAAA8U,aAEAjJ,EAAA7L,KAAA2C,SACA,OAAAwM,GAAAvI,UAAAjE,QAAArC,KAAA0C,OAUA8Q,EAAAtC,OAAA,SAAAhK,EAAAuN,EAAAC,GAKA,GAJA,iBAAAD,KACAC,EAAAD,EACAA,EAAA5Q,QAEAqG,EAAAwF,SAAAxI,IAAAA,EAAAjH,OACAiH,EAAAA,EAAAqB,MAAA,SACA,KAAArB,EAAAjH,OACA,MAAA,KAEA,IAAA,KAAAiH,EAAA,GACA,MAAAxE,MAAAiS,UAAAzD,OAAAhK,EAAA8B,MAAA,GAAAyL,EAEA,IAAAG,GAAAlS,KAAAsI,IAAA9D,EAAA,GACA,OAAA0N,IAAA,IAAA1N,EAAAjH,UAAAwU,GAAAG,YAAAH,KAAAG,YAAA1B,KAAA0B,EAAAA,EAAA1D,OAAAhK,EAAA8B,MAAA,GAAAyL,GAAA,IACAG,EAEA,OAAAlS,KAAAuO,QAAAyD,EACA,KACAhS,KAAAuO,OAAAC,OAAAhK,EAAAuN,IAqBAjB,EAAAqB,WAAA,SAAA3N,GACA2C,IACAA,EAAApK,EAAA,IACA,IAAAmV,GAAAlS,KAAAwO,OAAAhK,EAAA2C,EACA,KAAA+K,EACA,KAAAhV,OAAA,eACA,OAAAgV,IAUApB,EAAAsB,cAAA,SAAA5N,GACA8L,IACAA,EAAAvT,EAAA,IACA,IAAAmV,GAAAlS,KAAAwO,OAAAhK,EAAA8L,EACA,KAAA4B,EACA,KAAAhV,OAAA,kBACA,OAAAgV,IAUApB,EAAAuB,WAAA,SAAA7N,GACA,GAAA0N,GAAAlS,KAAAwO,OAAAhK,EAAAsG,EACA,KAAAoH,EACA,KAAAhV,OAAA,eACA,OAAAgV,gEC3VA,YAoBA,SAAA/F,GAAA/J,EAAA8J,GACA,IAAA1E,EAAAwF,SAAA5K,GACA,KAAAgF,GAAA,OACA,IAAA8E,IAAA1E,EAAAS,SAAAiE,GACA,KAAA9E,GAAA,UAAA,YAMApH,MAAAkM,QAAAA,EAMAlM,KAAAoC,KAAAA,EAMApC,KAAAuO,OAAA,KAMAvO,KAAAoO,UAAA,EA/CA3Q,EAAAJ,QAAA8O,CAEA,IAAA3E,GAAAzK,EAAA,GAEAoP,GAAAK,UAAA,mBACAL,EAAAhI,OAAAqD,EAAArD,MAEA,IAAAmO,GAEAlL,EAAAI,EAAAkB,EA0CA6J,EAAApG,EAAAvI,SAEA4D,GAAAiF,MAAA8F,GAQAC,MACAlK,IAAA,WAEA,IADA,GAAAsJ,GAAA5R,KACA,OAAA4R,EAAArD,QACAqD,EAAAA,EAAArD,MACA,OAAAqD,KAUAa,UACAnK,IAAAiK,EAAAG,YAAA,WAGA,IAFA,GAAAlO,IAAAxE,KAAAoC,MACAwP,EAAA5R,KAAAuO,OACAqD,GACApN,EAAAmO,QAAAf,EAAAxP,MACAwP,EAAAA,EAAArD,MAEA,OAAA/J,GAAAlC,KAAA,SAUAiQ,EAAAzF,OAAA,WACA,KAAA5P,UAQAqV,EAAAd,MAAA,SAAAlD,GACAvO,KAAAuO,QAAAvO,KAAAuO,SAAAA,GACAvO,KAAAuO,OAAApB,OAAAnN,MACAA,KAAAuO,OAAAA,EACAvO,KAAAoO,UAAA,CACA,IAAAoE,GAAAjE,EAAA0D,SACAK,KACAA,EAAAvV,EAAA,KACAyV,YAAAF,IACAE,EAAAI,EAAA5S,OAQAuS,EAAAb,SAAA,SAAAnD,GACA,GAAAiE,GAAAjE,EAAA0D,SACAK,KACAA,EAAAvV,EAAA,KACAyV,YAAAF,IACAE,EAAAK,EAAA7S,MACAA,KAAAuO,OAAA,KACAvO,KAAAoO,UAAA,GAOAmE,EAAA5S,QAAA,WACA,GAAAK,KAAAoO,SACA,MAAApO,KACA,IAAAwS,GAAAxS,KAAAiS,SAKA,OAJAK,KACAA,EAAAvV,EAAA,KACAyV,YAAAF,KACAtS,KAAAoO,UAAA,GACApO,MAQAuS,EAAAtE,UAAA,SAAA7L,GACA,GAAApC,KAAAkM,QACA,MAAAlM,MAAAkM,QAAA9J,IAWAmQ,EAAArE,UAAA,SAAA9L,EAAAzD,EAAAwP,GAGA,MAFAA,IAAAnO,KAAAkM,SAAA/K,SAAAnB,KAAAkM,QAAA9J,MACApC,KAAAkM,UAAAlM,KAAAkM,aAAA9J,GAAAzD,GACAqB,MASAuS,EAAAf,WAAA,SAAAtF,EAAAiC,GAKA,MAJAjC,IACArJ,OAAAD,KAAAsJ,GAAAtE,QAAA,SAAAxF,GACApC,KAAAkO,UAAA9L,EAAA8J,EAAA9J,GAAA+L,IACAnO,MACAA,MAOAuS,EAAAlF,SAAA,WACA,GAAAb,GAAAxM,KAAAsE,YAAAkI,UACAiG,EAAAzS,KAAA0S,aACA,OAAAD,GAAAlV,OACAiP,EAAA,IAAAiG,EACAjG,uCCjMA,YAuBA,SAAAsG,GAAA1Q,EAAA2Q,EAAA7G,GAMA,GALA3L,MAAAuH,QAAAiL,KACA7G,EAAA6G,EACAA,EAAA5R,QAEAgL,EAAA7O,KAAA0C,KAAAoC,EAAA8J,GACA6G,IAAAxS,MAAAuH,QAAAiL,GACA,KAAA3L,GAAA,aAAA,WAMApH,MAAAgT,OAAAhT,KAAAoC,KAAA6Q,UAAA,EAAA,GAAAC,cAAAlT,KAAAoC,KAAA6Q,UAAA,GAMAjT,KAAAoI,MAAA2K,MAOA/S,KAAAmT,KAoDA,QAAAC,GAAAhL,GACAA,EAAAmG,QACAnG,EAAA+K,EAAAvL,QAAA,SAAAC,GACAA,EAAA0G,QACAnG,EAAAmG,OAAAxB,IAAAlF,KAxGApK,EAAAJ,QAAAyV,CAEA,IAAA3G,GAAApP,EAAA,IAEAsW,EAAAlH,EAAAhI,OAAA2O,EAEAA,GAAAtG,UAAA,OAEA,IAAAY,GAAArQ,EAAA,IACAyK,EAAAzK,EAAA,IAEAqK,EAAAI,EAAAkB,CA8CAlB,GAAAa,KAAAgL,EAAA,eACA/K,IAAA,WACA,MAAAtI,MAAAmT,KASAL,EAAAnG,SAAA,SAAA/D,GACA,MAAAgE,SAAAhE,EAAAR,QAUA0K,EAAAjG,SAAA,SAAAzK,EAAAwG,GACA,MAAA,IAAAkK,GAAA1Q,EAAAwG,EAAAR,MAAAQ,EAAAsD,UAMAmH,EAAAvG,OAAA,WACA,OACA1E,MAAApI,KAAAoI,MACA8D,QAAAlM,KAAAkM,UAwBAmH,EAAAtG,IAAA,SAAAlF,GACA,KAAAA,YAAAuF,IACA,KAAAhG,GAAA,QAAA,UAOA,OANAS,GAAA0G,QACA1G,EAAA0G,OAAApB,OAAAtF,GACA7H,KAAAoI,MAAA5I,KAAAqI,EAAAzF,MACApC,KAAAmT,EAAA3T,KAAAqI,GACAA,EAAAgE,OAAA7L,KACAoT,EAAApT,MACAA,MAQAqT,EAAAlG,OAAA,SAAAtF,GACA,KAAAA,YAAAuF,IACA,KAAAhG,GAAA,QAAA,UACA,IAAAkM,GAAAtT,KAAAmT,EAAA5K,QAAAV,EACA,IAAAyL,EAAA,EACA,KAAApW,OAAA2K,EAAA,uBAAA7H,KAQA,OAPAA,MAAAmT,EAAAlP,OAAAqP,EAAA,GACAA,EAAAtT,KAAAoI,MAAAG,QAAAV,EAAAzF,MACAkR,GAAA,GACAtT,KAAAoI,MAAAnE,OAAAqP,EAAA,GACAzL,EAAA0G,QACA1G,EAAA0G,OAAApB,OAAAtF,GACAA,EAAAgE,OAAA,KACA7L,MAMAqT,EAAA5B,MAAA,SAAAlD,GACApC,EAAAvI,UAAA6N,MAAAnU,KAAA0C,KAAAuO,GACA6E,EAAApT,OAMAqT,EAAA3B,SAAA,SAAAnD,GACAvO,KAAAmT,EAAAvL,QAAA,SAAAC,GACAA,EAAA0G,QACA1G,EAAA0G,OAAApB,OAAAtF,KAEAsE,EAAAvI,UAAA8N,SAAApU,KAAA0C,KAAAuO,8CCnKA,YAeA,SAAAgF,GAAAC,GACA,MAAA,2BAAA3R,KAAA2R,GAGA,QAAAC,GAAAD,GACA,MAAA,mCAAA3R,KAAA2R,GAGA,QAAAE,GAAAF,GACA,MAAA,iCAAA3R,KAAA2R,GAGA,QAAAG,GAAAH,GACA,MAAA,QAAAA,EAAA,KAAAA,EAAAlG,cA8BA,QAAAsG,GAAAnR,EAAA+P,EAAAtG,GA4BA,QAAA2H,GAAAL,EAAApR,GACA,GAAA0R,GAAAF,EAAAE,QAEA,OADAF,GAAAE,SAAA,KACA5W,MAAA,YAAAkF,GAAA,SAAA,KAAAoR,EAAA,OAAAM,EAAAA,EAAA,KAAA,IAAA,QAAAC,EAAAzS,OAAA,KAGA,QAAA0S,KACA,GACAR,GADAlJ,IAEA,GAAA,CACA,GAAA,OAAAkJ,EAAAS,MAAA,MAAAT,EACA,KAAAK,GAAAL,EACAlJ,GAAA9K,KAAAyU,KACAC,EAAAV,GACAA,EAAAW,UACA,MAAAX,GAAA,MAAAA,EACA,OAAAlJ,GAAAhI,KAAA,IAGA,QAAA8R,GAAAC,GACA,GAAAb,GAAAS,GACA,QAAAN,EAAAH,IACA,IAAA,IACA,IAAA,IAEA,MADAhU,GAAAgU,GACAQ,GACA,KAAA,OACA,OAAA,CACA,KAAA,QACA,OAAA,EAEA,IACA,MAAAM,GAAAd,GACA,MAAAjX,GACA,GAAA8X,GAAAZ,EAAAD,GACA,MAAAA,EACA,MAAAK,GAAAL,EAAA,UAIA,QAAAe,KACA,GAAA7T,GAAA8T,EAAAP,KACAtT,EAAAD,CAIA,OAHAwT,GAAA,MAAA,KACAvT,EAAA6T,EAAAP,MACAC,EAAA,MACAxT,EAAAC,GAGA,QAAA2T,GAAAd,GACA,GAAAiB,GAAA,CACA,OAAAjB,EAAApT,OAAA,KACAqU,GAAA,EACAjB,EAAAA,EAAAP,UAAA,GAEA,IAAAyB,GAAAf,EAAAH,EACA,QAAAkB,GACA,IAAA,MAAA,MAAAD,IAAAlW,EAAAA,EACA,KAAA,MAAA,MAAAD,IACA,KAAA,IAAA,MAAA,GAEA,GAAA,gBAAAuD,KAAA2R,GACA,MAAAiB,GAAAE,SAAAnB,EAAA,GACA,IAAA,kBAAA3R,KAAA6S,GACA,MAAAD,GAAAE,SAAAnB,EAAA,GACA,IAAA,YAAA3R,KAAA2R,GACA,MAAAiB,GAAAE,SAAAnB,EAAA,EACA,IAAA,gDAAA3R,KAAA6S,GACA,MAAAD,GAAAG,WAAApB,EACA,MAAAK,GAAAL,EAAA,UAGA,QAAAgB,GAAAhB,EAAAqB,GACA,GAAAH,GAAAf,EAAAH,EACA,QAAAkB,GACA,IAAA,MAAA,MAAA,UACA,KAAA,IAAA,MAAA,GAEA,GAAA,MAAAlB,EAAApT,OAAA,KAAAyU,EACA,KAAAhB,GAAAL,EAAA,KACA,IAAA,kBAAA3R,KAAA2R,GACA,MAAAmB,UAAAnB,EAAA,GACA,IAAA,oBAAA3R,KAAA6S,GACA,MAAAC,UAAAnB,EAAA,GACA,IAAA,cAAA3R,KAAA2R,GACA,MAAAmB,UAAAnB,EAAA,EACA,MAAAK,GAAAL,EAAA,MAGA,QAAAsB,KACA,GAAA3T,SAAA4T,EACA,KAAAlB,GAAA,UAEA,IADAkB,EAAAd,KACAR,EAAAsB,GACA,KAAAlB,GAAAkB,EAAA,OACAnD,IAAAA,GAAAD,OAAAoD,GACAb,EAAA,KAGA,QAAAc,KACA,GACAC,GADAzB,EAAAW,GAEA,QAAAX,GACA,IAAA,OACAyB,EAAAC,IAAAA,MACAjB,GACA,MACA,KAAA,SACAA,GAEA,SACAgB,EAAAE,IAAAA,MAGA3B,EAAAQ,IACAE,EAAA,KACAe,EAAAzV,KAAAgU,GAGA,QAAA4B,KAIA,GAHAlB,EAAA,KACAmB,EAAA1B,EAAAK,KACAsB,EAAA,WAAAD,GACAC,GAAA,WAAAD,EACA,KAAAxB,GAAAwB,EAAA,SACAnB,GAAA,KAGA,QAAAqB,GAAAhH,EAAAiF,GACA,OAAAA,GAEA,IAAA,SAGA,MAFAgC,GAAAjH,EAAAiF,GACAU,EAAA,MACA,CAEA,KAAA,UAEA,MADAuB,GAAAlH,EAAAiF,IACA,CAEA,KAAA,OAEA,MADAkC,GAAAnH,EAAAiF,IACA,CAEA,KAAA,UAEA,MADAmC,GAAApH,EAAAiF,IACA,CAEA,KAAA,SAEA,MADAoC,GAAArH,EAAAiF,IACA,EAEA,OAAA,EAGA,QAAAiC,GAAAlH,EAAAiF,GACA,GAAApR,GAAA6R,GACA,KAAAV,EAAAnR,GACA,KAAAyR,GAAAzR,EAAA,YACA,IAAA8E,GAAA,GAAAC,GAAA/E,EACA,IAAA8R,EAAA,KAAA,GAAA,CACA,KAAA,OAAAV,EAAAS,MAAA,CACA,GAAAS,GAAAf,EAAAH,EACA,KAAA+B,EAAArO,EAAAsM,GAEA,OAAAkB,GAEA,IAAA,MACAmB,EAAA3O,EAAAwN,EACA,MAEA,KAAA,WACA,IAAA,WACA,IAAA,WACAoB,EAAA5O,EAAAwN,EACA,MAEA,KAAA,QACAqB,EAAA7O,EAAAwN,EACA,MAEA,KAAA,cACAxN,EAAA8O,aAAA9O,EAAA8O,gBAAAxW,KAAA+U,EAAArN,EAAAwN,GACA,MAEA,KAAA,YACAxN,EAAA+O,WAAA/O,EAAA+O,cAAAzW,KAAA+U,EAAArN,EAAAwN,GACA,MAEA,SACA,IAAAY,IAAA7B,EAAAD,GACA,KAAAK,GAAAL,EACAhU,GAAAgU,GACAsC,EAAA5O,EAAA,aAIAgN,EAAA,KAAA,OAEAA,GAAA,IACA3F,GAAAxB,IAAA7F,GAGA,QAAA4O,GAAAvH,EAAA9D,EAAAtG,GACA,GAAA+C,GAAA+M,GACA,IAAA,UAAAN,EAAAzM,GAEA,WADAgP,GAAA3H,EAAA9D,EAGA,KAAAgJ,EAAAvM,GACA,KAAA2M,GAAA3M,EAAA,OACA,IAAA9E,GAAA6R,GACA,KAAAV,EAAAnR,GACA,KAAAyR,GAAAzR,EAAA,OACAA,GAAA+T,GAAA/T,GACA8R,EAAA,IACA,IAAA/K,GAAAqL,EAAAP,KACApM,EAAAuO,EAAA,GAAAhJ,GAAAhL,EAAA+G,EAAAjC,EAAAuD,EAAAtG,GACA0D,GAAAsD,UACAtD,EAAAqG,UAAA,SAAAoH,GAAA,GACA/G,EAAAxB,IAAAlF,GAGA,QAAAqO,GAAA3H,EAAA9D,GACA,GAAArI,GAAA6R,GACA,KAAAV,EAAAnR,GACA,KAAAyR,GAAAzR,EAAA,OACA,IAAAiU,GAAA7O,EAAA8O,QAAAlU,EACAA,KAAAiU,IACAjU,EAAAoF,EAAA+O,QAAAnU,IACA8R,EAAA,IACA,IAAA/K,GAAAqL,EAAAP,KACA/M,EAAA,GAAAC,GAAA/E,EACA8E,GAAA0D,OAAA,CACA,IAAA/C,GAAA,GAAAuF,GAAAiJ,EAAAlN,EAAA/G,EAAAqI,EAEA,KADAyJ,EAAA,KACA,OAAAV,GAAAS,MACA,OAAAT,GAAAG,EAAAH,KACA,IAAA,SACAgC,EAAAtO,EAAAsM,IACAU,EAAA,IACA,MACA,KAAA,WACA,IAAA,WACA,IAAA,WACA4B,EAAA5O,EAAAsM,GACA,MACA,SACA,KAAAK,GAAAL,IAGAU,EAAA,KAAA,GACA3F,EAAAxB,IAAA7F,GAAA6F,IAAAlF,GAGA,QAAAgO,GAAAtH,GACA2F,EAAA,IACA,IAAAvK,GAAAsK,GACA,IAAA9S,SAAA8J,EAAAW,OAAAjC,GACA,KAAAkK,GAAAlK,EAAA,OACAuK,GAAA,IACA,IAAAsC,GAAAvC,GACA,KAAAR,EAAA+C,GACA,KAAA3C,GAAA2C,EAAA,OACAtC,GAAA,IACA,IAAA9R,GAAA6R,GACA,KAAAV,EAAAnR,GACA,KAAAyR,GAAAzR,EAAA,OACAA,GAAA+T,GAAA/T,GACA8R,EAAA,IACA,IAAA/K,GAAAqL,EAAAP,KACApM,EAAAuO,EAAA,GAAArI,GAAA3L,EAAA+G,EAAAQ,EAAA6M,GACAjI,GAAAxB,IAAAlF,GAGA,QAAAkO,GAAAxH,EAAAiF,GACA,GAAApR,GAAA6R,GACA,KAAAV,EAAAnR,GACA,KAAAyR,GAAAzR,EAAA,OACAA,GAAA+T,GAAA/T,EACA,IAAAgG,GAAA,GAAA0K,GAAA1Q,EACA,IAAA8R,EAAA,KAAA,GAAA,CACA,KAAA,OAAAV,EAAAS,MACA,WAAAT,GACAgC,EAAApN,EAAAoL,GACAU,EAAA,OAEA1U,EAAAgU,GACAsC,EAAA1N,EAAA,YAGA8L,GAAA,KAAA,OAEAA,GAAA,IACA3F,GAAAxB,IAAA3E,GAGA,QAAAsN,GAAAnH,EAAAiF,GACA,GAAApR,GAAA6R,GACA,KAAAV,EAAAnR,GACA,KAAAyR,GAAAzR,EAAA,OACA,IAAAkI,MACAgC,EAAA,GAAAxB,GAAA1I,EAAAkI,EACA,IAAA4J,EAAA,KAAA,GAAA,CACA,KAAA,OAAAV,EAAAS,MACA,WAAAN,EAAAH,IACAgC,EAAAlJ,EAAAkH,GACAU,EAAA,MAEAuC,EAAAnK,EAAAkH,EAEAU,GAAA,KAAA,OAEAA,GAAA,IACA3F,GAAAxB,IAAAT,GAGA,QAAAmK,GAAAlI,EAAAiF,GACA,IAAAD,EAAAC,GACA,KAAAK,GAAAL,EAAA,OACA,IAAApR,GAAAoR,CACAU,GAAA,IACA,IAAAvV,GAAA6V,EAAAP,KAAA,EACA1F,GAAAjE,OAAAlI,GAAAzD,EACAyX,MAGA,QAAAZ,GAAAjH,EAAAiF,GACA,GAAAkD,GAAAxC,EAAA,KAAA,GACA9R,EAAA6R,GACA,KAAAR,EAAArR,GACA,KAAAyR,GAAAzR,EAAA,OACAsU,KACAxC,EAAA,KACA9R,EAAA,IAAAA,EAAA,IACAoR,EAAAW,IACAT,EAAAF,KACApR,GAAAoR,EACAS,MAGAC,EAAA,KACAyC,EAAApI,EAAAnM,GAGA,QAAAuU,GAAApI,EAAAnM,GACA,GAAA8R,EAAA,KAAA,GACA,KAAA,OAAAV,GAAAS,MAAA,CACA,IAAAV,EAAAC,IACA,KAAAK,GAAAL,GAAA,OACApR,GAAAA,EAAA,IAAAoR,GACAU,EAAA,KAAA,GACAhG,EAAAK,EAAAnM,EAAAgS,GAAA,IAEAuC,EAAApI,EAAAnM,OAGA8L,GAAAK,EAAAnM,EAAAgS,GAAA,IAIA,QAAAlG,GAAAK,EAAAnM,EAAAzD,GACA4P,EAAAL,UACAK,EAAAL,UAAA9L,EAAAzD,GAEA4P,EAAAnM,GAAAzD,EAGA,QAAAyX,GAAA7H,GACA,GAAA2F,EAAA,KAAA,GAAA,CACA,EACAsB,GAAAjH,EAAA,gBACA2F,EAAA,KAAA,GACAA,GAAA,KAGA,MADAA,GAAA,KACA3F,EAGA,QAAAoH,GAAApH,EAAAiF,GAEA,GADAA,EAAAS,KACAV,EAAAC,GACA,KAAAK,GAAAL,EAAA,eACA,IAAApR,GAAAoR,EACAoD,EAAA,GAAAtG,GAAAlO,EACA,IAAA8R,EAAA,KAAA,GAAA,CACA,KAAA,OAAAV,EAAAS,MAAA,CACA,GAAAS,GAAAf,EAAAH,EACA,QAAAkB,GACA,IAAA,SACAc,EAAAoB,EAAAlC,GACAR,EAAA,IACA,MACA,KAAA,MACA2C,EAAAD,EAAAlC,EACA,MACA,SACA,KAAAb,GAAAL,IAGAU,EAAA,KAAA,OAEAA,GAAA,IACA3F,GAAAxB,IAAA6J,GAGA,QAAAC,GAAAtI,EAAAiF,GACA,GAAAtM,GAAAsM,EACApR,EAAA6R,GACA,KAAAV,EAAAnR,GACA,KAAAyR,GAAAzR,EAAA,OACA,IAAA0N,GAAAE,EACAD,EAAAE,CACAiE,GAAA,IACA,IAAA4C,EAGA,IAFA5C,EAAA4C,EAAA,UAAA,KACA9G,GAAA,IACAyD,EAAAD,EAAAS,KACA,KAAAJ,GAAAL,EAKA,IAJA1D,EAAA0D,EACAU,EAAA,KAAAA,EAAA,WAAAA,EAAA,KACAA,EAAA4C,GAAA,KACA7G,GAAA,IACAwD,EAAAD,EAAAS,KACA,KAAAJ,GAAAL,EACAzD,GAAAyD,EACAU,EAAA,IACA,IAAA6C,GAAA,GAAAlH,GAAAzN,EAAA8E,EAAA4I,EAAAC,EAAAC,EAAAC,EACA,IAAAiE,EAAA,KAAA,GAAA,CACA,KAAA,OAAAV,EAAAS,MAAA,CACA,GAAAS,GAAAf,EAAAH,EACA,QAAAkB,GACA,IAAA,SACAc,EAAAuB,EAAArC,GACAR,EAAA,IACA,MACA,SACA,KAAAL,GAAAL,IAGAU,EAAA,KAAA,OAEAA,GAAA,IACA3F,GAAAxB,IAAAgK,GAGA,QAAAnB,GAAArH,EAAAiF,GACA,GAAAwD,GAAA/C,GACA,KAAAR,EAAAuD,GACA,KAAAnD,GAAAmD,EAAA,YACA,IAAA9C,EAAA,KAAA,GAAA,CACA,KAAA,OAAAV,EAAAS,MAAA,CACA,GAAAS,GAAAf,EAAAH,EACA,QAAAkB,GACA,IAAA,WACA,IAAA,WACA,IAAA,WACAoB,EAAAvH,EAAAmG,EAAAsC,EACA,MACA,SACA,IAAA1B,IAAA7B,EAAAD,GACA,KAAAK,GAAAL,EACAhU,GAAAgU,GACAsC,EAAAvH,EAAA,WAAAyI,IAIA9C,EAAA,KAAA,OAEAA,GAAA,KA/eA1B,YAAAF,GAGApG,IACAA,OAHAsG,EAAA,GAAAF,GACApG,EAAAsG,MAIA,IAOAuC,GACAI,EACAD,EACAG,EAVAtB,EAAAkD,EAAAxU,GACAwR,EAAAF,EAAAE,KACAzU,EAAAuU,EAAAvU,KACA2U,EAAAJ,EAAAI,KACAD,EAAAH,EAAAG,KAEAgD,GAAA,EAKA5B,GAAA,CAEA9C,KACAA,EAAA,GAAAF,GA+dA,KA7dA,GA4dAkB,IA5dA5B,GAAAY,EAEA2D,GAAAjK,EAAAiL,SAAA,SAAA/U,GAAA,MAAAA,IAAAoF,EAAA4P,UA2dA,QAAA5D,GAAAS,MAAA,CACA,GAAAS,IAAAf,EAAAH,GACA,QAAAkB,IAEA,IAAA,UACA,IAAAwC,EACA,KAAArD,GAAAL,GACAsB,IACA,MAEA,KAAA,SACA,IAAAoC,EACA,KAAArD,GAAAL,GACAwB,IACA,MAEA,KAAA,SACA,IAAAkC,EACA,KAAArD,GAAAL,GACA4B,IACA,MAEA,KAAA,SACA,IAAA8B,EACA,KAAArD,GAAAL,GACAgC,GAAA5D,GAAA4B,IACAU,EAAA,IACA,MAEA,SACA,GAAAqB,EAAA3D,GAAA4B,IAAA,CACA0D,GAAA,CACA,UAEA,KAAArD,GAAAL,KAKA,MADAI,GAAAE,SAAA,MAEAuD,QAAAtC,EACAI,QAAAA,EACAD,YAAAA,EACAG,OAAAA,EACA7C,KAAAA,GA1lBA/U,EAAAJ,QAAAuW,CAEA,IAAAqD,GAAAla,EAAA,IACAuV,EAAAvV,EAAA,IACAoK,EAAApK,EAAA,IACAqQ,EAAArQ,EAAA,IACAgR,EAAAhR,EAAA,IACA+V,EAAA/V,EAAA,IACA+N,EAAA/N,EAAA,IACAuT,EAAAvT,EAAA,IACA8S,EAAA9S,EAAA,IACAkO,EAAAlO,EAAA,IACAyK,EAAAzK,EAAA,8FCbA,YAWA,SAAAua,GAAAC,EAAAC,GACA,MAAAC,YAAA,uBAAAF,EAAAG,IAAA,OAAAF,GAAA,GAAA,MAAAD,EAAA1Q,KASA,QAAA8Q,GAAAha,GAMAqC,KAAA2G,IAAAhJ,EAMAqC,KAAA0X,IAAA,EAMA1X,KAAA6G,IAAAlJ,EAAAJ,OA+DA,QAAAqa,KAEA,GAAAC,GAAA,GAAA/I,GAAA,EAAA,GACA9R,EAAA,CACA,IAAAgD,KAAA6G,IAAA7G,KAAA0X,IAAA,EAAA,CACA,IAAA1a,EAAA,EAAAA,EAAA,IAAAA,EAGA,GADA6a,EAAAC,IAAAD,EAAAC,IAAA,IAAA9X,KAAA2G,IAAA3G,KAAA0X,OAAA,EAAA1a,KAAA,EACAgD,KAAA2G,IAAA3G,KAAA0X,OAAA,IACA,MAAAG,EAKA,IAFAA,EAAAC,IAAAD,EAAAC,IAAA,IAAA9X,KAAA2G,IAAA3G,KAAA0X,OAAA,MAAA,EACAG,EAAAE,IAAAF,EAAAE,IAAA,IAAA/X,KAAA2G,IAAA3G,KAAA0X,OAAA,KAAA,EACA1X,KAAA2G,IAAA3G,KAAA0X,OAAA,IACA,MAAAG,OACA,CACA,IAAA7a,EAAA,EAAAA,EAAA,IAAAA,EAAA,CACA,GAAAgD,KAAA0X,KAAA1X,KAAA6G,IACA,KAAAyQ,GAAAtX,KAGA,IADA6X,EAAAC,IAAAD,EAAAC,IAAA,IAAA9X,KAAA2G,IAAA3G,KAAA0X,OAAA,EAAA1a,KAAA,EACAgD,KAAA2G,IAAA3G,KAAA0X,OAAA,IACA,MAAAG,GAEA,GAAA7X,KAAA0X,KAAA1X,KAAA6G,IACA,KAAAyQ,GAAAtX,KAIA,IAFA6X,EAAAC,IAAAD,EAAAC,IAAA,IAAA9X,KAAA2G,IAAA3G,KAAA0X,OAAA,MAAA,EACAG,EAAAE,IAAAF,EAAAE,IAAA,IAAA/X,KAAA2G,IAAA3G,KAAA0X,OAAA,KAAA,EACA1X,KAAA2G,IAAA3G,KAAA0X,OAAA,IACA,MAAAG,GAEA,GAAA7X,KAAA6G,IAAA7G,KAAA0X,IAAA,GACA,IAAA1a,EAAA,EAAAA,EAAA,IAAAA,EAGA,GADA6a,EAAAE,IAAAF,EAAAE,IAAA,IAAA/X,KAAA2G,IAAA3G,KAAA0X,OAAA,EAAA1a,EAAA,KAAA,EACAgD,KAAA2G,IAAA3G,KAAA0X,OAAA,IACA,MAAAG,OAGA,KAAA7a,EAAA,EAAAA,EAAA,IAAAA,EAAA,CACA,GAAAgD,KAAA0X,KAAA1X,KAAA6G,IACA,KAAAyQ,GAAAtX,KAGA,IADA6X,EAAAE,IAAAF,EAAAE,IAAA,IAAA/X,KAAA2G,IAAA3G,KAAA0X,OAAA,EAAA1a,EAAA,KAAA,EACAgD,KAAA2G,IAAA3G,KAAA0X,OAAA,IACA,MAAAG,GAGA,KAAA3a,OAAA,2BAGA,QAAA8a,KACA,MAAAJ,GAAAta,KAAA0C,MAAAiY,SAGA,QAAAC,KACA,MAAAN,GAAAta,KAAA0C,MAAAgP,WAGA,QAAAmJ,KACA,MAAAP,GAAAta,KAAA0C,MAAAiY,QAAA,GAGA,QAAAG,KACA,MAAAR,GAAAta,KAAA0C,MAAAgP,UAAA,GAGA,QAAAqJ,KACA,MAAAT,GAAAta,KAAA0C,MAAAsY,WAAAL,SAGA,QAAAM,KACA,MAAAX,GAAAta,KAAA0C,MAAAsY,WAAAtJ,WAkCA,QAAAwJ,GAAA7R,EAAAhG,GACA,MAAAgG,GAAAhG,EAAA,GACAgG,EAAAhG,EAAA,IAAA,EACAgG,EAAAhG,EAAA,IAAA,GACAgG,EAAAhG,EAAA,IAAA,GAwBA,QAAA8X,KACA,GAAAzY,KAAA0X,IAAA,EAAA1X,KAAA6G,IACA,KAAAyQ,GAAAtX,KAAA,EACA,OAAA,IAAA8O,GAAA0J,EAAAxY,KAAA2G,IAAA3G,KAAA0X,KAAA,GAAAc,EAAAxY,KAAA2G,IAAA3G,KAAA0X,KAAA,IAGA,QAAAgB,KACA,MAAAD,GAAAnb,KAAA0C,MAAAiY,QAAA,GAGA,QAAAU,KACA,MAAAF,GAAAnb,KAAA0C,MAAAgP,UAAA,GAGA,QAAA4J,KACA,MAAAH,GAAAnb,KAAA0C,MAAAsY,WAAAL,SAGA,QAAAY,KACA,MAAAJ,GAAAnb,KAAA0C,MAAAsY,WAAAtJ,WAqOA,QAAA8J,GAAAnb,GACAob,GACAA,IACApB,EAAAra,KAAA0C,KAAArC,GAkCA,QAAAqb,GAAArS,EAAAjG,EAAAC,GACA,MAAAgG,GAAAsS,UAAAvY,EAAAC,GAGA,QAAAuY,GAAAvS,EAAAjG,EAAAC,GACA,MAAAgG,GAAA0G,SAAA,OAAA3M,EAAAC,GAyBA,QAAAwY,KACA3R,EAAAiG,MACA2L,EAAAC,MAAArB;AACAoB,EAAAE,OAAAnB,EACAiB,EAAAG,OAAAlB,EACAe,EAAAI,QAAAd,EACAU,EAAAK,SAAAb,IAEAQ,EAAAC,MAAAnB,EACAkB,EAAAE,OAAAlB,EACAgB,EAAAG,OAAAhB,EACAa,EAAAI,QAAAb,EACAS,EAAAK,SAAAZ,GApjBApb,EAAAJ,QAAAsa,EAEAA,EAAAmB,aAAAA,CAEA,IAAAtR,GAAAzK,EAAA,IACA2c,EAAA3c,EAAA,GACA+R,EAAAtH,EAAAsH,SACAlI,EAAAY,EAAAZ,KACA+S,EAAA,mBAAAC,YAAAA,WAAArZ,KAsCAoX,GAAAtT,OAAA,SAAA1G,GACA,MAAA,KAAA6J,EAAAyH,OAAA6J,EAAAnB,GAAAha,GAIA,IAAAyb,GAAAzB,EAAA/T,SAEAwV,GAAAS,EAAAF,EAAA/V,UAAAkW,UAAAH,EAAA/V,UAAA0C,KAEA,IAAAyT,GAKAX,EAAAY,OAAA,WAGA,GAAArb,IAAA,IAAAqB,KAAA2G,IAAA3G,KAAA0X,QAAA,CAAA,IAAA1X,KAAA2G,IAAA3G,KAAA0X,OAAA,IAAA,MAAA/Y,EACA,IAAAA,GAAAA,GAAA,IAAAqB,KAAA2G,IAAA3G,KAAA0X,OAAA,KAAA,EAAA1X,KAAA2G,IAAA3G,KAAA0X,OAAA,IAAA,MAAA/Y,EACA,IAAAA,GAAAA,GAAA,IAAAqB,KAAA2G,IAAA3G,KAAA0X,OAAA,MAAA,EAAA1X,KAAA2G,IAAA3G,KAAA0X,OAAA,IAAA,MAAA/Y,EACA,IAAAA,GAAAA,GAAA,IAAAqB,KAAA2G,IAAA3G,KAAA0X,OAAA,MAAA,EAAA1X,KAAA2G,IAAA3G,KAAA0X,OAAA,IAAA,MAAA/Y,EACA,IAAAA,GAAAA,GAAA,GAAAqB,KAAA2G,IAAA3G,KAAA0X,OAAA,MAAA,EAAA1X,KAAA2G,IAAA3G,KAAA0X,OAAA,IAAA,MAAA/Y,EACA,KAAAqB,KAAA0X,KAAA,GAAA1X,KAAA6G,IAEA,KADA7G,MAAA0X,IAAA1X,KAAA6G,IACAyQ,EAAAtX,KAAA,GAEA,OAAArB,GAIAob,GAAAzc,MACAqJ,KAAA,IAAA,IAAA,IAAA,IAAA,IACA+Q,IAAA,EACA7Q,IAAA,IAOAuS,EAAAa,MAAA,WACA,MAAA,GAAAja,KAAAga,UAOAZ,EAAAc,OAAA,WACA,GAAAvb,GAAAqB,KAAAga,QACA,OAAArb,KAAA,IAAA,EAAAA,GAAA,GA6GAya,EAAAe,KAAA,WACA,MAAA,KAAAna,KAAAga,UAcAZ,EAAAgB,QAAA,WACA,GAAApa,KAAA0X,IAAA,EAAA1X,KAAA6G,IACA,KAAAyQ,GAAAtX,KAAA,EACA,OAAAwY,GAAAxY,KAAA2G,IAAA3G,KAAA0X,KAAA,IAOA0B,EAAAiB,SAAA,WACA,GAAA1b,GAAAqB,KAAAoa,SACA,OAAAzb,KAAA,IAAA,EAAAA,GA2CA,IAAA2b,GAAA,mBAAAC,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAE,EAAA,GAAAb,YAAAY,EAAA7c,OAEA,OADA6c,GAAA,IAAA,EACAC,EAAA,GACA,SAAA9T,EAAA+Q,GAKA,MAJA+C,GAAA,GAAA9T,EAAA+Q,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA8C,EAAA,IAEA,SAAA7T,EAAA+Q,GAKA,MAJA+C,GAAA,GAAA9T,EAAA+Q,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA8C,EAAA,OAGA,SAAA7T,EAAA+Q,GACA,MAAAgC,GAAAhc,KAAAiJ,EAAA+Q,GAAA,EAAA,GAAA,GAQA0B,GAAAsB,MAAA,WACA,GAAA1a,KAAA0X,IAAA,EAAA1X,KAAA6G,IACA,KAAAyQ,GAAAtX,KAAA,EACA,IAAArB,GAAA2b,EAAAta,KAAA2G,IAAA3G,KAAA0X,IAEA,OADA1X,MAAA0X,KAAA,EACA/Y,EAGA,IAAAgc,GAAA,mBAAAC,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAH,EAAA,GAAAb,YAAAiB,EAAAld,OAEA,OADAkd,GAAA,IAAA,EACAJ,EAAA,GACA,SAAA9T,EAAA+Q,GASA,MARA+C,GAAA,GAAA9T,EAAA+Q,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACAmD,EAAA,IAEA,SAAAlU,EAAA+Q,GASA,MARA+C,GAAA,GAAA9T,EAAA+Q,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACA+C,EAAA,GAAA9T,EAAA+Q,EAAA,GACAmD,EAAA,OAGA,SAAAlU,EAAA+Q,GACA,MAAAgC,GAAAhc,KAAAiJ,EAAA+Q,GAAA,EAAA,GAAA,GAQA0B,GAAA0B,OAAA,WACA,GAAA9a,KAAA0X,IAAA,EAAA1X,KAAA6G,IACA,KAAAyQ,GAAAtX,KAAA,EACA,IAAArB,GAAAgc,EAAA3a,KAAA2G,IAAA3G,KAAA0X,IAEA,OADA1X,MAAA0X,KAAA,EACA/Y,GAOAya,EAAA1L,MAAA,WACA,GAAAnQ,GAAAyC,KAAAga,SACAtZ,EAAAV,KAAA0X,IACA/W,EAAAX,KAAA0X,IAAAna,CACA,IAAAoD,EAAAX,KAAA6G,IACA,KAAAyQ,GAAAtX,KAAAzC,EAEA,OADAyC,MAAA0X,KAAAna,EACAmD,IAAAC,EACA,GAAAX,MAAA2G,IAAArC,YAAA,GACAtE,KAAA6Z,EAAAvc,KAAA0C,KAAA2G,IAAAjG,EAAAC,IAOAyY,EAAAlZ,OAAA,WACA,GAAAwN,GAAA1N,KAAA0N,OACA,OAAA9G,GAAAlJ,KAAAgQ,EAAA,EAAAA,EAAAnQ,SAQA6b,EAAAlF,KAAA,SAAA3W,GACA,GAAA4D,SAAA5D,GACA,EACA,IAAAyC,KAAA0X,KAAA1X,KAAA6G,IACA,KAAAyQ,GAAAtX,YACA,IAAAA,KAAA2G,IAAA3G,KAAA0X,YACA,CACA,GAAA1X,KAAA0X,IAAAna,EAAAyC,KAAA6G,IACA,KAAAyQ,GAAAtX,KAAAzC,EACAyC,MAAA0X,KAAAna,EAEA,MAAAyC,OAQAoZ,EAAA2B,SAAA,SAAApP,GACA,OAAAA,GACA,IAAA,GACA3L,KAAAkU,MACA,MACA,KAAA,GACAlU,KAAAkU,KAAA,EACA,MACA,KAAA,GACAlU,KAAAkU,KAAAlU,KAAAga,SACA,MACA,KAAA,GACA,OAAA,CAEA,GADArO,EAAA,EAAA3L,KAAAga,SACA,IAAArO,EACA,KACA3L,MAAA+a,SAAApP,GAEA,KACA,KAAA,GACA3L,KAAAkU,KAAA,EACA,MACA,SACA,KAAAhX,OAAA,sBAAAyO,GAEA,MAAA3L,OAQAoZ,EAAA4B,MAAA,SAAArd,GASA,MARAA,IACAqC,KAAA2G,IAAAhJ,EACAqC,KAAA6G,IAAAlJ,EAAAJ,SAEAyC,KAAA2G,IAAA,KACA3G,KAAA6G,IAAA,GAEA7G,KAAA0X,IAAA,EACA1X,MAQAoZ,EAAA6B,OAAA,SAAAtd,GACA,GAAAud,GAAAlb,KAAA0X,IACA1X,KAAA6Z,EAAAvc,KAAA0C,KAAA2G,IAAA3G,KAAA0X,KACA1X,KAAA2G,GAEA,OADA3G,MAAAgb,MAAArd,GACAud,EAIA,IAAAnC,GAAA,WACA,GAAA9J,GAAAzH,EAAAyH,MACA,KAAAA,EACA,KAAA/R,OAAA,0BACAie,GAAAtB,EAAA5K,EAAArL,UAAA0C,MACA8U,EAAAnM,EAAArL,UAAAqV,UACAD,EACAE,EACAH,GAAA,GAiBAoC,EAAArC,EAAAlV,UAAAf,OAAAwB,OAAAsT,EAAA/T,UAEAuX,GAAA7W,YAAAwU,EAEA,mBAAAyB,gBAIAY,EAAAT,MAAA,WACA,GAAA1a,KAAA0X,IAAA,EAAA1X,KAAA6G,IACA,KAAAyQ,GAAAtX,KAAA,EACA,IAAArB,GAAAqB,KAAA2G,IAAA0U,YAAArb,KAAA0X,KAAA,EAEA,OADA1X,MAAA0X,KAAA,EACA/Y,IAGA,mBAAAic,gBAIAO,EAAAL,OAAA,WACA,GAAA9a,KAAA0X,IAAA,EAAA1X,KAAA6G,IACA,KAAAyQ,GAAAtX,KAAA,EACA,IAAArB,GAAAqB,KAAA2G,IAAA2U,aAAAtb,KAAA0X,KAAA,EAEA,OADA1X,MAAA0X,KAAA,EACA/Y,GAGA,IAAAyc,EAaAD,GAAAjb,OAAA,WACA,GAAA3C,GAAAyC,KAAAga,SACAtZ,EAAAV,KAAA0X,IACA/W,EAAAX,KAAA0X,IAAAna,CACA,IAAAoD,EAAAX,KAAA6G,IACA,KAAAyQ,GAAAtX,KAAAzC,EAEA,OADAyC,MAAA0X,KAAAna,EACA6d,EAAApb,KAAA2G,IAAAjG,EAAAC,IAMAwa,EAAAF,OAAA,SAAAtd,GACA,GAAAud,GAAAlb,KAAA0X,IAAA1X,KAAA2G,IAAAL,MAAAtG,KAAA0X,KAAA1X,KAAA2G,GAEA,OADA3G,MAAAgb,MAAArd,GACAud,GAmBAvD,EAAA4D,EAAApC,EAEAA,sCC3jBA,YAsBA,SAAA7G,GAAApG,GACAsE,EAAAlT,KAAA0C,KAAA,GAAAkM,GAMAlM,KAAAwb,YAMAxb,KAAAyb,SA0BA,QAAAC,MAyKA,QAAAC,GAAA9T,GACA,GAAA+T,GAAA/T,EAAA0G,OAAAC,OAAA3G,EAAA1D,OACA,IAAAyX,EAAA,CACA,GAAAC,GAAA,GAAAzO,GAAAvF,EAAA6K,cAAA7K,EAAAsB,GAAAtB,EAAAX,KAAAW,EAAA4C,MAAAtJ,QAAA0G,EAAAqE,QAIA,OAHA2P,GAAAjO,eAAA/F,EACAA,EAAA8F,eAAAkO,EACAD,EAAA7O,IAAA8O,IACA,EAEA,OAAA,EA9OApe,EAAAJ,QAAAiV,CAEA,IAAA9B,GAAAzT,EAAA,IAEA+e,EAAAtL,EAAArM,OAAAmO,EAEAA,GAAA9F,UAAA,MAEA,IAIAoH,GAJAxG,EAAArQ,EAAA,IACAyK,EAAAzK,EAAA,IACA4L,EAAA5L,EAAA,GAiCAuV,GAAAzF,SAAA,SAAAjE,EAAA4J,GAGA,MAFAA,KACAA,EAAA,GAAAF,IACAE,EAAAhB,WAAA5I,EAAAsD,SAAAgF,QAAAtI,EAAAC,SAWAiT,EAAAC,YAAAvU,EAAAhD,KAAA7E,QAYAmc,EAAAE,KAAA,QAAAA,GAAAlI,EAAA5H,EAAAzH,GAYA,QAAAwW,GAAApb,EAAA2S,GACA,GAAA/N,EAAA,CAEA,GAAAwX,GAAAxX,CACAA,GAAA,KACAwX,EAAApc,EAAA2S,IAMA,QAAA0J,GAAApI,EAAArR,GACA,IAGA,GAFA+E,EAAAwF,SAAAvK,IAAA,MAAAA,EAAArC,OAAA,KACAqC,EAAAa,KAAAsQ,MAAAnR,IACA+E,EAAAwF,SAAAvK,GAEA,CACAmR,EAAAE,SAAAA,CACA,IAAAqI,GAAAvI,EAAAnR,EAAA2Z,EAAAlQ,EACAiQ,GAAAhH,SACAgH,EAAAhH,QAAAvN,QAAA,SAAAxF,GACAmC,EAAA6X,EAAAL,YAAAjI,EAAA1R,MAEA+Z,EAAAjH,aACAiH,EAAAjH,YAAAtN,QAAA,SAAAxF,GACAmC,EAAA6X,EAAAL,YAAAjI,EAAA1R,IAAA,SAVAga,GAAA5K,WAAA/O,EAAAyJ,SAAAgF,QAAAzO,EAAAoG,QAaA,MAAAhJ,GAEA,WADAob,GAAApb,GAGAwc,GAAAC,GACArB,EAAA,KAAAmB,GAIA,QAAA7X,GAAAuP,EAAAyI,GAGA,GAAAC,GAAA1I,EAAAvL,QAAA,mBACA,IAAAiU,GAAA,EAAA,CACA,GAAAC,GAAA3I,EAAAb,UAAAuJ,EACAC,KAAA9T,KACAmL,EAAA2I,GAIA,KAAAL,EAAAX,MAAAlT,QAAAuL,IAAA,GAAA,CAKA,GAHAsI,EAAAX,MAAAjc,KAAAsU,GAGAA,IAAAnL,GAUA,YATA0T,EACAH,EAAApI,EAAAnL,EAAAmL,OAEAwI,EACAI,WAAA,aACAJ,EACAJ,EAAApI,EAAAnL,EAAAmL,OAOA,IAAAuI,EAAA,CACA,GAAA5Z,EACA,KACAA,EAAA+E,EAAA9C,GAAAiY,aAAA7I,GAAAzG,SAAA,QACA,MAAAxN,GAGA,YAFA0c,GACAtB,EAAApb,IAGAqc,EAAApI,EAAArR,SAEA6Z,EACA9U,EAAAjD,MAAAuP,EAAA,SAAAjU,EAAA4C,GAEA,KADA6Z,EACA7X,EAEA,MAAA5E,QACA0c,GACAtB,EAAApb,QAGAqc,GAAApI,EAAArR,MApGAmR,IACAA,EAAA7W,EAAA,KACA,kBAAAmP,KACAzH,EAAAyH,EACAA,EAAA/K,OAEA,IAAAib,GAAApc,IACA,KAAAyE,EACA,MAAA+C,GAAArI,UAAA6c,EAAAI,EAAAtI,EAWA,IAAAuI,GAAA5X,IAAAiX,EAqFAY,EAAA,CAUA,OANA9U,GAAAwF,SAAA8G,KACAA,GAAAA,IACAA,EAAAlM,QAAA,SAAAkM,GACAvP,EAAA6X,EAAAL,YAAA,GAAAjI,MAGAuI,EACAD,OACAE,GACArB,EAAA,KAAAmB,KA+BAN,EAAAc,SAAA,SAAA9I,GACA,MAAA9T,MAAAgc,KAAAlI,EAAA4H,IA4BAI,EAAAlJ,EAAA,SAAArB,GAEA,GAAAsL,GAAA7c,KAAAwb,SAAAlV,OACAtG,MAAAwb,WAEA,KADA,GAAAxe,GAAA,EACAA,EAAA6f,EAAAtf,QACAoe,EAAAkB,EAAA7f,IACA6f,EAAA5Y,OAAAjH,EAAA,KAEAA,CAGA,IAFAgD,KAAAwb,SAAAqB,EAEAtL,YAAAnE,IAAAjM,SAAAoQ,EAAApN,SAAAoN,EAAA5D,iBAAAgO,EAAApK,IAAAvR,KAAAwb,SAAAjT,QAAAgJ,GAAA,EACAvR,KAAAwb,SAAAhc,KAAA+R,OACA,IAAAA,YAAAf,GAAA,CACA,GAAA3H,GAAA0I,EAAAJ,gBACA,KAAAnU,EAAA,EAAAA,EAAA6L,EAAAtL,SAAAP,EACAgD,KAAA4S,EAAA/J,EAAA7L,MAUA8e,EAAAjJ,EAAA,SAAAtB,GACA,GAAAA,YAAAnE,GAAA,CAEA,GAAAjM,SAAAoQ,EAAApN,SAAAoN,EAAA5D,eAAA,CACA,GAAA2F,GAAAtT,KAAAwb,SAAAjT,QAAAgJ,EACA+B,IAAA,GACAtT,KAAAwb,SAAAvX,OAAAqP,EAAA,GAGA/B,EAAA5D,iBACA4D,EAAA5D,eAAAY,OAAApB,OAAAoE,EAAA5D,gBACA4D,EAAA5D,eAAA,UAEA,IAAA4D,YAAAf,GAEA,IAAA,GADA3H,GAAA0I,EAAAJ,iBACAnU,EAAA,EAAAA,EAAA6L,EAAAtL,SAAAP,EACAgD,KAAA6S,EAAAhK,EAAA7L,2DCnSA,YAMA,IAAA8f,GAAAzf,CAEAyf,GAAAxM,QAAAvT,EAAA,kCCRA,YAcA,SAAAuT,GAAAyM,GACAtZ,EAAAnG,KAAA0C,MAMAA,KAAAgd,KAAAD,EApBAtf,EAAAJ,QAAAiT,CAEA,IAAA9I,GAAAzK,EAAA,IACA0G,EAAA+D,EAAA/D,aAqBAwZ,EAAA3M,EAAA1M,UAAAf,OAAAwB,OAAAZ,EAAAG,UACAqZ,GAAA3Y,YAAAgM,EAOA2M,EAAAtc,IAAA,SAAAuc,GAOA,MANAld,MAAAgd,OACAE,GACAld,KAAAgd,KAAA,KAAA,KAAA,MACAhd,KAAAgd,KAAA,KACAhd,KAAAkE,KAAA,OAAAH,OAEA/D,oCCxCA,YAwBA,SAAAsQ,GAAAlO,EAAA8J,GACAsE,EAAAlT,KAAA0C,KAAAoC,EAAA8J,GAMAlM,KAAAiR,WAOAjR,KAAAmd,EAAA,KAmBA,QAAA9Q,GAAAuK,GAEA,MADAA,GAAAuG,EAAA,KACAvG,EA1DAnZ,EAAAJ,QAAAiT,CAEA,IAAAE,GAAAzT,EAAA,IAEA+T,EAAAN,EAAA5M,UAEAqZ,EAAAzM,EAAArM,OAAAmM,EAEAA,GAAA9D,UAAA,SAEA,IAAAqD,GAAA9S,EAAA,IACAyK,EAAAzK,EAAA,IACA+f,EAAA/f,EAAA,GA4BAyK,GAAAiF,MAAAwQ,GAQAG,cACA9U,IAAA,WACA,MAAAtI,MAAAmd,IAAAnd,KAAAmd,EAAA3V,EAAAwJ,QAAAhR,KAAAiR,cAgBAX,EAAA3D,SAAA,SAAA/D,GACA,MAAAgE,SAAAhE,GAAAA,EAAAqI,UAUAX,EAAAzD,SAAA,SAAAzK,EAAAwG,GACA,GAAAgO,GAAA,GAAAtG,GAAAlO,EAAAwG,EAAAsD,QAKA,OAJAtD,GAAAqI,SACApO,OAAAD,KAAAgG,EAAAqI,SAAArJ,QAAA,SAAAyV,GACAzG,EAAA7J,IAAA8C,EAAAhD,SAAAwQ,EAAAzU,EAAAqI,QAAAoM,OAEAzG,GAMAqG,EAAAnQ,OAAA,WACA,GAAAwQ,GAAAxM,EAAAhE,OAAAxP,KAAA0C,KACA,QACAkM,QAAAoR,GAAAA,EAAApR,SAAA/K,OACA8P,QAAAT,EAAAI,YAAA5Q,KAAAud,uBACA1U,OAAAyU,GAAAA,EAAAzU,QAAA1H,SAOA8b,EAAA3U,IAAA,SAAAlG,GACA,MAAA0O,GAAAxI,IAAAhL,KAAA0C,KAAAoC,IAAApC,KAAAiR,QAAA7O,IAAA,MAMA6a,EAAAnL,WAAA,WAEA,IAAA,GADAb,GAAAjR,KAAAud,kBACAvgB,EAAA,EAAAA,EAAAiU,EAAA1T,SAAAP,EACAiU,EAAAjU,GAAA2C,SACA,OAAAmR,GAAAnR,QAAArC,KAAA0C,OAMAid,EAAAlQ,IAAA,SAAAwE,GACA,GAAAvR,KAAAsI,IAAAiJ,EAAAnP,MACA,KAAAlF,OAAA,mBAAAqU,EAAAnP,KAAA,QAAApC,KACA,OAAAuR,aAAA1B,IACA7P,KAAAiR,QAAAM,EAAAnP,MAAAmP,EACAA,EAAAhD,OAAAvO,KACAqM,EAAArM,OAEA8Q,EAAA/D,IAAAzP,KAAA0C,KAAAuR,IAMA0L,EAAA9P,OAAA,SAAAoE,GACA,GAAAA,YAAA1B,GAAA,CACA,GAAA7P,KAAAiR,QAAAM,EAAAnP,QAAAmP,EACA,KAAArU,OAAAqU,EAAA,uBAAAvR,KAGA,cAFAA,MAAAiR,QAAAM,EAAAnP,MACAmP,EAAAhD,OAAA,KACAlC,EAAArM,MAEA,MAAA8Q,GAAA3D,OAAA7P,KAAA0C,KAAAuR,IA6BA0L,EAAA5Y,OAAA,SAAA0Y,EAAAS,EAAAC,GACA,GAAAC,GAAA,GAAAZ,GAAAxM,QAAAyM,EAsCA,OArCA/c,MAAAud,kBAAA3V,QAAA,SAAAmP,GACA2G,EAAAlW,EAAA8O,QAAAS,EAAA3U,OAAA,SAAAub,EAAAlZ,GACA,GAAAiZ,EAAAV,KAAA,CAEA,IAAAW,EACA,KAAAnW,GAAAkB,EAAA,UAAA,WACAqO,GAAApX,SACA,IAAAie,EACA,KACAA,GAAAJ,EAAAzG,EAAA7G,oBAAAT,gBAAAkO,GAAA5G,EAAA7G,oBAAAzP,OAAAkd,IAAA1C,SACA,MAAApb,GAEA,YADA,kBAAAge,cAAAA,aAAAnB,YAAA,WAAAjY,EAAA5E,KAKAkd,EAAAhG,EAAA6G,EAAA,SAAA/d,EAAAie,GACA,GAAAje,EAEA,MADA6d,GAAAxZ,KAAA,QAAArE,EAAAkX,GACAtS,EAAAA,EAAA5E,GAAAsB,MAEA,IAAA,OAAA2c,EAEA,WADAJ,GAAA/c,KAAA,EAGA,IAAAod,EACA,KACAA,EAAAN,EAAA1G,EAAA5G,qBAAAR,gBAAAmO,GAAA/G,EAAA5G,qBAAAlP,OAAA6c,GACA,MAAAE,GAEA,MADAN,GAAAxZ,KAAA,QAAA8Z,EAAAjH,GACAtS,EAAAA,EAAA,QAAAuZ,GAAA7c,OAGA,MADAuc,GAAAxZ,KAAA,OAAA6Z,EAAAhH,GACAtS,EAAAA,EAAA,KAAAsZ,GAAA5c,aAIAuc,mDCjNA,YAOA,SAAAO,GAAA9b,GACA,MAAAA,GAAAE,QAAA,UAAA,SAAAc,EAAAC,GACA,OAAAA,GACA,IAAA,KACA,IAAA,GACA,MAAAA,EACA,KAAA,IACA,MAAA,IACA,SACA,MAAAA,MAqBA,QAAA6T,GAAAxU,GAkBA,QAAAoR,GAAAqK,GACA,MAAAhhB,OAAA,WAAAghB,EAAA,UAAA5c,EAAA,KAQA,QAAA0S,KACA,GAAAmK,GAAA,MAAAC,EAAAC,EAAAC,CACAH,GAAAI,UAAA3gB,EAAA,CACA,IAAA4gB,GAAAL,EAAAM,KAAAhc,EACA,KAAA+b,EACA,KAAA3K,GAAA,SAIA,OAHAjW,GAAAugB,EAAAI,UACA/e,EAAA4e,GACAA,EAAA,KACAH,EAAAO,EAAA,IASA,QAAApe,GAAAsX,GACA,MAAAjV,GAAArC,OAAAsX,GAQA,QAAAzD,KACA,GAAAyK,EAAAnhB,OAAA,EACA,MAAAmhB,GAAA1Y,OACA,IAAAoY,EACA,MAAApK,IACA,IAAA2K,GACAhd,EACAid,CACA,GAAA,CACA,GAAAhhB,IAAAL,EACA,MAAA,KAEA,KADAohB,GAAA,EACA,KAAA9c,KAAA+c,EAAAxe,EAAAxC,KAGA,GAFA,OAAAghB,KACAtd,IACA1D,IAAAL,EACA,MAAA,KAEA,IAAA,MAAA6C,EAAAxC,GAAA,CACA,KAAAA,IAAAL,EACA,KAAAsW,GAAA,UACA,IAAA,MAAAzT,EAAAxC,GAAA,CACA,KAAA,OAAAwC,IAAAxC,IACA,GAAAA,IAAAL,EACA,MAAA,QACAK,IACA0D,EACAqd,GAAA,MACA,CAAA,GAAA,OAAAC,EAAAxe,EAAAxC,IAYA,MAAA,GAXA,GAAA,CAGA,GAFA,OAAAghB,KACAtd,IACA1D,IAAAL,EACA,MAAA,KACAoE,GAAAid,EACAA,EAAAxe,EAAAxC,SACA,MAAA+D,GAAA,MAAAid,KACAhhB,EACA+gB,GAAA,UAIAA,EAEA,IAAA/gB,IAAAL,EACA,MAAA,KACA,IAAAoD,GAAA/C,CACAihB,GAAAN,UAAA,CACA,IAAAO,GAAAD,EAAAhd,KAAAzB,EAAAO,KACA,KAAAme,EACA,KAAAne,EAAApD,IAAAshB,EAAAhd,KAAAzB,EAAAO,OACAA,CACA,IAAA6S,GAAA/Q,EAAAwQ,UAAArV,EAAAA,EAAA+C,EAGA,OAFA,MAAA6S,GAAA,MAAAA,IACA4K,EAAA5K,GACAA,EASA,QAAAhU,GAAAgU,GACAkL,EAAAlf,KAAAgU,GAQA,QAAAW,KACA,IAAAuK,EAAAnhB,OAAA,CACA,GAAAiW,GAAAS,GACA,IAAA,OAAAT,EACA,MAAA,KACAhU,GAAAgU,GAEA,MAAAkL,GAAA,GAWA,QAAAxK,GAAA6K,EAAAxR,GACA,GAAAyR,GAAA7K,IACA8K,EAAAD,IAAAD,CACA,IAAAE,EAEA,MADAhL,MACA,CAEA,KAAA1G,EACA,KAAAsG,GAAA,UAAAmL,EAAA,OAAAD,EAAA,aACA,QAAA,EAxJAtc,EAAAA,EAAA4K,UAEA,IAAAzP,GAAA,EACAL,EAAAkF,EAAAlF,OACA+D,EAAA,EAEAod,KAEAN,EAAA,IAmJA,QACA9c,KAAA,WAAA,MAAAA,IACA2S,KAAAA,EACAE,KAAAA,EACA3U,KAAAA,EACA0U,KAAAA,GAtMAzW,EAAAJ,QAAA4Z,CAEA,IAAA4H,GAAA,uBACAP,EAAA,kCACAD,EAAA,2DCLA,YAiCA,SAAAlX,GAAA/E,EAAA8J,GACAsE,EAAAlT,KAAA0C,KAAAoC,EAAA8J,GAMAlM,KAAAiJ,UAMAjJ,KAAA6J,OAAA1I,OAMAnB,KAAAgW,WAAA7U,OAMAnB,KAAAiW,SAAA9U,OAMAnB,KAAA4K,MAAAzJ,OAOAnB,KAAAkf,EAAA,KAOAlf,KAAAmT,EAAA,KAOAnT,KAAAmf,EAAA,KAOAnf,KAAAof,EAAA,KAOApf,KAAAqf,EAAA,KAiFA,QAAAhT,GAAAnF,GAKA,MAJAA,GAAAgY,EAAAhY,EAAAiM,EAAAjM,EAAAkY,EAAAlY,EAAAmY,EAAA,WACAnY,GAAAzG,aACAyG,GAAAjG,aACAiG,GAAA0I,OACA1I,EAxLAzJ,EAAAJ,QAAA8J,CAEA,IAAAqJ,GAAAzT,EAAA,IAEA+T,EAAAN,EAAA5M,UAEA0b,EAAA9O,EAAArM,OAAAgD,EAEAA,GAAAqF,UAAA,MAEA,IAUAd,GACAhB,EACA6U,EAZAzU,EAAA/N,EAAA,IACA+V,EAAA/V,EAAA,IACAqQ,EAAArQ,EAAA,IACAuT,EAAAvT,EAAA,IACAkK,EAAAlK,EAAA,IACAwK,EAAAxK,EAAA,IACA4a,EAAA5a,EAAA,IACAyiB,EAAAziB,EAAA,IACAyK,EAAAzK,EAAA,GAmFAyK,GAAAiF,MAAA6S,GAQAG,YACAnX,IAAA,WACA,GAAAtI,KAAAkf,EACA,MAAAlf,MAAAkf,CACAlf,MAAAkf,IAEA,KAAA,GADAQ,GAAA7c,OAAAD,KAAA5C,KAAAiJ,QACAjM,EAAA,EAAAA,EAAA0iB,EAAAniB,SAAAP,EAAA,CACA,GAAA6K,GAAA7H,KAAAiJ,OAAAyW,EAAA1iB,IACAmM,EAAAtB,EAAAsB,EACA,IAAAnJ,KAAAkf,EAAA/V,GACA,KAAAjM,OAAA,gBAAAiM,EAAA,OAAAnJ,KACAA,MAAAkf,EAAA/V,GAAAtB,EAEA,MAAA7H,MAAAkf,IAUAS,aACArX,IAAA,WACA,MAAAtI,MAAAmT,IAAAnT,KAAAmT,EAAA3L,EAAAwJ,QAAAhR,KAAAiJ,WAUA2W,qBACAtX,IAAA,WACA,MAAAtI,MAAAmf,IAAAnf,KAAAmf,EAAAnf,KAAA2H,iBAAAkY,OAAA,SAAAhY,GAAA,MAAAA,GAAAsD,cAUA2U,aACAxX,IAAA,WACA,MAAAtI,MAAAof,IAAApf,KAAAof,EAAA5X,EAAAwJ,QAAAhR,KAAA6J,WASAzF,MACAkE,IAAA,WACA,MAAAtI,MAAAqf,IAAArf,KAAAqf,EAAApY,EAAA5C,OAAArE,MAAAsE,cAEAkE,IAAA,SAAApE,GACA,GAAAA,KAAAA,EAAAR,oBAAA2D,IACA,KAAAC,GAAAkB,EAAA,OAAA,wBACA1I,MAAAqf,EAAAjb,MAkBA+C,EAAAwF,SAAA,SAAA/D,GACA,MAAAgE,SAAAhE,GAAAA,EAAAK,QAGA,IAAAsH,IAAAzF,EAAA3D,EAAAiG,EAAAkD,EAQAnJ,GAAA0F,SAAA,SAAAzK,EAAAwG,GACA,GAAA1B,GAAA,GAAAC,GAAA/E,EAAAwG,EAAAsD,QA4BA,OA3BAhF,GAAA8O,WAAApN,EAAAoN,WACA9O,EAAA+O,SAAArN,EAAAqN,SACArN,EAAAK,QACApG,OAAAD,KAAAgG,EAAAK,QAAArB,QAAA,SAAAyO,GACAnP,EAAA6F,IAAAK,EAAAP,SAAAwJ,EAAAzN,EAAAK,OAAAoN,OAEAzN,EAAAiB,QACAhH,OAAAD,KAAAgG,EAAAiB,QAAAjC,QAAA,SAAAmY,GACA7Y,EAAA6F,IAAA+F,EAAAjG,SAAAkT,EAAAnX,EAAAiB,OAAAkW,OAEAnX,EAAAC,QACAhG,OAAAD,KAAAgG,EAAAC,QAAAjB,QAAA,SAAA0J,GAEA,IAAA,GADAzI,GAAAD,EAAAC,OAAAyI,GACAtU,EAAA,EAAAA,EAAAuT,EAAAhT,SAAAP,EACA,GAAAuT,EAAAvT,GAAA2P,SAAA9D,GAEA,WADA3B,GAAA6F,IAAAwD,EAAAvT,GAAA6P,SAAAyE,EAAAzI,GAIA,MAAA3L,OAAA,4BAAAgK,EAAA,KAAAoK,KAEA1I,EAAAoN,YAAApN,EAAAoN,WAAAzY,SACA2J,EAAA8O,WAAApN,EAAAoN,YACApN,EAAAqN,UAAArN,EAAAqN,SAAA1Y,SACA2J,EAAA+O,SAAArN,EAAAqN,UACArN,EAAAgC,QACA1D,EAAA0D,OAAA,GACA1D,GAMAoY,EAAAxS,OAAA,WACA,GAAAwQ,GAAAxM,EAAAhE,OAAAxP,KAAA0C,KACA,QACAkM,QAAAoR,GAAAA,EAAApR,SAAA/K,OACA0I,OAAA2G,EAAAI,YAAA5Q,KAAAmI,kBACAc,OAAAuH,EAAAI,YAAA5Q,KAAA2H,iBAAAkY,OAAA,SAAAhP,GAAA,OAAAA,EAAAjD,sBACAoI,WAAAhW,KAAAgW,YAAAhW,KAAAgW,WAAAzY,OAAAyC,KAAAgW,WAAA7U,OACA8U,SAAAjW,KAAAiW,UAAAjW,KAAAiW,SAAA1Y,OAAAyC,KAAAiW,SAAA9U,OACAyJ,MAAA5K,KAAA4K,OAAAzJ,OACA0H,OAAAyU,GAAAA,EAAAzU,QAAA1H,SAOAme,EAAAxN,WAAA,WAEA,IADA,GAAA7I,GAAAjJ,KAAA2H,iBAAA3K,EAAA,EACAA,EAAAiM,EAAA1L,QACA0L,EAAAjM,KAAA2C,SACA,IAAAkK,GAAA7J,KAAAmI,gBACA,KADAnL,EAAA,EACAA,EAAA6M,EAAAtM,QACAsM,EAAA7M,KAAA2C,SACA,OAAAmR,GAAAnR,QAAArC,KAAA0C,OAMAsf,EAAAhX,IAAA,SAAAlG,GACA,MAAA0O,GAAAxI,IAAAhL,KAAA0C,KAAAoC,IAAApC,KAAAiJ,QAAAjJ,KAAAiJ,OAAA7G,IAAApC,KAAA6J,QAAA7J,KAAA6J,OAAAzH,IAAA,MAUAkd,EAAAvS,IAAA,SAAAwE,GACA,GAAAvR,KAAAsI,IAAAiJ,EAAAnP,MACA,KAAAlF,OAAA,mBAAAqU,EAAAnP,KAAA,QAAApC,KACA,IAAAuR,YAAAnE,IAAAjM,SAAAoQ,EAAApN,OAAA,CAIA,GAAAnE,KAAAggB,gBAAAzO,EAAApI,IACA,KAAAjM,OAAA,gBAAAqU,EAAApI,GAAA,OAAAnJ,KAMA,OALAuR,GAAAhD,QACAgD,EAAAhD,OAAApB,OAAAoE,GACAvR,KAAAiJ,OAAAsI,EAAAnP,MAAAmP,EACAA,EAAA/D,QAAAxN,KACAuR,EAAAE,MAAAzR,MACAqM,EAAArM,MAEA,MAAAuR,aAAAuB,IACA9S,KAAA6J,SACA7J,KAAA6J,WACA7J,KAAA6J,OAAA0H,EAAAnP,MAAAmP,EACAA,EAAAE,MAAAzR,MACAqM,EAAArM,OAEA8Q,EAAA/D,IAAAzP,KAAA0C,KAAAuR,IAUA+N,EAAAnS,OAAA,SAAAoE,GACA,GAAAA,YAAAnE,IAAAjM,SAAAoQ,EAAApN,OAAA,CAEA,GAAAnE,KAAAiJ,OAAAsI,EAAAnP,QAAAmP,EACA,KAAArU,OAAAqU,EAAA,uBAAAvR,KAGA,cAFAA,MAAAiJ,OAAAsI,EAAAnP,MACAmP,EAAA/D,QAAA,KACAnB,EAAArM,MAEA,MAAA8Q,GAAA3D,OAAA7P,KAAA0C,KAAAuR,IAQA+N,EAAAjb,OAAA,SAAAiD,GACA,MAAA,KAAAtH,KAAAigB,WAAA3Y,IAOAgY,EAAAY,MAAA,WAsBA,MAnBAxU,KACAA,EAAA3O,EAAA,IACA2N,EAAA3N,EAAA,IACAwiB,EAAAxiB,EAAA,KAEAiD,KAAAS,OAAAiL,EAAA1L,MAAAuC,IAAAvC,KAAA0S,cAAA,WACA8M,OAAAA,EACAvU,MAAAjL,KAAA2H,iBAAA3E,IAAA,SAAAmd,GAAA,MAAAA,GAAAtV,eACArD,KAAAA,IAEAxH,KAAAiB,OAAAyJ,EAAA1K,MAAAuC,IAAAvC,KAAA0S,cAAA,WACAiF,OAAAA,EACA1M,MAAAjL,KAAA2H,iBAAA3E,IAAA,SAAAmd,GAAA,MAAAA,GAAAtV,eACArD,KAAAA,IAEAxH,KAAA4P,OAAA2P,EAAAvf,MAAAuC,IAAAvC,KAAA0S,cAAA,WACAzH,MAAAjL,KAAA2H,iBAAA3E,IAAA,SAAAmd,GAAA,MAAAA,GAAAtV,eACArD,KAAAA,IAEAxH,MASAsf,EAAA7e,OAAA,SAAA+M,EAAAgC,GACA,MAAAxP,MAAAkgB,QAAAzf,OAAA+M,EAAAgC,IASA8P,EAAA7P,gBAAA,SAAAjC,EAAAgC,GACA,MAAAxP,MAAAS,OAAA+M,EAAAgC,GAAAA,EAAA3I,IAAA2I,EAAA4Q,OAAA5Q,GAAA6Q,UASAf,EAAAre,OAAA,SAAAyO,EAAAnS,GACA,MAAAyC,MAAAkgB,QAAAjf,OAAAyO,EAAAnS,IAQA+hB,EAAA3P,gBAAA,SAAAD,GAEA,MADAA,GAAAA,YAAAiI,GAAAjI,EAAAiI,EAAAtT,OAAAqL,GACA1P,KAAAiB,OAAAyO,EAAAA,EAAAsK,WAQAsF,EAAA1P,OAAA,SAAApC,GACA,MAAAxN,MAAAkgB,QAAAtQ,OAAApC,0GCzZA,YA6BA,SAAA8S,GAAAhW,EAAA1M,GACA,GAAAZ,GAAA,EAAAJ,IAEA,KADAgB,GAAA,EACAZ,EAAAsN,EAAA/M,QAAAX,EAAAD,EAAAK,EAAAY,IAAA0M,EAAAtN,IACA,OAAAJ,GA3BA,GAAAqO,GAAA5N,EAEAmK,EAAAzK,EAAA,IAEAJ,GACA,SACA,QACA,QACA,SACA,SACA,UACA,WACA,QACA,SACA,SACA,UACA,WACA,OACA,SACA,QACA,UA6BAsO,GAAAC,MAAAoV,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAuBArV,EAAAqD,SAAAgS,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACA9Y,EAAAQ,WACA,OAYAiD,EAAAa,KAAAwU,GACA,EACA,EACA,EACA,EACA,GACA,GAkBArV,EAAAW,OAAA0U,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GAmBArV,EAAAG,OAAAkV,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,kCC9LA,YAMA,IAAA9Y,GAAA/J,EAAAJ,QAAAN,EAAA,GAEAyK,GAAArI,UAAApC,EAAA,GACAyK,EAAApG,QAAArE,EAAA,GACAyK,EAAA/D,aAAA1G,EAAA,GACAyK,EAAArD,OAAApH,EAAA,GACAyK,EAAAjD,MAAAxH,EAAA,GACAyK,EAAAhD,KAAAzH,EAAA,GAMAyK,EAAA9C,GAAA8C,EAAAlC,QAAA,MAOAkC,EAAAwJ,QAAA,SAAAO,GACA,IAAAA,EACA,QAIA,KAAA,GAHAmO,GAAA7c,OAAAD,KAAA2O,GACAhU,EAAAmiB,EAAAniB,OACA+R,EAAA,GAAA/O,OAAAhD,GACAP,EAAA,EAAAA,EAAAO,IAAAP,EACAsS,EAAAtS,GAAAuU,EAAAmO,EAAA1iB,GACA,OAAAsS,IAUA9H,EAAAkB,EAAA,SAAAtG,EAAAme,GACA,MAAAnZ,WAAAhF,EAAA,aAAAme,GAAA,cAUA/Y,EAAAC,MAAA,SAAA+Y,EAAA9e,EAAAyM,GACA,GAAAzM,EAEA,IAAA,GADAkB,GAAAC,OAAAD,KAAAlB,GACA1E,EAAA,EAAAA,EAAA4F,EAAArF,SAAAP,EACAmE,SAAAqf,EAAA5d,EAAA5F,KAAAmR,IACAqS,EAAA5d,EAAA5F,IAAA0E,EAAAkB,EAAA5F,IAEA,OAAAwjB,IAQAhZ,EAAAuD,SAAA,SAAA1C,GACA,MAAA,KAAAA,EAAAhG,QAAA,MAAA,QAAAA,QAAA,KAAA,OAAA,MAQAmF,EAAA4P,UAAA,SAAAjV,GACA,MAAAA,GAAA8Q,UAAA,EAAA,GACA9Q,EAAA8Q,UAAA,GACA5Q,QAAA,uBAAA,SAAAc,EAAAC,GAAA,MAAAA,GAAA8P,iBAQA1L,EAAAiZ,WAAA,SAAAte,GACA,MAAAA,GAAA8Q,UAAA,EAAA,GACA9Q,EAAA8Q,UAAA,GACA5Q,QAAA,sBAAA,SAAAc,EAAAC,GAAA,MAAA,IAAAA,EAAAkK,iBAQA9F,EAAA+O,QAAA,SAAApU,GACA,MAAAA,GAAA/B,OAAA,GAAA8S,cAAA/Q,EAAA8Q,UAAA,IAQAzL,EAAA8O,QAAA,SAAAnU,GACA,MAAAA,GAAA/B,OAAA,GAAAkN,cAAAnL,EAAA8Q,UAAA,IAQAzL,EAAAkZ,UAAA,SAAAna,GAEA,MADAA,GAAAA,GAAA,EACAiB,EAAAyH,OACAzH,EAAAyH,OAAA0R,YAAAnZ,EAAAyH,OAAA0R,YAAApa,GAAA,GAAAiB,GAAAyH,OAAA1I,GACA,IAAA,mBAAAqT,YAAAA,WAAArZ,OAAAgG,0DC3HA,YAuBA,SAAAuI,GAAAgJ,EAAAC,GAMA/X,KAAA8X,GAAAA,EAMA9X,KAAA+X,GAAAA,EAjCAta,EAAAJ,QAAAyR,CAEA,IAAAtH,GAAAzK,EAAA,IAmCA6jB,EAAA9R,EAAAlL,UAOAid,EAAA/R,EAAA+R,KAAA,GAAA/R,GAAA,EAAA,EAEA+R,GAAA7R,SAAA,WAAA,MAAA,IACA6R,EAAAC,SAAAD,EAAAvI,SAAA,WAAA,MAAAtY,OACA6gB,EAAAtjB,OAAA,WAAA,MAAA,IAOAuR,EAAAiS,WAAA,SAAApiB,GACA,GAAA,IAAAA,EACA,MAAAkiB,EACA,IAAApM,GAAA9V,EAAA,CACAA,GAAAH,KAAAM,IAAAH,EACA,IAAAmZ,GAAAnZ,IAAA,EACAoZ,GAAApZ,EAAAmZ,GAAA,aAAA,CAUA,OATArD,KACAsD,GAAAA,IAAA,EACAD,GAAAA,IAAA,IACAA,EAAA,aACAA,EAAA,IACAC,EAAA,aACAA,EAAA,KAGA,GAAAjJ,GAAAgJ,EAAAC,IAQAjJ,EAAAC,KAAA,SAAApQ,GACA,GAAA,gBAAAA,GACA,MAAAmQ,GAAAiS,WAAApiB,EACA,IAAA,gBAAAA,GAAA,CACA,IAAA6I,EAAAiG,KAGA,MAAAqB,GAAAiS,WAAApM,SAAAhW,EAAA,IAFAA,GAAA6I,EAAAiG,KAAAuT,WAAAriB,GAIA,MAAAA,GAAAoN,KAAApN,EAAAqN,KAAA,GAAA8C,GAAAnQ,EAAAoN,MAAA,EAAApN,EAAAqN,OAAA,GAAA6U,GAQAD,EAAA5R,SAAA,SAAAiS,GACA,OAAAA,GAAAjhB,KAAA+X,KAAA,IACA/X,KAAA8X,IAAA9X,KAAA8X,GAAA,IAAA,EACA9X,KAAA+X,IAAA/X,KAAA+X,KAAA,EACA/X,KAAA8X,KACA9X,KAAA+X,GAAA/X,KAAA+X,GAAA,IAAA,KACA/X,KAAA8X,GAAA,WAAA9X,KAAA+X,KAEA/X,KAAA8X,GAAA,WAAA9X,KAAA+X,IAQA6I,EAAA3I,OAAA,SAAAgJ,GACA,MAAAzZ,GAAAiG,KACA,GAAAjG,GAAAiG,KAAAzN,KAAA8X,GAAA9X,KAAA+X,GAAAkJ,IACAlV,IAAA/L,KAAA8X,GAAA9L,KAAAhM,KAAA+X,GAAAkJ,SAAArU,QAAAqU,IAGA,IAAA/f,GAAAJ,OAAA8C,UAAA1C,UAOA4N,GAAAoS,SAAA,SAAAC,GACA,MAAA,IAAArS,IACA5N,EAAA5D,KAAA6jB,EAAA,GACAjgB,EAAA5D,KAAA6jB,EAAA,IAAA,EACAjgB,EAAA5D,KAAA6jB,EAAA,IAAA,GACAjgB,EAAA5D,KAAA6jB,EAAA,IAAA,MAAA,GAEAjgB,EAAA5D,KAAA6jB,EAAA,GACAjgB,EAAA5D,KAAA6jB,EAAA,IAAA,EACAjgB,EAAA5D,KAAA6jB,EAAA,IAAA,GACAjgB,EAAA5D,KAAA6jB,EAAA,IAAA,MAAA,IAQAP,EAAAQ,OAAA,WACA,MAAAtgB,QAAAC,aACA,IAAAf,KAAA8X,GACA9X,KAAA8X,KAAA,EAAA,IACA9X,KAAA8X,KAAA,GAAA,IACA9X,KAAA8X,KAAA,GAAA,IACA,IAAA9X,KAAA+X,GACA/X,KAAA+X,KAAA,EAAA,IACA/X,KAAA+X,KAAA,GAAA,IACA/X,KAAA+X,KAAA,GAAA,MAQA6I,EAAAE,SAAA,WACA,GAAAO,GAAArhB,KAAA+X,IAAA,EAGA,OAFA/X,MAAA+X,KAAA/X,KAAA+X,IAAA,EAAA/X,KAAA8X,KAAA,IAAAuJ,KAAA,EACArhB,KAAA8X,IAAA9X,KAAA8X,IAAA,EAAAuJ,KAAA,EACArhB,MAOA4gB,EAAAtI,SAAA,WACA,GAAA+I,KAAA,EAAArhB,KAAA8X,GAGA,OAFA9X,MAAA8X,KAAA9X,KAAA8X,KAAA,EAAA9X,KAAA+X,IAAA,IAAAsJ,KAAA,EACArhB,KAAA+X,IAAA/X,KAAA+X,KAAA,EAAAsJ,KAAA,EACArhB,MAOA4gB,EAAArjB,OAAA,WACA,GAAA+jB,GAAAthB,KAAA8X,GACAyJ,GAAAvhB,KAAA8X,KAAA,GAAA9X,KAAA+X,IAAA,KAAA,EACAyJ,EAAAxhB,KAAA+X,KAAA,EACA,OAAA,KAAAyJ,EACA,IAAAD,EACAD,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,GAAA,GAAA,EAAA,EACAC,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,GAAA,GAAA,EAAA,EAEAC,EAAA,IAAA,EAAA,+CCrMA,YAEA,IAAAha,GAAAnK,CAEAmK,GAAAsH,SAAA/R,EAAA,IACAyK,EAAAvH,OAAAlD,EAAA,GACAyK,EAAAlC,QAAAvI,EAAA,GACAyK,EAAAZ,KAAA7J,EAAA,IACAyK,EAAApB,KAAArJ,EAAA,IAOAyK,EAAAia,OAAA7U,QAAA8U,EAAAxF,SAAAwF,EAAAxF,QAAAyF,UAAAD,EAAAxF,QAAAyF,SAAAC,MAMApa,EAAAyH,QAAAzH,EAAAyH,OAAAzH,EAAAlC,QAAA,YAAAkC,EAAAyH,OAAAA,QAAA,KAMAzH,EAAAiG,KAAAiU,EAAAG,SAAAH,EAAAG,QAAApU,MAAAjG,EAAAlC,QAAA,QAQAkC,EAAAyF,UAAA4B,OAAA5B,WAAA,SAAAtO,GACA,MAAA,gBAAAA,IAAAmjB,SAAAnjB,IAAAH,KAAAQ,MAAAL,KAAAA,GAQA6I,EAAAwF,SAAA,SAAArO,GACA,MAAA,gBAAAA,IAAAA,YAAAmC,SAQA0G,EAAAS,SAAA,SAAAtJ,GACA,MAAAiO,SAAAjO,GAAA,gBAAAA,KAQA6I,EAAAua,WAAA,SAAApjB,GACA,MAAAA,GACA6I,EAAAsH,SAAAC,KAAApQ,GAAAyiB,SACA,oBASA5Z,EAAAwa,aAAA,SAAAb,EAAAF,GACA,GAAApJ,GAAArQ,EAAAsH,SAAAoS,SAAAC,EACA,OAAA3Z,GAAAiG,KACAjG,EAAAiG,KAAAwU,SAAApK,EAAAC,GAAAD,EAAAE,GAAAkJ,GACApJ,EAAA7I,SAAApC,QAAAqU,KAWAzZ,EAAA0a,QAAA,SAAAplB,EAAA+D,GACA,MAAA,gBAAA/D,GACA,gBAAA+D,GACA/D,IAAA+D,GACA/D,EAAA0K,EAAAsH,SAAAiS,WAAAjkB,IAAAgb,KAAAjX,EAAAkL,KAAAjP,EAAAib,KAAAlX,EAAAmL,KACA,gBAAAnL,IACAA,EAAA2G,EAAAsH,SAAAiS,WAAAlgB,IAAAiX,KAAAhb,EAAAiP,KAAAlL,EAAAkX,KAAAjb,EAAAkP,KACAlP,EAAAiP,MAAAlL,EAAAkL,KAAAjP,EAAAkP,OAAAnL,EAAAmL,MAUAxE,EAAA2a,OAAA,SAAAC,EAAAtK,EAAAC,GACA,GAAA,gBAAAqK,GACA,MAAAA,GAAArW,MAAA+L,GAAAsK,EAAApW,OAAA+L,CACA,IAAAF,GAAArQ,EAAAsH,SAAAC,KAAAqT,EACA,OAAAvK,GAAAC,KAAAA,GAAAD,EAAAE,KAAAA,GASAvQ,EAAAiF,MAAA,SAAA4V,EAAAC,GACAzf,OAAAD,KAAA0f,GAAA1a,QAAA,SAAA3E,GACAuE,EAAAa,KAAAga,EAAApf,EAAAqf,EAAArf,OAWAuE,EAAAa,KAAA,SAAAga,EAAApf,EAAAsf,GACA,GAAAC,MAAA,GACAC,EAAAxf,EAAAgQ,UAAA,EAAA,GAAAC,cAAAjQ,EAAAgQ,UAAA,EACAsP,GAAAja,MACA+Z,EAAA,MAAAI,GAAAF,EAAAja,KACAia,EAAA/Z,MACA6Z,EAAA,MAAAI,GAAAD,EACA,SAAA7jB,GACA4jB,EAAA/Z,IAAAlL,KAAA0C,KAAArB,GACAqB,KAAAiD,GAAAtE,GAEA4jB,EAAA/Z,KACAga,EACArhB,SAAAohB,EAAA5jB,QACA0jB,EAAApf,GAAAsf,EAAA5jB,OAEAkE,OAAA6f,eAAAL,EAAApf,EAAAsf,IAQA/a,EAAAQ,WAAAnF,OAAA8f,WAMAnb,EAAAU,YAAArF,OAAA8f,+KClKA,YAOA,SAAAC,GAAA/a,EAAAkX,GACA,MAAA,2BAAAlX,EAAA6K,cAAA,KAAAqM,GAAAlX,EAAAsD,UAAA,UAAA4T,EAAA,KAAAlX,EAAA7E,KAAA,WAAA+b,EAAA,MAAAlX,EAAA8B,QAAA,IAAA,IAAA,aAGA,QAAAkZ,GAAAxhB,EAAAwG,EAAAyD,EAAAC,GAEA,GAAArE,GAAAW,EAAAX,KACA4b,EAAAjb,EAAAgD,YACA,KAAAiY,GAAA,KAAAjhB,KAAAqF,GAAA7F,EACA,0BAAAkK,GACA,WAAAqX,EAAA/a,EAAA,gBACA,KAAAib,GAAA,KAAAjhB,KAAAqF,GAAA7F,EACA,kFAAAkK,EAAAA,EAAAA,EAAAA,GACA,WAAAqX,EAAA/a,EAAA,qBACA,IAAA,UAAAX,GAAA,WAAAA,EAAA7F,EACA,2BAAAkK,GACA,WAAAqX,EAAA/a,EAAA,eACA,IAAA,SAAAX,EAAA7F,EACA,4BAAAkK,GACA,WAAAqX,EAAA/a,EAAA,gBACA,IAAA,WAAAX,EAAA7F,EACA,yBAAAkK,GACA,WAAAqX,EAAA/a,EAAA,eACA,IAAA,UAAAX,EAAA7F,EACA,4DAAAkK,EAAAA,EAAAA,GACA,WAAAqX,EAAA/a,EAAA,eACA,IAAAA,EAAAgD,uBAAAC,GAAA,CAAAzJ,EACA,cAAAkK,GACA,YACA,WAAAqX,EAAA/a,EAAA,cAEA,KAAA,GADAyC,GAAA9C,EAAAwJ,QAAAnJ,EAAAgD,aAAAP,QACA1J,EAAA,EAAAA,EAAA0J,EAAA/M,SAAAqD,EAAAS,EACA,WAAAiJ,EAAA1J,GACAS,GACA,SACA,SACAwG,GAAAgD,uBAAA1D,IAAA9F,EACA,UACA,6BAAAiK,EAAAC,GACA,YAIA,QAAAwX,GAAA1hB,EAAAwG,EAAA0D,GAEA,GAAA5B,GAAA9B,EAAA8B,QACAmZ,EAAAjb,EAAAmD,iBACA8X,GAAA,KAAAjhB,KAAA8H,GAAAtI,EACA,sCAAAkK,GACA,WAAAqX,EAAA/a,EAAA,iBACAib,GAAA,KAAAjhB,KAAA8H,GAAAtI,EACA,2DAAAkK,GACA,WAAAqX,EAAA/a,EAAA,qBACA,SAAA8B,GAAAtI,EACA,mCAAAkK,GACA,WAAAqX,EAAA/a,EAAA,gBASA,QAAA0X,GAAA5U,GAKA,IAAA,GAHA1B,GAAA0B,EAAAhD,iBACAtG,EAAAmG,EAAApG,QAAA,KAEApE,EAAA,EAAAA,EAAAiM,EAAA1L,SAAAP,EAAA,CACA,GAAA6K,GAAAoB,EAAAjM,GAAA2C,UACA0I,EAAAb,EAAAuD,SAAAlD,EAAAzF,KAGAyF,GAAA7E,KAAA3B,EACA,uBAAAgH,GACA,0BAAAA,GACA,WAAAua,EAAA/a,EAAA,WACA,yBAAAQ,GACA,gCACA0a,EAAA1hB,EAAAwG,EAAA,QACAgb,EAAAxhB,EAAAwG,EAAA7K,EAAA,IAAAqL,EAAA,UACAhH,EACA,KACA,MAGAwG,EAAAsD,UAAA9J,EACA,uBAAAgH,GACA,0BAAAA,GACA,WAAAua,EAAA/a,EAAA,UACA,iCAAAQ,GACAwa,EAAAxhB,EAAAwG,EAAA7K,EAAA,IAAAqL,EAAA,OAAAhH,EACA,KACA,OAIAwG,EAAA4D,WACA5D,EAAAgD,uBAAA1D,GAAA9F,EACA,mCAAAgH,EAAAA,GACAhH,EACA,uBAAAgH,IAEAwa,EAAAxhB,EAAAwG,EAAA7K,EAAA,IAAAqL,GACAR,EAAA4D,UAAApK,EACA,MAGA,MAAAA,GACA,eApHA5D,EAAAJ,QAAAkiB,CAEA,IAAAzU,GAAA/N,EAAA,IACAoK,EAAApK,EAAA,IACAyK,EAAAzK,EAAA,8CCLA,YAuBA,SAAAimB,GAAA5jB,EAAAyH,EAAAub,GAMApiB,KAAAZ,GAAAA,EAMAY,KAAA6G,IAAAA,EAYA7G,KAAAoiB,IAAAA,EAKA,QAAAa,MAWA,QAAAC,GAAA1T,GAMAxP,KAAAkX,KAAA1H,EAAA0H,KAMAlX,KAAAmjB,KAAA3T,EAAA2T,KAMAnjB,KAAA6G,IAAA2I,EAAA3I,IAMA7G,KAAAiU,KAAAzE,EAAA4T,OAUA,QAAA5D,KAMAxf,KAAA6G,IAAA,EAMA7G,KAAAkX,KAAA,GAAA8L,GAAAC,EAAA,EAAA,GAMAjjB,KAAAmjB,KAAAnjB,KAAAkX,KAMAlX,KAAAojB,OAAA,KA8CA,QAAAC,GAAAjB,EAAAzb,EAAA+Q,GACA/Q,EAAA+Q,GAAA,IAAA0K,EAGA,QAAAkB,GAAAlB,EAAAzb,EAAA+Q,GACA,KAAA0K,EAAA,KACAzb,EAAA+Q,KAAA,IAAA0K,EAAA,IACAA,KAAA,CAEAzb,GAAA+Q,GAAA0K,EAwCA,QAAAmB,GAAAnB,EAAAzb,EAAA+Q,GACA,KAAA0K,EAAArK,IACApR,EAAA+Q,KAAA,IAAA0K,EAAAtK,GAAA,IACAsK,EAAAtK,IAAAsK,EAAAtK,KAAA,EAAAsK,EAAArK,IAAA,MAAA,EACAqK,EAAArK,MAAA,CAEA,MAAAqK,EAAAtK,GAAA,KACAnR,EAAA+Q,KAAA,IAAA0K,EAAAtK,GAAA,IACAsK,EAAAtK,GAAAsK,EAAAtK,KAAA,CAEAnR,GAAA+Q,KAAA0K,EAAAtK,GA2CA,QAAA0L,GAAApB,EAAAzb,EAAA+Q,GACA/Q,EAAA+Q,KAAA,IAAA0K,EACAzb,EAAA+Q,KAAA0K,IAAA,EAAA,IACAzb,EAAA+Q,KAAA0K,IAAA,GAAA,IACAzb,EAAA+Q,GAAA0K,IAAA,GAuOA,QAAAqB,KACAjE,EAAAliB,KAAA0C,MAmBA,QAAA0jB,GAAAtB,EAAAzb,EAAA+Q,GACA/Q,EAAAgd,aAAAvB,EAAA1K,GAAA,GAWA,QAAAkM,GAAAxB,EAAAzb,EAAA+Q,GACA/Q,EAAAkd,cAAAzB,EAAA1K,GAAA,GAWA,QAAAoM,GAAA1B,EAAAzb,EAAA+Q,GACA0K,EAAA7kB,QACA6kB,EAAA2B,KAAApd,EAAA+Q,EAAA,EAAA0K,EAAA7kB,QAriBAE,EAAAJ,QAAAmiB,EAEAA,EAAAiE,aAAAA,CAEA,IAAAjc,GAAAzK,EAAA,IACA2c,EAAA3c,EAAA,GACA+R,EAAAtH,EAAAsH,SACA7O,EAAAuH,EAAAvH,OACA2G,EAAAY,EAAAZ,KACA+S,EAAA,mBAAAC,YAAAA,WAAArZ,KAwCAif,GAAAwD,GAAAA,EAwCAxD,EAAA0D,MAAAA,EA4CA1D,EAAAnb,OAAA,WACA,MAAA,KAAAmD,EAAAyH,OAAAwU,EAAAjE,IAQAA,EAAAnZ,MAAA,SAAAE,GACA,MAAA,IAAAoT,GAAApT,IAIAoT,IAAApZ,QACAif,EAAAnZ,MAAAmB,EAAApB,KAAAoZ,EAAAnZ,MAAAsT,EAAA/V,UAAAkW,UAAAH,EAAA/V,UAAA0C,OAGA,IAAA0d,GAAAxE,EAAA5b,SASAogB,GAAAxkB,KAAA,SAAAJ,EAAAyH,EAAAub,GAGA,MAFApiB,MAAAmjB,KAAAnjB,KAAAmjB,KAAAlP,KAAA,GAAA+O,GAAA5jB,EAAAyH,EAAAub,GACApiB,KAAA6G,KAAAA,EACA7G,MAoBAgkB,EAAAhK,OAAA,SAAArb,GAEA,MADAA,MAAA,EACAqB,KAAAR,KAAA8jB,EACA3kB,EAAA,IAAA,EACAA,EAAA,MAAA,EACAA,EAAA,QAAA,EACAA,EAAA,UAAA,EACA,EACAA,IASAqlB,EAAA/J,MAAA,SAAAtb,GACA,MAAAA,GAAA,EACAqB,KAAAR,KAAA+jB,EAAA,GAAAzU,EAAAiS,WAAApiB,IACAqB,KAAAga,OAAArb,IAQAqlB,EAAA9J,OAAA,SAAAvb,GACA,MAAAqB,MAAAga,QAAArb,GAAA,EAAAA,GAAA,MAAA,IAsBAqlB,EAAA1K,OAAA,SAAA3a,GACA,GAAAkZ,GAAA/I,EAAAC,KAAApQ,EACA,OAAAqB,MAAAR,KAAA+jB,EAAA1L,EAAAta,SAAAsa,IAUAmM,EAAA3K,MAAA2K,EAAA1K,OAQA0K,EAAAzK,OAAA,SAAA5a,GACA,GAAAkZ,GAAA/I,EAAAC,KAAApQ,GAAAmiB,UACA,OAAA9gB,MAAAR,KAAA+jB,EAAA1L,EAAAta,SAAAsa,IAQAmM,EAAA7J,KAAA,SAAAxb,GACA,MAAAqB,MAAAR,KAAA6jB,EAAA,EAAA1kB,EAAA,EAAA,IAeAqlB,EAAA5J,QAAA,SAAAzb,GACA,MAAAqB,MAAAR,KAAAgkB,EAAA,EAAA7kB,IAAA,IAQAqlB,EAAA3J,SAAA,SAAA1b,GACA,MAAAqB,MAAAR,KAAAgkB,EAAA,EAAA7kB,GAAA,EAAAA,GAAA,KASAqlB,EAAAxK,QAAA,SAAA7a,GACA,GAAAkZ,GAAA/I,EAAAC,KAAApQ,EACA,OAAAqB,MAAAR,KAAAgkB,EAAA,EAAA3L,EAAAC,IAAAtY,KAAAgkB,EAAA,EAAA3L,EAAAE,KASAiM,EAAAvK,SAAA,SAAA9a,GACA,GAAAkZ,GAAA/I,EAAAC,KAAApQ,GAAAmiB,UACA,OAAA9gB,MAAAR,KAAAgkB,EAAA,EAAA3L,EAAAC,IAAAtY,KAAAgkB,EAAA,EAAA3L,EAAAE,IAGA,IAAAkM,GAAA,mBAAA1J,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAE,EAAA,GAAAb,YAAAY,EAAA7c,OAEA,OADA6c,GAAA,IAAA,EACAC,EAAA,GACA,SAAA2H,EAAAzb,EAAA+Q,GACA8C,EAAA,GAAA4H,EACAzb,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,GAAA+C,EAAA,IAEA,SAAA2H,EAAAzb,EAAA+Q,GACA8C,EAAA,GAAA4H,EACAzb,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,GAAA+C,EAAA,OAGA,SAAA2H,EAAAzb,EAAA+Q,GACAgC,EAAAhb,MAAAiI,EAAAyb,EAAA1K,GAAA,EAAA,GAAA,GASAsM,GAAAtJ,MAAA,SAAA/b,GACA,MAAAqB,MAAAR,KAAAykB,EAAA,EAAAtlB,GAGA,IAAAulB,GAAA,mBAAAtJ,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAH,EAAA,GAAAb,YAAAiB,EAAAld,OAEA,OADAkd,GAAA,IAAA,EACAJ,EAAA,GACA,SAAA2H,EAAAzb,EAAA+Q,GACAmD,EAAA,GAAAuH,EACAzb,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,GAAA+C,EAAA,IAEA,SAAA2H,EAAAzb,EAAA+Q,GACAmD,EAAA,GAAAuH,EACAzb,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,KAAA+C,EAAA,GACA9T,EAAA+Q,GAAA+C,EAAA,OAGA,SAAA2H,EAAAzb,EAAA+Q,GACAgC,EAAAhb,MAAAiI,EAAAyb,EAAA1K,GAAA,EAAA,GAAA,GASAsM,GAAAlJ,OAAA,SAAAnc,GACA,MAAAqB,MAAAR,KAAA0kB,EAAA,EAAAvlB,GAGA,IAAAwlB,GAAAxK,EAAA/V,UAAA4E,IACA,SAAA4Z,EAAAzb,EAAA+Q,GACA/Q,EAAA6B,IAAA4Z,EAAA1K,IAEA,SAAA0K,EAAAzb,EAAA+Q,GACA,IAAA,GAAA1a,GAAA,EAAAA,EAAAolB,EAAA7kB,SAAAP,EACA2J,EAAA+Q,EAAA1a,GAAAolB,EAAAplB,GAQAgnB,GAAAtW,MAAA,SAAA/O,GACA,GAAAkI,GAAAlI,EAAApB,SAAA,CACA,IAAA,gBAAAoB,IAAAkI,EAAA,CACA,GAAAF,GAAA6Y,EAAAnZ,MAAAQ,EAAA5G,EAAA1C,OAAAoB,GACAsB,GAAAgB,OAAAtC,EAAAgI,EAAA,GACAhI,EAAAgI,EAEA,MAAAE,GACA7G,KAAAga,OAAAnT,GAAArH,KAAA2kB,EAAAtd,EAAAlI,GACAqB,KAAAR,KAAA6jB,EAAA,EAAA,IAQAW,EAAA9jB,OAAA,SAAAvB,GACA,GAAAkI,GAAAD,EAAArJ,OAAAoB,EACA,OAAAkI,GACA7G,KAAAga,OAAAnT,GAAArH,KAAAoH,EAAAlI,MAAAmI,EAAAlI,GACAqB,KAAAR,KAAA6jB,EAAA,EAAA,IAQAW,EAAA5D,KAAA,WAIA,MAHApgB,MAAAojB,OAAA,GAAAF,GAAAljB,MACAA,KAAAkX,KAAAlX,KAAAmjB,KAAA,GAAAH,GAAAC,EAAA,EAAA,GACAjjB,KAAA6G,IAAA,EACA7G,MAOAgkB,EAAAhJ,MAAA,WAUA,MATAhb,MAAAojB,QACApjB,KAAAkX,KAAAlX,KAAAojB,OAAAlM,KACAlX,KAAAmjB,KAAAnjB,KAAAojB,OAAAD,KACAnjB,KAAA6G,IAAA7G,KAAAojB,OAAAvc,IACA7G,KAAAojB,OAAApjB,KAAAojB,OAAAnP,OAEAjU,KAAAkX,KAAAlX,KAAAmjB,KAAA,GAAAH,GAAAC,EAAA,EAAA,GACAjjB,KAAA6G,IAAA,GAEA7G,MAQAgkB,EAAA3D,OAAA,SAAAlX,GACA,GAAA+N,GAAAlX,KAAAkX,KACAiM,EAAAnjB,KAAAmjB,KACAtc,EAAA7G,KAAA6G,GAQA,OAPA7G,MAAAgb,QACA,gBAAA7R,IACAnJ,KAAAga,QAAA7Q,GAAA,EAAA,KAAA,GACAnJ,KAAAga,OAAAnT,GACA7G,KAAAmjB,KAAAlP,KAAAiD,EAAAjD,KACAjU,KAAAmjB,KAAAA,EACAnjB,KAAA6G,KAAAA,EACA7G,MAOAgkB,EAAA/I,OAAA,WAIA,IAHA,GAAA/D,GAAAlX,KAAAkX,KAAAjD,KACAtN,EAAA3G,KAAAsE,YAAA+B,MAAArG,KAAA6G,KACA6Q,EAAA,EACAR,GACAA,EAAA9X,GAAA8X,EAAAkL,IAAAzb,EAAA+Q,GACAA,GAAAR,EAAArQ,IACAqQ,EAAAA,EAAAjD,IAGA,OADAjU,MAAAkX,KAAAlX,KAAAmjB,KAAA,KACAxc,GAmBA8c,EAAApd,MAAA,SAAAE,GAIA,MAHAkd,GAAApd,MAAAmB,EAAAyH,OAAA0R,YACAnZ,EAAAyH,OAAA0R,YACA,SAAApa,GAAA,MAAA,IAAAiB,GAAAyH,OAAA1I,IACAkd,EAAApd,MAAAE,GAIA,IAAA6d,GAAAX,EAAA7f,UAAAf,OAAAwB,OAAAmb,EAAA5b,UACAwgB,GAAA9f,YAAAmf,EAMA,mBAAAlJ,gBAIA6J,EAAA1J,MAAA,SAAA/b,GACA,MAAAqB,MAAAR,KAAAkkB,EAAA,EAAA/kB,KAOA,mBAAAic,gBAIAwJ,EAAAtJ,OAAA,SAAAnc,GACA,MAAAqB,MAAAR,KAAAokB,EAAA,EAAAjlB,IAQA,IAAA0lB,GAAA7c,EAAAyH,QAAAzH,EAAAyH,OAAAF,MAAA,SAAApQ,EAAA2lB,GAAA,MAAA,IAAA9c,GAAAyH,OAAAtQ,EAAA2lB,GAKAF,GAAA1W,MAAA,SAAA/O,GACA,gBAAAA,KACAA,EAAA0lB,EAAA1lB,EAAA,UACA,IAAAkI,GAAAlI,EAAApB,SAAA,CACA,OAAAsJ,GACA7G,KAAAga,OAAAnT,GAAArH,KAAAskB,EAAAjd,EAAAlI,GACAqB,KAAAR,KAAA6jB,EAAA,EAAA,GAGA,IAAAkB,GAAA,WACA,MAAA/c,GAAAyH,QAAAzH,EAAAyH,OAAArL,UAAA4gB,UACA,SAAApC,EAAAzb,EAAA+Q,GACA0K,EAAA7kB,OAAA,GACAqJ,EAAAlI,MAAA0jB,EAAAzb,EAAA+Q,GAEA/Q,EAAA6d,UAAApC,EAAA1K,IAEA,SAAA0K,EAAAzb,EAAA+Q,GACA0K,EAAA7kB,OAAA,GACAqJ,EAAAlI,MAAA0jB,EAAAzb,EAAA+Q,GAEA/Q,EAAAjI,MAAA0jB,EAAA1K,MAUA0M,GAAAlkB,OAAA,SAAAvB,GACA,GAAAkI,GAAAlI,EAAApB,OAAA,GACAqJ,EAAArJ,OAAAoB,GACA6I,EAAAyH,OAAAwV,WAAA9lB,EACA,OAAAkI,GACA7G,KAAAga,OAAAnT,GAAArH,KAAA+kB,EAAA1d,EAAAlI,GACAqB,KAAAR,KAAA6jB,EAAA,EAAA,mDCnlBA,YAmBA,SAAArH,GAAAlI,EAAAtB,EAAA/N,GAMA,MALA,kBAAA+N,IACA/N,EAAA+N,EACAA,EAAA,GAAAzJ,GAAAuJ,MACAE,IACAA,EAAA,GAAAzJ,GAAAuJ,MACAE,EAAAwJ,KAAAlI,EAAArP,GAmCA,QAAAmY,GAAA9I,EAAAtB,GAGA,MAFAA,KACAA,EAAA,GAAAzJ,GAAAuJ,MACAE,EAAAoK,SAAA9I,GAoDA,QAAAqF,KACApQ,EAAA4O,OAAA4D,IAnHA,GAAAxS,GAAA2Y,EAAA3Y,SAAA1L,CAkDA0L,GAAAiT,KAAAA,EAeAjT,EAAA6T,SAAAA,EAOA7T,EAAA2b,SAGA3b,EAAAkO,SAAAla,EAAA,IACAgM,EAAA6K,MAAA7W,EAAA,IAGAgM,EAAA0a,cACA1a,EAAAyW,OAAAziB,EAAA,KAAA0mB,aACA1a,EAAA+P,cACA/P,EAAA4O,OAAA5a,EAAA,KAAA+b,aACA/P,EAAA2C,QAAA3O,EAAA,IACAgM,EAAA2B,QAAA3N,EAAA,IACAgM,EAAAwW,SAAAxiB,EAAA,IAGAgM,EAAAoD,iBAAApP,EAAA,IACAgM,EAAAyH,UAAAzT,EAAA,IACAgM,EAAAuJ,KAAAvV,EAAA,IACAgM,EAAA+B,KAAA/N,EAAA,IACAgM,EAAA5B,KAAApK,EAAA,IACAgM,EAAAqE,MAAArQ,EAAA,IACAgM,EAAA+J,MAAA/V,EAAA,IACAgM,EAAAgF,SAAAhR,EAAA,IACAgM,EAAAuH,QAAAvT,EAAA,IACAgM,EAAA8G,OAAA9S,EAAA,IAGAgM,EAAA9B,MAAAlK,EAAA,IACAgM,EAAAxB,QAAAxK,EAAA,IAGAgM,EAAAkC,MAAAlO,EAAA,IACAgM,EAAAJ,OAAA5L,EAAA,IACAgM,EAAA+T,IAAA/f,EAAA,IACAgM,EAAAvB,KAAAzK,EAAA,IACAgM,EAAAoQ,UAAAA,EAWA,kBAAAxH,SAAAA,OAAAgT,KACAhT,QAAA,QAAA,SAAAlE,GAKA,MAJAA,KACA1E,EAAAvB,KAAAiG,KAAAA,EACA0L,KAEApQ","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {Object} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue);?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n            \r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function \" + (name ? name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\", \") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    return format.replace(/%([djs])/g, function($0, $1) {\r\n        var arg = args[i++];\r\n        switch ($1) {\r\n            case \"j\":\r\n                return JSON.stringify(arg);\r\n            default:\r\n                return String(arg);\r\n        }\r\n    });\r\n}\r\n\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {Object} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(2),\r\n    inquire   = require(8);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted \r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = [],\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            parts.push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (i)\r\n        parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n    return parts.join(\"\");\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(33);\r\n\r\nvar Type; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a class instance, which is also a message prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(31);\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type\", \"a Type\");\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor\", \"a function\");\r\n    } else\r\n        ctor = (function(MessageCtor) { // eslint-disable-line wrap-iife\r\n            return function Message(properties) {\r\n                MessageCtor.call(this, properties);\r\n            };\r\n        })(Message);\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n    \r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa.\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.getFieldsArray().forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue)\r\n            ? util.emptyObject\r\n            : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.getOneofsArray().forEach(function(oneof) {\r\n        util.prop(prototype, oneof.resolve().name, {\r\n            get: function getVirtual() {\r\n                // > If the parser encounters multiple members of the same oneof on the wire, only the last member seen is used in the parsed message.\r\n                for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n                    if (oneof.oneof.indexOf(keys[i]) > -1)\r\n                        return keys[i];\r\n                return undefined;\r\n            },\r\n            set: function setVirtual(value) {\r\n                for (var keys = oneof.oneof, i = 0; i < keys.length; ++i)\r\n                    if (keys[i] !== value)\r\n                        delete this[keys[i]];\r\n            }\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.setCtor(ctor);\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa.\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object} google/protobuf/any.proto Any\r\n * @property {Object} google/protobuf/duration.proto Duration\r\n * @property {Object} google/protobuf/empty.proto Empty\r\n * @property {Object} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object} google/protobuf/timestamp.proto Timestamp\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n// - google/protobuf/descriptor.proto\r\n// - google/protobuf/field_mask.proto\r\n// - google/protobuf/source_context.proto\r\n// - google/protobuf/type.proto\r\n// - google/protobuf/wrappers.proto\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [ \"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\" ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(16),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();    \r\n    var gen = util.codegen(\"r\", \"l\")\r\n\r\n    (\"r instanceof Reader||(r=Reader.create(r))\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.getCtor())\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.int32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n    \r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            prop  = util.safeProp(field.name);\r\n        gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n                (\"r.skip().pos++\")\r\n                (\"if(m%s===util.emptyObject)\", prop)\r\n                    (\"m%s={}\", prop)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"if(typeof k===\\\"object\\\")\")\r\n                    (\"k=util.longToHash(k)\")\r\n                (\"r.pos++\");\r\n            if (types.basic[type] === undefined) gen\r\n                (\"m%s[k]=types[%d].decode(r,r.uint32())\", prop, i); // can't be groups\r\n            else gen\r\n                (\"m%s[k]=r.%s()\", prop, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"m%s&&m%s.length?m%s:m%s=[]\", prop, prop, prop, prop);\r\n\r\n            // Packed\r\n            if (field.packed && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var e=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<e)\")\r\n                        (\"m%s.push(r.%s())\", prop, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"m%s.push(types[%d].decode(r))\"\r\n                    : \"m%s.push(types[%d].decode(r,r.uint32()))\", prop, i);\r\n            else gen\r\n                    (\"m%s.push(r.%s())\", prop, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"m%s=types[%d].decode(r)\"\r\n                : \"m%s=types[%d].decode(r,r.uint32())\", prop, i);\r\n        else gen\r\n                (\"m%s=r.%s()\", prop, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(16),\r\n    types    = require(32),\r\n    util     = require(33);\r\n\r\nvar safeProp = util.safeProp;\r\n\r\nfunction genEncodeType(gen, field, fieldIndex, ref, alwaysRequired) {\r\n    if (field.resolvedType.group)\r\n        return gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0);\r\n    return alwaysRequired || field.required\r\n      ? gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0)\r\n      : gen(\"types[%d].encode(%s,w.fork()).len&&w.ldelim(%d)||w.reset()\", fieldIndex, ref, field.id);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.getFieldsArray();\r\n    var oneofs = mtype.getOneofsArray();\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"w||(w=Writer.create())\");\r\n\r\n    var i;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type],\r\n            prop     = safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType;\r\n            gen\r\n    (\"if(m%s&&m%s!==util.emptyObject){\", prop, prop)\r\n        (\"for(var ks=Object.keys(m%s),i=0;i<ks.length;++i){\", prop)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(m%s[ks[i]],w.uint32(18).fork()).ldelim()\", i, prop); // can't be groups\r\n            else gen\r\n            (\"w.uint32(%d).%s(m%s[ks[i]])\", 16 | wireType, type, prop);\r\n            gen\r\n            (\"w.ldelim()\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop)\r\n            (\"w.%s(m%s[i])\", type, prop)\r\n        (\"w.ldelim()\", field.id)\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m%s)\", prop)\r\n        (\"for(var i=0;i<m%s.length;++i)\", prop);\r\n                if (wireType === undefined)\r\n            genEncodeType(gen, field, i, \"m\" + prop + \"[i]\", true);\r\n                else gen\r\n            (\"w.uint32(%d).%s(m%s[i])\", (field.id << 3 | wireType) >>> 0, type, prop);\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else if (!field.partOf) {\r\n            if (!field.required) {\r\n\r\n                if (field.long) {\r\n                    gen\r\n    (\"if(m%s!==undefined&&util.longNe(m%s,%d,%d))\", prop, prop, field.defaultValue.low, field.defaultValue.high);\r\n                } else gen\r\n    (\"if(m%s!==undefined&&m%s!==%j)\", prop, prop, field.defaultValue);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genEncodeType(gen, field, i, \"m\" + prop);\r\n            else gen\r\n        (\"w.uint32(%d).%s(m%s)\", (field.id << 3 | wireType) >>> 0, type, prop);\r\n\r\n        }\r\n    }\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i],\r\n            prop  = safeProp(oneof.name);\r\n        gen\r\n        (\"switch(m%s){\", prop);\r\n        var oneofFields = oneof.getFieldsArray();\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type],\r\n                prop     = safeProp(field.name);\r\n            gen\r\n            (\"case%j:\", field.name);\r\n\r\n            if (wireType === undefined)\r\n                genEncodeType(gen, field, fields.indexOf(field), \"m\" + prop);\r\n            else gen\r\n                (\"w.uint32(%d).%s(m%s)\", (field.id << 3 | wireType) >>> 0, type, prop);\r\n\r\n            gen\r\n                (\"break;\");\r\n\r\n        } gen\r\n        (\"}\");        \r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(33);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = values || {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached values by id.\r\n     * @type {?Object.<number,string>}\r\n     * @private\r\n     */\r\n    this._valuesById = null;\r\n}\r\n\r\nutil.props(EnumPrototype, {\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @name Enum#valuesById\r\n     * @type {Object.<number,string>}\r\n     * @readonly\r\n     */\r\n    valuesById: {\r\n        get: function getValuesById() {\r\n            if (!this._valuesById) {\r\n                this._valuesById = {};\r\n                Object.keys(this.values).forEach(function(name) {\r\n                    var id = this.values[name];\r\n                    if (this._valuesById[id])\r\n                        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                    this._valuesById[id] = name;\r\n                }, this);\r\n            }\r\n            return this._valuesById;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets this enum's values by id. This is an alias of {@link Enum#valuesById}'s getter for use within non-ES5 environments.\r\n     * @name Enum#getValuesById\r\n     * @function\r\n     * @returns {Object.<number,string>}\r\n     */\r\n});\r\n\r\nfunction clearCache(enm) {\r\n    enm._valuesById = null;\r\n    return enm;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id\", \"a non-negative integer\");\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    if (this.getValuesById()[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n    this.values[name] = id;\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    if (this.values[name] === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.values[name];\r\n    return clearCache(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Message = require(19),\r\n    Enum      = require(16),\r\n    types     = require(32),\r\n    util      = require(33);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object} [rule=\"optional\"] Field rule\r\n * @param {string|Object} [extend] Extended type if different from parent\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id\", \"a non-negative integer\");\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type\");\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend\");\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule\", \"a valid rule string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field's default value. Only relevant when working with proto2.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\nutil.props(FieldPrototype, {\r\n\r\n    /**\r\n     * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n     * @name Field#packed\r\n     * @type {boolean}\r\n     * @readonly\r\n     */\r\n    packed: {\r\n        get: FieldPrototype.isPacked = function() {\r\n            if (this._packed === null)\r\n                this._packed = this.getOption(\"packed\") !== false;\r\n            return this._packed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether this field is packed. This is an alias of {@link Field#packed}'s getter for use within non-ES5 environments.\r\n     * @name Field#isPacked\r\n     * @function\r\n     * @returns {boolean}\r\n     */\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(18);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    var typeDefault = types.defaults[this.type];\r\n\r\n    // if not a basic type, resolve it\r\n    if (typeDefault === undefined) {\r\n        if (!Type)\r\n            Type = require(31);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            typeDefault = 0;\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // when everything is resolved determine the default value\r\n    var optionDefault;\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else if (this.options && (optionDefault = this.options[\"default\"]) !== undefined) // eslint-disable-line dot-notation\r\n        this.defaultValue = optionDefault;\r\n    else\r\n        this.defaultValue = typeDefault;\r\n\r\n    if (this.long)\r\n        this.defaultValue = util.Long.fromValue(this.defaultValue);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Converts a field value to JSON using the specified options. Note that this method does not account for repeated fields and must be called once for each repeated element instead.\r\n * @param {*} value Field value\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @returns {*} Converted value\r\n * @see {@link Message#asJSON}\r\n */\r\nFieldPrototype.jsonConvert = function(value, options) {\r\n    if (options) {\r\n        if (value instanceof Message)\r\n            return value.asJSON(options);\r\n        if (this.resolvedType instanceof Enum && options[\"enum\"] === String) // eslint-disable-line dot-notation\r\n            return this.resolvedType.getValuesById()[value];\r\n        if (options.long && this.long)\r\n            return options.long === Number\r\n                ? typeof value === \"number\"\r\n                    ? value\r\n                    : util.LongBits.from(value).toNumber(this.type.charAt(0) === \"u\")\r\n                : util.Long.fromValue(value, this.type.charAt(0) === \"u\").toString();\r\n        if (options.bytes && this.bytes) {\r\n            if (options.bytes === String)\r\n                return util.base64.encode(value, 0, value.length);\r\n            if (options.bytes === Array)\r\n                return Array.prototype.slice.call(value);\r\n            if (options.bytes === util.Buffer && !util.Buffer.isBuffer(value))\r\n                return util.Buffer.from ? util.Buffer.from(value) : new util.Buffer(value);\r\n        }\r\n    }\r\n    return value;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\nvar Field = require(17);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar Enum    = require(16),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n    if (!util.isString(keyType))\r\n        throw util._TypeError(\"keyType\");\r\n    \r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    \r\n    // Besides a value type, map fields have a key type to resolve\r\n    var keyWireType = types.mapKey[this.keyType];\r\n    if (keyWireType === undefined) {\r\n        var resolved = this.parent.lookup(this.keyType);\r\n        if (!(resolved instanceof Enum))\r\n            throw Error(\"unresolvable key type: \" + this.keyType);\r\n        this.resolvedKeyType = resolved;\r\n    }\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This method should be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @extends {Object}\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @abstract\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/** @alias Message.prototype */\r\nvar MessagePrototype = Message.prototype;\r\n\r\n/**\r\n * Converts this message to a JSON object.\r\n * @param {Object.<string,*>} [options] Conversion options\r\n * @param {boolean} [options.fieldsOnly=false] Converts only properties that reference a field\r\n * @param {*} [options.long] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @param {*} [options.enum=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @param {*} [options.bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @param {boolean} [options.defaults=false] Also sets default values on the resulting object\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessagePrototype.asJSON = function asJSON(options) {\r\n    if (!options)\r\n        options = {};\r\n    var fields = this.$type.fields,\r\n        json   = {};\r\n    var keys;\r\n    if (options.defaults) {\r\n        keys = Object.keys(fields);\r\n    } else\r\n        keys = Object.keys(this);\r\n    for (var i = 0, key; i < keys.length; ++i) {\r\n        var field = fields[key = keys[i]],\r\n            value = this[key];\r\n        if (field) {\r\n            if (field.repeated) {\r\n                if (value && (value.length || options.defaults)) {\r\n                    var array = new Array(value.length);\r\n                    for (var j = 0, l = value.length; j < l; ++j)\r\n                        array[j] = field.jsonConvert(value[j], options);\r\n                    json[key] = array;\r\n                }\r\n            } else\r\n                json[key] = field.jsonConvert(value, options);\r\n        } else if (!options.fieldsOnly)\r\n            json[key] = value;\r\n    }\r\n    return json;\r\n};\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(readerOrBuffer) {\r\n    return this.$type.decode(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    return this.$type.decodeDelimited(readerOrBuffer);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(31),\r\n    util = require(33);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object} [responseStream] Whether the response is streamed\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type\");\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType\");\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {Object} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(16),\r\n    Field   = require(17),\r\n    util    = require(33);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\nfunction initNested() {\r\n    if (!Type)\r\n        Type = require(31);\r\n    if (!Service)\r\n        Service = require(29);\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @classdesc Reflected namespace and base class of all reflection objects containing nested objects.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\nutil.props(NamespacePrototype, {\r\n\r\n    /**\r\n     * Nested objects of this namespace as an array for iteration.\r\n     * @name Namespace#nestedArray\r\n     * @type {ReflectionObject[]}\r\n     * @readonly\r\n     */\r\n    nestedArray: {\r\n        get: function getNestedArray() {\r\n            return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @param {string} name Namespace name\r\n * @param {Object} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.getNestedArray())\r\n    };\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName, \"JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object\", nestedError);\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object\", \"an extension field when not part of a type\");\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (!Type)\r\n                Type = require(31);\r\n            if (!Service)\r\n                Service = require(29);\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.getNestedArray();\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object\", \"a ReflectionObject\");\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolve() {\r\n    var nested = this.getNestedArray(), i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.getRoot().lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name Namespace#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n    if (!Type)\r\n        Type = require(31);\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n    if (!Service)\r\n        Service = require(29);\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(33);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name\");\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options\", \"an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nutil.props(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function getRoot() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: ReflectionObjectPrototype.getFullName = function getFullName() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.getRoot();\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    var root = this.getRoot();\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className;\r\n    var fullName = this.getFullName();\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\nvar ReflectionObject = require(22);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(17),\r\n    util  = require(33);\r\n\r\nvar TypeError = util._TypeError;\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames\", \"an Array\");\r\n\r\n    /**\r\n     * Upper cased name for getter/setter calls.\r\n     * @type {string}\r\n     */\r\n    this.ucName = this.name.substring(0, 1).toUpperCase() + this.name.substring(1);\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nutil.prop(OneOfPrototype, \"fieldsArray\", {\r\n    get: function getFieldsArray() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field\", \"a Field\");\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field\", \"a Field\");\r\n    var index = this._fieldsArray.indexOf(field);\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nvar tokenize  = require(30),\r\n    Root      = require(26),\r\n    Type      = require(31),\r\n    Field     = require(17),\r\n    MapField  = require(18),\r\n    OneOf     = require(23),\r\n    Enum      = require(16),\r\n    Service   = require(29),\r\n    Method    = require(20),\r\n    types     = require(32),\r\n    util      = require(33);\r\n\r\nfunction isName(token) {\r\n    return /^[a-zA-Z_][a-zA-Z_0-9]*$/.test(token);\r\n}\r\n\r\nfunction isTypeRef(token) {\r\n    return /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction isFqTypeRef(token) {\r\n    return /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        root = new Root();\r\n        options = root || {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\r\n\r\n    function illegal(token, name) {\r\n        var filename = parse.filename;\r\n        parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && isTypeRef(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"max\": return 0x1FFFFFFF;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!isTypeRef(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        isProto3 = syntax === \"proto3\";\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n                        \r\n                    default:\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (lower(type) === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        if (!isTypeRef(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new Field(name, id, type, rule, extend));\r\n        if (field.repeated)\r\n            field.setOption(\"packed\", isProto3, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        skip(\"{\");\r\n        while ((token = next()) !== \"}\") {\r\n            switch (token = lower(token)) {\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        }\r\n        skip(\";\", true);\r\n        parent.add(type).add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        if (!isTypeRef(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var field = parseInlineOptions(new MapField(name, id, keyType, valueType));\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        var oneof = new OneOf(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var values = {};\r\n        var enm = new Enum(name, values);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumField(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumField(parent, token) {\r\n        if (!isName(token))\r\n            throw illegal(token, \"name\");\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true);\r\n        parent.values[name] = value;\r\n        parseInlineOptions({}); // skips enum value options\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n        if (!isTypeRef(name))\r\n            throw illegal(name, \"name\");\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (!isFqTypeRef(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (!isName(token))\r\n                    throw illegal(token, \"name\");\r\n                name = name + \".\" + token;\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n        if (!isName(token))\r\n            throw illegal(token, \"service name\");\r\n        var name = token;\r\n        var service = new Service(name);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n        if (!isTypeRef(reference))\r\n            throw illegal(reference, \"reference\");\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {ParserResult} Parser result\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nReader.BufferReader = BufferReader;\r\n\r\nvar util      = require(35),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\r\n\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = function create(buffer) {\r\n    return new (util.Buffer ? BufferReader : Reader)(buffer);\r\n};\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice;\r\n\r\nvar read_uint32 = \r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = function read_uint32() {\r\n    // FIXME: tends to soft-deopt with \"Insufficient type feedback for generic named access\", which\r\n    // is not a problem, but with --trace-deopt, node v4-v7 always crashes when the above happens.\r\n    var value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n    if ((this.pos += 5) > this.len) {\r\n        this.pos = this.len;\r\n        throw indexOutOfRange(this, 10);\r\n    }\r\n    return value;\r\n};\r\n\r\n// See comment above. While unnecessary code, this prevents crashing with --trace-deopt (node 6.9.1).\r\nread_uint32.call({\r\n    buf: [255,255,255,255,15],\r\n    pos: 0,\r\n    len: 5\r\n});\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0),\r\n        i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return buf[end - 4]\r\n         | buf[end - 3] << 8\r\n         | buf[end - 2] << 16\r\n         | buf[end - 1] << 24;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (length === undefined) {\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    } else {\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                wireType = this.uint32() & 7;\r\n                if (wireType === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance and frees all resources.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.reset = function reset(buffer) {\r\n    if (buffer) {\r\n        this.buf = buffer;\r\n        this.len = buffer.length;\r\n    } else {\r\n        this.buf = null; // makes it throw\r\n        this.len = 0;\r\n    }\r\n    this.pos = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the current sequence of read operations, frees all resources and returns the remaining buffer.\r\n * @param {Uint8Array} [buffer] New buffer for a new sequence of read operations\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nReaderPrototype.finish = function finish(buffer) {\r\n    var remain = this.pos\r\n        ? this._slice.call(this.buf, this.pos)\r\n        : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\n// One time function to initialize BufferReader with the now-known buffer implementation's slice method\r\nvar initBufferReader = function() {\r\n    var Buffer = util.Buffer;\r\n    if (!Buffer)\r\n        throw Error(\"Buffer is not supported\");\r\n    BufferReaderPrototype._slice = Buffer.prototype.slice;\r\n    readStringBuffer = Buffer.prototype.utf8Slice // around forever, but not present in browser buffer\r\n        ? readStringBuffer_utf8Slice\r\n        : readStringBuffer_toString;\r\n    initBufferReader = false;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    if (initBufferReader)\r\n        initBufferReader();\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\n\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nif (typeof Float32Array === \"undefined\") // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.float = function read_float_buffer() {\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n    var value = this.buf.readFloatLE(this.pos, true);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nif (typeof Float64Array === \"undefined\") // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.double = function read_double_buffer() {\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n    var value = this.buf.readDoubleLE(this.pos, true);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\nvar readStringBuffer;\r\n\r\nfunction readStringBuffer_utf8Slice(buf, start, end) {\r\n    return buf.utf8Slice(start, end); // fastest\r\n}\r\n\r\nfunction readStringBuffer_toString(buf, start, end) {\r\n    return buf.toString(\"utf8\", start, end); // 2nd, again assertions\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n    this.pos += length;\r\n    return readStringBuffer(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.finish = function finish_buffer(buffer) {\r\n    var remain = this.pos ? this.buf.slice(this.pos) : this.buf;\r\n    this.reset(buffer);\r\n    return remain;\r\n};\r\n\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(17),\r\n    util   = require(33),\r\n    common = require(13);\r\n\r\nvar parse; // cyclic\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {Object} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files. \r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {*} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (!parse)\r\n        parse = require(24);\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.indexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename) {\r\n    return this.load(filename, SYNC);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.getFullName(), field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.getNestedArray();\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(28);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util         = require(33);\r\nvar EventEmitter = util.EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @memberof rpc\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n/** @alias rpc.Service.prototype */\r\nvar ServicePrototype = Service.prototype = Object.create(EventEmitter.prototype);\r\nServicePrototype.constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nServicePrototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(33),\r\n    rpc    = require(27);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\nutil.props(ServicePrototype, {\r\n\r\n    /**\r\n     * Methods of this service as an array for iteration.\r\n     * @name Service#methodsArray\r\n     * @type {Method[]}\r\n     * @readonly\r\n     */\r\n    methodsArray: {\r\n        get: function getMethodsArray() {\r\n            return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {Object} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.getMethodsArray()) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolve() {\r\n    var methods = this.getMethodsArray();\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl RPC implementation ({@link RPCImpl|see})\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.getMethodsArray().forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n            if (!request)\r\n                throw util._TypeError(\"request\", \"not null\");\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n */\r\n/**/\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n    \r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1;\r\n    \r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        line: function() { return line; },\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type; \r\n\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(16),\r\n    OneOf     = require(23),\r\n    Field     = require(17),\r\n    Service   = require(29),\r\n    Class     = require(12),\r\n    Message   = require(19),\r\n    Reader    = require(25),\r\n    Writer    = require(37),\r\n    util      = require(33);\r\n\r\nvar encoder,  // might become cyclic\r\n    decoder,  // might become cyclic\r\n    verifier; // cyclic\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends Namespace\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached repeated fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._repeatedFieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nutil.props(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function getFieldsById() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function getFieldsArray() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Repeated fields of this message as an array for iteration.\r\n     * @name Type#repeatedFieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    repeatedFieldsArray: {\r\n        get: function getRepeatedFieldsArray() {\r\n            return this._repeatedFieldsArray || (this._repeatedFieldsArray = this.getFieldsArray().filter(function(field) { return field.repeated; }));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function getOneofsArray() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function getCtor() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function setCtor(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw util._TypeError(\"ctor\", \"a Message constructor\");\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.getOneofsArray()),\r\n        fields     : Namespace.arrayToJSON(this.getFieldsArray().filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolve() {\r\n    var fields = this.getFieldsArray(), i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.getOneofsArray(); i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.getFieldsById()[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object|*} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new (this.getCtor())(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode}, {@link Type#decode} and {@link Type#verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    if (!encoder) {\r\n        encoder  = require(15);\r\n        decoder  = require(14);\r\n        verifier = require(36);\r\n    }\r\n    this.encode = encoder(this).eof(this.getFullName() + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(this.getFullName() + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(this.getFullName() + \"$verify\", {\r\n        types : this.getFieldsArray().map(function(fld) { return fld.resolvedType; }),\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(readerOrBuffer, length) {\r\n    return this.setup().decode(readerOrBuffer, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} readerOrBuffer Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(readerOrBuffer) {\r\n    readerOrBuffer = readerOrBuffer instanceof Reader ? readerOrBuffer : Reader.create(readerOrBuffer);\r\n    return this.decode(readerOrBuffer, readerOrBuffer.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(33);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(35);\r\n\r\nutil.asPromise    = require(2);\r\nutil.codegen      = require(4);\r\nutil.EventEmitter = require(5);\r\nutil.extend       = require(6);\r\nutil.fetch        = require(7);\r\nutil.path         = require(9);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (!object)\r\n        return [];\r\n    var names = Object.keys(object),\r\n        length = names.length;\r\n    var array = new Array(length);\r\n    for (var i = 0; i < length; ++i)\r\n        array[i] = object[names[i]];\r\n    return array;\r\n};\r\n\r\n/**\r\n * Creates a type error.\r\n * @param {string} name Argument name\r\n * @param {string} [description=\"a string\"] Expected argument descripotion\r\n * @returns {TypeError} Created type error\r\n * @private\r\n */\r\nutil._TypeError = function(name, description) {\r\n    return TypeError(name + \" must be \" + (description || \"a string\"));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object} dst Destination object\r\n * @param {Object} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) {\r\n    if (src) {\r\n        var keys = Object.keys(src);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    }\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts a string to camel case notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Converts a string to underscore notation.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.underScore = function underScore(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) { return \"_\" + $1.toLowerCase(); });\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Converts the second character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number} [size=0] Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(size) {\r\n    size = size || 0;\r\n    return util.Buffer\r\n        ? util.Buffer.allocUnsafe ? util.Buffer.allocUnsafe(size) : new util.Buffer(size)\r\n        : new (typeof Uint8Array !== \"undefined\" ? Uint8Array : Array)(size);\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo, this.hi, unsigned)\r\n        : { low: this.lo, high: this.hi, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24 & 255,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24 & 255\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    if (part2 === 0) {\r\n        if (part1 === 0)\r\n            return part0 < 1 << 14\r\n                ? part0 < 1 << 7 ? 1 : 2\r\n                : part0 < 1 << 21 ? 3 : 4;\r\n        return part1 < 1 << 14\r\n            ? part1 < 1 << 7 ? 5 : 6\r\n            : part1 < 1 << 21 ? 7 : 8;\r\n    }\r\n    return part2 < 1 << 7 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (util.Buffer = util.inquire(\"buffer\")) && util.Buffer.Buffer || null;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return Boolean(value && typeof value === \"object\");\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n * @deprecated\r\n * @see Use {@link util.longNe} instead\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === \"number\"\r\n         ? typeof b === \"number\"\r\n            ? a !== b\r\n            : (a = util.LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === \"number\"\r\n            ? (b = util.LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ie8 = !-[1,];\r\n    var ucKey = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n    if (descriptor.get)\r\n        target[\"get\" + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target[\"set\" + ucKey] = ie8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (ie8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze([]);\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze({});\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(16),\r\n    Type      = require(31),\r\n    util      = require(33);\r\n\r\nfunction invalid(field, expected) {\r\n    return \"invalid value for field \" + field.getFullName() + \" (\" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected)\";\r\n}\r\n\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var type  = field.type,\r\n        rtype = field.resolvedType;\r\n    if (!rtype && /32/.test(type)) gen\r\n        (\"if(!util.isInteger(%s))\", ref)\r\n            (\"return%j\", invalid(field, \"integer\"));\r\n    else if (!rtype && /64/.test(type)) gen\r\n        (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n            (\"return%j\", invalid(field, \"integer|Long\"));\r\n    else if (type === \"float\" || type === \"double\") gen\r\n        (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n            (\"return%j\", invalid(field, \"number\"));\r\n    else if (type === \"bool\") gen\r\n        (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n            (\"return%j\", invalid(field, \"boolean\"));\r\n    else if (type === \"string\") gen\r\n        (\"if(!util.isString(%s))\", ref)\r\n            (\"return%j\", invalid(field, \"string\"));\r\n    else if (type === \"bytes\") gen\r\n        (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n            (\"return%j\", invalid(field, \"buffer\"));\r\n    else if (field.resolvedType instanceof Enum) { gen\r\n        (\"switch(%s){\", ref)\r\n            (\"default:\")\r\n                (\"return%j\", invalid(field, \"enum value\"));\r\n        var values = util.toArray(field.resolvedType.values);\r\n        for (var j = 0; j < values.length; ++j) gen\r\n            (\"case %d:\", values[j]);\r\n        gen\r\n                (\"break\")\r\n        (\"}\");\r\n    } else if (field.resolvedType instanceof Type) gen\r\n        (\"var r;\")\r\n        (\"if(r=types[%d].verify(%s))\", fieldIndex, ref)\r\n            (\"return r\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var keyType = field.keyType,\r\n        rtype   = field.resolvedKeyType;\r\n    if (!rtype && /32/.test(keyType)) gen\r\n        (\"if(!/^-?(?:0|[1-9]\\\\d*)$/.test(%s))\", ref)\r\n            (\"return%j\", invalid(field, \"integer key\"));\r\n    else if (!rtype && /64/.test(keyType)) gen\r\n        (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9]\\\\d*))$/.test(%s))\", ref)\r\n            (\"return%j\", invalid(field, \"integer|Long key\"));\r\n    else if (keyType === \"bool\") gen\r\n        (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n            (\"return%j\", invalid(field, \"boolean key\"));\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.getFieldsArray();\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            prop  = util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!util.isObject(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(m%s)\", prop)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[k[i]]\");\r\n                gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(m%s!==undefined){\", prop)\r\n                (\"if(!Array.isArray(m%s))\", prop)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<m%s.length;++i){\", prop);\r\n                    genVerifyValue(gen, field, i, \"m\" + prop + \"[i]\"); gen\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType instanceof Type) gen\r\n            (\"if(m%s!==undefined&&m%s!==null){\", prop, prop);\r\n                else gen\r\n            (\"if(m%s!==undefined){\", prop);\r\n            }\r\n                genVerifyValue(gen, field, i, \"m\" + prop);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nWriter.BufferWriter = BufferWriter;\r\n\r\nvar util      = require(35),\r\n    ieee754   = require(1);\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\nvar ArrayImpl = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    // this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\nWriter.Op = Op;\r\n\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\nWriter.State = State;\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = function create() {\r\n    return new (util.Buffer ? BufferWriter : Writer);\r\n};\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new ArrayImpl(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (ArrayImpl !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset} or {@link Writer#ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend as a tag where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (typeof id === \"number\")\r\n        this.uint32((id << 3 | 2) >>> 0);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    this.head = this.tail = null; // gc\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @exports BufferWriter\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    BufferWriter.alloc = util.Buffer.allocUnsafe\r\n        ? util.Buffer.allocUnsafe\r\n        : function allocUnsafeNew(size) { return new util.Buffer(size); };\r\n    return BufferWriter.alloc(size);\r\n};\r\n\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nfunction writeFloatBuffer(val, buf, pos) {\r\n    buf.writeFloatLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float32Array === \"undefined\") // f32 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.float = function write_float_buffer(value) {\r\n    return this.push(writeFloatBuffer, 4, value);\r\n};\r\n\r\nfunction writeDoubleBuffer(val, buf, pos) {\r\n    buf.writeDoubleLE(val, pos, true);\r\n}\r\n\r\nif (typeof Float64Array === \"undefined\") // f64 is faster (node 6.9.1)\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.double = function write_double_buffer(value) {\r\n    return this.push(writeDoubleBuffer, 8, value);\r\n};\r\n\r\nfunction writeBytesBuffer(val, buf, pos) {\r\n    if (val.length)\r\n        val.copy(buf, pos, 0, val.length);\r\n}\r\n\r\nvar Buffer_from = util.Buffer && util.Buffer.from || function(value, encoding) { return new util.Buffer(value, encoding); };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    return len\r\n        ? this.uint32(len).push(writeBytesBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\nvar writeStringBuffer = (function() { // eslint-disable-line wrap-iife\r\n    return util.Buffer && util.Buffer.prototype.utf8Write // around forever, but not present in browser buffer\r\n        ? function writeString_buffer_utf8Write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.utf8Write(val, pos);\r\n        }\r\n        : function writeString_buffer_write(val, buf, pos) {\r\n            if (val.length < 40)\r\n                utf8.write(val, buf, pos);\r\n            else\r\n                buf.write(val, pos);\r\n        };\r\n    // Note that the plain JS encoder is faster for short strings, probably because of redundant assertions.\r\n    // For a raw utf8Write, the breaking point is about 20 characters, for write it is around 40 characters.\r\n    // Unfortunately, this does not translate 1:1 to real use cases, hence the common \"good enough\" limit of 40.\r\n})();\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = value.length < 40\r\n        ? utf8.length(value)\r\n        : util.Buffer.byteLength(value);\r\n    return len\r\n        ? this.uint32(len).push(writeStringBuffer, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\n\r\n// Serialization\r\nprotobuf.BufferWriter = (\r\nprotobuf.Writer           = require(\"./writer\")).BufferWriter;\r\nprotobuf.BufferReader = (\r\nprotobuf.Reader           = require(\"./reader\")).BufferReader;\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.common           = require(\"./common\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}