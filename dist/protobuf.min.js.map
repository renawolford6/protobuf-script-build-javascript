{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/converter.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/writer_buffer.js","src/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","undefined","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","Number","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","Type","TypeError","util","Message","merge","$type","fieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","long","emptyObject","oneofsArray","oneof","defineProperty","get","oneOfGetter","set","oneOfSetter","common","json","nested","google","protobuf","Any","fields","type_url","id","value","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","genValuePartial_fromObject","fieldIndex","prop","resolvedType","Enum","repeated","typeDefault","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","safeProp","toObject","repeatedFields","filter","mapFields","otherFields","valuesById","low","high","unsigned","toString","toNumber","bytes","decoder","group","ref","resolvedKeyType","types","basic","compat","packed","genTypePartial","encoder","partOf","wireType","mapKey","required","oneofFields","indexOf","options","ReflectionObject","comments","self","val","parseInt","EnumPrototype","className","testJSON","Boolean","fromJSON","toJSON","add","comment","isString","isInteger","remove","Field","toLowerCase","optional","message","Long","extensionField","declaringField","_packed","FieldPrototype","MapField","getOption","setOption","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","MapFieldPrototype","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","arrayToJSON","array","obj","_nestedArray","_clearProperties","clearCache","namespace","NamespacePrototype","methods","addJSON","toArray","nestedArray","nestedJson","ns","nestedName","getEnum","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","root","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","defineProperties","fullName","unshift","_handleAdd","_handleRemove","OneOf","fieldNames","_fieldsArray","addFieldsToParent","OneOfPrototype","index","fieldName","isName","token","isTypeRef","isFqTypeRef","lower","camelCase","substring","toUpperCase","parse","illegal","filename","tn","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","readRange","parseId","sign","tokenLower","Infinity","NaN","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","cmnt","parseMapField","parseField","parseOneOf","extensions","reserved","parseGroup","applyCase","trailingLine","parseInlineOptions","lcFirst","ucFirst","valueType","enm","parseEnumValue","custom","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","keepCase","package","indexOutOfRange","writeLength","RangeError","pos","Reader","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","BufferReader","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","exponent","mantissa","pow","float","readDouble","Float64Array","f64","double","skipType","_configure","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","initParser","load","finish","cb","process","parsed","sync","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","loadSync","isNode","newDeferred","rpc","rpcImpl","$rpc","endedByRPC","_methodsArray","ServicePrototype","methodName","inherited","methodsArray","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","setComment","commentType","commentLine","commentText","trim","stack","repeat","curr","isComment","delimRe","delim","expected","actual","equals","ret","_fieldsById","_oneofsArray","_ctor","TypePrototype","Writer","verifier","oneOfName","fieldsById","names","setup","fld","fork","ldelim","bake","LongBitsPrototype","zero","zzEncode","zeroHash","fromString","fromHash","hash","toHash","mask","part0","part1","part2","global","versions","node","isFinite","utf8Write","encoding","allocUnsafe","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","dst","fieldMap","lazyResolve","lazyTypes","longs","enums","invalid","genVerifyValue","genVerifyKey","Op","noop","State","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","BufferWriter","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength","roots","amd"],"mappings":";;;;;;CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCAA,YAWA,SAAAK,GAAAC,EAAAC,GAEA,IAAA,GADAC,MACAb,EAAA,EAAAA,EAAAc,UAAAP,QACAM,EAAAE,KAAAD,UAAAd,KACA,IAAAgB,IAAA,CACA,OAAA,IAAAC,SAAA,SAAAC,EAAAC,GACAN,EAAAE,KAAA,SAAAK,GACA,GAAAJ,EAEA,GADAA,GAAA,EACAI,EACAD,EAAAC,OACA,CAEA,IAAA,GADAC,MACArB,EAAA,EAAAA,EAAAc,UAAAP,QACAc,EAAAN,KAAAD,UAAAd,KACAkB,GAAAI,MAAA,KAAAD,KAIA,KACAV,EAAAW,MAAAV,GAAAW,KAAAV,GACA,MAAAO,GACAJ,IACAA,GAAA,EACAG,EAAAC,OAlCAX,EAAAJ,QAAAK,0BCDA,YAOA,IAAAc,GAAAnB,CAOAmB,GAAAjB,OAAA,SAAAkB,GACA,GAAAC,GAAAD,EAAAlB,MACA,KAAAmB,EACA,MAAA,EAEA,KADA,GAAAjC,GAAA,IACAiC,EAAA,EAAA,GAAA,MAAAD,EAAAE,OAAAD,MACAjC,CACA,OAAAmC,MAAAC,KAAA,EAAAJ,EAAAlB,QAAA,EAAAd,EAUA,KAAA,GANAqC,GAAA,GAAAC,OAAA,IAGAC,EAAA,GAAAD,OAAA,KAGA/B,EAAA,EAAAA,EAAA,IACAgC,EAAAF,EAAA9B,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,EAAAA,EAAA,GAAA,IAAAA,GASAwB,GAAAS,OAAA,SAAAC,EAAAC,EAAAC,GAKA,IAJA,GAGA5C,GAHAiC,KACAzB,EAAA,EACAqC,EAAA,EAEAF,EAAAC,GAAA,CACA,GAAAE,GAAAJ,EAAAC,IACA,QAAAE,GACA,IAAA,GACAZ,EAAAzB,KAAA8B,EAAAQ,GAAA,GACA9C,GAAA,EAAA8C,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAZ,EAAAzB,KAAA8B,EAAAtC,EAAA8C,GAAA,GACA9C,GAAA,GAAA8C,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAZ,EAAAzB,KAAA8B,EAAAtC,EAAA8C,GAAA,GACAb,EAAAzB,KAAA8B,EAAA,GAAAQ,GACAD,EAAA,GAUA,MANAA,KACAZ,EAAAzB,KAAA8B,EAAAtC,GACAiC,EAAAzB,GAAA,GACA,IAAAqC,IACAZ,EAAAzB,EAAA,GAAA,KAEAuC,OAAAC,aAAAlB,MAAAiB,OAAAd,GAGA,IAAAgB,GAAA,kBAUAjB,GAAAkB,OAAA,SAAAjB,EAAAS,EAAAS,GAIA,IAAA,GADAnD,GAFA2C,EAAAQ,EACAN,EAAA,EAEArC,EAAA,EAAAA,EAAAyB,EAAAlB,QAAA,CACA,GAAAqC,GAAAnB,EAAAoB,WAAA7C,IACA,IAAA,KAAA4C,GAAAP,EAAA,EACA,KACA,IAAAS,UAAAF,EAAAZ,EAAAY,IACA,KAAA1C,OAAAuC,EACA,QAAAJ,GACA,IAAA,GACA7C,EAAAoD,EACAP,EAAA,CACA,MACA,KAAA,GACAH,EAAAS,KAAAnD,GAAA,GAAA,GAAAoD,IAAA,EACApD,EAAAoD,EACAP,EAAA,CACA,MACA,KAAA,GACAH,EAAAS,MAAA,GAAAnD,IAAA,GAAA,GAAAoD,IAAA,EACApD,EAAAoD,EACAP,EAAA,CACA,MACA,KAAA,GACAH,EAAAS,MAAA,EAAAnD,IAAA,EAAAoD,EACAP,EAAA,GAIA,GAAA,IAAAA,EACA,KAAAnC,OAAAuC,EACA,OAAAE,GAAAR,GAQAX,EAAAuB,KAAA,SAAAtB,GACA,MAAA,sEAAAsB,KAAAtB,4BC/HA,YAoBA,SAAAuB,KAmBA,QAAAC,KAGA,IAFA,GAAA5B,MACArB,EAAA,EACAA,EAAAc,UAAAP,QACAc,EAAAN,KAAAD,UAAAd,KACA,IAAAkD,GAAAC,EAAA7B,MAAA,KAAAD,GACA+B,EAAAC,CACA,IAAAC,EAAA/C,OAAA,CACA,GAAAgD,GAAAD,EAAAA,EAAA/C,OAAA,EAGAiD,GAAAT,KAAAQ,GACAH,IAAAC,EACAI,EAAAV,KAAAQ,MACAH,EAGAM,EAAAX,KAAAQ,KAAAG,EAAAX,KAAAG,IACAE,IAAAC,EACAM,GAAA,GACAA,GAAAC,EAAAb,KAAAQ,KACAH,IAAAC,EACAM,GAAA,GAIAE,EAAAd,KAAAG,KACAE,IAAAC,GAEA,IAAArD,EAAA,EAAAA,EAAAoD,IAAApD,EACAkD,EAAA,KAAAA,CAEA,OADAI,GAAAvC,KAAAmC,GACAD,EASA,QAAAa,GAAAC,GACA,MAAA,YAAAA,EAAA,IAAAA,EAAAC,QAAA,WAAA,KAAA,IAAA,IAAAnD,EAAAoD,KAAA,KAAA,QAAAX,EAAAW,KAAA,MAAA,MAYA,QAAAC,GAAAH,EAAAI,GACA,gBAAAJ,KACAI,EAAAJ,EACAA,EAAAjB,OAEA,IAAAsB,GAAAnB,EAAAa,IAAAC,EACAf,GAAAqB,SACAC,QAAAC,IAAA,oBAAAH,EAAAJ,QAAA,MAAA,MAAAA,QAAA,MAAA,MACA,IAAAQ,GAAAC,OAAAD,KAAAL,IAAAA,MACA,OAAAO,UAAApD,MAAA,KAAAkD,EAAAG,OAAA,UAAAP,IAAA9C,MAAA,KAAAkD,EAAAI,IAAA,SAAAC,GAAA,MAAAV,GAAAU,MA7EA,IAAA,GAJAhE,MACAyC,KACAD,EAAA,EACAM,GAAA,EACA3D,EAAA,EAAAA,EAAAc,UAAAP,QACAM,EAAAE,KAAAD,UAAAd,KAwFA,OA9BAiD,GAAAa,IAAAA,EA4BAb,EAAAiB,IAAAA,EAEAjB,EAGA,QAAAE,GAAA2B,GAGA,IAFA,GAAAzD,MACArB,EAAA,EACAA,EAAAc,UAAAP,QACAc,EAAAN,KAAAD,UAAAd,KAcA,IAbAA,EAAA,EACA8E,EAAAA,EAAAd,QAAA,aAAA,SAAAe,EAAAC,GACA,OAAAA,GACA,IAAA,IACA,MAAApD,MAAAqD,MAAA5D,EAAArB,KACA,KAAA,IACA,MAAAkF,QAAA7D,EAAArB,KACA,KAAA,IACA,MAAAmF,MAAAC,UAAA/D,EAAArB,KACA,SACA,MAAAqB,GAAArB,QAGAA,IAAAqB,EAAAd,OACA,KAAAL,OAAA,0BACA,OAAA4E,GAxIArE,EAAAJ,QAAA2C,CAEA,IAAAQ,GAAA,QACAK,EAAA,SACAH,EAAA,KACAD,EAAA,kDACAG,EAAA,+CAqIAZ,GAAAG,QAAAA,EACAH,EAAAqC,WAAA,CAAA,KAAArC,EAAAqC,UAAA,IAAArC,EAAA,IAAA,KAAA,cAAAkB,MAAA,EAAA,GAAA,MAAA3E,IACAyD,EAAAqB,SAAA,0BC9IA,YASA,SAAAiB,KAOA/D,KAAAgE,KAfA9E,EAAAJ,QAAAiF,CAmBA,IAAAE,GAAAF,EAAAG,SASAD,GAAAE,GAAA,SAAAC,EAAAhF,EAAAC,GAKA,OAJAW,KAAAgE,EAAAI,KAAApE,KAAAgE,EAAAI,QAAA5E,MACAJ,GAAAA,EACAC,IAAAA,GAAAW,OAEAA,MASAiE,EAAAI,IAAA,SAAAD,EAAAhF,GACA,GAAAmC,SAAA6C,EACApE,KAAAgE,SAEA,IAAAzC,SAAAnC,EACAY,KAAAgE,EAAAI,UAGA,KAAA,GADAE,GAAAtE,KAAAgE,EAAAI,GACA3F,EAAA,EAAAA,EAAA6F,EAAAtF,QACAsF,EAAA7F,GAAAW,KAAAA,EACAkF,EAAAC,OAAA9F,EAAA,KAEAA,CAGA,OAAAuB,OASAiE,EAAAO,KAAA,SAAAJ,GACA,GAAAE,GAAAtE,KAAAgE,EAAAI,EACA,IAAAE,EAAA,CAGA,IAFA,GAAAxE,MACArB,EAAA,EACAA,EAAAc,UAAAP,QACAc,EAAAN,KAAAD,UAAAd,KACA,KAAAA,EAAA,EAAAA,EAAA6F,EAAAtF,QACAsF,EAAA7F,GAAAW,GAAAW,MAAAuE,EAAA7F,KAAAY,IAAAS,GAEA,MAAAE,+BC7EA,YAUA,SAAAyE,GAAAC,GAGA,IAAA,GADAzB,GAAAC,OAAAD,KAAAjD,MACAvB,EAAA,EAAAA,EAAAwE,EAAAjE,SAAAP,EACAiG,EAAAzB,EAAAxE,IAAAuB,KAAAiD,EAAAxE,GAEA,IAAAyF,GAAAQ,EAAAR,UAAAhB,OAAAyB,OAAA3E,KAAAkE,UAEA,OADAA,GAAAU,YAAAF,EACAR,EAjBAhF,EAAAJ,QAAA2F,0BCDA,YAwBA,SAAAI,GAAAC,EAAAC,GACA,MAAAA,GAEAC,GAAAA,EAAAC,SACAD,EAAAC,SAAAH,EAAA,OAAA,SAAAjF,EAAAqF,GACA,MAAArF,IAAA,mBAAAsF,gBACAC,EAAAN,EAAAC,GACAA,EAAAlF,EAAAqF,KAEAE,EAAAN,EAAAC,GAPA5F,EAAA0F,EAAA7E,KAAA8E,GAUA,QAAAM,GAAAN,EAAAC,GACA,GAAAM,GAAA,GAAAF,eACAE,GAAAC,mBAAA,WACA,MAAA,KAAAD,EAAAE,WACA,IAAAF,EAAAG,QAAA,MAAAH,EAAAG,OACAT,EAAA,KAAAM,EAAAI,cACAV,EAAApG,MAAA,UAAA0G,EAAAG,SACAjE,QAKA8D,EAAAK,KAAA,MAAAZ,GACAO,EAAAM,OAhDAzG,EAAAJ,QAAA+F,CAEA,IAAA1F,GAAAX,EAAA,GACAoH,EAAApH,EAAA,GAEAwG,EAAAY,EAAA,sDCNA,YASA,SAAAA,SAAAC,YACA,IACA,GAAAC,KAAAC,KAAA,QAAAtD,QAAA,IAAA,OAAAoD,WACA,IAAAC,MAAAA,IAAA9G,QAAAkE,OAAAD,KAAA6C,KAAA9G,QACA,MAAA8G,KACA,MAAA9H,IACA,MAAA,MAdAkB,OAAAJ,QAAA8G,gCCDA,YAOA,IAAAd,GAAAhG,EAEAkH,EAMAlB,EAAAkB,WAAA,SAAAlB,GACA,MAAA,eAAAtD,KAAAsD,IAGAmB,EAMAnB,EAAAmB,UAAA,SAAAnB,GACAA,EAAAA,EAAArC,QAAA,MAAA,KACAA,QAAA,UAAA,IACA,IAAAyD,GAAApB,EAAAqB,MAAA,KACAC,EAAAJ,EAAAlB,GACAuB,EAAA,EACAD,KACAC,EAAAH,EAAAI,QAAA,IACA,KAAA,GAAA7H,GAAA,EAAAA,EAAAyH,EAAAlH,QACA,OAAAkH,EAAAzH,GACAA,EAAA,EACAyH,EAAA3B,SAAA9F,EAAA,GACA2H,EACAF,EAAA3B,OAAA9F,EAAA,KAEAA,EACA,MAAAyH,EAAAzH,GACAyH,EAAA3B,OAAA9F,EAAA,KAEAA,CAEA,OAAA4H,GAAAH,EAAAxD,KAAA,KAUAoC,GAAAnF,QAAA,SAAA4G,EAAAC,EAAAC,GAGA,MAFAA,KACAD,EAAAP,EAAAO,IACAR,EAAAQ,GACAA,GACAC,IACAF,EAAAN,EAAAM,KACAA,EAAAA,EAAA9D,QAAA,kBAAA,KAAAzD,OAAAiH,EAAAM,EAAA,IAAAC,GAAAA,4BC/DA,YA8BA,SAAAE,GAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAD,GAAA,KACAE,EAAAD,IAAA,EACAE,EAAA,KACA5F,EAAA0F,CACA,OAAA,UAAAD,GACA,GAAAA,EAAA,GAAAA,EAAAE,EACA,MAAAJ,GAAAE,EACAzF,GAAAyF,EAAAC,IACAE,EAAAL,EAAAG,GACA1F,EAAA,EAEA,IAAA6F,GAAAL,EAAA7H,KAAAiI,EAAA5F,EAAAA,GAAAyF,EAGA,OAFA,GAAAzF,IACAA,GAAA,EAAAA,GAAA,GACA6F,GA5CA/H,EAAAJ,QAAA4H,2BCDA,YAOA,IAAAQ,GAAApI,CAOAoI,GAAAlI,OAAA,SAAAkB,GAGA,IAAA,GAFAiH,GAAA,EACA9F,EAAA,EACA5C,EAAA,EAAAA,EAAAyB,EAAAlB,SAAAP,EACA4C,EAAAnB,EAAAoB,WAAA7C,GACA4C,EAAA,IACA8F,GAAA,EACA9F,EAAA,KACA8F,GAAA,EACA,SAAA,MAAA9F,IAAA,SAAA,MAAAnB,EAAAoB,WAAA7C,EAAA,OACAA,EACA0I,GAAA,GAEAA,GAAA,CAEA,OAAAA,IAUAD,EAAAE,KAAA,SAAAzG,EAAAC,EAAAC,GACA,GAAAsG,GAAAtG,EAAAD,CACA,IAAAuG,EAAA,EACA,MAAA,EAKA,KAJA,GAGAlJ,GAHAiI,EAAA,KACAmB,KACA5I,EAAA,EAEAmC,EAAAC,GACA5C,EAAA0C,EAAAC,KACA3C,EAAA,IACAoJ,EAAA5I,KAAAR,EACAA,EAAA,KAAAA,EAAA,IACAoJ,EAAA5I,MAAA,GAAAR,IAAA,EAAA,GAAA0C,EAAAC,KACA3C,EAAA,KAAAA,EAAA,KACAA,IAAA,EAAAA,IAAA,IAAA,GAAA0C,EAAAC,OAAA,IAAA,GAAAD,EAAAC,OAAA,EAAA,GAAAD,EAAAC,MAAA,MACAyG,EAAA5I,KAAA,OAAAR,GAAA,IACAoJ,EAAA5I,KAAA,OAAA,KAAAR,IAEAoJ,EAAA5I,MAAA,GAAAR,IAAA,IAAA,GAAA0C,EAAAC,OAAA,EAAA,GAAAD,EAAAC,KACAnC,EAAA,QACAyH,IAAAA,OAAA1G,KAAAwB,OAAAC,aAAAlB,MAAAiB,OAAAqG,IACA5I,EAAA,EAGA,OAAAyH,IACAzH,GACAyH,EAAA1G,KAAAwB,OAAAC,aAAAlB,MAAAiB,OAAAqG,EAAAT,MAAA,EAAAnI,KACAyH,EAAAxD,KAAA,KAEAjE,EAAAuC,OAAAC,aAAAlB,MAAAiB,OAAAqG,EAAAT,MAAA,EAAAnI,IAAA,IAUAyI,EAAAI,MAAA,SAAApH,EAAAS,EAAAS,GAIA,IAAA,GAFAmG,GACAC,EAFA5G,EAAAQ,EAGA3C,EAAA,EAAAA,EAAAyB,EAAAlB,SAAAP,EACA8I,EAAArH,EAAAoB,WAAA7C,GACA8I,EAAA,IACA5G,EAAAS,KAAAmG,EACAA,EAAA,MACA5G,EAAAS,KAAAmG,GAAA,EAAA,IACA5G,EAAAS,KAAA,GAAAmG,EAAA,KACA,SAAA,MAAAA,IAAA,SAAA,OAAAC,EAAAtH,EAAAoB,WAAA7C,EAAA,MACA8I,EAAA,QAAA,KAAAA,IAAA,KAAA,KAAAC,KACA/I,EACAkC,EAAAS,KAAAmG,GAAA,GAAA,IACA5G,EAAAS,KAAAmG,GAAA,GAAA,GAAA,IACA5G,EAAAS,KAAAmG,GAAA,EAAA,GAAA,IACA5G,EAAAS,KAAA,GAAAmG,EAAA,MAEA5G,EAAAS,KAAAmG,GAAA,GAAA,IACA5G,EAAAS,KAAAmG,GAAA,EAAA,GAAA,IACA5G,EAAAS,KAAA,GAAAmG,EAAA,IAGA,OAAAnG,GAAAR,4BCvGA,YAcA,SAAA6G,GAAAC,GACA,MAAA/C,GAAA+C,GAUA,QAAA/C,GAAA+C,EAAAhD,GAKA,GAJAiD,IACAA,EAAAnJ,EAAA,OAGAkJ,YAAAC,IACA,KAAAC,WAAA,sBAEA,IAAAlD,GAEA,GAAA,kBAAAA,GACA,KAAAkD,WAAA,+BAGAlD,GAAAmD,EAAApG,QAAA,KAAA,4BAAAkB,IAAA+E,EAAAlF,MACAkC,KAAAoD,GAIApD,GAAAE,YAAA6C,CAGA,IAAAvD,GAAAQ,EAAAR,UAAA,GAAA4D,EAiCA,OAhCA5D,GAAAU,YAAAF,EAGAmD,EAAAE,MAAArD,EAAAoD,GAAA,GAGApD,EAAAsD,MAAAN,EACAxD,EAAA8D,MAAAN,EAGAA,EAAAO,YAAAC,QAAA,SAAAC,GAIAjE,EAAAiE,EAAA3F,MAAAhC,MAAA4H,QAAAD,EAAAxI,UAAA0I,cACAR,EAAAS,WACAT,EAAAU,SAAAJ,EAAAE,gBAAAF,EAAAK,KACAX,EAAAY,YACAN,EAAAE,eAIAX,EAAAgB,YAAAR,QAAA,SAAAS,GACAzF,OAAA0F,eAAA1E,EAAAyE,EAAAhJ,UAAA6C,MACAqG,IAAAhB,EAAAiB,YAAAH,EAAAA,OACAI,IAAAlB,EAAAmB,YAAAL,EAAAA,WAKAjB,EAAAhD,KAAAA,EAEAR,EA/EAhF,EAAAJ,QAAA2I,CAEA,IAGAE,GAHAG,EAAAtJ,EAAA,IACAqJ,EAAArJ,EAAA,GA+EAiJ,GAAA9C,OAAAA,EAGA8C,EAAAvD,UAAA4D,4CCtFA,YAgBA,SAAAmB,GAAAzG,EAAA0G,GACA,QAAA1H,KAAAgB,KACAA,EAAA,mBAAAA,EAAA,SACA0G,GAAAC,QAAAC,QAAAD,QAAAE,UAAAF,OAAAD,QAEAD,EAAAzG,GAAA0G,EApBAhK,EAAAJ,QAAAmK,EAiCAA,EAAA,OACAK,KACAC,QACAC,UACA9B,KAAA,SACA+B,GAAA,GAEAC,OACAhC,KAAA,QACA+B,GAAA,MAMA,IAAAE,EAEAV,GAAA,YACAW,SAAAD,GACAJ,QACAM,SACAnC,KAAA,QACA+B,GAAA,GAEAK,OACApC,KAAA,QACA+B,GAAA,OAMAR,EAAA,aACAc,UAAAJ,IAGAV,EAAA,SACAe,OACAT,aAIAN,EAAA,UACAgB,QACAV,QACAA,QACAW,QAAA,SACAxC,KAAA,QACA+B,GAAA,KAIAU,OACAC,QACAC,MACA1B,OACA,YACA,cACA,cACA,YACA,cACA,eAIAY,QACAe,WACA5C,KAAA,YACA+B,GAAA,GAEAc,aACA7C,KAAA,SACA+B,GAAA,GAEAe,aACA9C,KAAA,SACA+B,GAAA,GAEAgB,WACA/C,KAAA,OACA+B,GAAA,GAEAiB,aACAhD,KAAA,SACA+B,GAAA,GAEAkB,WACAjD,KAAA,YACA+B,GAAA,KAIAmB,WACAC,QACAC,WAAA,IAGAC,WACAxB,QACAsB,QACAG,KAAA,WACAtD,KAAA,QACA+B,GAAA,OAMAR,EAAA,YACAgC,aACA1B,QACAG,OACAhC,KAAA,SACA+B,GAAA,KAIAyB,YACA3B,QACAG,OACAhC,KAAA,QACA+B,GAAA,KAIA0B,YACA5B,QACAG,OACAhC,KAAA,QACA+B,GAAA,KAIA2B,aACA7B,QACAG,OACAhC,KAAA,SACA+B,GAAA,KAIA4B,YACA9B,QACAG,OACAhC,KAAA,QACA+B,GAAA,KAIA6B,aACA/B,QACAG,OACAhC,KAAA,SACA+B,GAAA,KAIA8B,WACAhC,QACAG,OACAhC,KAAA,OACA+B,GAAA,KAIA+B,aACAjC,QACAG,OACAhC,KAAA,SACA+B,GAAA,KAIAgC,YACAlC,QACAG,OACAhC,KAAA,QACA+B,GAAA,gCCnNA,YAmBA,SAAAiC,GAAAhK,EAAAyG,EAAAwD,EAAAC,GAEA,GAAAzD,EAAA0D,aACA,GAAA1D,EAAA0D,uBAAAC,GAAA,CACA,GAAAjB,GAAA1C,EAAA0D,aAAAhB,MAAAnJ,GACA,eAAAkK,GACA1I,OAAAD,KAAA4H,GAAA3C,QAAA,SAAA5E,GACA6E,EAAA4D,UAAAlB,EAAAvH,KAAA6E,EAAA6D,aAAAtK,EACA,YACAA,EACA,UAAA4B,GACA,WAAAuH,EAAAvH,IACA,SAAAsI,EAAAf,EAAAvH,IACA,WACA5B,EACA,SACAA,GACA,gCAAAkK,EAAAD,EAAAC,OACA,CACA,GAAAK,IAAA,CACA,QAAA9D,EAAAT,MACA,IAAA,SACA,IAAA,QAAAhG,EACA,kBAAAkK,EAAAA,EACA,MACA,KAAA,SACA,IAAA,UAAAlK,EACA,cAAAkK,EAAAA,EACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,WAAAlK,EACA,YAAAkK,EAAAA,EACA,MACA,KAAA,SACAK,GAAA,CAEA,KAAA,QACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAvK,EACA,iBACA,6CAAAkK,EAAAA,EAAAK,GACA,iCAAAL,GACA,uBAAAA,EAAAA,GACA,iCAAAA,GACA,UAAAA,EAAAA,GACA,iCAAAA,GACA,uDAAAA,EAAAA,EAAAA,EAAAK,EAAA,OAAA,GACA,MACA,KAAA,QAAAvK,EACA,4BAAAkK,GACA,wEAAAA,EAAAA,EAAAA,GACA,2BAAAA,EAAAA,GACA,UAAAA,EAAAA,EACA,MACA,KAAA,SAAAlK,EACA,kBAAAkK,EAAAA,EACA,MACA,KAAA,OAAAlK,EACA,mBAAAkK,EAAAA,EACA,MACA,SAAAlK,EACA,UAAAkK,EAAAA,IAIA,MAAAlK,GA4DA,QAAAwK,GAAAxK,EAAAyG,EAAAwD,EAAAC,GAEA,GAAAzD,EAAA0D,aACA1D,EAAA0D,uBAAAC,GAAApK,EACA,iDAAAkK,EAAAD,EAAAC,EAAAA,GACAlK,EACA,gCAAAkK,EAAAD,EAAAC,OACA,CACA,GAAAK,IAAA,CACA,QAAA9D,EAAAT,MACA,IAAA,SACAuE,GAAA,CAEA,KAAA,QACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAvK,EACA,4BAAAkK,GACA,uCAAAA,EAAAA,EAAAA,GACA,QACA,oIAAAA,EAAAA,EAAAA,EAAAA,EAAAK,EAAA,OAAA,GAAAL,EACA,MACA,KAAA,QAAAlK,EACA,gHAAAkK,EAAAA,EAAAA,EAAAA,EAAAA,EACA,MACA,SAAAlK,EACA,UAAAkK,EAAAA,IAIA,MAAAlK,GA3KA,GAAAyK,GAAArN,EAEAgN,EAAAtN,EAAA,IACAqJ,EAAArJ,EAAA,GAuFA2N,GAAAC,WAAA,SAAAC,GAEA,GAAA9C,GAAA8C,EAAApE,WACA,KAAAsB,EAAAvK,OACA,MAAA6I,GAAApG,UAAA,wBAGA,KAAA,GAFAC,GAAAmG,EAAApG,QAAA,KACA,wBACAhD,EAAA,EAAAA,EAAA8K,EAAAvK,SAAAP,EAAA,CACA,GAAA0J,GAAAoB,EAAA9K,GAAAkB,UACAiM,EAAA/D,EAAAyE,SAAAnE,EAAA3F,KAGA2F,GAAA9E,KAAA3B,EACA,WAAAkK,GACA,SAAAA,GACA,oDAAAA,GACAF,EAAAhK,EAAAyG,EAAA1J,EAAAmN,EAAA,WACA,KACA,MAGAzD,EAAA4D,UAAArK,EACA,WAAAkK,GACA,SAAAA,GACA,iCAAAA,GACAF,EAAAhK,EAAAyG,EAAA1J,EAAAmN,EAAA,OACA,KACA,OAIAzD,EAAA0D,uBAAAC,IAAApK,EACA,mCAAAkK,EAAAA,GACAF,EAAAhK,EAAAyG,EAAA1J,EAAAmN,GACAzD,EAAA0D,uBAAAC,IAAApK,EACA,MAEA,MAAAA,GACA,aAoDAyK,EAAAI,SAAA,SAAAF,GAEA,GAAA9C,GAAA8C,EAAApE,WACA,KAAAsB,EAAAvK,OACA,MAAA6I,GAAApG,UAAA,YACA,IAAAC,GAAAmG,EAAApG,QAAA,IAAA,KACA,UACA,QACA,YACA+K,EAAAjD,EAAAkD,OAAA,SAAAtE,GAAA,MAAAA,GAAAxI,UAAAoM,UACAS,GAAAxN,SAAA0C,EACA,6BACA8K,EAAAtE,QAAA,SAAAC,GAAAzG,EACA,SAAAmG,EAAAyE,SAAAnE,EAAA3F,SACAd,EACA,KAEA,IAAAgL,GAAAnD,EAAAkD,OAAA,SAAAtE,GAAA,MAAAA,GAAA9E,KACAqJ,GAAA1N,SAAA0C,EACA,8BACAgL,EAAAxE,QAAA,SAAAC,GAAAzG,EACA,SAAAmG,EAAAyE,SAAAnE,EAAA3F,SACAd,EACA,KAEA,IAAAiL,GAAApD,EAAAkD,OAAA,SAAAtE,GAAA,QAAAA,EAAA4D,UAAA5D,EAAA9E,MACAsJ,GAAA3N,SAAA0C,EACA,mBACAiL,EAAAzE,QAAA,SAAAC,GACA,GAAAyD,GAAA/D,EAAAyE,SAAAnE,EAAA3F,KACA2F,GAAA0D,uBAAAC,GAAApK,EACA,6BAAAkK,EAAAzD,EAAA0D,aAAAe,WAAAzE,EAAA6D,aAAA7D,EAAA6D,aACA7D,EAAAK,KAAA9G,EACA,kBACA,gCAAAyG,EAAA6D,YAAAa,IAAA1E,EAAA6D,YAAAc,KAAA3E,EAAA6D,YAAAe,UACA,oEAAAnB,GACA,SACA,6BAAAA,EAAAzD,EAAA6D,YAAAgB,WAAA7E,EAAA6D,YAAAiB,YACA9E,EAAA+E,MAAAxL,EACA,6BAAAkK,EAAA5K,OAAAC,aAAAlB,MAAAiB,OAAAmH,EAAA6D,aAAA,IAAAxL,MAAA0D,UAAA0C,MAAA7H,KAAAoJ,EAAA6D,aAAAtJ,KAAA,KAAA,KACAhB,EACA,SAAAkK,EAAAzD,EAAA6D,eACAtK,EACA,KAEA,KAAA,GAAAjD,GAAA,EAAAA,EAAA8K,EAAAvK,SAAAP,EAAA,CACA,GAAA0J,GAAAoB,EAAA9K,GACAmN,EAAA/D,EAAAyE,SAAAnE,EAAA3F,KAAAd,GACA,yDAAAyG,EAAA3F,KAAAoJ,EAAAA,GACAzD,EAAA9E,KAAA3B,EACA,SAAAkK,GACA,sDAAAA,GACAM,EAAAxK,EAAAyG,EAAA1J,EAAAmN,EAAA,YACA,MACAzD,EAAA4D,UAAArK,EACA,SAAAkK,GACA,iCAAAA,GACAM,EAAAxK,EAAAyG,EAAA1J,EAAAmN,EAAA,OACA,MAEAM,EAAAxK,EAAAyG,EAAA1J,EAAAmN,GACAlK,EACA,KAEA,MAAAA,GACA,iDC1PA,YAeA,SAAAyL,GAAAd,GAEA,GAAA9C,GAAA8C,EAAApE,YACAvG,EAAAmG,EAAApG,QAAA,IAAA,KACA,8BACA,sBACA,sDACA,mBACA,mBACA4K,GAAAe,OAAA1L,EACA,iBACA,SACAA,EACA,iBAEA,KAAA,GAAAjD,GAAA,EAAAA,EAAA8K,EAAAvK,SAAAP,EAAA,CACA,GAAA0J,GAAAoB,EAAA9K,GAAAkB,UACA+H,EAAAS,EAAA0D,uBAAAC,GAAA,SAAA3D,EAAAT,KACA2F,EAAA,IAAAxF,EAAAyE,SAAAnE,EAAA3F,KAIA,IAJAd,EACA,WAAAyG,EAAAsB,IAGAtB,EAAA9E,IAAA,CAEA,GAAA6G,GAAA/B,EAAAmF,gBAAA,SAAAnF,EAAA+B,OAAAxI,GACA,kBACA,4BAAA2L,GACA,QAAAA,GACA,eAAAnD,GACA,WACA3I,SAAAgM,EAAAC,MAAA9F,GAAAhG,EACA,8EAAA2L,EAAA5O,GACAiD,EACA,sDAAA2L,EAAA3F,OAGAS,GAAA4D,UAAArK,EAEA,uBAAA2L,EAAAA,GACA,QAAAA,IAGAF,EAAAM,QAAAtF,EAAAuF,SAAAnM,SAAAgM,EAAAG,OAAAhG,IAAAhG,EACA,kBACA,2BACA,mBACA,kBAAA2L,EAAA3F,GACA,SAGAnG,SAAAgM,EAAAC,MAAA9F,GAAAhG,EAAAyG,EAAA0D,aAAAuB,MACA,+BACA,0CAAAC,EAAA5O,GACAiD,EACA,kBAAA2L,EAAA3F,IAGAnG,SAAAgM,EAAAC,MAAA9F,GAAAhG,EAAAyG,EAAA0D,aAAAuB,MACA,yBACA,oCAAAC,EAAA5O,GACAiD,EACA,YAAA2L,EAAA3F,EACAhG,GACA,SAGA,MAAAA,GACA,YACA,mBACA,SAEA,KACA,KACA,YAvFAxC,EAAAJ,QAAAqO,EAEAA,EAAAM,QAAA,CAEA,IAAA3B,GAAAtN,EAAA,IACA+O,EAAA/O,EAAA,IACAqJ,EAAArJ,EAAA,8CCPA,YAgBA,SAAAmP,GAAAjM,EAAAyG,EAAAwD,EAAA0B,GACA,MAAAlF,GAAA0D,aAAAuB,MACA1L,EAAA,+CAAAiK,EAAA0B,GAAAlF,EAAAsB,IAAA,EAAA,KAAA,GAAAtB,EAAAsB,IAAA,EAAA,KAAA,GACA/H,EAAA,oDAAAiK,EAAA0B,GAAAlF,EAAAsB,IAAA,EAAA,KAAA,GAQA,QAAAmE,GAAAvB,GASA,IAAA,GADA5N,GAAA4O,EANA9D,EAAA8C,EAAApE,YACAmC,EAAAiC,EAAA3D,YACAhH,EAAAmG,EAAApG,QAAA,IAAA,KACA,UACA,qBAGAhD,EAAA,EAAAA,EAAA8K,EAAAvK,SAAAP,EAAA,CACA,GAAA0J,GAAAoB,EAAA9K,GAAAkB,SACA,KAAAwI,EAAA0F,OAAA,CAEA,GAAAnG,GAAAS,EAAA0D,uBAAAC,GAAA,SAAA3D,EAAAT,KACAoG,EAAAP,EAAAC,MAAA9F,EAIA,IAHA2F,EAAA,IAAAxF,EAAAyE,SAAAnE,EAAA3F,MAGA2F,EAAA9E,IAAA,CACA,GAAA6G,GAAA/B,EAAAmF,gBAAA,SAAAnF,EAAA+B,OAAAxI,GACA,gCAAAyG,EAAA3F,KAAA6K,GACA,mDAAAA,GACA,4CAAAlF,EAAAsB,IAAA,EAAA,KAAA,EAAA,EAAA8D,EAAAQ,OAAA7D,GAAAA,GACA3I,SAAAuM,EAAApM,EACA,oEAAAjD,EAAA4O,GACA3L,EACA,qCAAA,GAAAoM,EAAApG,EAAA2F,GACA3L,EACA,KACA,SAGAyG,GAAA4D,SAGA5D,EAAAuF,QAAAnM,SAAAgM,EAAAG,OAAAhG,GAAAhG,EAEA,uCAAAyG,EAAA3F,KAAA6K,GACA,uBAAAlF,EAAAsB,IAAA,EAAA,KAAA,GACA,+BAAA4D,GACA,cAAA3F,EAAA2F,GACA,cACA,MAGA3L,EAEA,4BAAAyG,EAAA3F,MACA,+BAAA6K,GACA9L,SAAAuM,EACAH,EAAAjM,EAAAyG,EAAA1J,EAAA4O,EAAA,OACA3L,EACA,0BAAAyG,EAAAsB,IAAA,EAAAqE,KAAA,EAAApG,EAAA2F,GACA3L,EACA,OAMAyG,EAAA6F,WAEA7F,EAAAK,KAAA9G,EACA,sDAAAyG,EAAA3F,KAAA6K,EAAAA,GACAlF,EAAA+E,MAAAxL,EACA,+BAAAyG,EAAA3F,KAAA6K,GACA3L,EACA,2CAAAyG,EAAA3F,KAAA6K,IAIA9L,SAAAuM,EACAH,EAAAjM,EAAAyG,EAAA1J,EAAA4O,GACA3L,EACA,uBAAAyG,EAAAsB,IAAA,EAAAqE,KAAA,EAAApG,EAAA2F,KAMA,IAAA,GAAA5O,GAAA,EAAAA,EAAA2L,EAAApL,SAAAP,EAAA,CACA,GAAAkK,GAAAyB,EAAA3L,EAAAiD,GACA,cAAA,IAAAmG,EAAAyE,SAAA3D,EAAAnG,MAEA,KAAA,GADAyL,GAAAtF,EAAAV,YACAnH,EAAA,EAAAA,EAAAmN,EAAAjP,SAAA8B,EAAA,CACA,GAAAqH,GAAA8F,EAAAnN,GACA4G,EAAAS,EAAA0D,uBAAAC,GAAA,SAAA3D,EAAAT,KACAoG,EAAAP,EAAAC,MAAA9F,EACA2F,GAAA,IAAAxF,EAAAyE,SAAAnE,EAAA3F,MAAAd,EACA,UAAAyG,EAAA3F,MACAjB,SAAAuM,EACAH,EAAAjM,EAAAyG,EAAAoB,EAAA2E,QAAA/F,GAAAkF,GACA3L,EACA,uBAAAyG,EAAAsB,IAAA,EAAAqE,KAAA,EAAApG,EAAA2F,GACA3L,EACA,SACAA,EACA,KAGA,MAAAA,GACA,YA/HAxC,EAAAJ,QAAA8O,CAEA,IAAA9B,GAAAtN,EAAA,IACA+O,EAAA/O,EAAA,IACAqJ,EAAArJ,EAAA,8CCLA,YAqBA,SAAAsN,GAAAtJ,EAAAqI,EAAAsD,GACAC,EAAArP,KAAAiB,KAAAwC,EAAA2L,GAMAnO,KAAA4M,cAMA5M,KAAA6K,OAAA3H,OAAAyB,OAAA3E,KAAA4M,YAMA5M,KAAAqO,WAMA,IAAAC,GAAAtO,IACAkD,QAAAD,KAAA4H,OAAA3C,QAAA,SAAA5E,GACA,GAAAiL,EACA,iBAAA1D,GAAAvH,GACAiL,EAAA1D,EAAAvH,IAEAiL,EAAAC,SAAAlL,EAAA,IACAA,EAAAuH,EAAAvH,IAEAgL,EAAA1B,WAAA0B,EAAAzD,OAAAvH,GAAAiL,GAAAjL,IAtDApE,EAAAJ,QAAAgN,CAGA,IAAAsC,GAAA5P,EAAA,IAEAiQ,EAAAL,EAAA3J,OAAAqH,EAEAA,GAAA4C,UAAA,MAEA,IAAA7G,GAAArJ,EAAA,GAsDAsN,GAAA6C,SAAA,SAAAzF,GACA,MAAA0F,SAAA1F,GAAAA,EAAA2B,SAUAiB,EAAA+C,SAAA,SAAArM,EAAA0G,GACA,MAAA,IAAA4C,GAAAtJ,EAAA0G,EAAA2B,OAAA3B,EAAAiF,UAMAM,EAAAK,OAAA,WACA,OACAX,QAAAnO,KAAAmO,QACAtD,OAAA7K,KAAA6K,SAaA4D,EAAAM,IAAA,SAAAvM,EAAAiH,EAAAuF,GAGA,IAAAnH,EAAAoH,SAAAzM,GACA,KAAAoF,WAAA,wBAEA,KAAAC,EAAAqH,UAAAzF,GACA,KAAA7B,WAAA,wBAEA,IAAArG,SAAAvB,KAAA6K,OAAArI,GACA,KAAA7D,OAAA,mBAAA6D,EAAA,QAAAxC,KAEA,IAAAuB,SAAAvB,KAAA4M,WAAAnD,GACA,KAAA9K,OAAA,gBAAA8K,EAAA,OAAAzJ,KAIA,OAFAA,MAAA4M,WAAA5M,KAAA6K,OAAArI,GAAAiH,GAAAjH,EACAxC,KAAAqO,SAAA7L,GAAAwM,GAAA,KACAhP,MAUAyO,EAAAU,OAAA,SAAA3M,GACA,IAAAqF,EAAAoH,SAAAzM,GACA,KAAAoF,WAAA,wBACA,IAAA2G,GAAAvO,KAAA6K,OAAArI,EACA,IAAAjB,SAAAgN,EACA,KAAA5P,OAAA,IAAA6D,EAAA,sBAAAxC,KAIA,cAHAA,MAAA4M,WAAA2B,SACAvO,MAAA6K,OAAArI,SACAxC,MAAAqO,SAAA7L,GACAxC,0CCtIA,YA6BA,SAAAoP,GAAA5M,EAAAiH,EAAA/B,EAAAsD,EAAAvG,EAAA0J,GAWA,GAVAtG,EAAAU,SAAAyC,IACAmD,EAAAnD,EACAA,EAAAvG,EAAAlD,QACAsG,EAAAU,SAAA9D,KACA0J,EAAA1J,EACAA,EAAAlD,QAEA6M,EAAArP,KAAAiB,KAAAwC,EAAA2L,IAGAtG,EAAAqH,UAAAzF,IAAAA,EAAA,EACA,KAAA7B,WAAA,oCAEA,KAAAC,EAAAoH,SAAAvH,GACA,KAAAE,WAAA,wBAEA,IAAArG,SAAAkD,IAAAoD,EAAAoH,SAAAxK,GACA,KAAAmD,WAAA,0BAEA,IAAArG,SAAAyJ,IAAA,+BAAAxJ,KAAAwJ,EAAAA,EAAAgC,WAAAqC,eACA,KAAAzH,WAAA,6BAMA5H,MAAAgL,KAAAA,GAAA,aAAAA,EAAAA,EAAAzJ,OAMAvB,KAAA0H,KAAAA,EAMA1H,KAAAyJ,GAAAA,EAMAzJ,KAAAyE,OAAAA,GAAAlD,OAMAvB,KAAAgO,SAAA,aAAAhD,EAMAhL,KAAAsP,UAAAtP,KAAAgO,SAMAhO,KAAA+L,SAAA,aAAAf,EAMAhL,KAAAqD,KAAA,EAMArD,KAAAuP,QAAA,KAMAvP,KAAA6N,OAAA,KAMA7N,KAAAgM,YAAA,KAMAhM,KAAAqI,aAAA,KAMArI,KAAAwI,OAAAX,EAAA2H,MAAAjO,SAAAgM,EAAA/E,KAAAd,GAMA1H,KAAAkN,MAAA,UAAAxF,EAMA1H,KAAA6L,aAAA,KAMA7L,KAAAyP,eAAA,KAMAzP,KAAA0P,eAAA,KAOA1P,KAAA2P,EAAA,KA9JAzQ,EAAAJ,QAAAsQ,CAGA,IAAAhB,GAAA5P,EAAA,IAEAoR,EAAAxB,EAAA3J,OAAA2K,EAEAA,GAAAV,UAAA,OAEA,IAIA/G,GACAkI,EALA/D,EAAAtN,EAAA,IACA+O,EAAA/O,EAAA,IACAqJ,EAAArJ,EAAA,GA4JA0E,QAAA0F,eAAAgH,EAAA,UACA/G,IAAA,WAIA,MAFA,QAAA7I,KAAA2P,IACA3P,KAAA2P,EAAA3P,KAAA8P,UAAA,aAAA,GACA9P,KAAA2P,KAOAC,EAAAG,UAAA,SAAAvN,EAAAkH,EAAAsG,GAGA,MAFA,WAAAxN,IACAxC,KAAA2P,EAAA,MACAvB,EAAAlK,UAAA6L,UAAAhR,KAAAiB,KAAAwC,EAAAkH,EAAAsG,IAQAZ,EAAAT,SAAA,SAAAzF,GACA,MAAA0F,SAAA1F,GAAA3H,SAAA2H,EAAAO,KAUA2F,EAAAP,SAAA,SAAArM,EAAA0G,GACA,MAAA3H,UAAA2H,EAAAgB,SACA2F,IACAA,EAAArR,EAAA,KACAqR,EAAAhB,SAAArM,EAAA0G,IAEA,GAAAkG,GAAA5M,EAAA0G,EAAAO,GAAAP,EAAAxB,KAAAwB,EAAA8B,KAAA9B,EAAAzE,OAAAyE,EAAAiF,UAMAyB,EAAAd,OAAA,WACA,OACA9D,KAAA,aAAAhL,KAAAgL,MAAAhL,KAAAgL,MAAAzJ,OACAmG,KAAA1H,KAAA0H,KACA+B,GAAAzJ,KAAAyJ,GACAhF,OAAAzE,KAAAyE,OACA0J,QAAAnO,KAAAmO,UASAyB,EAAAjQ,QAAA,WACA,GAAAK,KAAAiQ,SACA,MAAAjQ,KAEA,IAAAuB,UAAAvB,KAAAgM,YAAAuB,EAAA2C,SAAAlQ,KAAA0H,OAIA,GAFAC,IACAA,EAAAnJ,EAAA,KACAwB,KAAA6L,aAAA7L,KAAAmQ,OAAAC,OAAApQ,KAAA0H,KAAAC,GACA3H,KAAAgM,YAAA,SACA,CAAA,KAAAhM,KAAA6L,aAAA7L,KAAAmQ,OAAAC,OAAApQ,KAAA0H,KAAAoE,IAIA,KAAAnN,OAAA,4BAAAqB,KAAA0H,KAHA1H,MAAAgM,YAAAhM,KAAA6L,aAAAhB,OAAA3H,OAAAD,KAAAjD,KAAA6L,aAAAhB,QAAA,IAcA,GAPA7K,KAAAmO,SAAA5M,SAAAvB,KAAAmO,QAAA,UACAnO,KAAAgM,YAAAhM,KAAAmO,QAAA,QACAnO,KAAA6L,uBAAAC,IAAA,gBAAA9L,MAAAgM,cACAhM,KAAAgM,YAAAhM,KAAA6L,aAAAhB,OAAA7K,KAAAgM,eAIAhM,KAAAwI,KACAxI,KAAAgM,YAAAnE,EAAA2H,KAAAa,WAAArQ,KAAAgM,YAAA,MAAAhM,KAAA0H,KAAAtH,OAAA,IACA8C,OAAAoN,QACApN,OAAAoN,OAAAtQ,KAAAgM,iBACA,IAAAhM,KAAAkN,OAAA,gBAAAlN,MAAAgM,YAAA,CACA,GAAA/E,EACAY,GAAA5H,OAAAuB,KAAAxB,KAAAgM,aACAnE,EAAA5H,OAAAkB,OAAAnB,KAAAgM,YAAA/E,EAAAY,EAAA0I,UAAA1I,EAAA5H,OAAAjB,OAAAgB,KAAAgM,cAAA,GAEAnE,EAAAX,KAAAI,MAAAtH,KAAAgM,YAAA/E,EAAAY,EAAA0I,UAAA1I,EAAAX,KAAAlI,OAAAgB,KAAAgM,cAAA,GACAhM,KAAAgM,YAAA/E,EAWA,MAPAjH,MAAAqD,IACArD,KAAAqI,gBACArI,KAAA+L,SACA/L,KAAAqI,gBAEArI,KAAAqI,aAAArI,KAAAgM,YAEAoC,EAAAlK,UAAAvE,QAAAZ,KAAAiB,mECnRA,YA0BA,SAAA6P,GAAArN,EAAAiH,EAAAS,EAAAxC,EAAAyG,GAIA,GAHAiB,EAAArQ,KAAAiB,KAAAwC,EAAAiH,EAAA/B,EAAAyG,IAGAtG,EAAAoH,SAAA/E,GACA,KAAAtC,WAAA,2BAMA5H,MAAAkK,QAAAA,EAMAlK,KAAAsN,gBAAA,KAGAtN,KAAAqD,KAAA,EA7CAnE,EAAAJ,QAAA+Q,CAGA,IAAAT,GAAA5Q,EAAA,IAEAoR,EAAAR,EAAAlL,UAEAsM,EAAApB,EAAA3K,OAAAoL,EAEAA,GAAAnB,UAAA,UAEA,IAAAnB,GAAA/O,EAAA,IACAqJ,EAAArJ,EAAA,GAyCAqR,GAAAlB,SAAA,SAAAzF,GACA,MAAAkG,GAAAT,SAAAzF,IAAA3H,SAAA2H,EAAAgB,SAUA2F,EAAAhB,SAAA,SAAArM,EAAA0G,GACA,MAAA,IAAA2G,GAAArN,EAAA0G,EAAAO,GAAAP,EAAAgB,QAAAhB,EAAAxB,KAAAwB,EAAAiF,UAMAqC,EAAA1B,OAAA,WACA,OACA5E,QAAAlK,KAAAkK,QACAxC,KAAA1H,KAAA0H,KACA+B,GAAAzJ,KAAAyJ,GACAhF,OAAAzE,KAAAyE,OACA0J,QAAAnO,KAAAmO,UAOAqC,EAAA7Q,QAAA,WACA,GAAAK,KAAAiQ,SACA,MAAAjQ,KAGA,IAAAuB,SAAAgM,EAAAQ,OAAA/N,KAAAkK,SACA,KAAAvL,OAAA,qBAAAqB,KAAAkK,QAEA,OAAA0F,GAAAjQ,QAAAZ,KAAAiB,iDC7FA,YAcA,SAAA8H,GAAA2I,GACA,GAAAA,EAEA,IAAA,GADAxN,GAAAC,OAAAD,KAAAwN,GACAhS,EAAA,EAAAA,EAAAwE,EAAAjE,SAAAP,EACAuB,KAAAiD,EAAAxE,IAAAgS,EAAAxN,EAAAxE,IAjBAS,EAAAJ,QAAAgJ,CAEA,IAAAD,GAAArJ,EAAA,GAuCAsJ,GAAApH,OAAA,SAAA6O,EAAAmB,GACA,MAAA1Q,MAAAgI,MAAAtH,OAAA6O,EAAAmB,IASA5I,EAAA6I,gBAAA,SAAApB,EAAAmB,GACA,MAAA1Q,MAAAgI,MAAA2I,gBAAApB,EAAAmB,IAUA5I,EAAA3G,OAAA,SAAAyP,GACA,MAAA5Q,MAAAgI,MAAA7G,OAAAyP,IAUA9I,EAAA+I,gBAAA,SAAAD,GACA,MAAA5Q,MAAAgI,MAAA6I,gBAAAD,IAUA9I,EAAAgJ,OAAA,SAAAvB,GACA,MAAAvP,MAAAgI,MAAA8I,OAAAvB,IAQAzH,EAAAsE,WAAA,SAAA2E,GACA,MAAA/Q,MAAAgI,MAAAoE,WAAA2E,IAUAjJ,EAAAkJ,KAAAlJ,EAAAsE,WAQAtE,EAAAyE,SAAA,SAAAgD,EAAApB,GACA,MAAAnO,MAAAgI,MAAAuE,SAAAgD,EAAApB,IAQArG,EAAA5D,UAAAqI,SAAA,SAAA4B,GACA,MAAAnO,MAAAgI,MAAAuE,SAAAvM,KAAAmO,IAOArG,EAAA5D,UAAA4K,OAAA,WACA,MAAA9O,MAAAgI,MAAAuE,SAAAvM,KAAA6H,EAAAoJ,8CCnIA,YA0BA,SAAAC,GAAA1O,EAAAkF,EAAAyJ,EAAAC,EAAAC,EAAAC,EAAAnD,GAYA,GAVAtG,EAAAU,SAAA8I,IACAlD,EAAAkD,EACAA,EAAAC,EAAA/P,QAEAsG,EAAAU,SAAA+I,KACAnD,EAAAmD,EACAA,EAAA/P,QAIAmG,IAAAG,EAAAoH,SAAAvH,GACA,KAAAE,WAAA,wBAEA,KAAAC,EAAAoH,SAAAkC,GACA,KAAAvJ,WAAA,+BAEA,KAAAC,EAAAoH,SAAAmC,GACA,KAAAxJ,WAAA,gCAEAwG,GAAArP,KAAAiB,KAAAwC,EAAA2L,GAMAnO,KAAA0H,KAAAA,GAAA,MAMA1H,KAAAmR,YAAAA,EAMAnR,KAAAqR,gBAAAA,GAAA9P,OAMAvB,KAAAoR,aAAAA,EAMApR,KAAAsR,iBAAAA,GAAA/P,OAMAvB,KAAAuR,oBAAA,KAMAvR,KAAAwR,qBAAA,KAxFAtS,EAAAJ,QAAAoS,CAGA,IAAA9C,GAAA5P,EAAA,IAEAiT,EAAArD,EAAA3J,OAAAyM,EAEAA,GAAAxC,UAAA,QAEA,IAAA/G,GAAAnJ,EAAA,IACAqJ,EAAArJ,EAAA,GAsFA0S,GAAAvC,SAAA,SAAAzF,GACA,MAAA0F,SAAA1F,GAAA3H,SAAA2H,EAAAiI,cAUAD,EAAArC,SAAA,SAAArM,EAAA0G,GACA,MAAA,IAAAgI,GAAA1O,EAAA0G,EAAAxB,KAAAwB,EAAAiI,YAAAjI,EAAAkI,aAAAlI,EAAAmI,cAAAnI,EAAAoI,eAAApI,EAAAiF,UAMAsD,EAAA3C,OAAA,WACA,OACApH,KAAA,QAAA1H,KAAA0H,MAAA1H,KAAA0H,MAAAnG,OACA4P,YAAAnR,KAAAmR,YACAE,cAAArR,KAAAqR,eAAA9P,OACA6P,aAAApR,KAAAoR,aACAE,eAAAtR,KAAAsR,gBAAA/P,OACA4M,QAAAnO,KAAAmO,UAOAsD,EAAA9R,QAAA,WACA,GAAAK,KAAAiQ,SACA,MAAAjQ,KAGA,MAAAA,KAAAuR,oBAAAvR,KAAAmQ,OAAAC,OAAApQ,KAAAmR,YAAAxJ,IACA,KAAAhJ,OAAA,8BAAAqB,KAAAmR,YAEA,MAAAnR,KAAAwR,qBAAAxR,KAAAmQ,OAAAC,OAAApQ,KAAAoR,aAAAzJ,IACA,KAAAhJ,OAAA,+BAAAqB,KAAAmR,YAEA,OAAA/C,GAAAlK,UAAAvE,QAAAZ,KAAAiB,iDC5IA,YAoBA,SAAA0R,KAGA/J,IACAA,EAAAnJ,EAAA,KAEAmT,IACAA,EAAAnT,EAAA,KAEAoT,GAAA9F,EAAAnE,EAAAgK,EAAAvC,EAAAyC,GACAC,EAAA,UAAAF,EAAAvO,IAAA,SAAAqB,GAAA,MAAAA,GAAAlC,OAAAE,KAAA,MAiDA,QAAAqP,GAAAC,GACA,GAAAA,GAAAA,EAAAhT,OAAA,CAGA,IAAA,GADAiT,MACAxT,EAAA,EAAAA,EAAAuT,EAAAhT,SAAAP,EACAwT,EAAAD,EAAAvT,GAAA+D,MAAAwP,EAAAvT,GAAAqQ,QACA,OAAAmD,IAgBA,QAAAJ,GAAArP,EAAA2L,GACAC,EAAArP,KAAAiB,KAAAwC,EAAA2L,GAMAnO,KAAAmJ,OAAA5H,OAOAvB,KAAAkS,EAAA,KAOAlS,KAAAmS,KAGA,QAAAC,GAAAC,GACAA,EAAAH,EAAA,IACA,KAAA,GAAAzT,GAAA,EAAAA,EAAA4T,EAAAF,EAAAnT,SAAAP,QACA4T,GAAAA,EAAAF,EAAA1T,GAEA,OADA4T,GAAAF,KACAE,EAjIAnT,EAAAJ,QAAA+S,CAGA,IAAAzD,GAAA5P,EAAA,IAEA8T,EAAAlE,EAAA3J,OAAAoN,EAEAA,GAAAnD,UAAA,WAEA,IAIA/G,GACAgK,EAEAC,EACAE,EARAhG,EAAAtN,EAAA,IACA4Q,EAAA5Q,EAAA,IACAqJ,EAAArJ,EAAA,GAqCAqT,GAAAlD,SAAA,SAAAzF,GACA,MAAA0F,SAAA1F,IACAA,EAAAK,SACAL,EAAA2B,QACAtJ,SAAA2H,EAAAO,KACAP,EAAAP,QACAO,EAAAqJ,SACAhR,SAAA2H,EAAAiI,cAaAU,EAAAhD,SAAA,SAAArM,EAAA0G,GACA,MAAA,IAAA2I,GAAArP,EAAA0G,EAAAiF,SAAAqE,QAAAtJ,EAAAC,SAkBA0I,EAAAE,YAAAA,EAmDA7O,OAAA0F,eAAA0J,EAAA,eACAzJ,IAAA,WACA,MAAA7I,MAAAkS,IAAAlS,KAAAkS,EAAArK,EAAA4K,QAAAzS,KAAAmJ,YAOAmJ,EAAAxD,OAAA,WACA,OACAX,QAAAnO,KAAAmO,QACAhF,OAAA4I,EAAA/R,KAAA0S,eASAJ,EAAAE,QAAA,SAAAG,GACA,GAAAC,GAAA5S,IAYA,OAXA2S,KACAf,GACAF,IACAxO,OAAAD,KAAA0P,GAAAzK,QAAA,SAAA2K,GAEA,IAAA,GADA1J,GAAAwJ,EAAAE,GACA/R,EAAA,EAAAA,EAAA8Q,EAAA5S,SAAA8B,EACA,GAAA8Q,EAAA9Q,GAAA6N,SAAAxF,GACA,MAAAyJ,GAAA7D,IAAA6C,EAAA9Q,GAAA+N,SAAAgE,EAAA1J,GACA,MAAAvB,WAAA,UAAAiL,EAAA,qBAAAf,MAGA9R,MAQAsS,EAAAzJ,IAAA,SAAArG,GACA,MAAAjB,UAAAvB,KAAAmJ,OACA,KACAnJ,KAAAmJ,OAAA3G,IAAA,MAUA8P,EAAAQ,QAAA,SAAAtQ,GACA,GAAAxC,KAAAmJ,QAAAnJ,KAAAmJ,OAAA3G,YAAAsJ,GACA,MAAA9L,MAAAmJ,OAAA3G,GAAAqI,MACA,MAAAlM,OAAA,iBAUA2T,EAAAvD,IAAA,SAAAgC,GAKA,GAJAa,GACAF,KAGAX,GAAAa,EAAA1D,QAAA6C,EAAAnM,aAAA,EACA,KAAAgD,WAAA,kBAAAkK,EAEA,IAAAf,YAAA3B,IAAA7N,SAAAwP,EAAAtM,OACA,KAAAmD,WAAA,4DAEA,IAAA5H,KAAAmJ,OAEA,CACA,GAAAnH,GAAAhC,KAAA6I,IAAAkI,EAAAvO,KACA,IAAAR,EAAA,CAEA,KAAAA,YAAA6P,IAAAd,YAAAc,KAAA7P,YAAA2F,IAAA3F,YAAA2P,GAYA,KAAAhT,OAAA,mBAAAoS,EAAAvO,KAAA,QAAAxC,KATA,KAAA,GADAmJ,GAAAnH,EAAA0Q,YACAjU,EAAA,EAAAA,EAAA0K,EAAAnK,SAAAP,EACAsS,EAAAhC,IAAA5F,EAAA1K,GACAuB,MAAAmP,OAAAnN,GACAhC,KAAAmJ,SACAnJ,KAAAmJ,WACA4H,EAAAgC,WAAA/Q,EAAAmM,SAAA,QAbAnO,MAAAmJ,SAsBA,OAFAnJ,MAAAmJ,OAAA4H,EAAAvO,MAAAuO,EACAA,EAAAiC,MAAAhT,MACAoS,EAAApS,OAUAsS,EAAAnD,OAAA,SAAA4B,GAGA,KAAAA,YAAA3C,IACA,KAAAxG,WAAA,oCAEA,IAAAmJ,EAAAZ,SAAAnQ,OAAAA,KAAAmJ,OACA,KAAAxK,OAAAoS,EAAA,uBAAA/Q,KAMA,cAJAA,MAAAmJ,OAAA4H,EAAAvO,MACAU,OAAAD,KAAAjD,KAAAmJ,QAAAnK,SACAgB,KAAAmJ,OAAA5H,QACAwP,EAAAkC,SAAAjT,MACAoS,EAAApS,OASAsS,EAAAY,OAAA,SAAApO,EAAAoE,GACArB,EAAAoH,SAAAnK,GACAA,EAAAA,EAAAqB,MAAA,KACA3F,MAAA4H,QAAAtD,KACAoE,EAAApE,EACAA,EAAAvD,OAEA,IAAA4R,GAAAnT,IACA,IAAA8E,EACA,KAAAA,EAAA9F,OAAA,GAAA,CACA,GAAAoU,GAAAtO,EAAAwB,OACA,IAAA6M,EAAAhK,QAAAgK,EAAAhK,OAAAiK,IAEA,GADAD,EAAAA,EAAAhK,OAAAiK,KACAD,YAAAtB,IACA,KAAAlT,OAAA,iDAEAwU,GAAApE,IAAAoE,EAAA,GAAAtB,GAAAuB,IAIA,MAFAlK,IACAiK,EAAAX,QAAAtJ,GACAiK,GAMAb,EAAA3S,QAAA,WAEAgI,IACAA,EAAAnJ,EAAA,KAEAmT,IACAhK,EAAAnJ,EAAA,IAMA,KAAA,GADA2K,GAAAnJ,KAAA0S,YACAjU,EAAA,EAAAA,EAAA0K,EAAAnK,SAAAP,EACA,GAAA,SAAA+C,KAAA2H,EAAA1K,GAAA+D,MAAA,CACA,GAAA2G,EAAA1K,YAAAkJ,IAAAwB,EAAA1K,YAAAkT,GACA3R,KAAAmJ,EAAA1K,GAAA+D,MAAA2G,EAAA1K,OACA,CAAA,KAAA0K,EAAA1K,YAAAqN,IAGA,QAFA9L,MAAAmJ,EAAA1K,GAAA+D,MAAA2G,EAAA1K,GAAAoM,OAGA7K,KAAAmS,EAAA3S,KAAA2J,EAAA1K,GAAA+D,MAGA,MAAA4L,GAAAlK,UAAAvE,QAAAZ,KAAAiB,OAOAsS,EAAAe,WAAA,WAEA,IADA,GAAAlK,GAAAnJ,KAAA0S,YAAAjU,EAAA,EACAA,EAAA0K,EAAAnK,QACAmK,EAAA1K,YAAAoT,GACA1I,EAAA1K,KAAA4U,aAEAlK,EAAA1K,KAAAkB,SACA,OAAA2S,GAAA3S,QAAAZ,KAAAiB,OAUAsS,EAAAlC,OAAA,SAAAtL,EAAAwO,EAAAC,GAKA,GAJA,iBAAAD,KACAC,EAAAD,EACAA,EAAA/R,QAEAsG,EAAAoH,SAAAnK,IAAAA,EAAA9F,OACA8F,EAAAA,EAAAqB,MAAA,SACA,KAAArB,EAAA9F,OACA,MAAA,KAEA,IAAA,KAAA8F,EAAA,GACA,MAAA9E,MAAAwT,KAAApD,OAAAtL,EAAA8B,MAAA,GAAA0M,EAEA,IAAAG,GAAAzT,KAAA6I,IAAA/D,EAAA,GACA,OAAA2O,IAAA,IAAA3O,EAAA9F,UAAAsU,GAAAG,YAAAH,KAAAG,YAAA5B,KAAA4B,EAAAA,EAAArD,OAAAtL,EAAA8B,MAAA,GAAA0M,GAAA,IACAG,EAEA,OAAAzT,KAAAmQ,QAAAoD,EACA,KACAvT,KAAAmQ,OAAAC,OAAAtL,EAAAwO,IAqBAhB,EAAAoB,WAAA,SAAA5O,GAGA6C,IACAA,EAAAnJ,EAAA,IAEA,IAAAiV,GAAAzT,KAAAoQ,OAAAtL,EAAA6C,EACA,KAAA8L,EACA,KAAA9U,OAAA,eACA,OAAA8U,IAUAnB,EAAAqB,cAAA,SAAA7O,GAGA6M,IACAA,EAAAnT,EAAA,IAEA,IAAAiV,GAAAzT,KAAAoQ,OAAAtL,EAAA6M,EACA,KAAA8B,EACA,KAAA9U,OAAA,kBACA,OAAA8U,IAUAnB,EAAAsB,WAAA,SAAA9O,GACA,GAAA2O,GAAAzT,KAAAoQ,OAAAtL,EAAAgH,EACA,KAAA2H,EACA,KAAA9U,OAAA,eACA,OAAA8U,GAAA5I,oEC5aA,YAkBA,SAAAuD,GAAA5L,EAAA2L,GAGA,IAAAtG,EAAAoH,SAAAzM,GACA,KAAAoF,WAAA,wBAEA,IAAAuG,IAAAtG,EAAAU,SAAA4F,GACA,KAAAvG,WAAA,4BAMA5H,MAAAmO,QAAAA,EAMAnO,KAAAwC,KAAAA,EAMAxC,KAAAmQ,OAAA,KAMAnQ,KAAAiQ,UAAA,EAMAjQ,KAAAgP,QAAA,KAtDA9P,EAAAJ,QAAAsP,CAEA,IAAAvG,GAAArJ,EAAA,GAEA4P,GAAAM,UAAA,mBACAN,EAAA3J,OAAAoD,EAAApD,MAEA,IAAAoP,GAmDAC,EAAA1F,EAAAlK,SAEAhB,QAAA6Q,iBAAAD,GAQAN,MACA3K,IAAA,WAEA,IADA,GAAAsK,GAAAnT,KACA,OAAAmT,EAAAhD,QACAgD,EAAAA,EAAAhD,MACA,OAAAgD,KAUAa,UACAnL,IAAA,WAGA,IAFA,GAAA/D,IAAA9E,KAAAwC,MACA2Q,EAAAnT,KAAAmQ,OACAgD,GACArO,EAAAmP,QAAAd,EAAA3Q,MACA2Q,EAAAA,EAAAhD,MAEA,OAAArL,GAAApC,KAAA,SAUAoR,EAAAhF,OAAA,WACA,KAAAnQ,UAQAmV,EAAAd,MAAA,SAAA7C,GACAnQ,KAAAmQ,QAAAnQ,KAAAmQ,SAAAA,GACAnQ,KAAAmQ,OAAAhB,OAAAnP,MACAA,KAAAmQ,OAAAA,EACAnQ,KAAAiQ,UAAA,CACA,IAAAuD,GAAArD,EAAAqD,IACAK,KACAA,EAAArV,EAAA,KACAgV,YAAAK,IACAL,EAAAU,EAAAlU,OAQA8T,EAAAb,SAAA,SAAA9C,GACA,GAAAqD,GAAArD,EAAAqD,IACAK,KACAA,EAAArV,EAAA,KACAgV,YAAAK,IACAL,EAAAW,EAAAnU,MACAA,KAAAmQ,OAAA,KACAnQ,KAAAiQ,UAAA,GAOA6D,EAAAnU,QAAA,WACA,MAAAK,MAAAiQ,SACAjQ,MACA6T,IACAA,EAAArV,EAAA,KACAwB,KAAAwT,eAAAK,KACA7T,KAAAiQ,UAAA,GACAjQ,OAQA8T,EAAAhE,UAAA,SAAAtN,GACA,GAAAxC,KAAAmO,QACA,MAAAnO,MAAAmO,QAAA3L,IAWAsR,EAAA/D,UAAA,SAAAvN,EAAAkH,EAAAsG,GAGA,MAFAA,IAAAhQ,KAAAmO,SAAA5M,SAAAvB,KAAAmO,QAAA3L,MACAxC,KAAAmO,UAAAnO,KAAAmO,aAAA3L,GAAAkH,GACA1J,MASA8T,EAAAf,WAAA,SAAA5E,EAAA6B,GAKA,MAJA7B,IACAjL,OAAAD,KAAAkL,GAAAjG,QAAA,SAAA1F,GACAxC,KAAA+P,UAAAvN,EAAA2L,EAAA3L,GAAAwN,IACAhQ,MACAA,MAOA8T,EAAA9G,SAAA,WACA,GAAA0B,GAAA1O,KAAA4E,YAAA8J,UACAsF,EAAAhU,KAAAgU,QACA,OAAAA,GAAAhV,OACA0P,EAAA,IAAAsF,EACAtF,uCCvMA,YAqBA,SAAA0F,GAAA5R,EAAA6R,EAAAlG,GAQA,GAPA3N,MAAA4H,QAAAiM,KACAlG,EAAAkG,EACAA,EAAA9S,QAEA6M,EAAArP,KAAAiB,KAAAwC,EAAA2L,GAGAkG,IAAA7T,MAAA4H,QAAAiM,GACA,KAAAzM,WAAA,8BAMA5H,MAAA2I,MAAA0L,MAOArU,KAAAsU,KAoDA,QAAAC,GAAA5L,GACAA,EAAAwH,QACAxH,EAAA2L,EAAApM,QAAA,SAAAC,GACAA,EAAAgI,QACAxH,EAAAwH,OAAApB,IAAA5G,KAlGAjJ,EAAAJ,QAAAsV,CAGA,IAAAhG,GAAA5P,EAAA,IAEAgW,EAAApG,EAAA3J,OAAA2P,EAEAA,GAAA1F,UAAA,OAEA,IAAAU,GAAA5Q,EAAA,GA0CA0E,QAAA0F,eAAA4L,EAAA,eACA3L,IAAA,WACA,MAAA7I,MAAAsU,KASAF,EAAAzF,SAAA,SAAAzF,GACA,MAAA0F,SAAA1F,EAAAP,QAUAyL,EAAAvF,SAAA,SAAArM,EAAA0G,GACA,MAAA,IAAAkL,GAAA5R,EAAA0G,EAAAP,MAAAO,EAAAiF,UAMAqG,EAAA1F,OAAA,WACA,OACAnG,MAAA3I,KAAA2I,MACAwF,QAAAnO,KAAAmO,UAyBAqG,EAAAzF,IAAA,SAAA5G,GAGA,KAAAA,YAAAiH,IACA,KAAAxH,WAAA,wBAQA,OANAO,GAAAgI,QACAhI,EAAAgI,OAAAhB,OAAAhH,GACAnI,KAAA2I,MAAAnJ,KAAA2I,EAAA3F,MACAxC,KAAAsU,EAAA9U,KAAA2I,GACAA,EAAA0F,OAAA7N,KACAuU,EAAAvU,MACAA,MAQAwU,EAAArF,OAAA,SAAAhH,GAGA,KAAAA,YAAAiH,IACA,KAAAxH,WAAA,wBAEA,IAAA6M,GAAAzU,KAAAsU,EAAApG,QAAA/F,EAEA,IAAAsM,EAAA,EACA,KAAA9V,OAAAwJ,EAAA,uBAAAnI,KASA,OAPAA,MAAAsU,EAAA/P,OAAAkQ,EAAA,GACAA,EAAAzU,KAAA2I,MAAAuF,QAAA/F,EAAA3F,MACAiS,GAAA,GACAzU,KAAA2I,MAAApE,OAAAkQ,EAAA,GACAtM,EAAAgI,QACAhI,EAAAgI,OAAAhB,OAAAhH,GACAA,EAAA0F,OAAA,KACA7N,MAMAwU,EAAAxB,MAAA,SAAA7C,GACA/B,EAAAlK,UAAA8O,MAAAjU,KAAAiB,KAAAmQ,EACA,IAAA7B,GAAAtO,IAEAA,MAAA2I,MAAAT,QAAA,SAAAwM,GACA,GAAAvM,GAAAgI,EAAAtH,IAAA6L,EACAvM,KAAAA,EAAA0F,SACA1F,EAAA0F,OAAAS,EACAA,EAAAgG,EAAA9U,KAAA2I,MAIAoM,EAAAvU,OAMAwU,EAAAvB,SAAA,SAAA9C,GACAnQ,KAAAsU,EAAApM,QAAA,SAAAC,GACAA,EAAAgI,QACAhI,EAAAgI,OAAAhB,OAAAhH,KAEAiG,EAAAlK,UAAA+O,SAAAlU,KAAAiB,KAAAmQ,wCChLA,YAkBA,SAAAwE,GAAAC,GACA,MAAA,2BAAApT,KAAAoT,GAGA,QAAAC,GAAAD,GACA,MAAA,mCAAApT,KAAAoT,GAGA,QAAAE,GAAAF,GACA,MAAA,iCAAApT,KAAAoT,GAGA,QAAAG,GAAAH,GACA,MAAA,QAAAA,EAAA,KAAAA,EAAAvF,cAGA,QAAA2F,GAAAzS,GACA,MAAAA,GAAA0S,UAAA,EAAA,GACA1S,EAAA0S,UAAA,GACAxS,QAAA,uBAAA,SAAAe,EAAAC,GAAA,MAAAA,GAAAyR,gBA+BA,QAAAC,GAAAtS,EAAA2Q,EAAArF,GA8BA,QAAAiH,GAAAR,EAAApS,GACA,GAAA6S,GAAAF,EAAAE,QAEA,OADAF,GAAAE,SAAA,KACA1W,MAAA,YAAA6D,GAAA,SAAA,KAAAoS,EAAA,OAAAS,EAAAA,EAAA,KAAA,IAAA,QAAAC,EAAA3T,OAAA,KAGA,QAAA4T,KACA,GACAX,GADA/J,IAEA,GAAA,CACA,GAAA,OAAA+J,EAAAY,MAAA,MAAAZ,EACA,KAAAQ,GAAAR,EACA/J,GAAArL,KAAAgW,KACAC,EAAAb,GACAA,EAAAc,UACA,MAAAd,GAAA,MAAAA,EACA,OAAA/J,GAAAnI,KAAA,IAGA,QAAAiT,GAAAC,GACA,GAAAhB,GAAAY,GACA,QAAAT,EAAAH,IACA,IAAA,IACA,IAAA,IAEA,MADApV,GAAAoV,GACAW,GACA,KAAA,OACA,OAAA,CACA,KAAA,QACA,OAAA,EAEA,IACA,MAAAM,GAAAjB,GACA,MAAA5W,GACA,GAAA4X,GAAAf,EAAAD,GACA,MAAAA,EACA,MAAAQ,GAAAR,EAAA,UAIA,QAAAkB,KACA,GAAAlV,GAAAmV,EAAAP,KACA3U,EAAAD,CAIA,OAHA6U,GAAA,MAAA,KACA5U,EAAAkV,EAAAP,MACAC,EAAA,MACA7U,EAAAC,GAGA,QAAAgV,GAAAjB,GACA,GAAAoB,GAAA,CACA,OAAApB,EAAAxU,OAAA,KACA4V,GAAA,EACApB,EAAAA,EAAAK,UAAA,GAEA,IAAAgB,GAAAlB,EAAAH,EACA,QAAAqB,GACA,IAAA,MAAA,MAAAD,IAAAE,EAAAA,EACA,KAAA,MAAA,MAAAC,IACA,KAAA,IAAA,MAAA,GAEA,GAAA,gBAAA3U,KAAAoT,GACA,MAAAoB,GAAAxH,SAAAoG,EAAA,GACA,IAAA,kBAAApT,KAAAyU,GACA,MAAAD,GAAAxH,SAAAoG,EAAA,GACA,IAAA,YAAApT,KAAAoT,GACA,MAAAoB,GAAAxH,SAAAoG,EAAA,EACA,IAAA,gDAAApT,KAAAyU,GACA,MAAAD,GAAAI,WAAAxB,EACA,MAAAQ,GAAAR,EAAA,UAGA,QAAAmB,GAAAnB,EAAAyB,GACA,GAAAJ,GAAAlB,EAAAH,EACA,QAAAqB,GACA,IAAA,MAAA,MAAA,UACA,KAAA,IAAA,MAAA,GAEA,GAAA,MAAArB,EAAAxU,OAAA,KAAAiW,EACA,KAAAjB,GAAAR,EAAA,KACA,IAAA,kBAAApT,KAAAoT,GACA,MAAApG,UAAAoG,EAAA,GACA,IAAA,oBAAApT,KAAAyU,GACA,MAAAzH,UAAAoG,EAAA,GACA,IAAA,cAAApT,KAAAoT,GACA,MAAApG,UAAAoG,EAAA,EACA,MAAAQ,GAAAR,EAAA,MAGA,QAAA0B,KACA,GAAA/U,SAAAgV,EACA,KAAAnB,GAAA,UAEA,IADAmB,EAAAf,KACAX,EAAA0B,GACA,KAAAnB,GAAAmB,EAAA,OACApD,IAAAA,GAAAD,OAAAqD,GACAd,EAAA,KAGA,QAAAe,KACA,GACAC,GADA7B,EAAAc,GAEA,QAAAd,GACA,IAAA,OACA6B,EAAAC,IAAAA,MACAlB,GACA,MACA,KAAA,SACAA,GAEA,SACAiB,EAAAE,IAAAA,MAGA/B,EAAAW,IACAE,EAAA,KACAgB,EAAAjX,KAAAoV,GAGA,QAAAgC,KAIA,GAHAnB,EAAA,KACAoB,EAAA9B,EAAAQ,KACAuB,GAAA,WAAAD,GACAC,IAAA,WAAAD,EACA,KAAAzB,GAAAyB,EAAA,SACApB,GAAA,KAGA,QAAAsB,GAAA5G,EAAAyE,GACA,OAAAA,GAEA,IAAA,SAGA,MAFAoC,GAAA7G,EAAAyE,GACAa,EAAA,MACA,CAEA,KAAA,UAEA,MADAwB,GAAA9G,EAAAyE,IACA,CAEA,KAAA,OAEA,MADAsC,GAAA/G,EAAAyE,IACA,CAEA,KAAA,UAEA,MADAuC,GAAAhH,EAAAyE,IACA,CAEA,KAAA,SAEA,MADAwC,GAAAjH,EAAAyE,IACA,EAEA,OAAA,EAGA,QAAAqC,GAAA9G,EAAAyE,GACA,GAAApS,GAAAgT,GACA,KAAAb,EAAAnS,GACA,KAAA4S,GAAA5S,EAAA,YACA,IAAAkF,GAAA,GAAAC,GAAAnF,EAEA,IADAkF,EAAAsH,QAAAqI,IACA5B,EAAA,KAAA,GAAA,CACA,KAAA,OAAAb,EAAAY,MAAA,CACA,GAAAS,GAAAlB,EAAAH,EACA,KAAAmC,EAAArP,EAAAkN,GAEA,OAAAqB,GAEA,IAAA,MACAqB,EAAA5P,EAAAuO,EACA,MAEA,KAAA,WACA,IAAA,WACA,IAAA,WACAsB,EAAA7P,EAAAuO,EACA,MAEA,KAAA,QACAuB,EAAA9P,EAAAuO,EACA,MAEA,KAAA,cACAvO,EAAA+P,aAAA/P,EAAA+P,gBAAAjY,KAAAsW,EAAApO,EAAAuO,GACA,MAEA,KAAA,YACAvO,EAAAgQ,WAAAhQ,EAAAgQ,cAAAlY,KAAAsW,EAAApO,EAAAuO,GACA,MAEA,SACA,IAAAa,KAAAjC,EAAAD,GACA,KAAAQ,GAAAR,EACApV,GAAAoV,GACA2C,EAAA7P,EAAA,aAIA+N,EAAA,KAAA,OAEAA,GAAA,IACAtF,GAAApB,IAAArH,GAGA,QAAA6P,GAAApH,EAAAnF,EAAAvG,GACA,GAAAiD,GAAA8N,GACA,IAAA,UAAA9N,EAEA,WADAiQ,GAAAxH,EAAAnF,EAGA,KAAA6J,EAAAnN,GACA,KAAA0N,GAAA1N,EAAA,OACA,IAAAlF,GAAAgT,GACA,KAAAb,EAAAnS,GACA,KAAA4S,GAAA5S,EAAA,OACAA,GAAAoV,GAAApV,GACAiT,EAAA,IACA,IAAAtN,GAAA,GAAAiH,GAAA5M,EAAAuT,EAAAP,KAAA9N,EAAAsD,EAAAvG,GACAoT,EAAAvC,EAAA3T,MACAwG,GAAA6G,QAAAqI,IACAS,EAAA3P,GACAA,EAAA6G,UACA7G,EAAA6G,QAAAqI,EAAAQ,IAGA1P,EAAA4D,UAAAxK,SAAAgM,EAAAG,OAAAhG,KAAAoP,IACA3O,EAAA4H,UAAA,UAAA,GAAA,GACAI,EAAApB,IAAA5G,GAGA,QAAAwP,GAAAxH,EAAAnF,GACA,GAAAxI,GAAAgT,GACA,KAAAb,EAAAnS,GACA,KAAA4S,GAAA5S,EAAA,OACA,IAAAkS,GAAA7M,EAAAkQ,QAAAvV,EACAA,KAAAkS,IACAlS,EAAAqF,EAAAmQ,QAAAxV,IACAiT,EAAA,IACA,IAAAhM,GAAAsM,EAAAP,KACA9N,EAAA,GAAAC,GAAAnF;AACAkF,EAAA0F,OAAA,EACA1F,EAAAsH,QAAAqI,GACA,IAAAlP,GAAA,GAAAiH,GAAAsF,EAAAjL,EAAAjH,EAAAwI,EAEA,KADAyK,EAAA,KACA,OAAAb,GAAAY,MACA,OAAAZ,GAAAG,EAAAH,KACA,IAAA,SACAoC,EAAAtP,EAAAkN,IACAa,EAAA,IACA,MACA,KAAA,WACA,IAAA,WACA,IAAA,WACA8B,EAAA7P,EAAAkN,GACA,MAGA,SACA,KAAAQ,GAAAR,IAGAa,EAAA,KAAA,GACAtF,EAAApB,IAAArH,GAAAqH,IAAA5G,GAGA,QAAAmP,GAAAnH,GACAsF,EAAA,IACA,IAAAvL,GAAAsL,GAGA,IAAAjU,SAAAgM,EAAAQ,OAAA7D,GACA,KAAAkL,GAAAlL,EAAA,OACAuL,GAAA,IACA,IAAAwC,GAAAzC,GAEA,KAAAX,EAAAoD,GACA,KAAA7C,GAAA6C,EAAA,OACAxC,GAAA,IACA,IAAAjT,GAAAgT,GAEA,KAAAb,EAAAnS,GACA,KAAA4S,GAAA5S,EAAA,OAEAA,GAAAoV,GAAApV,GACAiT,EAAA,IACA,IAAAtN,GAAA,GAAA0H,GAAArN,EAAAuT,EAAAP,KAAAtL,EAAA+N,GACAJ,EAAAvC,EAAA3T,MACAwG,GAAA6G,QAAAqI,IACAS,EAAA3P,GACAA,EAAA6G,UACA7G,EAAA6G,QAAAqI,EAAAQ,IACA1H,EAAApB,IAAA5G,GAGA,QAAAqP,GAAArH,EAAAyE,GACA,GAAApS,GAAAgT,GAGA,KAAAb,EAAAnS,GACA,KAAA4S,GAAA5S,EAAA,OAEAA,GAAAoV,GAAApV,EACA,IAAAmG,GAAA,GAAAyL,GAAA5R,GACAqV,EAAAvC,EAAA3T,MAEA,IADAgH,EAAAqG,QAAAqI,IACA5B,EAAA,KAAA,GAAA,CACA,KAAA,OAAAb,EAAAY,MACA,WAAAZ,GACAoC,EAAArO,EAAAiM,GACAa,EAAA,OAEAjW,EAAAoV,GACA2C,EAAA5O,EAAA,YAGA8M,GAAA,KAAA,OAEAA,GAAA,KACA9M,EAAAqG,UACArG,EAAAqG,QAAAqI,EAAAQ,GAEA1H,GAAApB,IAAApG,GAGA,QAAAuO,GAAA/G,EAAAyE,GACA,GAAApS,GAAAgT,GAGA,KAAAb,EAAAnS,GACA,KAAA4S,GAAA5S,EAAA,OAEA,IAAA0V,GAAA,GAAApM,GAAAtJ,EAEA,IADA0V,EAAAlJ,QAAAqI,IACA5B,EAAA,KAAA,GAAA,CACA,KAAA,OAAAb,EAAAY,MACA,WAAAT,EAAAH,IACAoC,EAAAkB,EAAAtD,GACAa,EAAA,MAEA0C,EAAAD,EAAAtD,EAEAa,GAAA,KAAA,OAEAA,GAAA,IACAtF,GAAApB,IAAAmJ,GAGA,QAAAC,GAAAhI,EAAAyE,GAGA,IAAAD,EAAAC,GACA,KAAAQ,GAAAR,EAAA,OAEA,IAAApS,GAAAoS,CACAa,GAAA,IACA,IAAA/L,GAAAqM,EAAAP,KAAA,GACAqC,EAAAvC,EAAA3T,MACAwO,GAAApB,IAAAvM,EAAAkH,EAAA2N,KACAS,MACA3H,EAAA9B,SAAA7L,KACA2N,EAAA9B,SAAA7L,GAAA6U,EAAAQ,IAGA,QAAAb,GAAA7G,EAAAyE,GACA,GAAAwD,GAAA3C,EAAA,KAAA,GACAjT,EAAAgT,GAGA,KAAAX,EAAArS,GACA,KAAA4S,GAAA5S,EAAA,OAEA4V,KACA3C,EAAA,KACAjT,EAAA,IAAAA,EAAA,IACAoS,EAAAc,IACAZ,EAAAF,KACApS,GAAAoS,EACAY,MAGAC,EAAA,KACA4C,EAAAlI,EAAA3N,GAGA,QAAA6V,GAAAlI,EAAA3N,GACA,GAAAiT,EAAA,KAAA,GACA,KAAA,OAAAb,GAAAY,MAAA,CAGA,IAAAb,EAAAC,IACA,KAAAQ,GAAAR,GAAA,OAEAa,GAAA,KAAA,GACA1F,EAAAI,EAAA3N,EAAA,IAAAoS,GAAAe,GAAA,IAEA0C,EAAAlI,EAAA3N,EAAA,IAAAoS,QAGA7E,GAAAI,EAAA3N,EAAAmT,GAAA,IAIA,QAAA5F,GAAAI,EAAA3N,EAAAkH,GACAyG,EAAAJ,UACAI,EAAAJ,UAAAvN,EAAAkH,GAEAyG,EAAA3N,GAAAkH,EAGA,QAAAoO,GAAA3H,GACA,GAAAsF,EAAA,KAAA,GAAA,CACA,EACAuB,GAAA7G,EAAA,gBACAsF,EAAA,KAAA,GACAA,GAAA,KAGA,MADAA,GAAA,KACAtF,EAGA,QAAAgH,GAAAhH,EAAAyE,GAIA,GAHAA,EAAAY,KAGAb,EAAAC,GACA,KAAAQ,GAAAR,EAAA,eAEA,IAAApS,GAAAoS,EACA0D,EAAA,GAAA3G,GAAAnP,EAEA,IADA8V,EAAAtJ,QAAAqI,IACA5B,EAAA,KAAA,GAAA,CACA,KAAA,OAAAb,EAAAY,MAAA,CACA,GAAAS,GAAAlB,EAAAH,EACA,QAAAqB,GACA,IAAA,SACAe,EAAAsB,EAAArC,GACAR,EAAA,IACA,MACA,KAAA,MACA8C,EAAAD,EAAArC,EACA,MAGA,SACA,KAAAb,GAAAR,IAGAa,EAAA,KAAA,OAEAA,GAAA,IACAtF,GAAApB,IAAAuJ,GAGA,QAAAC,GAAApI,EAAAyE,GACA,GAAAlN,GAAAkN,EACApS,EAAAgT,GAGA,KAAAb,EAAAnS,GACA,KAAA4S,GAAA5S,EAAA,OACA,IAAA2O,GAAAE,EACAD,EAAAE,CACAmE,GAAA,IACA,IAAA+C,EAIA,IAHA/C,EAAA+C,EAAA,UAAA,KACAnH,GAAA,IAEAwD,EAAAD,EAAAY,KACA,KAAAJ,GAAAR,EAMA,IALAzD,EAAAyD,EACAa,EAAA,KAAAA,EAAA,WAAAA,EAAA,KACAA,EAAA+C,GAAA,KACAlH,GAAA,IAEAuD,EAAAD,EAAAY,KACA,KAAAJ,GAAAR,EAEAxD,GAAAwD,EACAa,EAAA,IACA,IAAAgD,GAAA,GAAAvH,GAAA1O,EAAAkF,EAAAyJ,EAAAC,EAAAC,EAAAC,GACAuG,EAAAvC,EAAA3T,MAEA,IADA8W,EAAAzJ,QAAAqI,IACA5B,EAAA,KAAA,GAAA,CACA,KAAA,OAAAb,EAAAY,MAAA,CACA,GAAAS,GAAAlB,EAAAH,EACA,QAAAqB,GACA,IAAA,SACAe,EAAAyB,EAAAxC,GACAR,EAAA,IACA,MAGA,SACA,KAAAL,GAAAR,IAGAa,EAAA,KAAA,OAEAA,GAAA,KACAgD,EAAAzJ,UACAyJ,EAAAzJ,QAAAqI,EAAAQ,GAEA1H,GAAApB,IAAA0J,GAGA,QAAArB,GAAAjH,EAAAyE,GACA,GAAA8D,GAAAlD,GAGA,KAAAX,EAAA6D,GACA,KAAAtD,GAAAsD,EAAA,YAEA,IAAAjD,EAAA,KAAA,GAAA,CACA,KAAA,OAAAb,EAAAY,MAAA,CACA,GAAAS,GAAAlB,EAAAH,EACA,QAAAqB,GACA,IAAA,WACA,IAAA,WACA,IAAA,WACAsB,EAAApH,EAAA8F,EAAAyC,EACA,MACA,SAEA,IAAA5B,KAAAjC,EAAAD,GACA,KAAAQ,GAAAR,EACApV,GAAAoV,GACA2C,EAAApH,EAAA,WAAAuI,IAIAjD,EAAA,KAAA,OAEAA,GAAA,KAhjBAjC,YAAAK,KACA1F,EAAAqF,EACAA,EAAA,GAAAK,IAEA1F,IACAA,EAAAgH,EAAAjF,SAEA,IAQAqG,GACAI,EACAD,EACAG,EAXAvB,EAAAqD,EAAA9V,GACA2S,EAAAF,EAAAE,KACAhW,EAAA8V,EAAA9V,KACAkW,EAAAJ,EAAAI,KACAD,EAAAH,EAAAG,KACA4B,EAAA/B,EAAA+B,KAEAuB,IAAA,EAKA9B,IAAA,CAEAtD,KACAA,EAAA,GAAAK,GA8hBA,KA5hBA,GA2hBAe,IA3hBAzB,GAAAK,EAEAoE,GAAAzJ,EAAA0K,SAAA,SAAArW,GAAA,MAAAA,IAAAwS,EA0hBA,QAAAJ,GAAAY,MAAA,CACA,GAAAS,IAAAlB,EAAAH,GACA,QAAAqB,IAEA,IAAA,UAEA,IAAA2C,GACA,KAAAxD,GAAAR,GACA0B,IACA,MAEA,KAAA,SAEA,IAAAsC,GACA,KAAAxD,GAAAR,GACA4B,IACA,MAEA,KAAA,SAEA,IAAAoC,GACA,KAAAxD,GAAAR,GACAgC,IACA,MAEA,KAAA,SAEA,IAAAgC,GACA,KAAAxD,GAAAR,GACAoC,GAAA7D,GAAAyB,IACAa,EAAA,IACA,MAEA,SACA,GAAAsB,EAAA5D,GAAAyB,IAAA,CACAgE,IAAA,CACA,UAGA,KAAAxD,GAAAR,KAKA,MADAO,GAAAE,SAAA,MAEAyD,QAAAvC,EACAI,QAAAA,EACAD,YAAAA,EACAG,OAAAA,EACArD,KAAAA,GA1qBAtU,EAAAJ,QAAAqW,EAEAA,EAAAE,SAAA,KACAF,EAAAjF,UAAA2I,UAAA,EAEA,IAAAF,GAAAna,EAAA,IACAqV,EAAArV,EAAA,IACAmJ,EAAAnJ,EAAA,IACA4Q,EAAA5Q,EAAA,IACAqR,EAAArR,EAAA,IACA4V,EAAA5V,EAAA,IACAsN,EAAAtN,EAAA,IACAmT,EAAAnT,EAAA,IACA0S,EAAA1S,EAAA,IACA+O,EAAA/O,EAAA,IACAqJ,EAAArJ,EAAA,8FChBA,YAWA,SAAAua,GAAAnI,EAAAoI,GACA,MAAAC,YAAA,uBAAArI,EAAAsI,IAAA,OAAAF,GAAA,GAAA,MAAApI,EAAAzJ,KASA,QAAAgS,GAAAxY,GAMAX,KAAAiH,IAAAtG,EAMAX,KAAAkZ,IAAA,EAMAlZ,KAAAmH,IAAAxG,EAAA3B,OAuEA,QAAAoa,KAEA,GAAAC,GAAA,GAAAC,GAAA,EAAA,GACA7a,EAAA,CACA,IAAAuB,KAAAmH,IAAAnH,KAAAkZ,IAAA,EAAA,CACA,IAAAza,EAAA,EAAAA,EAAA,IAAAA,EAGA,GADA4a,EAAAE,IAAAF,EAAAE,IAAA,IAAAvZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,EAAAza,KAAA,EACAuB,KAAAiH,IAAAjH,KAAAkZ,OAAA,IACA,MAAAG,EAKA,IAFAA,EAAAE,IAAAF,EAAAE,IAAA,IAAAvZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,MAAA,EACAG,EAAAG,IAAAH,EAAAG,IAAA,IAAAxZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,KAAA,EACAlZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,IACA,MAAAG,OACA,CACA,IAAA5a,EAAA,EAAAA,EAAA,IAAAA,EAAA,CAEA,GAAAuB,KAAAkZ,KAAAlZ,KAAAmH,IACA,KAAA4R,GAAA/Y,KAGA,IADAqZ,EAAAE,IAAAF,EAAAE,IAAA,IAAAvZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,EAAAza,KAAA,EACAuB,KAAAiH,IAAAjH,KAAAkZ,OAAA,IACA,MAAAG,GAGA,GAAArZ,KAAAkZ,KAAAlZ,KAAAmH,IACA,KAAA4R,GAAA/Y,KAIA,IAFAqZ,EAAAE,IAAAF,EAAAE,IAAA,IAAAvZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,MAAA,EACAG,EAAAG,IAAAH,EAAAG,IAAA,IAAAxZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,KAAA,EACAlZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,IACA,MAAAG,GAEA,GAAArZ,KAAAmH,IAAAnH,KAAAkZ,IAAA,GACA,IAAAza,EAAA,EAAAA,EAAA,IAAAA,EAGA,GADA4a,EAAAG,IAAAH,EAAAG,IAAA,IAAAxZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,EAAAza,EAAA,KAAA,EACAuB,KAAAiH,IAAAjH,KAAAkZ,OAAA,IACA,MAAAG,OAGA,KAAA5a,EAAA,EAAAA,EAAA,IAAAA,EAAA,CAEA,GAAAuB,KAAAkZ,KAAAlZ,KAAAmH,IACA,KAAA4R,GAAA/Y,KAGA,IADAqZ,EAAAG,IAAAH,EAAAG,IAAA,IAAAxZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,EAAAza,EAAA,KAAA,EACAuB,KAAAiH,IAAAjH,KAAAkZ,OAAA,IACA,MAAAG,GAGA,KAAA1a,OAAA,2BAGA,QAAA8a,KACA,MAAAL,GAAAra,KAAAiB,MAAA0Z,SAIA,QAAAC,KACA,MAAAP,GAAAra,KAAAiB,MAAAiN,WAGA,QAAA2M,KACA,MAAAR,GAAAra,KAAAiB,MAAA0Z,QAAA,GAIA,QAAAG,KACA,MAAAT,GAAAra,KAAAiB,MAAAiN,UAAA,GAGA,QAAA6M,KACA,MAAAV,GAAAra,KAAAiB,MAAA+Z,WAAAL,SAIA,QAAAM,KACA,MAAAZ,GAAAra,KAAAiB,MAAA+Z,WAAA9M,WAkCA,QAAAgN,GAAAhT,EAAApG,GACA,OAAAoG,EAAApG,EAAA,GACAoG,EAAApG,EAAA,IAAA,EACAoG,EAAApG,EAAA,IAAA,GACAoG,EAAApG,EAAA,IAAA,MAAA,EA2BA,QAAAqZ,KAGA,GAAAla,KAAAkZ,IAAA,EAAAlZ,KAAAmH,IACA,KAAA4R,GAAA/Y,KAAA,EAEA,OAAA,IAAAsZ,GAAAW,EAAAja,KAAAiH,IAAAjH,KAAAkZ,KAAA,GAAAe,EAAAja,KAAAiH,IAAAjH,KAAAkZ,KAAA,IAGA,QAAAiB,KACA,MAAAD,GAAAnb,KAAAiB,MAAA0Z,QAAA,GAIA,QAAAU,KACA,MAAAF,GAAAnb,KAAAiB,MAAAiN,UAAA,GAGA,QAAAoN,KACA,MAAAH,GAAAnb,KAAAiB,MAAA+Z,WAAAL,SAIA,QAAAY,KACA,MAAAJ,GAAAnb,KAAAiB,MAAA+Z,WAAA9M,WAyNA,QAAAsN,KAEA1S,EAAA2H,MACAgL,EAAAC,MAAAhB,EACAe,EAAAE,OAAAd,EACAY,EAAAG,OAAAb,EACAU,EAAAI,QAAAT,EACAK,EAAAK,SAAAR,IAEAG,EAAAC,MAAAd,EACAa,EAAAE,OAAAb,EACAW,EAAAG,OAAAX,EACAQ,EAAAI,QAAAR,EACAI,EAAAK,SAAAP,GA5fApb,EAAAJ,QAAAqa,CAEA,IAEA2B,GAFAjT,EAAArJ,EAAA,IAIA8a,EAAAzR,EAAAyR,SACApS,EAAAW,EAAAX,IAwCAiS,GAAAxU,OAAAkD,EAAAkT,OACA,SAAApa,GAGA,MAFAma,KACAA,EAAAtc,EAAA,MACA2a,EAAAxU,OAAA,SAAAhE,GACA,MAAAkH,GAAAkT,OAAAC,SAAAra,GACA,GAAAma,GAAAna,GACA,GAAAwY,GAAAxY,KACAA,IAGA,SAAAA,GACA,MAAA,IAAAwY,GAAAxY,GAIA,IAAA6Z,GAAArB,EAAAjV,SAEAsW,GAAAS,EAAApT,EAAArH,MAAA0D,UAAAgX,UAAArT,EAAArH,MAAA0D,UAAA0C,MAOA4T,EAAAW,OAAA,WACA,GAAAzR,GAAA,UACA,OAAA,YACA,GAAAA,GAAA,IAAA1J,KAAAiH,IAAAjH,KAAAkZ,QAAA,EAAAlZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,IAAA,MAAAxP,EACA,IAAAA,GAAAA,GAAA,IAAA1J,KAAAiH,IAAAjH,KAAAkZ,OAAA,KAAA,EAAAlZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,IAAA,MAAAxP,EACA,IAAAA,GAAAA,GAAA,IAAA1J,KAAAiH,IAAAjH,KAAAkZ,OAAA,MAAA,EAAAlZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,IAAA,MAAAxP,EACA,IAAAA,GAAAA,GAAA,IAAA1J,KAAAiH,IAAAjH,KAAAkZ,OAAA,MAAA,EAAAlZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,IAAA,MAAAxP,EACA,IAAAA,GAAAA,GAAA,GAAA1J,KAAAiH,IAAAjH,KAAAkZ,OAAA,MAAA,EAAAlZ,KAAAiH,IAAAjH,KAAAkZ,OAAA,IAAA,MAAAxP,EAGA,KAAA1J,KAAAkZ,KAAA,GAAAlZ,KAAAmH,IAEA,KADAnH,MAAAkZ,IAAAlZ,KAAAmH,IACA4R,EAAA/Y,KAAA,GAEA,OAAA0J,OAQA8Q,EAAAY,MAAA,WACA,MAAA,GAAApb,KAAAmb,UAOAX,EAAAa,OAAA,WACA,GAAA3R,GAAA1J,KAAAmb,QACA,OAAAzR,KAAA,IAAA,EAAAA,GAAA,GAmHA8Q,EAAAc,KAAA,WACA,MAAA,KAAAtb,KAAAmb,UAcAX,EAAAe,QAAA,WAGA,GAAAvb,KAAAkZ,IAAA,EAAAlZ,KAAAmH,IACA,KAAA4R,GAAA/Y,KAAA,EAEA,OAAAia,GAAAja,KAAAiH,IAAAjH,KAAAkZ,KAAA,IAOAsB,EAAAgB,SAAA,WACA,GAAA9R,GAAA1J,KAAAub,SACA,OAAA7R,KAAA,IAAA,EAAAA,GAgDA,IAAA+R,GAAA,mBAAAC,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAE,EAAA,GAAAC,YAAAF,EAAAhb,OAEA,OADAgb,GAAA,IAAA,EACAC,EAAA,GACA,SAAA3U,EAAAiS,GAKA,MAJA0C,GAAA,GAAA3U,EAAAiS,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACAyC,EAAA,IAGA,SAAA1U,EAAAiS,GAKA,MAJA0C,GAAA,GAAA3U,EAAAiS,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACAyC,EAAA,OAIA,SAAA1U,EAAAiS,GACA,GAAA4C,GAAA7B,EAAAhT,EAAAiS,EAAA,GACAlD,EAAA,GAAA8F,GAAA,IAAA,EACAC,EAAAD,IAAA,GAAA,IACAE,EAAA,QAAAF,CACA,OAAA,OAAAC,EACAC,EACA7F,IACAH,GAAAE,EAAAA,GACA,IAAA6F,EACA,sBAAA/F,EAAAgG,EACAhG,EAAA3V,KAAA4b,IAAA,EAAAF,EAAA,MAAAC,EAAA,SAQAxB,GAAA0B,MAAA,WAGA,GAAAlc,KAAAkZ,IAAA,EAAAlZ,KAAAmH,IACA,KAAA4R,GAAA/Y,KAAA,EAEA,IAAA0J,GAAA+R,EAAAzb,KAAAiH,IAAAjH,KAAAkZ,IAEA,OADAlZ,MAAAkZ,KAAA,EACAxP,EAGA,IAAAyS,GAAA,mBAAAC,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAR,EAAA,GAAAC,YAAAQ,EAAA1b,OAEA,OADA0b,GAAA,IAAA,EACAT,EAAA,GACA,SAAA3U,EAAAiS,GASA,MARA0C,GAAA,GAAA3U,EAAAiS,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACAmD,EAAA,IAGA,SAAApV,EAAAiS,GASA,MARA0C,GAAA,GAAA3U,EAAAiS,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACA0C,EAAA,GAAA3U,EAAAiS,EAAA,GACAmD,EAAA,OAIA,SAAApV,EAAAiS,GACA,GAAAK,GAAAU,EAAAhT,EAAAiS,EAAA,GACAM,EAAAS,EAAAhT,EAAAiS,EAAA,GACAlD,EAAA,GAAAwD,GAAA,IAAA,EACAuC,EAAAvC,IAAA,GAAA,KACAwC,EAAA,YAAA,QAAAxC,GAAAD,CACA,OAAA,QAAAwC,EACAC,EACA7F,IACAH,GAAAE,EAAAA,GACA,IAAA6F,EACA,OAAA/F,EAAAgG,EACAhG,EAAA3V,KAAA4b,IAAA,EAAAF,EAAA,OAAAC,EAAA,kBAQAxB,GAAA8B,OAAA,WAGA,GAAAtc,KAAAkZ,IAAA,EAAAlZ,KAAAmH,IACA,KAAA4R,GAAA/Y,KAAA,EAEA,IAAA0J,GAAAyS,EAAAnc,KAAAiH,IAAAjH,KAAAkZ,IAEA,OADAlZ,MAAAkZ,KAAA,EACAxP,GAOA8Q,EAAAtN,MAAA,WACA,GAAAlO,GAAAgB,KAAAmb,SACAva,EAAAZ,KAAAkZ,IACArY,EAAAb,KAAAkZ,IAAAla,CAGA,IAAA6B,EAAAb,KAAAmH,IACA,KAAA4R,GAAA/Y,KAAAhB,EAGA,OADAgB,MAAAkZ,KAAAla,EACA4B,IAAAC,EACA,GAAAb,MAAAiH,IAAArC,YAAA,GACA5E,KAAAib,EAAAlc,KAAAiB,KAAAiH,IAAArG,EAAAC,IAOA2Z,EAAAta,OAAA,WACA,GAAAgN,GAAAlN,KAAAkN,OACA,OAAAhG,GAAAE,KAAA8F,EAAA,EAAAA,EAAAlO,SAQAwb,EAAA/E,KAAA,SAAAzW,GACA,GAAA,gBAAAA,GAAA,CAEA,GAAAgB,KAAAkZ,IAAAla,EAAAgB,KAAAmH,IACA,KAAA4R,GAAA/Y,KAAAhB,EACAgB,MAAAkZ,KAAAla,MAEA,GAEA,IAAAgB,KAAAkZ,KAAAlZ,KAAAmH,IACA,KAAA4R,GAAA/Y,YACA,IAAAA,KAAAiH,IAAAjH,KAAAkZ,OAEA,OAAAlZ,OAQAwa,EAAA+B,SAAA,SAAAzO,GACA,OAAAA,GACA,IAAA,GACA9N,KAAAyV,MACA,MACA,KAAA,GACAzV,KAAAyV,KAAA,EACA,MACA,KAAA,GACAzV,KAAAyV,KAAAzV,KAAAmb,SACA,MACA,KAAA,GACA,OAAA,CACA,GAAA,KAAArN,EAAA,EAAA9N,KAAAmb,UACA,KACAnb,MAAAuc,SAAAzO,GAEA,KACA,KAAA,GACA9N,KAAAyV,KAAA,EACA,MAGA,SACA,KAAA9W,OAAA,qBAAAmP,EAAA,cAAA9N,KAAAkZ,KAEA,MAAAlZ,OAoBAmZ,EAAAqD,EAAAjC,EAEAA,wCCngBA,YAkBA,SAAAO,GAAAna,GACAwY,EAAApa,KAAAiB,KAAAW,GAlBAzB,EAAAJ,QAAAgc,CAGA,IAAA3B,GAAA3a,EAAA,IAEAie,EAAA3B,EAAA5W,UAAAhB,OAAAyB,OAAAwU,EAAAjV,UACAuY,GAAA7X,YAAAkW,CAEA,IAAAjT,GAAArJ,EAAA,GAaAqJ,GAAAkT,SACA0B,EAAAxB,EAAApT,EAAAkT,OAAA7W,UAAA0C,OAKA6V,EAAAvc,OAAA,WACA,GAAAiH,GAAAnH,KAAAmb,QACA,OAAAnb,MAAAiH,IAAAyV,UAAA1c,KAAAkZ,IAAAlZ,KAAAkZ,IAAA7Y,KAAAsc,IAAA3c,KAAAkZ,IAAA/R,EAAAnH,KAAAmH,2CC9BA,YAuBA,SAAA0M,GAAA1F,GACA0D,EAAA9S,KAAAiB,KAAA,GAAAmO,GAMAnO,KAAA4c,YAMA5c,KAAA6c,SA2BA,QAAAC,MAmMA,QAAAC,GAAA5U,GACA,GAAA6U,GAAA7U,EAAAgI,OAAAC,OAAAjI,EAAA1D,OACA,IAAAuY,EAAA,CACA,GAAAC,GAAA,GAAA7N,GAAAjH,EAAA6L,SAAA7L,EAAAsB,GAAAtB,EAAAT,KAAAS,EAAA6C,MAAAzJ,QAAA4G,EAAAgG,QAIA,OAHA8O,GAAAvN,eAAAvH,EACAA,EAAAsH,eAAAwN,EACAD,EAAAjO,IAAAkO,IACA,EAEA,OAAA,EA1QA/d,EAAAJ,QAAA+U,CAGA,IAAAhC,GAAArT,EAAA,IAEA0e,EAAArL,EAAApN,OAAAoP,EAEAA,GAAAnF,UAAA,MAEA,IAGAyG,GACAlM,EAJAmG,EAAA5Q,EAAA,IACAqJ,EAAArJ,EAAA,GAkCAqV,GAAAhF,SAAA,SAAA3F,EAAAsK,GAGA,MAFAA,KACAA,EAAA,GAAAK,IACAL,EAAAT,WAAA7J,EAAAiF,SAAAqE,QAAAtJ,EAAAC,SAWA+T,EAAAC,YAAAtV,EAAA/C,KAAAnF,OAMA,IAAAyd,GAAA,WACA,IACAjI,EAAA3W,EAAA,IACAyK,EAAAzK,EAAA,IACA,MAAAR,IACAof,EAAA,KAUAF,GAAAG,KAAA,QAAAA,GAAAhI,EAAAlH,EAAApJ,GAcA,QAAAuY,GAAAzd,EAAA2T,GACA,GAAAzO,EAAA,CAEA,GAAAwY,GAAAxY,CACAA,GAAA,KACAwY,EAAA1d,EAAA2T,IAIA,QAAAgK,GAAAnI,EAAAxS,GACA,IAGA,GAFAgF,EAAAoH,SAAApM,IAAA,MAAAA,EAAAzC,OAAA,KACAyC,EAAAe,KAAAuR,MAAAtS,IACAgF,EAAAoH,SAAApM,GAEA,CACAsS,EAAAE,SAAAA,CACA,IAAAoI,GAAAtI,EAAAtS,EAAAyL,EAAAH,EACAsP,GAAA9G,SACA8G,EAAA9G,QAAAzO,QAAA,SAAA1F,GACAqC,EAAAyJ,EAAA6O,YAAA9H,EAAA7S,MAEAib,EAAA/G,aACA+G,EAAA/G,YAAAxO,QAAA,SAAA1F,GACAqC,EAAAyJ,EAAA6O,YAAA9H,EAAA7S,IAAA,SAVA8L,GAAAyE,WAAAlQ,EAAAsL,SAAAqE,QAAA3P,EAAAsG,QAaA,MAAAtJ,GACA,GAAA6d,EACA,KAAA7d,EAEA,YADAyd,GAAAzd,GAGA6d,GAAAC,GACAL,EAAA,KAAAhP,GAIA,QAAAzJ,GAAAwQ,EAAAuI,GAGA,GAAAC,GAAAxI,EAAAyI,YAAA,mBACA,IAAAD,GAAA,EAAA,CACA,GAAAE,GAAA1I,EAAAJ,UAAA4I,EACAE,KAAA9U,KACAoM,EAAA0I,GAIA,KAAAzP,EAAAuO,MAAA3O,QAAAmH,IAAA,GAAA,CAKA,GAHA/G,EAAAuO,MAAArd,KAAA6V,GAGAA,IAAApM,GAUA,YATAyU,EACAF,EAAAnI,EAAApM,EAAAoM,OAEAsI,EACAK,WAAA,aACAL,EACAH,EAAAnI,EAAApM,EAAAoM,OAOA,IAAAqI,EAAA,CACA,GAAA7a,EACA,KACAA,EAAAgF,EAAA7C,GAAAiZ,aAAA5I,GAAArI,SAAA,QACA,MAAAnN,GAGA,YAFA+d,GACAN,EAAAzd,IAGA2d,EAAAnI,EAAAxS,SAEA8a,EACA9V,EAAAhD,MAAAwQ,EAAA,SAAAxV,EAAAgD,GAEA,KADA8a,EACA5Y,EAEA,MAAAlF,QACA+d,GACAN,EAAAzd,QAGA2d,GAAAnI,EAAAxS,MAtGAua,GACAA,IACA,kBAAAjP,KACApJ,EAAAoJ,EACAA,EAAA5M,OAEA,IAAA+M,GAAAtO,IACA,KAAA+E,EACA,MAAA8C,GAAA1I,UAAAke,EAAA/O,EAAA+G,EAEA,IAAAqI,GAAA3Y,IAAA+X,EAgGAa,EAAA,CAUA,OANA9V,GAAAoH,SAAAoG,KACAA,GAAAA,IACAA,EAAAnN,QAAA,SAAAmN,GACAxQ,EAAAyJ,EAAA6O,YAAA,GAAA9H,MAGAqI,EACApP,OACAqP,GACAL,EAAA,KAAAhP,KAkCA4O,EAAAgB,SAAA,SAAA7I,EAAAlH,GACA,IAAAtG,EAAAsW,OACA,KAAAxf,OAAA,gBACA,OAAAqB,MAAAqd,KAAAhI,EAAAlH,EAAA2O,IAMAI,EAAA7J,WAAA,WACA,GAAArT,KAAA4c,SAAA5d,OACA,KAAAL,OAAA,4BAAAqB,KAAA4c,SAAAvZ,IAAA,SAAA8E,GACA,MAAA,WAAAA,EAAA1D,OAAA,QAAA0D,EAAAgI,OAAA6D,WACAtR,KAAA,MACA,OAAAmP,GAAA3N,UAAAmP,WAAAtU,KAAAiB,OA4BAkd,EAAAhJ,EAAA,SAAAnD,GAEA,GAAAqN,GAAApe,KAAA4c,SAAAhW,OACA5G,MAAA4c,WAEA,KADA,GAAAne,GAAA,EACAA,EAAA2f,EAAApf,QACA+d,EAAAqB,EAAA3f,IACA2f,EAAA7Z,OAAA9F,EAAA,KAEAA,CAGA,IAFAuB,KAAA4c,SAAAwB,EAEArN,YAAA3B,IAAA7N,SAAAwP,EAAAtM,SAAAsM,EAAAtB,iBAAAsN,EAAAhM,IAAA/Q,KAAA4c,SAAA1O,QAAA6C,GAAA,EACA/Q,KAAA4c,SAAApd,KAAAuR,OACA,IAAAA,YAAAc,GAAA,CACA,GAAA1I,GAAA4H,EAAA2B,WACA,KAAAjU,EAAA,EAAAA,EAAA0K,EAAAnK,SAAAP,EACAuB,KAAAkU,EAAA/K,EAAA1K,MAUAye,EAAA/I,EAAA,SAAApD,GACA,GAAAA,YAAA3B,GAAA,CAEA,GAAA7N,SAAAwP,EAAAtM,SAAAsM,EAAAtB,eAAA,CACA,GAAAgF,GAAAzU,KAAA4c,SAAA1O,QAAA6C,EACA0D,IAAA,GACAzU,KAAA4c,SAAArY,OAAAkQ,EAAA,GAGA1D,EAAAtB,iBACAsB,EAAAtB,eAAAU,OAAAhB,OAAA4B,EAAAtB,gBACAsB,EAAAtB,eAAA,UAEA,IAAAsB,YAAAc,GAEA,IAAA,GADA1I,GAAA4H,EAAA2B,YACAjU,EAAA,EAAAA,EAAA0K,EAAAnK,SAAAP,EACAuB,KAAAmU,EAAAhL,EAAA1K,2DC/TA,YAMA,IAAA4f,GAAAvf,CAEAuf,GAAA1M,QAAAnT,EAAA,kCCRA,YAaA,SAAAmT,GAAA2M,GACAva,EAAAhF,KAAAiB,MAMAA,KAAAue,KAAAD,EAnBApf,EAAAJ,QAAA6S,CAEA,IAAA5N,GAAAvF,EAAA,IAAAuF,cAoBA4N,EAAAzN,UAAAhB,OAAAyB,OAAAZ,EAAAG,YAAAU,YAAA+M,EAOAA,EAAAzN,UAAArD,IAAA,SAAA2d,GAOA,MANAxe,MAAAue,OACAC,GACAxe,KAAAue,KAAA,KAAA,KAAA,MACAve,KAAAue,KAAA,KACAve,KAAAwE,KAAA,OAAAH,OAEArE,oCCrCA,YAyBA,SAAA2R,GAAAnP,EAAA2L,GACA0D,EAAA9S,KAAAiB,KAAAwC,EAAA2L,GAMAnO,KAAAuS,WAOAvS,KAAAye,EAAA,KAwCA,QAAArM,GAAAkG,GAEA,MADAA,GAAAmG,EAAA,KACAnG,EAhFApZ,EAAAJ,QAAA6S,CAGA,IAAAE,GAAArT,EAAA,IAEA8T,EAAAT,EAAA3N,UAEAwa,EAAA7M,EAAApN,OAAAkN,EAEAA,GAAAjD,UAAA,SAEA,IAAAwC,GAAA1S,EAAA,IACAqJ,EAAArJ,EAAA,IACA6f,EAAA7f,EAAA,GAiCAmT,GAAAhD,SAAA,SAAAzF,GACA,MAAA0F,SAAA1F,GAAAA,EAAAqJ,UAUAZ,EAAA9C,SAAA,SAAArM,EAAA0G,GACA,GAAAoP,GAAA,GAAA3G,GAAAnP,EAAA0G,EAAAiF,QAKA,OAJAjF,GAAAqJ,SACArP,OAAAD,KAAAiG,EAAAqJ,SAAArK,QAAA,SAAAyW,GACArG,EAAAvJ,IAAAmC,EAAArC,SAAA8P,EAAAzV,EAAAqJ,QAAAoM,OAEArG,GASApV,OAAA0F,eAAA8V,EAAA,gBACA7V,IAAA,WACA,MAAA7I,MAAAye,IAAAze,KAAAye,EAAA5W,EAAA4K,QAAAzS,KAAAuS,aAYAmM,EAAA5P,OAAA,WACA,GAAA8P,GAAAtM,EAAAxD,OAAA/P,KAAAiB,KACA,QACAmO,QAAAyQ,GAAAA,EAAAzQ,SAAA5M,OACAgR,QAAAV,EAAAE,YAAA/R,KAAA6e,kBACA1V,OAAAyV,GAAAA,EAAAzV,QAAA5H,SAOAmd,EAAA7V,IAAA,SAAArG,GACA,MAAA8P,GAAAzJ,IAAA9J,KAAAiB,KAAAwC,IAAAxC,KAAAuS,QAAA/P,IAAA,MAMAkc,EAAArL,WAAA,WAEA,IAAA,GADAd,GAAAvS,KAAA6e,aACApgB,EAAA,EAAAA,EAAA8T,EAAAvT,SAAAP,EACA8T,EAAA9T,GAAAkB,SACA,OAAA2S,GAAA3S,QAAAZ,KAAAiB,OAMA0e,EAAA3P,IAAA,SAAAgC,GAEA,GAAA/Q,KAAA6I,IAAAkI,EAAAvO,MACA,KAAA7D,OAAA,mBAAAoS,EAAAvO,KAAA,QAAAxC,KACA,OAAA+Q,aAAAG,IACAlR,KAAAuS,QAAAxB,EAAAvO,MAAAuO,EACAA,EAAAZ,OAAAnQ,KACAoS,EAAApS,OAEAsS,EAAAvD,IAAAhQ,KAAAiB,KAAA+Q,IAMA2N,EAAAvP,OAAA,SAAA4B,GACA,GAAAA,YAAAG,GAAA,CAGA,GAAAlR,KAAAuS,QAAAxB,EAAAvO,QAAAuO,EACA,KAAApS,OAAAoS,EAAA,uBAAA/Q,KAIA,cAFAA,MAAAuS,QAAAxB,EAAAvO,MACAuO,EAAAZ,OAAA,KACAiC,EAAApS,MAEA,MAAAsS,GAAAnD,OAAApQ,KAAAiB,KAAA+Q,IA6BA2N,EAAA/Z,OAAA,SAAA2Z,EAAAQ,EAAAC,GACA,GAAAC,GAAA,GAAAX,GAAA1M,QAAA2M,EAyCA,OAxCAte,MAAA6e,aAAA3W,QAAA,SAAAuQ,GACAuG,EAAAnX,EAAAkQ,QAAAU,EAAAjW,OAAA,SAAAyc,EAAAla,GACA,GAAAia,EAAAT,KAAA,CAIA,IAAAU,EACA,KAAArX,WAAA,2BAEA6Q,GAAA9Y,SACA,IAAAuf,EACA,KACAA,GAAAJ,EAAArG,EAAAlH,oBAAAZ,gBAAAsO,GAAAxG,EAAAlH,oBAAA7Q,OAAAue,IAAA3B,SACA,MAAAzd,GAEA,YADA,kBAAAsf,cAAAA,aAAAnB,YAAA,WAAAjZ,EAAAlF,KAKAye,EAAA7F,EAAAyG,EAAA,SAAArf,EAAAuf,GACA,GAAAvf,EAEA,MADAmf,GAAAxa,KAAA,QAAA3E,EAAA4Y,GACA1T,EAAAA,EAAAlF,GAAA0B,MAEA,IAAA,OAAA6d,EAEA,WADAJ,GAAAne,KAAA,EAGA,IAAAwe,EACA,KACAA,EAAAN,EAAAtG,EAAAjH,qBAAAX,gBAAAuO,GAAA3G,EAAAjH,qBAAArQ,OAAAie,GACA,MAAAE,GAEA,MADAN,GAAAxa,KAAA,QAAA8a,EAAA7G,GACA1T,EAAAA,EAAA,QAAAua,GAAA/d,OAGA,MADAyd,GAAAxa,KAAA,OAAA6a,EAAA5G,GACA1T,EAAAA,EAAA,KAAAsa,GAAA9d,aAIAyd,mDCrNA,YAOA,SAAAO,GAAAhd,GACA,MAAAA,GAAAE,QAAA,UAAA,SAAAe,EAAAC,GACA,OAAAA,GACA,IAAA,KACA,IAAA,GACA,MAAAA,EACA,KAAA,IACA,MAAA,IACA,SACA,MAAAA,MAqBA,QAAAkV,GAAA9V,GAsBA,QAAAuS,GAAAoK,GACA,MAAA7gB,OAAA,WAAA6gB,EAAA,UAAA7d,EAAA,KAQA,QAAA4T,KACA,GAAAkK,GAAA,MAAAC,EAAAC,EAAAC,CACAH,GAAAI,UAAAze,EAAA,CACA,IAAA0e,GAAAL,EAAAM,KAAAld,EACA,KAAAid,EACA,KAAA1K,GAAA,SAIA,OAHAhU,GAAAqe,EAAAI,UACArgB,EAAAkgB,GACAA,EAAA,KACAH,EAAAO,EAAA,IASA,QAAA1f,GAAA8Y,GACA,MAAArW,GAAAzC,OAAA8Y,GAUA,QAAA8G,GAAApf,EAAAC,GACAof,EAAApd,EAAAzC,OAAAQ,KACAsf,EAAAve,EACAwe,EAAAtd,EACAoS,UAAArU,EAAAC,GACAsF,MAAA,OACA9C,IAAA,SAAA1B,GACA,MAAAA,GAAAc,QAAA,aAAA,IAAA2d,SAEA1d,KAAA,MACA0d,OAQA,QAAA5K,KACA,GAAA6K,EAAArhB,OAAA,EACA,MAAAqhB,GAAA/Z,OACA,IAAAoZ,EACA,MAAAnK,IACA,IAAA+K,GACAte,EACAue,EACA3f,EACA4f,CACA,GAAA,CACA,GAAApf,IAAApC,EACA,MAAA,KAEA,KADAshB,GAAA,EACA,KAAA9e,KAAA+e,EAAAngB,EAAAgB,KAGA,GAFA,OAAAmf,KACA5e,IACAP,IAAApC,EACA,MAAA,KAEA,IAAA,MAAAoB,EAAAgB,GAAA,CACA,KAAAA,IAAApC,EACA,KAAAoW,GAAA,UACA,IAAA,MAAAhV,EAAAgB,GAAA,CAEA,IADAof,EAAA,MAAApgB,EAAAQ,EAAAQ,EAAA,GACA,OAAAhB,IAAAgB,IACA,GAAAA,IAAApC,EACA,MAAA,QACAoC,EACAof,GACAR,EAAApf,EAAAQ,EAAA,KACAO,EACA2e,GAAA,MACA,CAAA,GAAA,OAAAC,EAAAngB,EAAAgB,IAeA,MAAA,GAdAof,GAAA,MAAApgB,EAAAQ,EAAAQ,EAAA,EACA,GAAA,CAGA,GAFA,OAAAmf,KACA5e,IACAP,IAAApC,EACA,MAAA,KACAgD,GAAAue,EACAA,EAAAngB,EAAAgB,SACA,MAAAY,GAAA,MAAAue,KACAnf,EACAof,GACAR,EAAApf,EAAAQ,EAAA,GACAkf,GAAA,UAIAA,EAEA,IAAAlf,IAAApC,EACA,MAAA,KACA,IAAA6B,GAAAO,CACAqf,GAAAZ,UAAA,CACA,IAAAa,GAAAD,EAAAjf,KAAApB,EAAAS,KACA,KAAA6f,EACA,KAAA7f,EAAA7B,IAAAyhB,EAAAjf,KAAApB,EAAAS,OACAA,CACA,IAAA+T,GAAA/R,EAAAoS,UAAA7T,EAAAA,EAAAP,EAGA,OAFA,MAAA+T,GAAA,MAAAA,IACA8K,EAAA9K,GACAA,EASA,QAAApV,GAAAoV,GACAyL,EAAA7gB,KAAAoV,GAQA,QAAAc,KACA,IAAA2K,EAAArhB,OAAA,CACA,GAAA4V,GAAAY,GACA,IAAA,OAAAZ,EACA,MAAA,KACApV,GAAAoV,GAEA,MAAAyL,GAAA,GAWA,QAAA5K,GAAAkL,EAAArR,GACA,GAAAsR,GAAAlL,IACAmL,EAAAD,IAAAD,CACA,IAAAE,EAEA,MADArL,MACA,CAEA,KAAAlG,EACA,KAAA8F,GAAA,UAAAwL,EAAA,OAAAD,EAAA,aACA,QAAA,EAxLA9d,EAAAA,EAAAmK,UAEA,IAAA5L,GAAA,EACApC,EAAA6D,EAAA7D,OACA2C,EAAA,EACAse,EAAA,KACAE,EAAA,KACAD,EAAA,EAEAG,KAEAX,EAAA,IAgLA,QACAlK,KAAAA,EACAE,KAAAA,EACAlW,KAAAA,EACAiW,KAAAA,EACA9T,KAAA,WACA,MAAAA,IAEA0V,KAAA,SAAAQ,GACA,GAAAiJ,EAYA,OAXAvf,UAAAsW,EACAiJ,EAAAZ,IAAAve,EAAA,GAAAwe,GAAA,MAEAA,GACAzK,IACAoL,EAAAZ,IAAArI,GAAA,MAAAoI,GAAAE,GAAA,MAEAW,IACAb,EAAAE,EAAA,KACAD,EAAA,GAEAY,IAtPA5hB,EAAAJ,QAAA6Z,CAEA,IAAA8H,GAAA,uBACAb,EAAA,kCACAD,EAAA,2DCLA,YAmFA,SAAAhY,GAAAnF,EAAA2L,GACA0D,EAAA9S,KAAAiB,KAAAwC,EAAA2L,GAMAnO,KAAAuJ,UAMAvJ,KAAAoK,OAAA7I,OAMAvB,KAAAyX,WAAAlW,OAMAvB,KAAA0X,SAAAnW,OAMAvB,KAAAoN,MAAA7L,OAOAvB,KAAA+gB,EAAA,KAOA/gB,KAAAsU,EAAA,KAOAtU,KAAAghB,EAAA,KAOAhhB,KAAAihB,EAAA,KA0EA,QAAA7O,GAAA1K,GAKA,MAJAA,GAAAqZ,EAAArZ,EAAA4M,EAAA5M,EAAAsZ,EAAAtZ,EAAAuZ,EAAA,WACAvZ,GAAAhH,aACAgH,GAAAvG,aACAuG,GAAAoJ,OACApJ,EA5NAxI,EAAAJ,QAAA6I,CAGA,IAAAkK,GAAArT,EAAA,IAEA8T,EAAAT,EAAA3N,UAEAgd,EAAArP,EAAApN,OAAAkD,EAEAA,GAAA+G,UAAA,MAEA,IAAA5C,GAAAtN,EAAA,IACA4V,EAAA5V,EAAA,IACA4Q,EAAA5Q,EAAA,IACAmT,EAAAnT,EAAA,IACAiJ,EAAAjJ,EAAA,IACAsJ,EAAAtJ,EAAA,IACA2a,EAAA3a,EAAA,IACA2iB,EAAA3iB,EAAA,IACAqJ,EAAArJ,EAAA,IACAoP,EAAApP,EAAA,IACA2O,EAAA3O,EAAA,IACA4iB,EAAA5iB,EAAA,IACA2N,EAAA3N,EAAA,IAEAoT,GAAA9F,EAAAnE,EAAAyH,EAAAuC,EAOAhK,GAAAgH,SAAA,SAAAzF,GACA,MAAA0F,SAAA1F,GAAAA,EAAAK,SASA5B,EAAAkH,SAAA,SAAArM,EAAA0G,GACA,GAAAxB,GAAA,GAAAC,GAAAnF,EAAA0G,EAAAiF,QA4BA,OA3BAzG,GAAA+P,WAAAvO,EAAAuO,WACA/P,EAAAgQ,SAAAxO,EAAAwO,SACAxO,EAAAK,QACArG,OAAAD,KAAAiG,EAAAK,QAAArB,QAAA,SAAAwM,GACAhN,EAAAqH,IAAAK,EAAAP,SAAA6F,EAAAxL,EAAAK,OAAAmL,OAEAxL,EAAAkB,QACAlH,OAAAD,KAAAiG,EAAAkB,QAAAlC,QAAA,SAAAmZ,GACA3Z,EAAAqH,IAAAqF,EAAAvF,SAAAwS,EAAAnY,EAAAkB,OAAAiX,OAEAnY,EAAAC,QACAjG,OAAAD,KAAAiG,EAAAC,QAAAjB,QAAA,SAAA2K,GAEA,IAAA,GADA1J,GAAAD,EAAAC,OAAA0J,GACApU,EAAA,EAAAA,EAAAmT,EAAA5S,SAAAP,EACA,GAAAmT,EAAAnT,GAAAkQ,SAAAxF,GAEA,WADAzB,GAAAqH,IAAA6C,EAAAnT,GAAAoQ,SAAAgE,EAAA1J,GAIA,MAAAxK,OAAA,4BAAA+I,EAAA,KAAAmL,KAEA3J,EAAAuO,YAAAvO,EAAAuO,WAAAzY,SACA0I,EAAA+P,WAAAvO,EAAAuO,YACAvO,EAAAwO,UAAAxO,EAAAwO,SAAA1Y,SACA0I,EAAAgQ,SAAAxO,EAAAwO,UACAxO,EAAAkE,QACA1F,EAAA0F,OAAA,GACA1F,GAyEAxE,OAAA6Q,iBAAAmN,GAQAI,YACAzY,IAAA,WACA,GAAA7I,KAAA+gB,EACA,MAAA/gB,MAAA+gB,CACA/gB,MAAA+gB,IAEA,KAAA,GADAQ,GAAAre,OAAAD,KAAAjD,KAAAuJ,QACA9K,EAAA,EAAAA,EAAA8iB,EAAAviB,SAAAP,EAAA,CACA,GAAA0J,GAAAnI,KAAAuJ,OAAAgY,EAAA9iB,IACAgL,EAAAtB,EAAAsB,EAGA,IAAAzJ,KAAA+gB,EAAAtX,GACA,KAAA9K,OAAA,gBAAA8K,EAAA,OAAAzJ,KAEAA,MAAA+gB,EAAAtX,GAAAtB,EAEA,MAAAnI,MAAA+gB,IAUA9Y,aACAY,IAAA,WACA,MAAA7I,MAAAsU,IAAAtU,KAAAsU,EAAAzM,EAAA4K,QAAAzS,KAAAuJ,WAUAb,aACAG,IAAA,WACA,MAAA7I,MAAAghB,IAAAhhB,KAAAghB,EAAAnZ,EAAA4K,QAAAzS,KAAAoK,WASA1F,MACAmE,IAAA,WACA,MAAA7I,MAAAihB,IAAAjhB,KAAAihB,EAAAxZ,EAAA9C,OAAA3E,MAAA4E,cAEAmE,IAAA,SAAArE,GACA,GAAAA,KAAAA,EAAAR,oBAAA4D,IACA,KAAAF,WAAA,qCACAlD,GAAAsM,OACAtM,EAAAsM,KAAAlJ,EAAAkJ,MACAhR,KAAAihB,EAAAvc,MAgBAwc,EAAApS,OAAA,WACA,GAAA8P,GAAAtM,EAAAxD,OAAA/P,KAAAiB,KACA,QACAmO,QAAAyQ,GAAAA,EAAAzQ,SAAA5M,OACA6I,OAAAyH,EAAAE,YAAA/R,KAAA0I,aACAa,OAAAsI,EAAAE,YAAA/R,KAAAiI,YAAAwE,OAAA,SAAAwF,GAAA,OAAAA,EAAAvC,sBACA+H,WAAAzX,KAAAyX,YAAAzX,KAAAyX,WAAAzY,OAAAgB,KAAAyX,WAAAlW,OACAmW,SAAA1X,KAAA0X,UAAA1X,KAAA0X,SAAA1Y,OAAAgB,KAAA0X,SAAAnW,OACA6L,MAAApN,KAAAoN,OAAA7L,OACA4H,OAAAyV,GAAAA,EAAAzV,QAAA5H,SAOA2f,EAAA7N,WAAA,WAEA,IADA,GAAA9J,GAAAvJ,KAAAiI,YAAAxJ,EAAA,EACAA,EAAA8K,EAAAvK,QACAuK,EAAA9K,KAAAkB,SACA,IAAAyK,GAAApK,KAAA0I,WACA,KADAjK,EAAA,EACAA,EAAA2L,EAAApL,QACAoL,EAAA3L,KAAAkB,SACA,OAAA2S,GAAA3S,QAAAZ,KAAAiB,OAMAkhB,EAAArY,IAAA,SAAArG,GACA,MAAA8P,GAAAzJ,IAAA9J,KAAAiB,KAAAwC,IAAAxC,KAAAuJ,QAAAvJ,KAAAuJ,OAAA/G,IAAAxC,KAAAoK,QAAApK,KAAAoK,OAAA5H,IAAA,MAUA0e,EAAAnS,IAAA,SAAAgC,GACA,GAAA/Q,KAAA6I,IAAAkI,EAAAvO,MACA,KAAA7D,OAAA,mBAAAoS,EAAAvO,KAAA,QAAAxC,KACA,IAAA+Q,YAAA3B,IAAA7N,SAAAwP,EAAAtM,OAAA,CAIA,GAAAzE,KAAAshB,WAAAvQ,EAAAtH,IACA,KAAA9K,OAAA,gBAAAoS,EAAAtH,GAAA,OAAAzJ,KAMA,OALA+Q,GAAAZ,QACAY,EAAAZ,OAAAhB,OAAA4B,GACA/Q,KAAAuJ,OAAAwH,EAAAvO,MAAAuO,EACAA,EAAAxB,QAAAvP,KACA+Q,EAAAiC,MAAAhT,MACAoS,EAAApS,MAEA,MAAA+Q,aAAAqD,IACApU,KAAAoK,SACApK,KAAAoK,WACApK,KAAAoK,OAAA2G,EAAAvO,MAAAuO,EACAA,EAAAiC,MAAAhT,MACAoS,EAAApS,OAEAsS,EAAAvD,IAAAhQ,KAAAiB,KAAA+Q,IAUAmQ,EAAA/R,OAAA,SAAA4B,GACA,GAAAA,YAAA3B,IAAA7N,SAAAwP,EAAAtM,OAAA,CAEA,GAAAzE,KAAAuJ,OAAAwH,EAAAvO,QAAAuO,EACA,KAAApS,OAAAoS,EAAA,uBAAA/Q,KAGA,cAFAA,MAAAuJ,OAAAwH,EAAAvO,MACAuO,EAAAxB,QAAA,KACA6C,EAAApS,MAEA,MAAAsS,GAAAnD,OAAApQ,KAAAiB,KAAA+Q,IAQAmQ,EAAAvc,OAAA,SAAA8L,GACA,MAAA,IAAAzQ,MAAA0E,KAAA+L,IAOAyQ,EAAAM,MAAA,WAGA,GAAAxN,GAAAhU,KAAAgU,SACAzG,EAAAvN,KAAAiI,YAAA5E,IAAA,SAAAoe,GAAA,MAAAA,GAAA9hB,UAAAkM,cAuBA,OAtBA7L,MAAAU,OAAAkN,EAAA5N,MAAA2C,IAAAqR,EAAA,WACAmN,OAAAA,EACA5T,MAAAA,EACA1F,KAAAA,IAEA7H,KAAAmB,OAAAgM,EAAAnN,MAAA2C,IAAAqR,EAAA,WACAmF,OAAAA,EACA5L,MAAAA,EACA1F,KAAAA,IAEA7H,KAAA8Q,OAAAsQ,EAAAphB,MAAA2C,IAAAqR,EAAA,WACAzG,MAAAA,EACA1F,KAAAA,IAEA7H,KAAAoM,WAAApM,KAAAgR,KAAA7E,EAAAC,WAAApM,MAAA2C,IAAAqR,EAAA,eACAzG,MAAAA,EACA1F,KAAAA,IAEA7H,KAAAuM,SAAAJ,EAAAI,SAAAvM,MAAA2C,IAAAqR,EAAA,aACAzG,MAAAA,EACA1F,KAAAA,IAEA7H,MASAkhB,EAAAxgB,OAAA,SAAA6O,EAAAmB,GACA,MAAA1Q,MAAAwhB,QAAA9gB,OAAA6O,EAAAmB,IASAwQ,EAAAvQ,gBAAA,SAAApB,EAAAmB,GACA,MAAA1Q,MAAAU,OAAA6O,EAAAmB,GAAAA,EAAAvJ,IAAAuJ,EAAAgR,OAAAhR,GAAAiR,UASAT,EAAA/f,OAAA,SAAAyP,EAAA5R,GACA,MAAAgB,MAAAwhB,QAAArgB,OAAAyP,EAAA5R,IAQAkiB,EAAArQ,gBAAA,SAAAD,GAGA,MAFAA,aAAAuI,KACAvI,EAAAuI,EAAAxU,OAAAiM,IACA5Q,KAAAmB,OAAAyP,EAAAA,EAAAuK,WAQA+F,EAAApQ,OAAA,SAAAvB,GACA,MAAAvP,MAAAwhB,QAAA1Q,OAAAvB,IAQA2R,EAAA9U,WAAA,SAAA2E,GACA,MAAA/Q,MAAAwhB,QAAApV,WAAA2E,IAUAmQ,EAAAlQ,KAAAkQ,EAAA9U,WA0BA8U,EAAA3U,SAAA,SAAAgD,EAAApB,GACA,MAAAnO,MAAAwhB,QAAAjV,SAAAgD,EAAApB,gHChcA,YA6BA,SAAAyT,GAAA/W,EAAAzJ,GACA,GAAA3C,GAAA,EAAAJ,IAEA,KADA+C,GAAA,EACA3C,EAAAoM,EAAA7L,QAAAX,EAAAD,EAAAK,EAAA2C,IAAAyJ,EAAApM,IACA,OAAAJ,GA3BA,GAAAkP,GAAAzO,EAEA+I,EAAArJ,EAAA,IAEAJ,GACA,SACA,QACA,QACA,SACA,SACA,UACA,WACA,QACA,SACA,SACA,UACA,WACA,OACA,SACA,QACA,UA6BAmP,GAAAC,MAAAoU,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAuBArU,EAAA2C,SAAA0R,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACA/Z,EAAAS,WACA,OAYAiF,EAAA/E,KAAAoZ,GACA,EACA,EACA,EACA,EACA,GACA,GAkBArU,EAAAQ,OAAA6T,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GAmBArU,EAAAG,OAAAkU,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,kCC9LA,YAMA,IAAA/Z,GAAA3I,EAAAJ,QAAAN,EAAA,GAEAqJ,GAAA1I,UAAAX,EAAA,GACAqJ,EAAApG,QAAAjD,EAAA,GACAqJ,EAAA9D,aAAAvF,EAAA,GACAqJ,EAAApD,OAAAjG,EAAA,GACAqJ,EAAAhD,MAAArG,EAAA,GACAqJ,EAAA/C,KAAAtG,EAAA,GAMAqJ,EAAA7C,GAAA6C,EAAAjC,QAAA,MAOAiC,EAAA4K,QAAA,SAAA1B,GACA,MAAAA,GAAA7N,OAAA2H,OAAA3H,OAAA2H,OAAAkG,GAAA7N,OAAAD,KAAA8N,GAAA1N,IAAA,SAAAC,GACA,MAAAyN,GAAAzN,SASAuE,EAAAyE,SAAA,SAAAV,GACA,MAAA,KAAAA,EAAAnJ,QAAA,MAAA,QAAAA,QAAA,KAAA,OAAA,MAQAoF,EAAAkQ,QAAA,SAAAxV,GACA,MAAAA,GAAAnC,OAAA,GAAAiP,cAAA9M,EAAA0S,UAAA,IAQApN,EAAAmQ,QAAA,SAAAzV,GACA,MAAAA,GAAAnC,OAAA,GAAA8U,cAAA3S,EAAA0S,UAAA,0DCxDA,YAyBA,SAAAqE,GAAAC,EAAAC,GAMAxZ,KAAAuZ,GAAAA,EAMAvZ,KAAAwZ,GAAAA,EAnCAta,EAAAJ,QAAAwa,CAEA,IAAAzR,GAAArJ,EAAA,IAqCAqjB,EAAAvI,EAAApV,UAOA4d,EAAAxI,EAAAwI,KAAA,GAAAxI,GAAA,EAAA,EAEAwI,GAAA7U,SAAA,WAAA,MAAA,IACA6U,EAAAC,SAAAD,EAAA/H,SAAA,WAAA,MAAA/Z,OACA8hB,EAAA9iB,OAAA,WAAA,MAAA,GAOA,IAAAgjB,GAAA1I,EAAA0I,SAAA,kBAOA1I,GAAAjJ,WAAA,SAAA3G,GACA,GAAA,IAAAA,EACA,MAAAoY,EACA,IAAA9L,GAAAtM,EAAA,CACAsM,KACAtM,GAAAA,EACA,IAAA6P,GAAA7P,IAAA,EACA8P,GAAA9P,EAAA6P,GAAA,aAAA,CAUA,OATAvD,KACAwD,GAAAA,IAAA,EACAD,GAAAA,IAAA,IACAA,EAAA,aACAA,EAAA,IACAC,EAAA,aACAA,EAAA,KAGA,GAAAF,GAAAC,EAAAC,IAQAF,EAAAtI,KAAA,SAAAtH,GACA,GAAA,gBAAAA,GACA,MAAA4P,GAAAjJ,WAAA3G,EACA,IAAA,gBAAAA,GAAA,CAEA,IAAA7B,EAAA2H,KAGA,MAAA8J,GAAAjJ,WAAA7B,SAAA9E,EAAA,IAFAA,GAAA7B,EAAA2H,KAAAyS,WAAAvY,GAIA,MAAAA,GAAAmD,KAAAnD,EAAAoD,KAAA,GAAAwM,GAAA5P,EAAAmD,MAAA,EAAAnD,EAAAoD,OAAA,GAAAgV,GAQAD,EAAA5U,SAAA,SAAAF,GACA,IAAAA,GAAA/M,KAAAwZ,KAAA,GAAA,CACA,GAAAD,IAAAvZ,KAAAuZ,GAAA,IAAA,EACAC,GAAAxZ,KAAAwZ,KAAA,CAGA,OAFAD,KACAC,EAAAA,EAAA,IAAA,KACAD,EAAA,WAAAC,GAEA,MAAAxZ,MAAAuZ,GAAA,WAAAvZ,KAAAwZ,IAQAqI,EAAAnI,OAAA,SAAA3M,GACA,MAAAlF,GAAA2H,KACA,GAAA3H,GAAA2H,KAAA,EAAAxP,KAAAuZ,GAAA,EAAAvZ,KAAAwZ,GAAA5K,QAAA7B,KAEAF,IAAA,EAAA7M,KAAAuZ,GAAAzM,KAAA,EAAA9M,KAAAwZ,GAAAzM,SAAA6B,QAAA7B,IAGA,IAAAzL,GAAAN,OAAAkD,UAAA5C,UAOAgY,GAAA4I,SAAA,SAAAC,GACA,MAAAA,KAAAH,EACAF,EACA,GAAAxI,IACAhY,EAAAvC,KAAAojB,EAAA,GACA7gB,EAAAvC,KAAAojB,EAAA,IAAA,EACA7gB,EAAAvC,KAAAojB,EAAA,IAAA,GACA7gB,EAAAvC,KAAAojB,EAAA,IAAA,MAAA,GAEA7gB,EAAAvC,KAAAojB,EAAA,GACA7gB,EAAAvC,KAAAojB,EAAA,IAAA,EACA7gB,EAAAvC,KAAAojB,EAAA,IAAA,GACA7gB,EAAAvC,KAAAojB,EAAA,IAAA,MAAA,IAQAN,EAAAO,OAAA,WACA,MAAAphB,QAAAC,aACA,IAAAjB,KAAAuZ,GACAvZ,KAAAuZ,KAAA,EAAA,IACAvZ,KAAAuZ,KAAA,GAAA,IACAvZ,KAAAuZ,KAAA,GACA,IAAAvZ,KAAAwZ,GACAxZ,KAAAwZ,KAAA,EAAA,IACAxZ,KAAAwZ,KAAA,GAAA,IACAxZ,KAAAwZ,KAAA,KAQAqI,EAAAE,SAAA,WACA,GAAAM,GAAAriB,KAAAwZ,IAAA,EAGA,OAFAxZ,MAAAwZ,KAAAxZ,KAAAwZ,IAAA,EAAAxZ,KAAAuZ,KAAA,IAAA8I,KAAA,EACAriB,KAAAuZ,IAAAvZ,KAAAuZ,IAAA,EAAA8I,KAAA,EACAriB,MAOA6hB,EAAA9H,SAAA,WACA,GAAAsI,KAAA,EAAAriB,KAAAuZ,GAGA,OAFAvZ,MAAAuZ,KAAAvZ,KAAAuZ,KAAA,EAAAvZ,KAAAwZ,IAAA,IAAA6I,KAAA,EACAriB,KAAAwZ,IAAAxZ,KAAAwZ,KAAA,EAAA6I,KAAA,EACAriB,MAOA6hB,EAAA7iB,OAAA,WACA,GAAAsjB,GAAAtiB,KAAAuZ,GACAgJ,GAAAviB,KAAAuZ,KAAA,GAAAvZ,KAAAwZ,IAAA,KAAA,EACAgJ,EAAAxiB,KAAAwZ,KAAA,EACA,OAAA,KAAAgJ,EACA,IAAAD,EACAD,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,QAAA,EAAA,EACAC,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,QAAA,EAAA,EACAC,EAAA,IAAA,EAAA,+CClNA,YAEA,IAAA3a,GAAA/I,CAEA+I,GAAA5H,OAAAzB,EAAA,GACAqJ,EAAAjC,QAAApH,EAAA,GACAqJ,EAAAX,KAAA1I,EAAA,IACAqJ,EAAAnB,KAAAlI,EAAA,GAOAqJ,EAAAS,WAAApF,OAAAoN,OAAApN,OAAAoN,cAMAzI,EAAAY,YAAAvF,OAAAoN,OAAApN,OAAAoN,cAOAzI,EAAAsW,OAAAvP,QAAA6T,EAAAjF,SAAAiF,EAAAjF,QAAAkF,UAAAD,EAAAjF,QAAAkF,SAAAC,MAQA9a,EAAAqH,UAAAvL,OAAAuL,WAAA,SAAAxF,GACA,MAAA,gBAAAA,IAAAkZ,SAAAlZ,IAAArJ,KAAAqD,MAAAgG,KAAAA,GAQA7B,EAAAoH,SAAA,SAAAvF,GACA,MAAA,gBAAAA,IAAAA,YAAA1I,SAQA6G,EAAAU,SAAA,SAAAmB,GACA,MAAAA,IAAA,gBAAAA,IAOA7B,EAAAkT,OAAA,WACA,IACA,GAAAA,GAAAlT,EAAAjC,QAAA,UAAAmV,MAGA,OAAAA,GAAA7W,UAAA2e,WAIA9H,EAAA/J,OACA+J,EAAA/J,KAAA,SAAAtH,EAAAoZ,GAAA,MAAA,IAAA/H,GAAArR,EAAAoZ,KAGA/H,EAAAgI,cACAhI,EAAAgI,YAAA,SAAAlc,GAAA,MAAA,IAAAkU,GAAAlU,KAEAkU,GAVA,KAaA,MAAA/c,GACA,MAAA,UASA6J,EAAA0I,UAAA,SAAAyS,GACA,MAAA,gBAAAA,GACAnb,EAAAkT,OACAlT,EAAAkT,OAAAgI,YAAAC,GACA,GAAAnb,GAAArH,MAAAwiB,GACAnb,EAAAkT,OACAlT,EAAAkT,OAAA/J,KAAAgS,GACA,mBAAAnH,YACAmH,EACA,GAAAnH,YAAAmH,IAOAnb,EAAArH,MAAA,mBAAAqb,YAAArb,MAAAqb,WAEAhU,EAAAyR,SAAA9a,EAAA,IAMAqJ,EAAA2H,KAAAiT,EAAAQ,SAAAR,EAAAQ,QAAAzT,MAAA3H,EAAAjC,QAAA,QAOAiC,EAAAqb,WAAA,SAAAxZ,GACA,MAAAA,GACA7B,EAAAyR,SAAAtI,KAAAtH,GAAA0Y,SACAva,EAAAyR,SAAA0I,UASAna,EAAAsb,aAAA,SAAAhB,EAAApV,GACA,GAAAsM,GAAAxR,EAAAyR,SAAA4I,SAAAC,EACA,OAAAta,GAAA2H,KACA3H,EAAA2H,KAAA4T,SAAA/J,EAAAE,GAAAF,EAAAG,GAAAzM,GACAsM,EAAApM,SAAA2B,QAAA7B,KAUAlF,EAAAE,MAAA,SAAAsb,EAAAthB,EAAAiO,GACA,GAAAjO,EACA,IAAA,GAAAkB,GAAAC,OAAAD,KAAAlB,GAAAtD,EAAA,EAAAA,EAAAwE,EAAAjE,SAAAP,EACA8C,SAAA8hB,EAAApgB,EAAAxE,KAAAuR,IACAqT,EAAApgB,EAAAxE,IAAAsD,EAAAkB,EAAAxE,IACA,OAAA4kB,IAQAxb,EAAAiB,YAAA,SAAAuL,GACA,GAAAiP,KASA,OARAjP,GAAAnM,QAAA,SAAA1F,GACA8gB,EAAA9gB,GAAA,IAOA,WACA,IAAA,GAAAS,GAAAC,OAAAD,KAAAjD,MAAAvB,EAAAwE,EAAAjE,OAAA,EAAAP,GAAA,IAAAA,EACA,GAAA,IAAA6kB,EAAArgB,EAAAxE,KAAA8C,SAAAvB,KAAAiD,EAAAxE,KAAA,OAAAuB,KAAAiD,EAAAxE,IACA,MAAAwE,GAAAxE,KAUAoJ,EAAAmB,YAAA,SAAAqL,GAOA,MAAA,UAAA7R,GACA,IAAA,GAAA/D,GAAA,EAAAA,EAAA4V,EAAArV,SAAAP,EACA4V,EAAA5V,KAAA+D,SACAxC,MAAAqU,EAAA5V,MAUAoJ,EAAA0b,YAAA,SAAA/P,EAAAgQ,GACAA,EAAAtb,QAAA,SAAAqF,GACArK,OAAAD,KAAAsK,GAAArF,QAAA,SAAAuM,GAGA,IAFA,GAAA3P,GAAAyI,EAAAkH,GAAA,GAAAtO,MAAA,KACAgN,EAAAK,EACA1O,EAAA9F,QACAmU,EAAAA,EAAArO,EAAAwB,QACAiH,GAAAkH,GAAAtB,GAAA,UASAtL,EAAAoJ,eACAwS,MAAAziB,OACA0iB,MAAA1iB,OACAkM,MAAAlM,0KC9NA,YAMA,SAAA2iB,GAAAxb,EAAAwY,GACA,MAAAxY,GAAA3F,KAAA,KAAAme,GAAAxY,EAAA4D,UAAA,UAAA4U,EAAA,KAAAxY,EAAA9E,KAAA,WAAAsd,EAAA,MAAAxY,EAAA+B,QAAA,IAAA,IAAA,YAYA,QAAA0Z,GAAAliB,EAAAyG,EAAAwD,EAAA0B,GAEA,GAAAlF,EAAA0D,aACA,GAAA1D,EAAA0D,uBAAAC,GAAA,CAAApK,EACA,cAAA2L,GACA,YACA,WAAAsW,EAAAxb,EAAA,cAEA,KAAA,GADA0C,GAAAhD,EAAA4K,QAAAtK,EAAA0D,aAAAhB,QACA/J,EAAA,EAAAA,EAAA+J,EAAA7L,SAAA8B,EAAAY,EACA,WAAAmJ,EAAA/J,GACAY,GACA,SACA,SACAA,GACA,8BAAAiK,EAAA0B,GACA,SACA,aAAAlF,EAAA3F,KAAA,SAEA,QAAA2F,EAAAT,MACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAhG,EACA,0BAAA2L,GACA,WAAAsW,EAAAxb,EAAA,WACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAzG,EACA,kFAAA2L,EAAAA,EAAAA,EAAAA,GACA,WAAAsW,EAAAxb,EAAA,gBACA,MACA,KAAA,QACA,IAAA,SAAAzG,EACA,2BAAA2L,GACA,WAAAsW,EAAAxb,EAAA,UACA,MACA,KAAA,OAAAzG,EACA,4BAAA2L,GACA,WAAAsW,EAAAxb,EAAA,WACA,MACA,KAAA,SAAAzG,EACA,yBAAA2L,GACA,WAAAsW,EAAAxb,EAAA,UACA,MACA,KAAA,QAAAzG,EACA,4DAAA2L,EAAAA,EAAAA,GACA,WAAAsW,EAAAxb,EAAA,WAIA,MAAAzG,GAYA,QAAAmiB,GAAAniB,EAAAyG,EAAAkF,GAEA,OAAAlF,EAAA+B,SACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAxI,EACA,wCAAA2L,GACA,WAAAsW,EAAAxb,EAAA,eACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAzG,EACA,6DAAA2L,GACA,WAAAsW,EAAAxb,EAAA,oBACA,MACA,KAAA,OAAAzG,EACA,mCAAA2L,GACA,WAAAsW,EAAAxb,EAAA,gBAGA,MAAAzG,GASA,QAAA0f,GAAA/U,GAEA,GAAA9C,GAAA8C,EAAApE,WACA,KAAAsB,EAAAvK,OACA,MAAA6I,GAAApG,UAAA,cAGA,KAAA,GAFAC,GAAAmG,EAAApG,QAAA,KAEAhD,EAAA,EAAAA,EAAA8K,EAAAvK,SAAAP,EAAA,CACA,GAAA0J,GAAAoB,EAAA9K,GAAAkB,UACA0N,EAAA,IAAAxF,EAAAyE,SAAAnE,EAAA3F,KAGA2F,GAAA9E,KAAA3B,EACA,sBAAA2L,GACA,yBAAAA,GACA,WAAAsW,EAAAxb,EAAA,WACA,wBAAAkF,GACA,gCACAwW,EAAAniB,EAAAyG,EAAA,QACAyb,EAAAliB,EAAAyG,EAAA1J,EAAA4O,EAAA,UACA,KACA,MAGAlF,EAAA4D,UAAArK,EACA,sBAAA2L,GACA,yBAAAA,GACA,WAAAsW,EAAAxb,EAAA,UACA,gCAAAkF,GACAuW,EAAAliB,EAAAyG,EAAA1J,EAAA4O,EAAA,OACA,KACA,OAIAlF,EAAA6F,YACA7F,EAAA0D,cAAA1D,EAAA0D,uBAAAC,GAEApK,EACA,sBAAA2L,GAHA3L,EACA,iCAAA2L,EAAAA,IAIAuW,EAAAliB,EAAAyG,EAAA1J,EAAA4O,GACAlF,EAAA6F,UAAAtM,EACA,MAEA,MAAAA,GACA,eAnKAxC,EAAAJ,QAAAsiB,CAEA,IAAAtV,GAAAtN,EAAA,IACAqJ,EAAArJ,EAAA,wCCJA,YAoBA,SAAAslB,GAAA1kB,EAAA+H,EAAAoH,GAMAvO,KAAAZ,GAAAA,EAMAY,KAAAmH,IAAAA,EAMAnH,KAAAwV,KAAAjU,OAMAvB,KAAAuO,IAAAA,EAIA,QAAAwV,MAWA,QAAAC,GAAAtT,GAMA1Q,KAAA4Y,KAAAlI,EAAAkI,KAMA5Y,KAAAikB,KAAAvT,EAAAuT,KAMAjkB,KAAAmH,IAAAuJ,EAAAvJ,IAMAnH,KAAAwV,KAAA9E,EAAAwT,OAQA,QAAA/C,KAMAnhB,KAAAmH,IAAA,EAMAnH,KAAA4Y,KAAA,GAAAkL,GAAAC,EAAA,EAAA,GAMA/jB,KAAAikB,KAAAjkB,KAAA4Y,KAMA5Y,KAAAkkB,OAAA,KAwDA,QAAAC,GAAA5V,EAAAtH,EAAAiS,GACAjS,EAAAiS,GAAA,IAAA3K,EAGA,QAAA6V,GAAA7V,EAAAtH,EAAAiS,GACA,KAAA3K,EAAA,KACAtH,EAAAiS,KAAA,IAAA3K,EAAA,IACAA,KAAA,CAEAtH,GAAAiS,GAAA3K,EAYA,QAAA8V,GAAAld,EAAAoH,GACAvO,KAAAmH,IAAAA,EACAnH,KAAAwV,KAAAjU,OACAvB,KAAAuO,IAAAA,EA6CA,QAAA+V,GAAA/V,EAAAtH,EAAAiS,GACA,KAAA3K,EAAAiL,IACAvS,EAAAiS,KAAA,IAAA3K,EAAAgL,GAAA,IACAhL,EAAAgL,IAAAhL,EAAAgL,KAAA,EAAAhL,EAAAiL,IAAA,MAAA,EACAjL,EAAAiL,MAAA,CAEA,MAAAjL,EAAAgL,GAAA,KACAtS,EAAAiS,KAAA,IAAA3K,EAAAgL,GAAA,IACAhL,EAAAgL,GAAAhL,EAAAgL,KAAA,CAEAtS,GAAAiS,KAAA3K,EAAAgL,GA2CA,QAAAgL,GAAAhW,EAAAtH,EAAAiS,GACAjS,EAAAiS,KAAA,IAAA3K,EACAtH,EAAAiS,KAAA3K,IAAA,EAAA,IACAtH,EAAAiS,KAAA3K,IAAA,GAAA,IACAtH,EAAAiS,GAAA3K,IAAA,GAxSArP,EAAAJ,QAAAqiB,CAEA,IAEAqD,GAFA3c,EAAArJ,EAAA,IAIA8a,EAAAzR,EAAAyR,SACArZ,EAAA4H,EAAA5H,OACAiH,EAAAW,EAAAX,IAwHAia,GAAAxc,OAAAkD,EAAAkT,OACA,WAGA,MAFAyJ,KACAA,EAAAhmB,EAAA,MACA2iB,EAAAxc,OAAA,WACA,MAAA,IAAA6f,QAIA,WACA,MAAA,IAAArD,IAQAA,EAAAxa,MAAA,SAAAE,GACA,MAAA,IAAAgB,GAAArH,MAAAqG,IAIAgB,EAAArH,QAAAA,QACA2gB,EAAAxa,MAAAkB,EAAAnB,KAAAya,EAAAxa,MAAAkB,EAAArH,MAAA0D,UAAAgX,UAGA,IAAAuJ,GAAAtD,EAAAjd,SASAugB,GAAAjlB,KAAA,SAAAJ,EAAA+H,EAAAoH,GAGA,MAFAvO,MAAAikB,KAAAjkB,KAAAikB,KAAAzO,KAAA,GAAAsO,GAAA1kB,EAAA+H,EAAAoH,GACAvO,KAAAmH,KAAAA,EACAnH,MA8BAqkB,EAAAngB,UAAAhB,OAAAyB,OAAAmf,EAAA5f,WACAmgB,EAAAngB,UAAA9E,GAAAglB,EAOAK,EAAAtJ,OAAA,SAAAzR,GAUA,MAPA1J,MAAAmH,MAAAnH,KAAAikB,KAAAjkB,KAAAikB,KAAAzO,KAAA,GAAA6O,IAAA3a,KAAA,GACA,IAAA,EACAA,EAAA,MAAA,EACAA,EAAA,QAAA,EACAA,EAAA,UAAA,EACA,EACAA,IAAAvC,IACAnH,MASAykB,EAAArJ,MAAA,SAAA1R,GACA,MAAAA,GAAA,EACA1J,KAAAR,KAAA8kB,EAAA,GAAAhL,EAAAjJ,WAAA3G,IACA1J,KAAAmb,OAAAzR,IAQA+a,EAAApJ,OAAA,SAAA3R,GACA,MAAA1J,MAAAmb,QAAAzR,GAAA,EAAAA,GAAA,MAAA,IAsBA+a,EAAA/J,OAAA,SAAAhR,GACA,GAAA2P,GAAAC,EAAAtI,KAAAtH,EACA,OAAA1J,MAAAR,KAAA8kB,EAAAjL,EAAAra,SAAAqa,IAUAoL,EAAAhK,MAAAgK,EAAA/J,OAQA+J,EAAA9J,OAAA,SAAAjR,GACA,GAAA2P,GAAAC,EAAAtI,KAAAtH,GAAAqY,UACA,OAAA/hB,MAAAR,KAAA8kB,EAAAjL,EAAAra,SAAAqa,IAQAoL,EAAAnJ,KAAA,SAAA5R,GACA,MAAA1J,MAAAR,KAAA2kB,EAAA,EAAAza,EAAA,EAAA,IAeA+a,EAAAlJ,QAAA,SAAA7R,GACA,MAAA1J,MAAAR,KAAA+kB,EAAA,EAAA7a,IAAA,IAQA+a,EAAAjJ,SAAA,SAAA9R,GACA,MAAA1J,MAAAR,KAAA+kB,EAAA,EAAA7a,GAAA,EAAAA,GAAA,KASA+a,EAAA7J,QAAA,SAAAlR,GACA,GAAA2P,GAAAC,EAAAtI,KAAAtH,EACA,OAAA1J,MAAAR,KAAA+kB,EAAA,EAAAlL,EAAAE,IAAA/Z,KAAA+kB,EAAA,EAAAlL,EAAAG,KASAiL,EAAA5J,SAAA,SAAAnR,GACA,GAAA2P,GAAAC,EAAAtI,KAAAtH,GAAAqY,UACA,OAAA/hB,MAAAR,KAAA+kB,EAAA,EAAAlL,EAAAE,IAAA/Z,KAAA+kB,EAAA,EAAAlL,EAAAG,IAGA,IAAAkL,GAAA,mBAAAhJ,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAE,EAAA,GAAAC,YAAAF,EAAAhb,OAEA,OADAgb,GAAA,IAAA,EACAC,EAAA,GACA,SAAArN,EAAAtH,EAAAiS,GACAyC,EAAA,GAAApN,EACAtH,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,GAAA0C,EAAA,IAGA,SAAArN,EAAAtH,EAAAiS,GACAyC,EAAA,GAAApN,EACAtH,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,GAAA0C,EAAA,OAIA,SAAAlS,EAAAzC,EAAAiS,GACA,GAAAlD,GAAAtM,EAAA,EAAA,EAAA,CAGA,IAFAsM,IACAtM,GAAAA,GACA,IAAAA,EACA6a,EAAA,EAAA7a,EAAA,EAAA,EAAA,WAAAzC,EAAAiS,OACA,IAAAyL,MAAAjb,GACA6a,EAAA,WAAAtd,EAAAiS,OACA,IAAAxP,EAAA,sBACA6a,GAAAvO,GAAA,GAAA,cAAA,EAAA/O,EAAAiS,OACA,IAAAxP,EAAA,uBACA6a,GAAAvO,GAAA,GAAA3V,KAAAukB,MAAAlb,EAAA,0BAAA,EAAAzC,EAAAiS,OACA,CACA,GAAA6C,GAAA1b,KAAAqD,MAAArD,KAAA2C,IAAA0G,GAAArJ,KAAAwkB,KACA7I,EAAA,QAAA3b,KAAAukB,MAAAlb,EAAArJ,KAAA4b,IAAA,GAAAF,GAAA,QACAwI,IAAAvO,GAAA,GAAA+F,EAAA,KAAA,GAAAC,KAAA,EAAA/U,EAAAiS,IAUAuL,GAAAvI,MAAA,SAAAxS,GACA,MAAA1J,MAAAR,KAAAklB,EAAA,EAAAhb,GAGA,IAAAob,GAAA,mBAAA1I,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAR,EAAA,GAAAC,YAAAQ,EAAA1b,OAEA,OADA0b,GAAA,IAAA,EACAT,EAAA,GACA,SAAArN,EAAAtH,EAAAiS,GACAmD,EAAA,GAAA9N,EACAtH,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,GAAA0C,EAAA,IAGA,SAAArN,EAAAtH,EAAAiS,GACAmD,EAAA,GAAA9N,EACAtH,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,KAAA0C,EAAA,GACA3U,EAAAiS,GAAA0C,EAAA,OAIA,SAAAlS,EAAAzC,EAAAiS,GACA,GAAAlD,GAAAtM,EAAA,EAAA,EAAA,CAGA,IAFAsM,IACAtM,GAAAA,GACA,IAAAA,EACA6a,EAAA,EAAAtd,EAAAiS,GACAqL,EAAA,EAAA7a,EAAA,EAAA,EAAA,WAAAzC,EAAAiS,EAAA,OACA,IAAAyL,MAAAjb,GACA6a,EAAA,WAAAtd,EAAAiS,GACAqL,EAAA,WAAAtd,EAAAiS,EAAA,OACA,IAAAxP,EAAA,uBACA6a,EAAA,EAAAtd,EAAAiS,GACAqL,GAAAvO,GAAA,GAAA,cAAA,EAAA/O,EAAAiS,EAAA,OACA,CACA,GAAA8C,EACA,IAAAtS,EAAA,wBACAsS,EAAAtS,EAAA,OACA6a,EAAAvI,IAAA,EAAA/U,EAAAiS,GACAqL,GAAAvO,GAAA,GAAAgG,EAAA,cAAA,EAAA/U,EAAAiS,EAAA,OACA,CACA,GAAA6C,GAAA1b,KAAAqD,MAAArD,KAAA2C,IAAA0G,GAAArJ,KAAAwkB,IACA,QAAA9I,IACAA,EAAA,MACAC,EAAAtS,EAAArJ,KAAA4b,IAAA,GAAAF,GACAwI,EAAA,iBAAAvI,IAAA,EAAA/U,EAAAiS,GACAqL,GAAAvO,GAAA,GAAA+F,EAAA,MAAA,GAAA,QAAAC,EAAA,WAAA,EAAA/U,EAAAiS,EAAA,KAWAuL,GAAAnI,OAAA,SAAA5S,GACA,MAAA1J,MAAAR,KAAAslB,EAAA,EAAApb,GAGA,IAAAqb,GAAAld,EAAArH,MAAA0D,UAAA6E,IACA,SAAAwF,EAAAtH,EAAAiS,GACAjS,EAAA8B,IAAAwF,EAAA2K,IAGA,SAAA3K,EAAAtH,EAAAiS,GACA,IAAA,GAAAza,GAAA,EAAAA,EAAA8P,EAAAvP,SAAAP,EACAwI,EAAAiS,EAAAza,GAAA8P,EAAA9P,GAQAgmB,GAAAvX,MAAA,SAAAxD,GACA,GAAAvC,GAAAuC,EAAA1K,SAAA,CACA,IAAA,gBAAA0K,IAAAvC,EAAA,CACA,GAAAF,GAAAka,EAAAxa,MAAAQ,EAAAlH,EAAAjB,OAAA0K,GACAzJ,GAAAkB,OAAAuI,EAAAzC,EAAA,GACAyC,EAAAzC,EAEA,MAAAE,GACAnH,KAAAmb,OAAAhU,GAAA3H,KAAAulB,EAAA5d,EAAAuC,GACA1J,KAAAR,KAAA2kB,EAAA,EAAA,IAQAM,EAAAvkB,OAAA,SAAAwJ,GACA,GAAAvC,GAAAD,EAAAlI,OAAA0K,EACA,OAAAvC,GACAnH,KAAAmb,OAAAhU,GAAA3H,KAAA0H,EAAAI,MAAAH,EAAAuC,GACA1J,KAAAR,KAAA2kB,EAAA,EAAA,IAQAM,EAAA/C,KAAA,WAIA,MAHA1hB,MAAAkkB,OAAA,GAAAF,GAAAhkB,MACAA,KAAA4Y,KAAA5Y,KAAAikB,KAAA,GAAAH,GAAAC,EAAA,EAAA,GACA/jB,KAAAmH,IAAA,EACAnH,MAOAykB,EAAAO,MAAA,WAUA,MATAhlB,MAAAkkB,QACAlkB,KAAA4Y,KAAA5Y,KAAAkkB,OAAAtL,KACA5Y,KAAAikB,KAAAjkB,KAAAkkB,OAAAD,KACAjkB,KAAAmH,IAAAnH,KAAAkkB,OAAA/c,IACAnH,KAAAkkB,OAAAlkB,KAAAkkB,OAAA1O,OAEAxV,KAAA4Y,KAAA5Y,KAAAikB,KAAA,GAAAH,GAAAC,EAAA,EAAA,GACA/jB,KAAAmH,IAAA,GAEAnH,MAOAykB,EAAA9C,OAAA,WACA,GAAA/I,GAAA5Y,KAAA4Y,KACAqL,EAAAjkB,KAAAikB,KACA9c,EAAAnH,KAAAmH,GAOA,OANAnH,MAAAglB,QAAA7J,OAAAhU,GACAA,IACAnH,KAAAikB,KAAAzO,KAAAoD,EAAApD,KACAxV,KAAAikB,KAAAA,EACAjkB,KAAAmH,KAAAA,GAEAnH,MAOAykB,EAAAnH,OAAA,WAIA,IAHA,GAAA1E,GAAA5Y,KAAA4Y,KAAApD,KACAvO,EAAAjH,KAAA4E,YAAA+B,MAAA3G,KAAAmH,KACA+R,EAAA,EACAN,GACAA,EAAAxZ,GAAAwZ,EAAArK,IAAAtH,EAAAiS,GACAA,GAAAN,EAAAzR,IACAyR,EAAAA,EAAApD,IAGA,OAAAvO,wCCljBA,YAmBA,SAAAud,KACArD,EAAApiB,KAAAiB,MAsCA,QAAAilB,GAAA1W,EAAAtH,EAAAiS,GACA3K,EAAAvP,OAAA,GACA6I,EAAAX,KAAAI,MAAAiH,EAAAtH,EAAAiS,GAEAjS,EAAA4b,UAAAtU,EAAA2K,GA7DAha,EAAAJ,QAAA0lB,CAGA,IAAArD,GAAA3iB,EAAA,IAEA0mB,EAAAV,EAAAtgB,UAAAhB,OAAAyB,OAAAwc,EAAAjd,UACAghB,GAAAtgB,YAAA4f,CAEA,IAAA3c,GAAArJ,EAAA,IAEAuc,EAAAlT,EAAAkT,MAiBAyJ,GAAA7d,MAAA,SAAAE,GACA,OAAA2d,EAAA7d,MAAAoU,EAAAgI,aAAAlc,GAGA,IAAAse,GAAApK,GAAAA,EAAA7W,oBAAA2X,aAAA,QAAAd,EAAA7W,UAAA6E,IAAAvG,KACA,SAAA+L,EAAAtH,EAAAiS,GACAjS,EAAA8B,IAAAwF,EAAA2K,IAIA,SAAA3K,EAAAtH,EAAAiS,GACA,GAAA3K,EAAA6W,KACA7W,EAAA6W,KAAAne,EAAAiS,EAAA,EAAA3K,EAAAvP,YACA,KAAA,GAAAP,GAAA,EAAAA,EAAA8P,EAAAvP,QACAiI,EAAAiS,KAAA3K,EAAA9P,KAMAymB,GAAAhY,MAAA,SAAAxD,GACA,gBAAAA,KACAA,EAAAqR,EAAA/J,KAAAtH,EAAA,UACA,IAAAvC,GAAAuC,EAAA1K,SAAA,CAIA,OAHAgB,MAAAmb,OAAAhU,GACAA,GACAnH,KAAAR,KAAA2lB,EAAAhe,EAAAuC,GACA1J,MAaAklB,EAAAhlB,OAAA,SAAAwJ,GACA,GAAAvC,GAAA4T,EAAAsK,WAAA3b,EAIA,OAHA1J,MAAAmb,OAAAhU,GACAA,GACAnH,KAAAR,KAAAylB,EAAA9d,EAAAuC,GACA1J,uDCzEA,YAoBA,SAAAqd,GAAAhI,EAAA7B,EAAAzO,GAMA,MALA,kBAAAyO,IACAzO,EAAAyO,EACAA,EAAA,GAAAnK,GAAAwK,MACAL,IACAA,EAAA,GAAAnK,GAAAwK,MACAL,EAAA6J,KAAAhI,EAAAtQ,GAsCA,QAAAmZ,GAAA7I,EAAA7B,GAGA,MAFAA,KACAA,EAAA,GAAAnK,GAAAwK,MACAL,EAAA0K,SAAA7I,GA0DA,QAAAkF,KACAlR,EAAA8P,OAAAqD,IA7HA,GAAAnT,GAAAoZ,EAAApZ,SAAAvK,CAqDAuK,GAAAgU,KAAAA,EAgBAhU,EAAA6U,SAAAA,EASA7U,EAAAic,QAGA,KACAjc,EAAAsP,SAAAna,EAAA,IACA6K,EAAA8L,MAAA3W,EAAA,IACA6K,EAAAJ,OAAAzK,EAAA,IACA,MAAAR,IAGAqL,EAAA8X,OAAA3iB,EAAA,IACA6K,EAAAmb,aAAAhmB,EAAA,IACA6K,EAAA8P,OAAA3a,EAAA,IACA6K,EAAAyR,aAAAtc,EAAA,IACA6K,EAAAuE,QAAApP,EAAA,IACA6K,EAAA8D,QAAA3O,EAAA,IACA6K,EAAA+X,SAAA5iB,EAAA,IACA6K,EAAA8C,UAAA3N,EAAA,IAGA6K,EAAA+E,iBAAA5P,EAAA;AACA6K,EAAAwI,UAAArT,EAAA,IACA6K,EAAAwK,KAAArV,EAAA,IACA6K,EAAAyC,KAAAtN,EAAA,IACA6K,EAAA1B,KAAAnJ,EAAA,IACA6K,EAAA+F,MAAA5Q,EAAA,IACA6K,EAAA+K,MAAA5V,EAAA,IACA6K,EAAAwG,SAAArR,EAAA,IACA6K,EAAAsI,QAAAnT,EAAA,IACA6K,EAAA6H,OAAA1S,EAAA,IAGA6K,EAAA5B,MAAAjJ,EAAA,IACA6K,EAAAvB,QAAAtJ,EAAA,IAGA6K,EAAAkE,MAAA/O,EAAA,IACA6K,EAAAgV,IAAA7f,EAAA,IACA6K,EAAAxB,KAAArJ,EAAA,IACA6K,EAAAkR,UAAAA,EAaA,kBAAArH,SAAAA,OAAAqS,KACArS,QAAA,QAAA,SAAA1D,GAKA,MAJAA,KACAnG,EAAAxB,KAAA2H,KAAAA,EACA+K,KAEAlR","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object.<string,*>} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted\r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(34);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a class instance, which is also a {@link Message} prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(32);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        /* istanbul ignore next */\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        // create named constructor functions (codegen is required anyway)\r\n        ctor = util.codegen(\"p\")(\"return ctor.call(this,p)\").eof(type.name, {\r\n            ctor: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.fieldsArray.forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.oneofsArray.forEach(function(oneof) {\r\n        Object.defineProperty(prototype, oneof.resolve().name, {\r\n            get: util.oneOfGetter(oneof.oneof),\r\n            set: util.oneOfSetter(oneof.oneof)\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object.<string,*>} google/protobuf/any.proto Any\r\n * @property {Object.<string,*>} google/protobuf/duration.proto Duration\r\n * @property {Object.<string,*>} google/protobuf/empty.proto Empty\r\n * @property {Object.<string,*>} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object.<string,*>} google/protobuf/timestamp.proto Timestamp\r\n * @property {Object.<string,*>} google/protobuf/wrappers.proto Wrappers\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/field_mask.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(16),\r\n    util = require(34);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) {\r\n            var values = field.resolvedType.values; gen\r\n            (\"switch(d%s){\", prop);\r\n            Object.keys(values).forEach(function(key) {\r\n                if (field.repeated && values[key] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", key)\r\n                (\"case %j:\", values[key])\r\n                    (\"m%s=%j\", prop, values[key])\r\n                    (\"break\");\r\n            }); gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low,d%s.high).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s&&d%s.length)\", prop, prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            default: gen /* bool, uint32, string etc. */\r\n                (\"m%s=d%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return new(this.ctor)\");\r\n    var gen = util.codegen(\"d\")\r\n    (\"var m=new(this.ctor)\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low,m%s.high).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n    var repeatedFields = fields.filter(function(field) { return field.resolve().repeated; });\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        repeatedFields.forEach(function(field) { gen\r\n        (\"d%s=[]\", util.safeProp(field.name));\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    var mapFields = fields.filter(function(field) { return field.map; });\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        mapFields.forEach(function(field) { gen\r\n        (\"d%s={}\", util.safeProp(field.name));\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    var otherFields = fields.filter(function(field) { return !(field.repeated || field.map); });\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        otherFields.forEach(function(field) {\r\n            var prop = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m.hasOwnProperty(%j)&&m%s!==undefined&&m%s!==null){\", field.name, prop, prop);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, i, prop);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(16),\r\n    types   = require(33),\r\n    util    = require(34);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.ctor)\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType; gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(16),\r\n    types    = require(33),\r\n    util     = require(34);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var oneofs = mtype.oneofsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve();\r\n        if (field.partOf) // see below for oneofs\r\n            continue;\r\n        var type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            var keyType = field.resolvedKeyType /* only valid is enum */ ? \"uint32\" : field.keyType; gen\r\n    (\"if(m.hasOwnProperty(%j)&&%s){\", field.name, ref)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[keyType], keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(m.hasOwnProperty(%j)&&%s.length){\", field.name, ref)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(m.hasOwnProperty(%j)){\", field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(m.hasOwnProperty(%j)&&%s!==undefined&&%s!==null)\", field.name, ref, ref);\r\n                else if (field.bytes) gen\r\n    (\"if(m.hasOwnProperty(%j)&&%s)\", field.name, ref);\r\n                else gen\r\n    (\"if(m.hasOwnProperty(%j)&&%s!==undefined)\", field.name, ref);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i]; gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        var oneofFields = oneof.fieldsArray;\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name); gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n    \r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    var self = this;\r\n    Object.keys(values || {}).forEach(function(key) {\r\n        var val;\r\n        if (typeof values[key] === \"number\")\r\n            val = values[key];\r\n        else {\r\n            val = parseInt(key, 10);\r\n            key = values[key];\r\n        }\r\n        self.valuesById[self.values[key] = val] = key;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id, comment) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(16),\r\n    types     = require(33),\r\n    util      = require(34);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(FieldPrototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(18);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) {\r\n        // if not a basic type, resolve it\r\n        if (!Type)\r\n            Type = require(32);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        /* istanbul ignore next */\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // account for maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(17);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(33),\r\n    util    = require(34);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(32),\r\n    util = require(34);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias NamespaceBase.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(16),\r\n    Field   = require(17),\r\n    util    = require(34);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(32);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(30);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @memberof Namespace\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(NamespacePrototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName + \" must be JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object must be \" + nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object must be an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            /* istanbul ignore next */\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(32);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(30);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.nestedArray;\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(32);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(30);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(34);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(17);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(OneOfPrototype, \"fieldsArray\", {\r\n    get: function() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(31),\r\n    Root      = require(27),\r\n    Type      = require(32),\r\n    Field     = require(17),\r\n    MapField  = require(18),\r\n    OneOf     = require(23),\r\n    Enum      = require(16),\r\n    Service   = require(30),\r\n    Method    = require(20),\r\n    types     = require(33),\r\n    util      = require(34);\r\n\r\nfunction isName(token) {\r\n    return /^[a-zA-Z_][a-zA-Z_0-9]*$/.test(token);\r\n}\r\n\r\nfunction isTypeRef(token) {\r\n    return /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction isFqTypeRef(token) {\r\n    return /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object.<string,*>}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object.<string,*>}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : camelCase;\r\n\r\n    function illegal(token, name) {\r\n        var filename = parse.filename;\r\n        parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && isTypeRef(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"max\": return 536870911;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!isTypeRef(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        isProto3 = syntax === \"proto3\";\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        type.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    default:\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        if (!isTypeRef(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var field = new Field(name, parseId(next()), type, rule, extend),\r\n            trailingLine = tn.line();\r\n        field.comment = cmnt();\r\n        parseInlineOptions(field);\r\n        if (!field.comment)\r\n            field.comment = cmnt(trailingLine);\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable.\r\n        if (field.repeated && types.packed[type] !== undefined && !isProto3)\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        type.comment = cmnt();\r\n        var field = new Field(fieldName, id, name, rule);\r\n        skip(\"{\");\r\n        while ((token = next()) !== \"}\") {\r\n            switch (token = lower(token)) {\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        }\r\n        skip(\";\", true);\r\n        parent.add(type).add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var field = new MapField(name, parseId(next()), keyType, valueType),\r\n            trailingLine = tn.line();\r\n        field.comment = cmnt();\r\n        parseInlineOptions(field);\r\n        if (!field.comment)\r\n            field.comment = cmnt(trailingLine);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        var oneof = new OneOf(name),\r\n            trailingLine = tn.line();\r\n        oneof.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else {\r\n            skip(\";\");\r\n            if (!oneof.comment)\r\n                oneof.comment = cmnt(trailingLine);\r\n        }\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var enm = new Enum(name);\r\n        enm.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumValue(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            trailingLine = tn.line();\r\n        parent.add(name, value, cmnt());\r\n        parseInlineOptions({}); // skips enum value options\r\n        if (!parent.comments[name])\r\n            parent.comments[name] = cmnt(trailingLine);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (isFqTypeRef(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n\r\n                /* istanbul ignore next */\r\n                if (!isName(token))\r\n                    throw illegal(token, \"name\");\r\n\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name + \".\" + token, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var name = token;\r\n        var service = new Service(name);\r\n        service.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream),\r\n            trailingLine = tn.line();\r\n        method.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else {\r\n            skip(\";\");\r\n            if (!method.comment)\r\n                method.comment = cmnt(trailingLine);\r\n        }\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(reference))\r\n            throw illegal(reference, \"reference\");\r\n\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(36);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(26);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(25);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(17),\r\n    util   = require(34);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\nvar initParser = function() {\r\n    try { // excluded in noparse builds\r\n        parse  = require(24);\r\n        common = require(12);\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    initParser = null;\r\n};\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (initParser)\r\n        initParser();\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            if (sync)\r\n                throw err;\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(29);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar EventEmitter = require(34).EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n(Service.prototype = Object.create(EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(34),\r\n    rpc    = require(28);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(ServicePrototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.methodsArray.forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n\r\n            /* istanbul ignore next */\r\n            if (!request)\r\n                throw TypeError(\"request must not be null\");\r\n\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object.<string,*>} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {function(number=):?string} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        commentText = source\r\n            .substring(start, end)\r\n            .split(/\\n/g)\r\n            .map(function(line) {\r\n                return line.replace(/ *[*/]+ */, \"\").trim();\r\n            })\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isComment;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    isComment = charAt(start = offset + 1) === \"/\";\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 1);\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    isComment = charAt(start = offset + 1) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 2);\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        line: function() {\r\n            return line;\r\n        },\r\n        cmnt: function(trailingLine) {\r\n            var ret;\r\n            if (trailingLine === undefined)\r\n                ret = commentLine === line - 1 && commentText || null;\r\n            else {\r\n                if (!commentText)\r\n                    peek();\r\n                ret = commentLine === trailingLine && commentType === \"/\" && commentText || null;\r\n            }\r\n            if (ret) {\r\n                commentType = commentText = null;\r\n                commentLine = 0;\r\n            }\r\n            return ret;\r\n        }\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(16),\r\n    OneOf     = require(23),\r\n    Field     = require(17),\r\n    Service   = require(30),\r\n    Class     = require(11),\r\n    Message   = require(19),\r\n    Reader    = require(25),\r\n    Writer    = require(38),\r\n    util      = require(34),\r\n    encoder   = require(15),\r\n    decoder   = require(14),\r\n    verifier  = require(37),\r\n    converter = require(13);\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = this.fieldsArray.map(function(fld) { return fld.resolve().resolvedType; });\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nTypePrototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nTypePrototype.from = TypePrototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nTypePrototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(34);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\",    // 14\r\n    \"message\"   // 15\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(36);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(3);\r\nutil.EventEmitter = require(4);\r\nutil.extend       = require(5);\r\nutil.fetch        = require(6);\r\nutil.path         = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    return object ? Object.values ? Object.values(object) : Object.keys(object).map(function(key) {\r\n        return object[key];\r\n    }) : [];\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    /* istanbul ignore next */\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util.Buffer.allocUnsafe(sizeOrArray) // polyfilled\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util.Buffer.from(sizeOrArray) // polyfilled\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    if (src)\r\n        for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n            if (dst[keys[i]] === undefined || !ifNotSet)\r\n                dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    fieldNames.forEach(function(name) {\r\n        fieldMap[name] = 1;\r\n    });\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() {\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n        return undefined;\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    lazyTypes.forEach(function(types) {\r\n        Object.keys(types).forEach(function(index) {\r\n            var path = types[index |= 0].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            types[index] = ptr || null;\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(16),\r\n    util      = require(34);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9][0-9]*)$/.test(%s))\", ref) // it's important not to use any literals here that might be confused with short variable names by pbjs' beautify\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(36);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(39);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(38);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(36);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser (if not excluded)\r\ntry {\r\n    protobuf.tokenize     = require(\"./tokenize\");\r\n    protobuf.parse        = require(\"./parse\");\r\n    protobuf.common       = require(\"./common\");\r\n} catch (e) {} // eslint-disable-line no-empty\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(\"./writer\");\r\nprotobuf.BufferWriter     = require(\"./writer_buffer\");\r\nprotobuf.Reader           = require(\"./reader\");\r\nprotobuf.BufferReader     = require(\"./reader_buffer\");\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Class            = require(\"./class\");\r\nprotobuf.Message          = require(\"./message\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.rpc              = require(\"./rpc\");\r\nprotobuf.util             = require(\"./util\");\r\nprotobuf.configure        = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n/* istanbul ignore next */\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}