{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/common.js","src/converter.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/parse.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/tokenize.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/runtime.js","src/verifier.js","src/writer.js","src/writer_buffer.js","src"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","undefined","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","Type","TypeError","util","Message","merge","$type","fieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","long","emptyObject","oneofsArray","oneof","defineProperty","get","oneOfGetter","set","oneOfSetter","common","json","nested","google","protobuf","Any","fields","type_url","id","value","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","genValuePartial_fromObject","fieldIndex","prop","resolvedType","Enum","repeated","typeDefault","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","safeProp","toObject","repeatedFields","filter","mapFields","otherFields","valuesById","low","high","unsigned","toNumber","bytes","decoder","group","ref","types","basic","compat","packed","genTypePartial","encoder","partOf","wireType","mapKey","required","oneofFields","indexOf","options","ReflectionObject","comments","self","EnumPrototype","className","testJSON","fromJSON","toJSON","add","comment","isString","isInteger","remove","val","Field","toLowerCase","optional","message","Long","extensionField","declaringField","_packed","FieldPrototype","MapField","getOption","setOption","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","resolvedKeyType","MapFieldPrototype","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","Method","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","Service","nestedTypes","Namespace","nestedError","arrayToJSON","array","obj","_nestedArray","_clearProperties","clearCache","namespace","NamespacePrototype","methods","addJSON","toArray","nestedArray","nestedJson","ns","nestedName","getEnum","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","filterType","parentAlreadyChecked","root","found","lookupType","lookupService","lookupEnum","Root","ReflectionObjectPrototype","defineProperties","fullName","unshift","_handleAdd","_handleRemove","toString","OneOf","fieldNames","_fieldsArray","addFieldsToParent","OneOfPrototype","index","fieldName","isName","token","isTypeRef","isFqTypeRef","lower","camelCase","substring","toUpperCase","parse","illegal","filename","tn","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","readRange","parseId","sign","tokenLower","Infinity","NaN","parseInt","parseFloat","acceptNegative","parsePackage","pkg","parseImport","whichImports","weakImports","imports","parseSyntax","syntax","isProto3","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","cmnt","parseMapField","parseField","parseOneOf","extensions","reserved","parseGroup","applyCase","trailingLine","parseInlineOptions","lcFirst","ucFirst","valueType","enm","parseEnumValue","custom","parseOptionValue","service","parseMethod","st","method","reference","tokenize","head","keepCase","package","indexOutOfRange","writeLength","RangeError","pos","Reader","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","configure","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","BufferReader","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","exponent","mantissa","pow","float","readDouble","Float64Array","f64","double","skipType","_configure","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","resolvePath","initParser","load","finish","cb","process","parsed","sync","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","loadSync","isNode","newDeferred","rpc","rpcImpl","$rpc","endedByRPC","_methodsArray","ServicePrototype","methodName","inherited","methodsArray","requestDelimited","responseDelimited","rpcService","request","requestData","setImmediate","responseData","response","err2","unescape","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","setComment","commentType","commentLine","commentText","trim","stack","repeat","curr","isComment","delimRe","delim","expected","actual","equals","ret","_fieldsById","_oneofsArray","_ctor","TypePrototype","Writer","verifier","oneOfName","fieldsById","names","setup","fld","fork","ldelim","bake","LongBitsPrototype","zero","zzEncode","zeroHash","fromString","fromHash","hash","toHash","mask","part0","part1","part2","versions","node","Number","isFinite","utf8Write","encoding","allocUnsafe","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","dst","fieldMap","lazyResolve","lazyTypes","longs","enums","invalid","genVerifyValue","genVerifyKey","Op","noop","State","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","BufferWriter","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength","roots","window","amd"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object.<string,*>} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted\r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(34);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a class instance, which is also a {@link Message} prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(32);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        // create named constructor functions (codegen is required anyway)\r\n        ctor = util.codegen(\"p\")(\"return ctor.call(this,p)\").eof(type.name, {\r\n            ctor: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.fieldsArray.forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.oneofsArray.forEach(function(oneof) {\r\n        Object.defineProperty(prototype, oneof.resolve().name, {\r\n            get: util.oneOfGetter(oneof.oneof),\r\n            set: util.oneOfSetter(oneof.oneof)\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\nmodule.exports = common;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {Object.<string,*>} google/protobuf/any.proto Any\r\n * @property {Object.<string,*>} google/protobuf/duration.proto Duration\r\n * @property {Object.<string,*>} google/protobuf/empty.proto Empty\r\n * @property {Object.<string,*>} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {Object.<string,*>} google/protobuf/timestamp.proto Timestamp\r\n * @property {Object.<string,*>} google/protobuf/wrappers.proto Wrappers\r\n */\r\nfunction common(name, json) {\r\n    if (!/\\/|\\./.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/field_mask.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(16),\r\n    util = require(34);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) {\r\n            var values = field.resolvedType.values; gen\r\n            (\"switch(d%s){\", prop);\r\n            Object.keys(values).forEach(function(key) {\r\n                if (field.repeated && values[key] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", key)\r\n                (\"case %j:\", values[key])\r\n                    (\"m%s=%j\", prop, values[key])\r\n                    (\"break\");\r\n            }); gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low,d%s.high).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s&&d%s.length)\", prop, prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return new(this.ctor)\");\r\n    var gen = util.codegen(\"d\")\r\n    (\"var m=new(this.ctor)\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low,m%s.high).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n    var repeatedFields = fields.filter(function(field) { return field.resolve().repeated; });\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        repeatedFields.forEach(function(field) { gen\r\n        (\"d%s=[]\", util.safeProp(field.name));\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    var mapFields = fields.filter(function(field) { return field.map; });\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        mapFields.forEach(function(field) { gen\r\n        (\"d%s={}\", util.safeProp(field.name));\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    var otherFields = fields.filter(function(field) { return !(field.repeated || field.map); });\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        otherFields.forEach(function(field) {\r\n            var prop = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m%s!==undefined&&m%s!==null&&m.hasOwnProperty(%j)){\", prop, prop, field.name);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, i, prop);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(16),\r\n    types   = require(33),\r\n    util    = require(34);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new(this.ctor)\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(16),\r\n    types    = require(33),\r\n    util     = require(34);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var oneofs = mtype.oneofsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve();\r\n        if (field.partOf) // see below for oneofs\r\n            continue;\r\n        var type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length&&m.hasOwnProperty(%j)){\", ref, ref, field.name)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n                else if (field.bytes) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j))\", ref, field.name);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i]; gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        var oneofFields = oneof.fieldsArray;\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name); gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n    \r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    var self = this;\r\n    Object.keys(values || {}).forEach(function(key) {\r\n        self.valuesById[self.values[key] = values[key]] = key;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id, comment) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    var val = this.values[name];\r\n    /* istanbul ignore next */\r\n    if (val === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(16),\r\n    types     = require(33),\r\n    util      = require(34);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(FieldPrototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(18);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) {\r\n        // if not a basic type, resolve it\r\n        if (!Type)\r\n            Type = require(32);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        /* istanbul ignore next */\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // account for maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(17);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(33),\r\n    util    = require(34);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(32),\r\n    util = require(34);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream || undefined,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream || undefined,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias NamespaceBase.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(16),\r\n    Field   = require(17),\r\n    util    = require(34);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(32);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(30);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @memberof Namespace\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(NamespacePrototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            throw TypeError(\"nested.\" + nestedName + \" must be JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    if (!nestedTypes)\r\n        initNested();\r\n\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object must be \" + nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object must be an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            /* istanbul ignore next */\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path)) {\r\n        json = path;\r\n        path = undefined;\r\n    }\r\n    var ptr = this;\r\n    if (path)\r\n        while (path.length > 0) {\r\n            var part = path.shift();\r\n            if (ptr.nested && ptr.nested[part]) {\r\n                ptr = ptr.nested[part];\r\n                if (!(ptr instanceof Namespace))\r\n                    throw Error(\"path conflicts with non-namespace objects\");\r\n            } else\r\n                ptr.add(ptr = new Namespace(part));\r\n        }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(32);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(30);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.nestedArray;\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n    if (util.isString(path) && path.length)\r\n        path = path.split(\".\");\r\n    else if (!path.length)\r\n        return null;\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found && path.length === 1 && (!filterType || found instanceof filterType) || found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n        return found;\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(32);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(30);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(34);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(17);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(OneOfPrototype, \"fieldsArray\", {\r\n    get: function() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    if (index > -1)\r\n        this.oneof.splice(index, 1);\r\n    if (field.parent)\r\n        field.parent.remove(field);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(31),\r\n    Root      = require(27),\r\n    Type      = require(32),\r\n    Field     = require(17),\r\n    MapField  = require(18),\r\n    OneOf     = require(23),\r\n    Enum      = require(16),\r\n    Service   = require(30),\r\n    Method    = require(20),\r\n    types     = require(33),\r\n    util      = require(34);\r\n\r\nfunction isName(token) {\r\n    return /^[a-zA-Z_][a-zA-Z_0-9]*$/.test(token);\r\n}\r\n\r\nfunction isTypeRef(token) {\r\n    return /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction isFqTypeRef(token) {\r\n    return /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/.test(token);\r\n}\r\n\r\nfunction lower(token) {\r\n    return token === null ? null : token.toLowerCase();\r\n}\r\n\r\nfunction camelCase(str) {\r\n    return str.substring(0,1)\r\n         + str.substring(1)\r\n               .replace(/_([a-z])(?=[a-z]|$)/g, function($0, $1) { return $1.toUpperCase(); });\r\n}\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @typedef ParserResult\r\n * @type {Object.<string,*>}\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @typedef ParseOptions\r\n * @type {Object.<string,*>}\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    if (!root)\r\n        root = new Root();\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : camelCase;\r\n\r\n    function illegal(token, name) {\r\n        var filename = parse.filename;\r\n        parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line() + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (lower(token)) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token);\r\n        } catch (e) {\r\n            if (acceptTypeRef && isTypeRef(token))\r\n                return token;\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRange() {\r\n        var start = parseId(next());\r\n        var end = start;\r\n        if (skip(\"to\", true))\r\n            end = parseId(next());\r\n        skip(\";\");\r\n        return [ start, end ];\r\n    }\r\n\r\n    function parseNumber(token) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"inf\": return sign * Infinity;\r\n            case \"nan\": return NaN;\r\n            case \"0\": return 0;\r\n        }\r\n        if (/^[1-9][0-9]*$/.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (/^0[x][0-9a-f]+$/.test(tokenLower))\r\n            return sign * parseInt(token, 16);\r\n        if (/^0[0-7]+$/.test(token))\r\n            return sign * parseInt(token, 8);\r\n        if (/^(?!e)[0-9]*(?:\\.[0-9]*)?(?:[e][+-]?[0-9]+)?$/.test(tokenLower))\r\n            return sign * parseFloat(token);\r\n        throw illegal(token, \"number\");\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n            case \"max\": return 536870911;\r\n            case \"0\": return 0;\r\n        }\r\n        if (token.charAt(0) === \"-\" && !acceptNegative)\r\n            throw illegal(token, \"id\");\r\n        if (/^-?[1-9][0-9]*$/.test(token))\r\n            return parseInt(token, 10);\r\n        if (/^-?0[x][0-9a-f]+$/.test(tokenLower))\r\n            return parseInt(token, 16);\r\n        if (/^-?0[0-7]+$/.test(token))\r\n            return parseInt(token, 8);\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n        pkg = next();\r\n        if (!isTypeRef(pkg))\r\n            throw illegal(pkg, \"name\");\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = lower(readString());\r\n        isProto3 = syntax === \"proto3\";\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"type name\");\r\n        var type = new Type(name);\r\n        type.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                if (parseCommon(type, token))\r\n                    continue;\r\n                switch (tokenLower) {\r\n\r\n                    case \"map\":\r\n                        parseMapField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"required\":\r\n                    case \"optional\":\r\n                    case \"repeated\":\r\n                        parseField(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"oneof\":\r\n                        parseOneOf(type, tokenLower);\r\n                        break;\r\n\r\n                    case \"extensions\":\r\n                        (type.extensions || (type.extensions = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    case \"reserved\":\r\n                        (type.reserved || (type.reserved = [])).push(readRange(type, tokenLower));\r\n                        break;\r\n\r\n                    default:\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(type, \"optional\");\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n        if (!isTypeRef(type))\r\n            throw illegal(type, \"type\");\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var field = new Field(name, parseId(next()), type, rule, extend),\r\n            trailingLine = tn.line();\r\n        field.comment = cmnt();\r\n        parseInlineOptions(field);\r\n        if (!field.comment)\r\n            field.comment = cmnt(trailingLine);\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable.\r\n        if (field.repeated && types.packed[type] !== undefined && !isProto3)\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        type.comment = cmnt();\r\n        var field = new Field(fieldName, id, name, rule);\r\n        skip(\"{\");\r\n        while ((token = next()) !== \"}\") {\r\n            switch (token = lower(token)) {\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        }\r\n        skip(\";\", true);\r\n        parent.add(type).add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n        skip(\",\");\r\n        var valueType = next();\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(valueType))\r\n            throw illegal(valueType, \"type\");\r\n        skip(\">\");\r\n        var name = next();\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n        var field = new MapField(name, parseId(next()), keyType, valueType),\r\n            trailingLine = tn.line();\r\n        field.comment = cmnt();\r\n        parseInlineOptions(field);\r\n        if (!field.comment)\r\n            field.comment = cmnt(trailingLine);\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        var oneof = new OneOf(name),\r\n            trailingLine = tn.line();\r\n        oneof.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (token === \"option\") {\r\n                    parseOption(oneof, token);\r\n                    skip(\";\");\r\n                } else {\r\n                    push(token);\r\n                    parseField(oneof, \"optional\");\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else {\r\n            skip(\";\");\r\n            if (!oneof.comment)\r\n                oneof.comment = cmnt(trailingLine);\r\n        }\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var enm = new Enum(name);\r\n        enm.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                if (lower(token) === \"option\") {\r\n                    parseOption(enm, token);\r\n                    skip(\";\");\r\n                } else\r\n                    parseEnumValue(enm, token);\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            trailingLine = tn.line();\r\n        parent.add(name, value, cmnt());\r\n        parseInlineOptions({}); // skips enum value options\r\n        if (!parent.comments[name])\r\n            parent.comments[name] = cmnt(trailingLine);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var custom = skip(\"(\", true);\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        if (custom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (isFqTypeRef(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n\r\n                /* istanbul ignore next */\r\n                if (!isName(token))\r\n                    throw illegal(token, \"name\");\r\n\r\n                if (skip(\":\", true))\r\n                    setOption(parent, name + \".\" + token, readValue(true));\r\n                else\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n            }\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n        else\r\n            parent[name] = value;\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        skip(\";\");\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n        token = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(token))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var name = token;\r\n        var service = new Service(name);\r\n        service.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(service, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n                    case \"rpc\":\r\n                        parseMethod(service, tokenLower);\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n        var name = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isName(name))\r\n            throw illegal(name, \"name\");\r\n        var requestType, requestStream,\r\n            responseType, responseStream;\r\n        skip(\"(\");\r\n        var st;\r\n        if (skip(st = \"stream\", true))\r\n            requestStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(st, true))\r\n            responseStream = true;\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream),\r\n            trailingLine = tn.line();\r\n        method.comment = cmnt();\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"option\":\r\n                        parseOption(method, tokenLower);\r\n                        skip(\";\");\r\n                        break;\r\n\r\n                    /* istanbul ignore next */\r\n                    default:\r\n                        throw illegal(token);\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else {\r\n            skip(\";\");\r\n            if (!method.comment)\r\n                method.comment = cmnt(trailingLine);\r\n        }\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n        var reference = next();\r\n\r\n        /* istanbul ignore next */\r\n        if (!isTypeRef(reference))\r\n            throw illegal(reference, \"reference\");\r\n\r\n        if (skip(\"{\", true)) {\r\n            while ((token = next()) !== \"}\") {\r\n                var tokenLower = lower(token);\r\n                switch (tokenLower) {\r\n                    case \"required\":\r\n                    case \"repeated\":\r\n                    case \"optional\":\r\n                        parseField(parent, tokenLower, reference);\r\n                        break;\r\n                    default:\r\n                        /* istanbul ignore next */\r\n                        if (!isProto3 || !isTypeRef(token))\r\n                            throw illegal(token);\r\n                        push(token);\r\n                        parseField(parent, \"optional\", reference);\r\n                        break;\r\n                }\r\n            }\r\n            skip(\";\", true);\r\n        } else\r\n            skip(\";\");\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        var tokenLower = lower(token);\r\n        switch (tokenLower) {\r\n\r\n            case \"package\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n                /* istanbul ignore next */\r\n                if (!head)\r\n                    throw illegal(token);\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {ParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {ParseOptions} defaults Default {@link ParseOptions}\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(36);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(26);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(25);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(17),\r\n    util   = require(34);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\nvar initParser = function() {\r\n    try { // excluded in noparse builds\r\n        parse  = require(24);\r\n        common = require(12);\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    initParser = null;\r\n};\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (initParser)\r\n        initParser();\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            if (sync)\r\n                throw err;\r\n            finish(err);\r\n            return;\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self);\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(29);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar EventEmitter = require(34).EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n(Service.prototype = Object.create(EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(34),\r\n    rpc    = require(28);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(ServicePrototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.methodsArray.forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) // already ended?\r\n                return;\r\n\r\n            /* istanbul ignore next */\r\n            if (!request)\r\n                throw TypeError(\"request must not be null\");\r\n\r\n            method.resolve();\r\n            var requestData;\r\n            try {\r\n                requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish();\r\n            } catch (err) {\r\n                (typeof setImmediate === \"function\" ? setImmediate : setTimeout)(function() { callback(err); });\r\n                return;\r\n            }\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    return callback ? callback(err) : undefined;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    return callback ? callback(\"error\", err2) : undefined;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                return callback ? callback(null, response) : undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nfunction unescape(str) {\r\n    return str.replace(/\\\\(.?)/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            case \"0\":\r\n                return \"\\u0000\";\r\n            default:\r\n                return $1;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @typedef {Object.<string,*>} TokenizerHandle\r\n * @property {function():number} line Gets the current line number\r\n * @property {function():?string} next Gets the next token and advances (`null` on eof)\r\n * @property {function():?string} peek Peeks for the next token (`null` on eof)\r\n * @property {function(string)} push Pushes a token back to the stack\r\n * @property {function(string, boolean=):boolean} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {function(number=):?string} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {TokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        commentText = source\r\n            .substring(start, end)\r\n            .split(/\\n/g)\r\n            .map(function(line) {\r\n                return line.replace(/ *[*/]+ */, \"\").trim();\r\n            })\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {?string} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isComment;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (/\\s/.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    isComment = charAt(start = offset + 1) === \"/\";\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 1);\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    isComment = charAt(start = offset + 1) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            return null;\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isComment)\r\n                        setComment(start, offset - 2);\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        if (offset === length)\r\n            return null;\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {?string} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    return {\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        line: function() {\r\n            return line;\r\n        },\r\n        cmnt: function(trailingLine) {\r\n            var ret;\r\n            if (trailingLine === undefined)\r\n                ret = commentLine === line - 1 && commentText || null;\r\n            else {\r\n                if (!commentText)\r\n                    peek();\r\n                ret = commentLine === trailingLine && commentType === \"/\" && commentText || null;\r\n            }\r\n            if (ret) {\r\n                commentType = commentText = null;\r\n                commentLine = 0;\r\n            }\r\n            return ret;\r\n        }\r\n    };\r\n    /* eslint-enable callback-return */\r\n}","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(16),\r\n    OneOf     = require(23),\r\n    Field     = require(17),\r\n    Service   = require(30),\r\n    Class     = require(11),\r\n    Message   = require(19),\r\n    Reader    = require(25),\r\n    Writer    = require(38),\r\n    util      = require(34),\r\n    encoder   = require(15),\r\n    decoder   = require(14),\r\n    verifier  = require(37),\r\n    converter = require(13);\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    if (json.fields)\r\n        Object.keys(json.fields).forEach(function(fieldName) {\r\n            type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n        });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        if (this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.message = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = this.fieldsArray.map(function(fld) { return fld.resolve().resolvedType; });\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nTypePrototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nTypePrototype.from = TypePrototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nTypePrototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(34);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(36);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(3);\r\nutil.EventEmitter = require(4);\r\nutil.extend       = require(5);\r\nutil.fetch        = require(6);\r\nutil.path         = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    return object ? Object.values ? Object.values(object) : Object.keys(object).map(function(key) {\r\n        return object[key];\r\n    }) : [];\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(36);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\nutil.base64   = require(2);\r\nutil.inquire  = require(7);\r\nutil.utf8     = require(10);\r\nutil.pool     = require(9);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {};\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = typeof process !== \"undefined\" && Boolean(process.versions && process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util.Buffer.allocUnsafe(sizeOrArray) // polyfilled\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util.Buffer.from(sizeOrArray) // polyfilled\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\nutil.LongBits = require(35);\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = typeof dcodeIO !== \"undefined\" && /* istanbul ignore next */ dcodeIO && /* istanbul ignore next */ dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    fieldNames.forEach(function(name) {\r\n        fieldMap[name] = 1;\r\n    });\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    lazyTypes.forEach(function(types) {\r\n        Object.keys(types).forEach(function(index) {\r\n            var path = types[index |= 0].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            types[index] = ptr;\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(16),\r\n    util      = require(34);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9][0-9]*)$/.test(%s))\", ref) // it's important not to use any literals here that might be confused with short variable names by pbjs' beautify\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(36);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(39);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(38);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(36);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n// function load(filename:string, root:Root, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Parser (if not excluded)\r\ntry {\r\n    protobuf.tokenize     = require(31);\r\n    protobuf.parse        = require(24);\r\n    protobuf.common       = require(12);\r\n} catch (e) {} // eslint-disable-line no-empty\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(38);\r\nprotobuf.BufferWriter     = require(39);\r\nprotobuf.Reader           = require(25);\r\nprotobuf.BufferReader     = require(26);\r\nprotobuf.encoder          = require(15);\r\nprotobuf.decoder          = require(14);\r\nprotobuf.verifier         = require(37);\r\nprotobuf.converter        = require(13);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(22);\r\nprotobuf.Namespace        = require(21);\r\nprotobuf.Root             = require(27);\r\nprotobuf.Enum             = require(16);\r\nprotobuf.Type             = require(32);\r\nprotobuf.Field            = require(17);\r\nprotobuf.OneOf            = require(23);\r\nprotobuf.MapField         = require(18);\r\nprotobuf.Service          = require(30);\r\nprotobuf.Method           = require(20);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(11);\r\nprotobuf.Message          = require(19);\r\n\r\n// Utility\r\nprotobuf.types            = require(33);\r\nprotobuf.rpc              = require(28);\r\nprotobuf.util             = require(34);\r\nprotobuf.configure        = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n/* istanbul ignore next */\r\nif (typeof window !== \"undefined\" && window)\r\n    window.protobuf = protobuf;\r\nelse if (typeof self !== \"undefined\" && self)\r\n    self.protobuf = protobuf;\r\nelse\r\n    this.protobuf = protobuf; // eslint-disable-line no-invalid-this\r\n\r\n/* istanbul ignore next */\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n"],"sourceRoot":"."}