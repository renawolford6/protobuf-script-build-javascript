{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/converter.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/index-light","src/index-minimal.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/minimal.js","src/verifier.js","src/writer.js","src/writer_buffer.js"],"names":["global","undefined","e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","ctor","Type","TypeError","util","Message","constructor","merge","$type","fieldsArray","_fieldsArray","isArray","defaultValue","emptyArray","isObject","long","emptyObject","ctorProperties","oneofsArray","_oneofsArray","get","oneOfGetter","oneof","set","oneOfSetter","defineProperties","create","genValuePartial_fromObject","field","fieldIndex","prop","resolvedType","Enum","values","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","fields","safeProp","toObject","repeatedFields","mapFields","otherFields","valuesById","low","high","unsigned","toNumber","bytes","decoder","group","ref","id","keyType","types","basic","compat","packed","genTypePartial","encoder","oneofs","partOf","wireType","mapKey","required","indexOf","options","ReflectionObject","comments","className","fromJSON","json","toJSON","add","comment","isString","isInteger","remove","val","Field","rule","extend","toLowerCase","optional","message","Long","extensionField","declaringField","_packed","defineProperty","getOption","setOption","value","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","load","filename","root","protobuf","Root","loadSync","build","verifier","Namespace","OneOf","MapField","Service","Method","configure","Reader","_configure","roots","Writer","BufferWriter","BufferReader","rpc","define","amd","resolvedKeyType","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","arrayToJSON","array","obj","nested","_nestedArray","clearCache","namespace","initNestedTypes","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","setOptions","onAdd","onRemove","ptr","part","resolveAll","filterType","parentAlreadyChecked","found","lookupType","lookupService","lookupEnum","unshift","_handleAdd","_handleRemove","toString","fieldNames","addFieldsToParent","index","self","indexOutOfRange","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","int64","uint64","sint64","fixed64","sfixed64","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","skip","skipType","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","parse","common","resolvePath","finish","cb","sync","process","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","isNode","exposeRe","_parse","_common","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","response","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","lcFirst","m","q","extensions","reserved","_fieldsById","_ctor","fieldsById","filter","setup","fork","ldelim","bake","ucFirst","toUpperCase","zero","zzEncode","zeroHash","parseInt","fromString","fromHash","hash","toHash","mask","part0","part1","part2","versions","node","Number","isFinite","utf8Write","encoding","allocUnsafe","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","dst","fieldMap","lazyResolve","lazyTypes","longs","enums","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(6);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted\r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(32);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction Class(type, ctor) {\r\n    if (!Type)\r\n        Type = require(30);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        // create named constructor functions (codegen is required anyway)\r\n        ctor = util.codegen(\"p\")(\"return c.call(this,p)\").eof(type.name, {\r\n            c: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    (ctor.prototype = new Message()).constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    ctor.prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    var i = 0;\r\n    for (; i < /* initializes */ type.fieldsArray.length; ++i) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        ctor.prototype[type._fieldsArray[i].name] = Array.isArray(type._fieldsArray[i].resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(type._fieldsArray[i].defaultValue) && !type._fieldsArray[i].long\r\n              ? util.emptyObject\r\n              : type._fieldsArray[i].defaultValue;\r\n    }\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    var ctorProperties = {};\r\n    for (i = 0; i < /* initializes */ type.oneofsArray.length; ++i)\r\n        ctorProperties[type._oneofsArray[i].resolve().name] = {\r\n            get: util.oneOfGetter(type._oneofsArray[i].oneof),\r\n            set: util.oneOfSetter(type._oneofsArray[i].oneof)\r\n        };\r\n    if (i)\r\n        Object.defineProperties(ctor.prototype, ctorProperties);\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return ctor.prototype;\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @function\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = Class;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(14),\r\n    util = require(32);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low,d%s.high).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low,m%s.high).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        otherFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (fields[i].resolve().repeated)\r\n            repeatedFields.push(fields[i]);\r\n        else if (fields[i].map)\r\n            mapFields.push(fields[i]);\r\n        else\r\n            otherFields.push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0, field; i < otherFields.length; ++i) {\r\n            var field = otherFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    for (i = 0, field; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m%s!==undefined&&m%s!==null&&m.hasOwnProperty(%j)){\", prop, prop, field.name);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, i, prop);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(14),\r\n    types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(14),\r\n    types    = require(31),\r\n    util     = require(32);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray,\r\n        oneofs = mtype.oneofsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve();\r\n        if (field.partOf) // see below for oneofs\r\n            continue;\r\n        var type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length&&m.hasOwnProperty(%j)){\", ref, ref, field.name)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n                else if (field.bytes) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j))\", ref, field.name);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i]; gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        for (var j = 0; j < /* initializes */ oneof.fieldsArray.length; ++j) {\r\n            var field    = oneof._fieldsArray[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name); gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n    \r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && !util.isObject(values))\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id\");\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    this.comments[name] = comment || null;\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(14),\r\n    types = require(31),\r\n    util  = require(32);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n\r\n        /* istanbul ignore if */\r\n        if (!Type)\r\n            Type = require(30);\r\n\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(13);\r\nprotobuf.decoder          = require(12);\r\nprotobuf.verifier         = require(35);\r\nprotobuf.converter        = require(11);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(22);\r\nprotobuf.Namespace        = require(21);\r\nprotobuf.Root             = require(26);\r\nprotobuf.Enum             = require(14);\r\nprotobuf.Type             = require(30);\r\nprotobuf.Field            = require(15);\r\nprotobuf.OneOf            = require(23);\r\nprotobuf.MapField         = require(18);\r\nprotobuf.Service          = require(29);\r\nprotobuf.Method           = require(20);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(10);\r\nprotobuf.Message          = require(19);\r\n\r\n// Utility\r\nprotobuf.types            = require(31);\r\nprotobuf.util             = require(32);\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n * \r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n * \r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(36);\r\nprotobuf.BufferWriter = require(37);\r\nprotobuf.Reader       = require(24);\r\nprotobuf.BufferReader = require(25);\r\n\r\n// Utility\r\nprotobuf.util         = require(34);\r\nprotobuf.rpc          = require(27);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n// assumes that loading \"long\" / define itself is asynchronous so that other builds can safely\r\n// continue populating `protobuf`. will see a BOOM eventually if this assumption is wrong:\r\n/* istanbul ignore next */\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(15);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar Type = require(30),\r\n    util = require(32);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n    /* istanbul ignore if */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore if */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(14),\r\n    Field    = require(15),\r\n    util     = require(32);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar initNestedTypes = function() {\r\n    Type    = require(30);\r\n    Service = require(29);\r\n    initNestedTypes = null;\r\n};\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        if (initNestedTypes)\r\n            initNestedTypes();\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (initNestedTypes)\r\n        initNestedTypes();\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterType || found instanceof filterType)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (initNestedTypes)\r\n        initNestedTypes();\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (initNestedTypes)\r\n        initNestedTypes();\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(32);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Root)\r\n        Root = require(26);\r\n\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Root)\r\n        Root = require(26);\r\n\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(15);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(OneOf.prototype, \"fieldsArray\", {\r\n    get: function() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof._fieldsArray.length; ++i)\r\n            if (!oneof._fieldsArray[i].parent)\r\n                oneof.parent.add(oneof._fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this._fieldsArray.length; ++i)\r\n        if ((field = this._fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        /* istanbul ignore next */\r\n        if (!BufferReader)\r\n            BufferReader = require(25);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        Reader.prototype.int64 = read_int64_long;\r\n        Reader.prototype.uint64 = read_uint64_long;\r\n        Reader.prototype.sint64 = read_sint64_long;\r\n        Reader.prototype.fixed64 = read_fixed64_long;\r\n        Reader.prototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        Reader.prototype.int64 = read_int64_number;\r\n        Reader.prototype.uint64 = read_uint64_number;\r\n        Reader.prototype.sint64 = read_sint64_number;\r\n        Reader.prototype.fixed64 = read_fixed64_number;\r\n        Reader.prototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(24);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(15),\r\n    Enum    = require(14),\r\n    util    = require(32);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore next */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        fetch(self.resolvePath(filename, parsed.imports[i]));\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        fetch(self.resolvePath(filename, parsed.weakImports[i]), true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore next */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued)\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0; i < filename.length; ++i)\r\n        fetch(self.resolvePath(\"\", filename[i]));\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {   \r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else /* everything else is a namespace */ {\r\n\r\n        /* istanbul ignore next */\r\n        if (!Type)\r\n            Type = require(30);\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(_parse, _common) {\r\n    parse = _parse;\r\n    common = _common;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(28);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(34);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n * \r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of an {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n * \r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(\"error\", err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(32),\r\n    rpc    = require(27);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst(this._methodsArray[i].resolve().name)] = util.codegen(\"r\",\"c\")(\"return this.rpcCall(m,q,s,r,c)\").eof(util.lcFirst(this._methodsArray[i].name), {\r\n            m: this._methodsArray[i],\r\n            q: this._methodsArray[i].resolvedRequestType.ctor,\r\n            s: this._methodsArray[i].resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(14),\r\n    OneOf     = require(23),\r\n    Field     = require(15),\r\n    MapField  = require(18),\r\n    Service   = require(29),\r\n    Class     = require(10),\r\n    Message   = require(19),\r\n    Reader    = require(24),\r\n    Writer    = require(36),\r\n    util      = require(32),\r\n    encoder   = require(13),\r\n    decoder   = require(12),\r\n    verifier  = require(35),\r\n    converter = require(11);\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            /* istanbul ignore next */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        /* istanbul ignore next */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        /* istanbul ignore next */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.from = Type.prototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(32);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(34);\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(7);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\nutil.asPromise    = require(1);\r\nutil.base64       = require(2);\r\nutil.EventEmitter = require(4);\r\nutil.inquire      = require(6);\r\nutil.utf8         = require(9);\r\nutil.pool         = require(8);\r\nutil.LongBits     = require(33);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {};\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util.Buffer.allocUnsafe(sizeOrArray) // polyfilled\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util.Buffer.from(sizeOrArray) // polyfilled\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(14),\r\n    util      = require(32);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9][0-9]*)$/.test(%s))\", ref) // it's important not to use any literals here that might be confused with short variable names by pbjs' beautify\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        /* istanbul ignore next */\r\n        if (!BufferWriter)\r\n            BufferWriter = require(37);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(36);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(34);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n"],"sourceRoot":"."}