{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/class.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light","../src/index-minimal.js","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/writer.js","../src/writer_buffer.js"],"names":["global","undefined","modules","cache","$require","name","$module","call","exports","protobuf","entries","define","amd","Long","util","configure","module","1","require","asPromise","fn","ctx","params","i","arguments","length","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","n","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","t","j","b","String","fromCharCode","decode","offset","c","charCodeAt","Error","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","e","EventEmitter","_listeners","prototype","on","evt","off","listeners","splice","emit","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","toString","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","moduleName","mod","eval","path","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","ctor","Type","TypeError","generate","constructor","Message","merge","$type","fieldsArray","_fieldsArray","isArray","defaultValue","emptyArray","isObject","long","emptyObject","ctorProperties","oneofsArray","_oneofsArray","get","oneOfGetter","oneof","set","oneOfSetter","defineProperties","create","genValuePartial_fromObject","field","fieldIndex","prop","resolvedType","Enum","values","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","fields","safeProp","toObject","repeatedFields","mapFields","otherFields","valuesById","low","high","unsigned","toNumber","bytes","missing","decoder","group","ref","id","keyType","types","basic","compat","packed","rfield","required","genTypePartial","compareFieldsById","a","encoder","sort","index","indexOf","partOf","wireType","mapKey","ReflectionObject","comments","className","fromJSON","json","toJSON","add","comment","isString","isInteger","allow_alias","remove","val","Field","rule","extend","ruleRe","toLowerCase","optional","message","extensionField","declaringField","_packed","defineProperty","getOption","setOption","value","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","load","root","Root","loadSync","build","verifier","Namespace","OneOf","MapField","Service","Method","_configure","Reader","BufferReader","roots","Writer","BufferWriter","rpc","resolvedKeyType","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","nested","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","setOptions","onAdd","onRemove","ptr","part","resolveAll","filterType","parentAlreadyChecked","found","lookupService","lookupEnum","Type_","Service_","unshift","_handleAdd","_handleRemove","Root_","fieldNames","addFieldsToParent","self","indexOutOfRange","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","readFixed32","readFixed64","create_array","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","skip","skipType","BufferReader_","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","parse","common","resolvePath","finish","cb","sync","process","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","lcFirst","m","q","s","oneofs","extensions","reserved","_fieldsById","_ctor","fieldsById","filter","isReservedId","isReservedName","setup","fork","ldelim","bake","o","ucFirst","toUpperCase","zero","zzEncode","zeroHash","parseInt","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","newError","CustomError","captureStackTrace","stack","versions","node","Number","isFinite","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","lazyResolve","lazyTypes","longs","enums","encoding","allocUnsafe","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":";;;;;;CAAA,SAAAA,EAAAC,GAAA,cAAA,SAAAC,EAAAC,GAOA,QAAAC,GAAAC,GACA,GAAAC,GAAAH,EAAAE,EAGA,OAFAC,IACAJ,EAAAG,GAAA,GAAAE,KAAAD,EAAAH,EAAAE,IAAAG,YAAAJ,EAAAE,EAAAA,EAAAE,SACAF,EAAAE,QAIA,GAAAC,GAAAT,EAAAS,SAAAL,EAAAM,GAGA,mBAAAC,SAAAA,OAAAC,KACAD,QAAA,QAAA,SAAAE,GAGA,MAFAJ,GAAAK,KAAAD,KAAAA,EACAJ,EAAAM,YACAN,IAIA,gBAAAO,SAAAA,QAAAA,OAAAR,UACAQ,OAAAR,QAAAC,KAEAQ,GAAA,SAAAC,EAAAF,GClBA,QAAAG,GAAAC,EAAAC,GAEA,IAAA,GADAC,MACAC,EAAA,EAAAA,EAAAC,UAAAC,QACAH,EAAAI,KAAAF,UAAAD,KACA,IAAAI,IAAA,CACA,OAAA,IAAAC,SAAA,SAAAC,EAAAC,GACAR,EAAAI,KAAA,SAAAK,GACA,GAAAJ,EAEA,GADAA,GAAA,EACAI,EACAD,EAAAC,OACA,CAEA,IAAA,GADAC,MACAT,EAAA,EAAAA,EAAAC,UAAAC,QACAO,EAAAN,KAAAF,UAAAD,KACAM,GAAAI,MAAA,KAAAD,KAIA,KACAZ,EAAAa,MAAAZ,GAAAa,KAAAZ,GACA,MAAAS,GACAJ,IACAA,GAAA,EACAG,EAAAC,OAlCAf,EAAAR,QAAAW,0BCMA,GAAAgB,GAAA3B,CAOA2B,GAAAV,OAAA,SAAAW,GACA,GAAAC,GAAAD,EAAAX,MACA,KAAAY,EACA,MAAA,EAEA,KADA,GAAAC,GAAA,IACAD,EAAA,EAAA,GAAA,MAAAD,EAAAG,OAAAF,MACAC,CACA,OAAAE,MAAAC,KAAA,EAAAL,EAAAX,QAAA,EAAAa,EAUA,KAAA,GANAI,GAAAC,MAAA,IAGAC,EAAAD,MAAA,KAGApB,EAAA,EAAAA,EAAA,IACAqB,EAAAF,EAAAnB,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,EAAAA,EAAA,GAAA,IAAAA,GASAY,GAAAU,OAAA,SAAAC,EAAAC,EAAAC,GAKA,IAJA,GAGAC,GAHAb,KACAb,EAAA,EACA2B,EAAA,EAEAH,EAAAC,GAAA,CACA,GAAAG,GAAAL,EAAAC,IACA,QAAAG,GACA,IAAA,GACAd,EAAAb,KAAAmB,EAAAS,GAAA,GACAF,GAAA,EAAAE,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAd,EAAAb,KAAAmB,EAAAO,EAAAE,GAAA,GACAF,GAAA,GAAAE,IAAA,EACAD,EAAA,CACA,MACA,KAAA,GACAd,EAAAb,KAAAmB,EAAAO,EAAAE,GAAA,GACAf,EAAAb,KAAAmB,EAAA,GAAAS,GACAD,EAAA,GAUA,MANAA,KACAd,EAAAb,KAAAmB,EAAAO,GACAb,EAAAb,GAAA,GACA,IAAA2B,IACAd,EAAAb,EAAA,GAAA,KAEA6B,OAAAC,aAAApB,MAAAmB,OAAAhB,GAaAD,GAAAmB,OAAA,SAAAlB,EAAAU,EAAAS,GAIA,IAAA,GADAN,GAFAF,EAAAQ,EACAL,EAAA,EAEA3B,EAAA,EAAAA,EAAAa,EAAAX,QAAA,CACA,GAAA+B,GAAApB,EAAAqB,WAAAlC,IACA,IAAA,KAAAiC,GAAAN,EAAA,EACA,KACA,KAAAM,EAAAZ,EAAAY,MAAAvD,EACA,KAAAyD,OAnBA,mBAoBA,QAAAR,GACA,IAAA,GACAD,EAAAO,EACAN,EAAA,CACA,MACA,KAAA,GACAJ,EAAAS,KAAAN,GAAA,GAAA,GAAAO,IAAA,EACAP,EAAAO,EACAN,EAAA,CACA,MACA,KAAA,GACAJ,EAAAS,MAAA,GAAAN,IAAA,GAAA,GAAAO,IAAA,EACAP,EAAAO,EACAN,EAAA,CACA,MACA,KAAA,GACAJ,EAAAS,MAAA,EAAAN,IAAA,EAAAO,EACAN,EAAA,GAIA,GAAA,IAAAA,EACA,KAAAQ,OA1CA,mBA2CA,OAAAH,GAAAR,GAQAZ,EAAAwB,KAAA,SAAAvB,GACA,MAAA,sEAAAuB,KAAAvB,0BC3GA,QAAAwB,KAmBA,QAAAC,KAGA,IAFA,GAAA7B,MACAT,EAAA,EACAA,EAAAC,UAAAC,QACAO,EAAAN,KAAAF,UAAAD,KACA,IAAAuC,GAAAC,EAAA9B,MAAA,KAAAD,GACAgC,EAAAC,CACA,IAAAC,EAAAzC,OAAA,CACA,GAAA0C,GAAAD,EAAAA,EAAAzC,OAAA,EAGA2C,GAAAT,KAAAQ,GACAH,IAAAC,EACAI,EAAAV,KAAAQ,MACAH,EAGAM,EAAAX,KAAAQ,KAAAG,EAAAX,KAAAG,IACAE,IAAAC,EACAM,GAAA,GACAA,GAAAC,EAAAb,KAAAQ,KACAH,IAAAC,EACAM,GAAA,GAIAE,EAAAd,KAAAG,KACAE,IAAAC,GAEA,IAAA1C,EAAA,EAAAA,EAAAyC,IAAAzC,EACAuC,EAAA,KAAAA,CAEA,OADAI,GAAAxC,KAAAoC,GACAD,EASA,QAAAa,GAAArE,GACA,MAAA,YAAAA,EAAA,IAAAA,EAAAsE,QAAA,WAAA,KAAA,IAAA,IAAArD,EAAAsD,KAAA,KAAA,QAAAV,EAAAU,KAAA,MAAA,MAYA,QAAAC,GAAAxE,EAAAyE,GACA,gBAAAzE,KACAyE,EAAAzE,EACAA,EAAAJ,EAEA,IAAA8E,GAAAlB,EAAAa,IAAArE,EACAuD,GAAAoB,SACAC,QAAAC,IAAA,oBAAAH,EAAAJ,QAAA,MAAA,MAAAA,QAAA,MAAA,MACA,IAAAQ,GAAAC,OAAAD,KAAAL,IAAAA,MACA,OAAAO,UAAApD,MAAA,KAAAkD,EAAAG,OAAA,UAAAP,IAAA9C,MAAA,KAAAkD,EAAAI,IAAA,SAAAC,GAAA,MAAAV,GAAAU,MA7EA,IAAA,GAJAlE,MACA4C,KACAD,EAAA,EACAM,GAAA,EACAhD,EAAA,EAAAA,EAAAC,UAAAC,QACAH,EAAAI,KAAAF,UAAAD,KAwFA,OA9BAsC,GAAAa,IAAAA,EA4BAb,EAAAgB,IAAAA,EAEAhB,EAGA,QAAAE,GAAA0B,GAGA,IAFA,GAAAzD,MACAT,EAAA,EACAA,EAAAC,UAAAC,QACAO,EAAAN,KAAAF,UAAAD,KAcA,IAbAA,EAAA,EACAkE,EAAAA,EAAAd,QAAA,aAAA,SAAAe,EAAAC,GACA,OAAAA,GACA,IAAA,IACA,MAAAnD,MAAAoD,MAAA5D,EAAAT,KACA,KAAA,IACA,OAAAS,EAAAT,IACA,KAAA,IACA,MAAAsE,MAAAC,UAAA9D,EAAAT,KACA,SACA,MAAAS,GAAAT,QAGAA,IAAAS,EAAAP,OACA,KAAAiC,OAAA,0BACA,OAAA+B,GAxIAzE,EAAAR,QAAAoD,CAEA,IAAAQ,GAAA,QACAK,EAAA,SACAH,EAAA,KACAD,EAAA,kDACAG,EAAA,+CAqIAZ,GAAAG,QAAAA,EACAH,EAAAmC,WAAA,CAAA,KAAAnC,EAAAmC,UAAA,IAAAnC,EAAA,IAAA,KAAA,cAAAiB,MAAA,EAAA,GAAA,MAAAmB,IACApC,EAAAoB,SAAA,wBCrIA,QAAAiB,KAOA/D,KAAAgE,KAfAlF,EAAAR,QAAAyF,EAyBAA,EAAAE,UAAAC,GAAA,SAAAC,EAAAjF,EAAAC,GAKA,OAJAa,KAAAgE,EAAAG,KAAAnE,KAAAgE,EAAAG,QAAA3E,MACAN,GAAAA,EACAC,IAAAA,GAAAa,OAEAA,MASA+D,EAAAE,UAAAG,IAAA,SAAAD,EAAAjF,GACA,GAAAiF,IAAApG,EACAiC,KAAAgE,SAEA,IAAA9E,IAAAnB,EACAiC,KAAAgE,EAAAG,UAGA,KAAA,GADAE,GAAArE,KAAAgE,EAAAG,GACA9E,EAAA,EAAAA,EAAAgF,EAAA9E,QACA8E,EAAAhF,GAAAH,KAAAA,EACAmF,EAAAC,OAAAjF,EAAA,KAEAA,CAGA,OAAAW,OASA+D,EAAAE,UAAAM,KAAA,SAAAJ,GACA,GAAAE,GAAArE,KAAAgE,EAAAG,EACA,IAAAE,EAAA,CAGA,IAFA,GAAAvE,MACAT,EAAA,EACAA,EAAAC,UAAAC,QACAO,EAAAN,KAAAF,UAAAD,KACA,KAAAA,EAAA,EAAAA,EAAAgF,EAAA9E,QACA8E,EAAAhF,GAAAH,GAAAa,MAAAsE,EAAAhF,KAAAF,IAAAW,GAEA,MAAAE,6BCzCA,QAAAwE,GAAAC,EAAAC,EAAAC,GAOA,MANA,kBAAAD,IACAC,EAAAD,EACAA,MACAA,IACAA,MAEAC,GAIAD,EAAAE,KAAAC,GAAAA,EAAAC,SACAD,EAAAC,SAAAL,EAAA,SAAA5E,EAAAkF,GACA,MAAAlF,IAAA,mBAAAmF,gBACAR,EAAAI,IAAAH,EAAAC,EAAAC,GACA9E,EACA8E,EAAA9E,GACA8E,EAAA,KAAAD,EAAAO,OAAAF,EAAAA,EAAAG,SAAA,WAIAV,EAAAI,IAAAH,EAAAC,EAAAC,GAbA1F,EAAAuF,EAAAxE,KAAAyE,EAAAC,GAxCA5F,EAAAR,QAAAkG,CAEA,IAAAvF,GAAAD,EAAA,GACAmG,EAAAnG,EAAA,GAEA6F,EAAAM,EAAA,KAwEAX,GAAAI,IAAA,SAAAH,EAAAC,EAAAC,GACA,GAAAC,GAAA,GAAAI,eACAJ,GAAAQ,mBAAA,WAEA,GAAA,IAAAR,EAAAS,WACA,MAAAtH,EAKA,IAAA,IAAA6G,EAAAU,QAAA,MAAAV,EAAAU,OACA,MAAAX,GAAAnD,MAAA,UAAAoD,EAAAU,QAIA,IAAAZ,EAAAO,OAAA,CACA,GAAArE,GAAAgE,EAAAW,QACA,KAAA3E,EAAA,CACAA,IACA,KAAA,GAAAvB,GAAA,EAAAA,EAAAuF,EAAAY,aAAAjG,SAAAF,EACAuB,EAAApB,KAAA,IAAAoF,EAAAY,aAAAjE,WAAAlC,IAEA,MAAAsF,GAAA,KAAA,mBAAAc,YAAA,GAAAA,YAAA7E,GAAAA,GAEA,MAAA+D,GAAA,KAAAC,EAAAY,eAGAd,EAAAO,SAEA,oBAAAL,IACAA,EAAAc,iBAAA,sCACAd,EAAAe,aAAA,eAGAf,EAAAgB,KAAA,MAAAnB,GACAG,EAAAiB,uCCxGA,QAAAV,GAAAW,GACA,IACA,GAAAC,GAAAC,KAAA,QAAAvD,QAAA,IAAA,OAAAqD,EACA,IAAAC,IAAAA,EAAAxG,QAAA2D,OAAAD,KAAA8C,GAAAxG,QACA,MAAAwG,GACA,MAAAjC,IACA,MAAA,MAdAhF,EAAAR,QAAA6G,0BCMA,GAAAc,GAAA3H,EAEA4H,EAMAD,EAAAC,WAAA,SAAAD,GACA,MAAA,eAAAxE,KAAAwE,IAGAE,EAMAF,EAAAE,UAAA,SAAAF,GACAA,EAAAA,EAAAxD,QAAA,MAAA,KACAA,QAAA,UAAA,IACA,IAAA2D,GAAAH,EAAAI,MAAA,KACAC,EAAAJ,EAAAD,GACAM,EAAA,EACAD,KACAC,EAAAH,EAAAI,QAAA,IACA,KAAA,GAAAnH,GAAA,EAAAA,EAAA+G,EAAA7G,QACA,OAAA6G,EAAA/G,GACAA,EAAA,GAAA,OAAA+G,EAAA/G,EAAA,GACA+G,EAAA9B,SAAAjF,EAAA,GACAiH,EACAF,EAAA9B,OAAAjF,EAAA,KAEAA,EACA,MAAA+G,EAAA/G,GACA+G,EAAA9B,OAAAjF,EAAA,KAEAA,CAEA,OAAAkH,GAAAH,EAAA1D,KAAA,KAUAuD,GAAAtG,QAAA,SAAA8G,EAAAC,EAAAC,GAGA,MAFAA,KACAD,EAAAP,EAAAO,IACAR,EAAAQ,GACAA,GACAC,IACAF,EAAAN,EAAAM,KACAA,EAAAA,EAAAhE,QAAA,kBAAA,KAAAlD,OAAA4G,EAAAM,EAAA,IAAAC,GAAAA,0BCjCA,QAAAE,GAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAD,GAAA,KACAE,EAAAD,IAAA,EACAE,EAAA,KACA7F,EAAA2F,CACA,OAAA,UAAAD,GACA,GAAAA,EAAA,GAAAA,EAAAE,EACA,MAAAJ,GAAAE,EACA1F,GAAA0F,EAAAC,IACAE,EAAAL,EAAAG,GACA3F,EAAA,EAEA,IAAA8F,GAAAL,EAAAzI,KAAA6I,EAAA7F,EAAAA,GAAA0F,EAGA,OAFA,GAAA1F,IACAA,EAAA,GAAA,EAAAA,IACA8F,GA5CArI,EAAAR,QAAAsI,0BCMA,GAAAQ,GAAA9I,CAOA8I,GAAA7H,OAAA,SAAAW,GAGA,IAAA,GAFAmH,GAAA,EACA/F,EAAA,EACAjC,EAAA,EAAAA,EAAAa,EAAAX,SAAAF,EACAiC,EAAApB,EAAAqB,WAAAlC,GACAiC,EAAA,IACA+F,GAAA,EACA/F,EAAA,KACA+F,GAAA,EACA,QAAA,MAAA/F,IAAA,QAAA,MAAApB,EAAAqB,WAAAlC,EAAA,OACAA,EACAgI,GAAA,GAEAA,GAAA,CAEA,OAAAA,IAUAD,EAAAE,KAAA,SAAA1G,EAAAC,EAAAC,GAEA,GADAA,EAAAD,EACA,EACA,MAAA,EAKA,KAJA,GAGAE,GAHAqF,EAAA,KACAmB,KACAlI,EAAA,EAEAwB,EAAAC,GACAC,EAAAH,EAAAC,KACAE,EAAA,IACAwG,EAAAlI,KAAA0B,EACAA,EAAA,KAAAA,EAAA,IACAwG,EAAAlI,MAAA,GAAA0B,IAAA,EAAA,GAAAH,EAAAC,KACAE,EAAA,KAAAA,EAAA,KACAA,IAAA,EAAAA,IAAA,IAAA,GAAAH,EAAAC,OAAA,IAAA,GAAAD,EAAAC,OAAA,EAAA,GAAAD,EAAAC,MAAA,MACA0G,EAAAlI,KAAA,OAAA0B,GAAA,IACAwG,EAAAlI,KAAA,OAAA,KAAA0B,IAEAwG,EAAAlI,MAAA,GAAA0B,IAAA,IAAA,GAAAH,EAAAC,OAAA,EAAA,GAAAD,EAAAC,KACAxB,EAAA,QACA+G,IAAAA,OAAA5G,KAAA0B,OAAAC,aAAApB,MAAAmB,OAAAqG,IACAlI,EAAA,EAGA,OAAA+G,IACA/G,GACA+G,EAAA5G,KAAA0B,OAAAC,aAAApB,MAAAmB,OAAAqG,EAAAT,MAAA,EAAAzH,KACA+G,EAAA1D,KAAA,KAEAxB,OAAAC,aAAApB,MAAAmB,OAAAqG,EAAAT,MAAA,EAAAzH,KAUA+H,EAAAI,MAAA,SAAAtH,EAAAU,EAAAS,GAIA,IAAA,GAFAoG,GACAC,EAFA7G,EAAAQ,EAGAhC,EAAA,EAAAA,EAAAa,EAAAX,SAAAF,EACAoI,EAAAvH,EAAAqB,WAAAlC,GACAoI,EAAA,IACA7G,EAAAS,KAAAoG,EACAA,EAAA,MACA7G,EAAAS,KAAAoG,GAAA,EAAA,IACA7G,EAAAS,KAAA,GAAAoG,EAAA,KACA,QAAA,MAAAA,IAAA,QAAA,OAAAC,EAAAxH,EAAAqB,WAAAlC,EAAA,MACAoI,EAAA,QAAA,KAAAA,IAAA,KAAA,KAAAC,KACArI,EACAuB,EAAAS,KAAAoG,GAAA,GAAA,IACA7G,EAAAS,KAAAoG,GAAA,GAAA,GAAA,IACA7G,EAAAS,KAAAoG,GAAA,EAAA,GAAA,IACA7G,EAAAS,KAAA,GAAAoG,EAAA,MAEA7G,EAAAS,KAAAoG,GAAA,GAAA,IACA7G,EAAAS,KAAAoG,GAAA,EAAA,GAAA,IACA7G,EAAAS,KAAA,GAAAoG,EAAA,IAGA,OAAApG,GAAAR,0BCvFA,QAAA8G,GAAAC,EAAAC,GAIA,GAHAC,IACAA,EAAA9I,EAAA,OAEA4I,YAAAE,IACA,KAAAC,WAAA,sBAEA,IAAAF,GACA,GAAA,kBAAAA,GACA,KAAAE,WAAA,+BAEAF,GAAAF,EAAAK,SAAAJ,GAAAjF,IAAAiF,EAAAzJ,KAGA0J,GAAAI,YAAAN,GAGAE,EAAA5D,UAAA,GAAAiE,IAAAD,YAAAJ,EAGAjJ,EAAAuJ,MAAAN,EAAAK,GAAA,GAGAL,EAAAO,MAAAR,EACAC,EAAA5D,UAAAmE,MAAAR,CAIA,KADA,GAAAvI,GAAA,EACAA,EAAAuI,EAAAS,YAAA9I,SAAAF,EAIAwI,EAAA5D,UAAA2D,EAAAU,EAAAjJ,GAAAlB,MAAAsC,MAAA8H,QAAAX,EAAAU,EAAAjJ,GAAAM,UAAA6I,cACA5J,EAAA6J,WACA7J,EAAA8J,SAAAd,EAAAU,EAAAjJ,GAAAmJ,gBAAAZ,EAAAU,EAAAjJ,GAAAsJ,KACA/J,EAAAgK,YACAhB,EAAAU,EAAAjJ,GAAAmJ,YAIA,IAAAK,KACA,KAAAxJ,EAAA,EAAAA,EAAAuI,EAAAkB,YAAAvJ,SAAAF,EACAwJ,EAAAjB,EAAAmB,EAAA1J,GAAAM,UAAAxB,OACA6K,IAAApK,EAAAqK,YAAArB,EAAAmB,EAAA1J,GAAA6J,OACAC,IAAAvK,EAAAwK,YAAAxB,EAAAmB,EAAA1J,GAAA6J,OAQA,OANA7J,IACA6D,OAAAmG,iBAAAxB,EAAA5D,UAAA4E,GAGAjB,EAAAC,KAAAA,EAEAA,EAAA5D,UAnEAnF,EAAAR,QAAAqJ,CAEA,IAGAG,GAHAI,EAAAlJ,EAAA,IACAJ,EAAAI,EAAA,GAwEA2I,GAAAK,SAAA,WAWA,MATApJ,GAAA8C,QAAA,KAUA,UACA,kDACA,yBACA,MAWAiG,EAAA2B,OAAA3B,EAGAA,EAAA1D,UAAAiE,4CCtFA,QAAAqB,GAAA5H,EAAA6H,EAAAC,EAAAC,GAEA,GAAAF,EAAAG,aACA,GAAAH,EAAAG,uBAAAC,GAAA,CAAAjI,EACA,eAAA+H,EACA,KAAA,GAAAG,GAAAL,EAAAG,aAAAE,OAAA5G,EAAAC,OAAAD,KAAA4G,GAAAxK,EAAA,EAAAA,EAAA4D,EAAA1D,SAAAF,EACAmK,EAAAM,UAAAD,EAAA5G,EAAA5D,MAAAmK,EAAAO,aAAApI,EACA,YACAA,EACA,UAAAsB,EAAA5D,IACA,WAAAwK,EAAA5G,EAAA5D,KACA,SAAAqK,EAAAG,EAAA5G,EAAA5D,KACA,QACAsC,GACA,SACAA,GACA,4BAAA+H,GACA,sBAAAF,EAAAQ,SAAA,qBACA,gCAAAN,EAAAD,EAAAC,OACA,CACA,GAAAO,IAAA,CACA,QAAAT,EAAA5B,MACA,IAAA,SACA,IAAA,QAAAjG,EACA,kBAAA+H,EAAAA,EACA,MACA,KAAA,SACA,IAAA,UAAA/H,EACA,cAAA+H,EAAAA,EACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,WAAA/H,EACA,YAAA+H,EAAAA,EACA,MACA,KAAA,SACAO,GAAA,CAEA,KAAA,QACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAtI,EACA,iBACA,6CAAA+H,EAAAA,EAAAO,GACA,iCAAAP,GACA,uBAAAA,EAAAA,GACA,iCAAAA,GACA,UAAAA,EAAAA,GACA,iCAAAA,GACA,+DAAAA,EAAAA,EAAAA,EAAAO,EAAA,OAAA,GACA,MACA,KAAA,QAAAtI,EACA,4BAAA+H,GACA,wEAAAA,EAAAA,EAAAA,GACA,sBAAAA,GACA,UAAAA,EAAAA,EACA,MACA,KAAA,SAAA/H,EACA,kBAAA+H,EAAAA,EACA,MACA,KAAA,OAAA/H,EACA,mBAAA+H,EAAAA,IAOA,MAAA/H,GAmEA,QAAAuI,GAAAvI,EAAA6H,EAAAC,EAAAC,GAEA,GAAAF,EAAAG,aACAH,EAAAG,uBAAAC,GAAAjI,EACA,iDAAA+H,EAAAD,EAAAC,EAAAA,GACA/H,EACA,gCAAA+H,EAAAD,EAAAC,OACA,CACA,GAAAO,IAAA,CACA,QAAAT,EAAA5B,MACA,IAAA,SACAqC,GAAA,CAEA,KAAA,QACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAtI,EACA,4BAAA+H,GACA,uCAAAA,EAAAA,EAAAA,GACA,QACA,4IAAAA,EAAAA,EAAAA,EAAAA,EAAAO,EAAA,OAAA,GAAAP,EACA,MACA,KAAA,QAAA/H,EACA,gHAAA+H,EAAAA,EAAAA,EAAAA,EAAAA,EACA,MACA,SAAA/H,EACA,UAAA+H,EAAAA,IAIA,MAAA/H,GAnLA,GAAAwI,GAAA7L,EAEAsL,EAAA5K,EAAA,IACAJ,EAAAI,EAAA,GAwFAmL,GAAAC,WAAA,SAAAC,GAEA,GAAAC,GAAAD,EAAAhC,YACA1G,EAAA/C,EAAA8C,QAAA,KACA,8BACA,WACA,KAAA4I,EAAA/K,OAAA,MAAAoC,GACA,uBACAA,GACA,sBACA,KAAA,GAAAtC,GAAA,EAAAA,EAAAiL,EAAA/K,SAAAF,EAAA,CACA,GAAAmK,GAAAc,EAAAjL,GAAAM,UACA+J,EAAA9K,EAAA2L,SAAAf,EAAArL,KAGAqL,GAAAnG,KAAA1B,EACA,WAAA+H,GACA,4BAAAA,GACA,sBAAAF,EAAAQ,SAAA,qBACA,SAAAN,GACA,oDAAAA,GACAH,EAAA5H,EAAA6H,EAAAnK,EAAAqK,EAAA,WACA,KACA,MAGAF,EAAAM,UAAAnI,EACA,WAAA+H,GACA,0BAAAA,GACA,sBAAAF,EAAAQ,SAAA,oBACA,SAAAN,GACA,iCAAAA,GACAH,EAAA5H,EAAA6H,EAAAnK,EAAAqK,EAAA,OACA,KACA,OAIAF,EAAAG,uBAAAC,IAAAjI,EACA,mCAAA+H,EAAAA,GACAH,EAAA5H,EAAA6H,EAAAnK,EAAAqK,GACAF,EAAAG,uBAAAC,IAAAjI,EACA,MAEA,MAAAA,GACA,aAoDAwI,EAAAK,SAAA,SAAAH,GAEA,GAAAC,GAAAD,EAAAhC,WACA,KAAAiC,EAAA/K,OACA,MAAAX,GAAA8C,UAAA,YAUA,KATA,GAAAC,GAAA/C,EAAA8C,QAAA,IAAA,KACA,UACA,QACA,YAEA+I,KACAC,KACAC,KACAtL,EAAA,EACAA,EAAAiL,EAAA/K,SAAAF,EACAiL,EAAAjL,GAAAM,UAAAmK,SACAW,EAAAjL,KAAA8K,EAAAjL,IACAiL,EAAAjL,GAAAgE,IACAqH,EAAAlL,KAAA8K,EAAAjL,IAEAsL,EAAAnL,KAAA8K,EAAAjL,GAEA,IAAAoL,EAAAlL,OAAA,CAEA,IAFAoC,EACA,6BACAtC,EAAA,EAAAA,EAAAoL,EAAAlL,SAAAF,EAAAsC,EACA,SAAA/C,EAAA2L,SAAAE,EAAApL,GAAAlB,MACAwD,GACA,KAGA,GAAA+I,EAAAnL,OAAA,CAEA,IAFAoC,EACA,8BACAtC,EAAA,EAAAA,EAAAqL,EAAAnL,SAAAF,EAAAsC,EACA,SAAA/C,EAAA2L,SAAAG,EAAArL,GAAAlB,MACAwD,GACA,KAGA,GAAAgJ,EAAApL,OAAA,CAEA,IAFAoC,EACA,mBACAtC,EAAA,EAAAmK,EAAAnK,EAAAsL,EAAApL,SAAAF,EAAA,CACA,GAAAmK,GAAAmB,EAAAtL,GACAqK,EAAA9K,EAAA2L,SAAAf,EAAArL,KACAqL,GAAAG,uBAAAC,GAAAjI,EACA,6BAAA+H,EAAAF,EAAAG,aAAAiB,WAAApB,EAAAO,aAAAP,EAAAO,aACAP,EAAAb,KAAAhH,EACA,kBACA,gCAAA6H,EAAAO,YAAAc,IAAArB,EAAAO,YAAAe,KAAAtB,EAAAO,YAAAgB,UACA,oEAAArB,GACA,SACA,6BAAAA,EAAAF,GAAAA,EAAAO,YAAAP,EAAAO,YAAAiB,YACAxB,EAAAyB,MAAAtJ,EACA,6BAAA+H,EAAAxI,OAAAC,aAAApB,MAAAmB,OAAAsI,EAAAO,aAAA,IAAAtJ,MAAAwD,UAAA6C,MAAAzI,KAAAmL,EAAAO,aAAArH,KAAA,KAAA,KACAf,EACA,SAAA+H,EAAAF,EAAAO,aACApI,EACA,KAEA,IAAAtC,EAAA,EAAAmK,EAAAnK,EAAAiL,EAAA/K,SAAAF,EAAA,CACA,GAAAmK,GAAAc,EAAAjL,GACAqK,EAAA9K,EAAA2L,SAAAf,EAAArL,KAAAwD,GACA,yDAAA+H,EAAAA,EAAAF,EAAArL,MACAqL,EAAAnG,KAAA1B,EACA,SAAA+H,GACA,sDAAAA,GACAQ,EAAAvI,EAAA6H,EAAAnK,EAAAqK,EAAA,YACA,MACAF,EAAAM,UAAAnI,EACA,SAAA+H,GACA,iCAAAA,GACAQ,EAAAvI,EAAA6H,EAAAnK,EAAAqK,EAAA,OACA,MAEAQ,EAAAvI,EAAA6H,EAAAnK,EAAAqK,GACA/H,EACA,KAEA,MAAAA,GACA,+CCtQA,QAAAuJ,GAAA1B,GACA,MAAA,qBAAAA,EAAArL,KAAA,IASA,QAAAgN,GAAAd,GAEA,GAAA1I,GAAA/C,EAAA8C,QAAA,IAAA,KACA,8BACA,sBACA,qDACA,mBACA,mBACA2I,GAAAe,OAAAzJ,EACA,iBACA,SACAA,EACA,iBAGA,KADA,GAAAtC,GAAA,EACAA,EAAAgL,EAAAhC,YAAA9I,SAAAF,EAAA,CACA,GAAAmK,GAAAa,EAAA/B,EAAAjJ,GAAAM,UACAiI,EAAA4B,EAAAG,uBAAAC,GAAA,SAAAJ,EAAA5B,KACAyD,EAAA,IAAAzM,EAAA2L,SAAAf,EAAArL,KAAAwD,GACA,WAAA6H,EAAA8B,IAGA9B,EAAAnG,KAAA1B,EAEA,kBACA,4BAAA0J,GACA,QAAAA,GACA,eAAA7B,EAAA+B,SACA,WACAC,EAAAC,MAAA7D,KAAA7J,EAAA4D,EACA,8EAAA0J,EAAAhM,GACAsC,EACA,sDAAA0J,EAAAzD,IAGA4B,EAAAM,UAAAnI,EAEA,uBAAA0J,EAAAA,GACA,QAAAA,IAGAF,EAAAO,QAAAlC,EAAAmC,SAAAH,EAAAG,OAAA/D,KAAA7J,GAAA4D,EACA,kBACA,2BACA,mBACA,kBAAA0J,EAAAzD,GACA,SAGA4D,EAAAC,MAAA7D,KAAA7J,EAAA4D,EAAA6H,EAAAG,aAAAyB,MACA,+BACA,0CAAAC,EAAAhM,GACAsC,EACA,kBAAA0J,EAAAzD,IAGA4D,EAAAC,MAAA7D,KAAA7J,EAAA4D,EAAA6H,EAAAG,aAAAyB,MACA,yBACA,oCAAAC,EAAAhM,GACAsC,EACA,YAAA0J,EAAAzD,GACAjG,EACA,SAYA,IATAA,EACA,YACA,mBACA,SAEA,KACA,KAGAtC,EAAA,EAAAA,EAAAgL,EAAA/B,EAAA/I,SAAAF,EAAA,CACA,GAAAuM,GAAAvB,EAAA/B,EAAAjJ,EACAuM,GAAAC,UAAAlK,EACA,4BAAAiK,EAAAzN,MACA,4CAAA+M,EAAAU,IAGA,MAAAjK,GACA,YApGA7C,EAAAR,QAAA6M,EAEAA,EAAAO,QAAA,CAEA,IAAA9B,GAAA5K,EAAA,IACAwM,EAAAxM,EAAA,IACAJ,EAAAI,EAAA,4CCWA,QAAA8M,GAAAnK,EAAA6H,EAAAC,EAAA4B,GACA,MAAA7B,GAAAG,aAAAyB,MACAzJ,EAAA,+CAAA8H,EAAA4B,GAAA7B,EAAA8B,IAAA,EAAA,KAAA,GAAA9B,EAAA8B,IAAA,EAAA,KAAA,GACA3J,EAAA,oDAAA8H,EAAA4B,GAAA7B,EAAA8B,IAAA,EAAA,KAAA,GAUA,QAAAS,GAAAC,EAAA/K,GACA,MAAA+K,GAAAV,GAAArK,EAAAqK,GASA,QAAAW,GAAA5B,GAEA,GAIAhL,GAAAgM,EAJA1J,EAAA/C,EAAA8C,QAAA,IAAA,KACA,UACA,qBAKA4I,EAAAD,EAAAhC,WAEA4D,GAAAP,SACApB,EAAAA,EAAAxD,QAAAoF,KAAAH,GAEA,KAAA,GAAA1M,GAAA,EAAAA,EAAAiL,EAAA/K,SAAAF,EAAA,CACA,GAAAmK,GAAAc,EAAAjL,GAAAM,UACAwM,EAAAF,EAAAP,OAAArB,EAAA/B,EAAA8D,QAAA5C,GAAAnK,CACA,KAAAmK,EAAA6C,OAAA,CAEA,GAAAzE,GAAA4B,EAAAG,uBAAAC,GAAA,SAAAJ,EAAA5B,KACA0E,EAAAd,EAAAC,MAAA7D,EACAyD,GAAA,IAAAzM,EAAA2L,SAAAf,EAAArL,MAGAqL,EAAAnG,KACA1B,EACA,gCAAA0J,EAAA7B,EAAArL,MACA,mDAAAkN,GACA,4CAAA7B,EAAA8B,IAAA,EAAA,KAAA,EAAA,EAAAE,EAAAe,OAAA/C,EAAA+B,SAAA/B,EAAA+B,SACAe,IAAAvO,EAAA4D,EACA,oEAAAwK,EAAAd,GACA1J,EACA,qCAAA,GAAA2K,EAAA1E,EAAAyD,GACA1J,EACA,KACA,MAGA6H,EAAAM,SAGAN,EAAAmC,QAAAH,EAAAG,OAAA/D,KAAA7J,EAAA4D,EAEA,2CAAA0J,EAAAA,EAAA7B,EAAArL,MACA,uBAAAqL,EAAA8B,IAAA,EAAA,KAAA,GACA,+BAAAD,GACA,cAAAzD,EAAAyD,GACA,cACA,MAGA1J,EAEA,4CAAA0J,EAAA7B,EAAArL,MACA,+BAAAkN,GACAiB,IAAAvO,EACA+N,EAAAnK,EAAA6H,EAAA2C,EAAAd,EAAA,OACA1J,EACA,0BAAA6H,EAAA8B,IAAA,EAAAgB,KAAA,EAAA1E,EAAAyD,GACA1J,EACA,OAMA6H,EAAAqC,WAEArC,EAAAb,KAAAhH,EACA,sDAAA0J,EAAAA,EAAA7B,EAAArL,MACAqL,EAAAyB,OAAAzB,EAAAG,gBAAAH,EAAAG,uBAAAC,IAAAjI,EACA,+BAAA0J,EAAA7B,EAAArL,MACAwD,EACA,2CAAA0J,EAAA7B,EAAArL,OAIAmO,IAAAvO,EACA+N,EAAAnK,EAAA6H,EAAA2C,EAAAd,GACA1J,EACA,uBAAA6H,EAAA8B,IAAA,EAAAgB,KAAA,EAAA1E,EAAAyD,KAMA,IAAA,GAAAhM,GAAA,EAAAA,EAAAgL,EAAAvB,YAAAvJ,SAAAF,EAAA,CACA,GAAA6J,GAAAmB,EAAAtB,EAAA1J,EAAAsC,GACA,cAAA,IAAA/C,EAAA2L,SAAArB,EAAA/K,MACA,KAAA,GAAA6C,GAAA,EAAAA,EAAAkI,EAAAb,YAAA9I,SAAAyB,EAAA,CACA,GAAAwI,GAAAN,EAAAb,YAAArH,GACA4G,EAAA4B,EAAAG,uBAAAC,GAAA,SAAAJ,EAAA5B,KACA0E,EAAAd,EAAAC,MAAA7D,EACAyD,GAAA,IAAAzM,EAAA2L,SAAAf,EAAArL,MAAAwD,EACA,UAAA6H,EAAArL,MACAmO,IAAAvO,EACA+N,EAAAnK,EAAA6H,EAAAa,EAAA/B,EAAA8D,QAAA5C,GAAA6B,GACA1J,EACA,uBAAA6H,EAAA8B,IAAA,EAAAgB,KAAA,EAAA1E,EAAAyD,GACA1J,EACA,SACAA,EACA,KAGA,MAAAA,GACA,YAlJA7C,EAAAR,QAAA2N,EAEAA,EAAAP,QAAA,CAEA,IAAA9B,GAAA5K,EAAA,IACAwM,EAAAxM,EAAA,IACAJ,EAAAI,EAAA,4CCWA,QAAA4K,GAAAzL,EAAA0L,EAAAnF,GAGA,GAFA8H,EAAAnO,KAAA2B,KAAA7B,EAAAuG,GAEAmF,GAAA,gBAAAA,GACA,KAAA9B,WAAA,2BAwBA,IAlBA/H,KAAA4K,cAMA5K,KAAA6J,OAAA3G,OAAAoG,OAAAtJ,KAAA4K,YAMA5K,KAAAyM,YAMA5C,EACA,IAAA,GAAA5G,GAAAC,OAAAD,KAAA4G,GAAAxK,EAAA,EAAAA,EAAA4D,EAAA1D,SAAAF,EACAW,KAAA4K,WAAA5K,KAAA6J,OAAA5G,EAAA5D,IAAAwK,EAAA5G,EAAA5D,KAAA4D,EAAA5D,GA/CAP,EAAAR,QAAAsL,CAGA,IAAA4C,GAAAxN,EAAA,MACA4K,EAAA3F,UAAAf,OAAAoG,OAAAkD,EAAAvI,YAAAgE,YAAA2B,GAAA8C,UAAA,MAEA,IAAA9N,GAAAI,EAAA,GAmDA4K,GAAA+C,SAAA,SAAAxO,EAAAyO,GACA,MAAA,IAAAhD,GAAAzL,EAAAyO,EAAA/C,OAAA+C,EAAAlI,UAMAkF,EAAA3F,UAAA4I,OAAA,WACA,OACAnI,QAAA1E,KAAA0E,QACAmF,OAAA7J,KAAA6J,SAaAD,EAAA3F,UAAA6I,IAAA,SAAA3O,EAAAmN,EAAAyB,GAGA,IAAAnO,EAAAoO,SAAA7O,GACA,KAAA4J,WAAA,wBAEA,KAAAnJ,EAAAqO,UAAA3B,GACA,KAAAvD,WAAA,wBAEA,IAAA/H,KAAA6J,OAAA1L,KAAAJ,EACA,KAAAyD,OAAA,iBAEA,IAAAxB,KAAA4K,WAAAU,KAAAvN,EAAA,CACA,IAAAiC,KAAA0E,UAAA1E,KAAA0E,QAAAwI,YACA,KAAA1L,OAAA,eACAxB,MAAA6J,OAAA1L,GAAAmN,MAEAtL,MAAA4K,WAAA5K,KAAA6J,OAAA1L,GAAAmN,GAAAnN,CAGA,OADA6B,MAAAyM,SAAAtO,GAAA4O,GAAA,KACA/M,MAUA4J,EAAA3F,UAAAkJ,OAAA,SAAAhP,GAEA,IAAAS,EAAAoO,SAAA7O,GACA,KAAA4J,WAAA,wBAEA,IAAAqF,GAAApN,KAAA6J,OAAA1L,EACA,IAAAiP,IAAArP,EACA,KAAAyD,OAAA,sBAMA,cAJAxB,MAAA4K,WAAAwC,SACApN,MAAA6J,OAAA1L,SACA6B,MAAAyM,SAAAtO,GAEA6B,wCCjGA,QAAAqN,GAAAlP,EAAAmN,EAAA1D,EAAA0F,EAAAC,EAAA7I,GAYA,GAVA9F,EAAA8J,SAAA4E,IACA5I,EAAA4I,EACAA,EAAAC,EAAAxP,GACAa,EAAA8J,SAAA6E,KACA7I,EAAA6I,EACAA,EAAAxP,GAGAyO,EAAAnO,KAAA2B,KAAA7B,EAAAuG,IAEA9F,EAAAqO,UAAA3B,IAAAA,EAAA,EACA,KAAAvD,WAAA,oCAEA,KAAAnJ,EAAAoO,SAAApF,GACA,KAAAG,WAAA,wBAEA,IAAAuF,IAAAvP,IAAAyP,EAAA/L,KAAA6L,GAAAA,GAAAA,GAAAG,eACA,KAAA1F,WAAA,6BAEA,IAAAwF,IAAAxP,IAAAa,EAAAoO,SAAAO,GACA,KAAAxF,WAAA,0BAMA/H,MAAAsN,KAAAA,GAAA,aAAAA,EAAAA,EAAAvP,EAMAiC,KAAA4H,KAAAA,EAMA5H,KAAAsL,GAAAA,EAMAtL,KAAAuN,OAAAA,GAAAxP,EAMAiC,KAAA6L,SAAA,aAAAyB,EAMAtN,KAAA0N,UAAA1N,KAAA6L,SAMA7L,KAAA8J,SAAA,aAAAwD,EAMAtN,KAAAqD,KAAA,EAMArD,KAAA2N,QAAA,KAMA3N,KAAAqM,OAAA,KAMArM,KAAA+J,YAAA,KAMA/J,KAAAwI,aAAA,KAMAxI,KAAA2I,OAAA/J,EAAAD,MAAA6M,EAAA7C,KAAAf,KAAA7J,EAMAiC,KAAAiL,MAAA,UAAArD,EAMA5H,KAAA2J,aAAA,KAMA3J,KAAA4N,eAAA,KAMA5N,KAAA6N,eAAA,KAOA7N,KAAA8N,EAAA,KA7JAhP,EAAAR,QAAA+O,CAGA,IAAAb,GAAAxN,EAAA,MACAqO,EAAApJ,UAAAf,OAAAoG,OAAAkD,EAAAvI,YAAAgE,YAAAoF,GAAAX,UAAA,OAEA,IAIA5E,GAJA8B,EAAA5K,EAAA,IACAwM,EAAAxM,EAAA,IACAJ,EAAAI,EAAA,IAIAwO,EAAA,8BA0JAtK,QAAA6K,eAAAV,EAAApJ,UAAA,UACA+E,IAAA,WAIA,MAFA,QAAAhJ,KAAA8N,IACA9N,KAAA8N,EAAA9N,KAAAgO,UAAA,aAAA,GACAhO,KAAA8N,KAOAT,EAAApJ,UAAAgK,UAAA,SAAA9P,EAAA+P,EAAAC,GAGA,MAFA,WAAAhQ,IACA6B,KAAA8N,EAAA,MACAtB,EAAAvI,UAAAgK,UAAA5P,KAAA2B,KAAA7B,EAAA+P,EAAAC,IAUAd,EAAAV,SAAA,SAAAxO,EAAAyO,GACA,MAAA,IAAAS,GAAAlP,EAAAyO,EAAAtB,GAAAsB,EAAAhF,KAAAgF,EAAAU,KAAAV,EAAAW,OAAAX,EAAAlI,UAMA2I,EAAApJ,UAAA4I,OAAA,WACA,OACAS,KAAA,aAAAtN,KAAAsN,MAAAtN,KAAAsN,MAAAvP,EACA6J,KAAA5H,KAAA4H,KACA0D,GAAAtL,KAAAsL,GACAiC,OAAAvN,KAAAuN,OACA7I,QAAA1E,KAAA0E,UASA2I,EAAApJ,UAAAtE,QAAA,WAEA,GAAAK,KAAAoO,SACA,MAAApO,KAEA,KAAAA,KAAA+J,YAAAyB,EAAA6C,SAAArO,KAAA4H,SAAA7J,EAAA,CAGA+J,IACAA,EAAA9I,EAAA,IAEA,IAAA4D,GAAA5C,KAAA6N,eAAA7N,KAAA6N,eAAAS,OAAAtO,KAAAsO,MACA,IAAAtO,KAAA2J,aAAA/G,EAAA2L,OAAAvO,KAAA4H,KAAAE,GACA9H,KAAA+J,YAAA,SACA,CAAA,KAAA/J,KAAA2J,aAAA/G,EAAA2L,OAAAvO,KAAA4H,KAAAgC,IAGA,KAAApI,OAAA,4BAAAxB,KAAA4H,KAAA,OAAAhF,EAFA5C,MAAA+J,YAAA/J,KAAA2J,aAAAE,OAAA3G,OAAAD,KAAAjD,KAAA2J,aAAAE,QAAA,KAiBA,GAXA7J,KAAA0E,SAAA1E,KAAA0E,QAAA,UAAA3G,IACAiC,KAAA+J,YAAA/J,KAAA0E,QAAA,QACA1E,KAAA2J,uBAAAC,IAAA,gBAAA5J,MAAA+J,cACA/J,KAAA+J,YAAA/J,KAAA2J,aAAAE,OAAA7J,KAAA+J,gBAIA/J,KAAA0E,SAAA1E,KAAA0E,QAAAiH,SAAA5N,IAAAiC,KAAA2J,cAAA3J,KAAA2J,uBAAAC,UACA5J,MAAA0E,QAAAiH,OAGA3L,KAAA2I,KACA3I,KAAA+J,YAAAnL,EAAAD,KAAA6P,WAAAxO,KAAA+J,YAAA,MAAA/J,KAAA4H,KAAAvH,OAAA,IAGA6C,OAAAuL,QACAvL,OAAAuL,OAAAzO,KAAA+J,iBAEA,IAAA/J,KAAAiL,OAAA,gBAAAjL,MAAA+J,YAAA,CACA,GAAA5C,EACAvI,GAAAqB,OAAAwB,KAAAzB,KAAA+J,aACAnL,EAAAqB,OAAAmB,OAAApB,KAAA+J,YAAA5C,EAAAvI,EAAA8P,UAAA9P,EAAAqB,OAAAV,OAAAS,KAAA+J,cAAA,GAEAnL,EAAAwI,KAAAI,MAAAxH,KAAA+J,YAAA5C,EAAAvI,EAAA8P,UAAA9P,EAAAwI,KAAA7H,OAAAS,KAAA+J,cAAA,GACA/J,KAAA+J,YAAA5C,EAWA,MAPAnH,MAAAqD,IACArD,KAAAwI,aAAA5J,EAAAgK,YACA5I,KAAA8J,SACA9J,KAAAwI,aAAA5J,EAAA6J,WAEAzI,KAAAwI,aAAAxI,KAAA+J,YAEAyC,EAAAvI,UAAAtE,QAAAtB,KAAA2B,2DCxPA,QAAA2O,GAAAlK,EAAAmK,EAAAjK,GAMA,MALA,kBAAAiK,IACAjK,EAAAiK,EACAA,EAAA,GAAArQ,GAAAsQ,MACAD,IACAA,EAAA,GAAArQ,GAAAsQ,MACAD,EAAAD,KAAAlK,EAAAE,GAqCA,QAAAmK,GAAArK,EAAAmK,GAGA,MAFAA,KACAA,EAAA,GAAArQ,GAAAsQ,MACAD,EAAAE,SAAArK,GAnEA,GAAAlG,GAAAO,EAAAR,QAAAU,EAAA,GAEAT,GAAAwQ,MAAA,QAoDAxQ,EAAAoQ,KAAAA,EAgBApQ,EAAAuQ,SAAAA,EAGAvQ,EAAA0N,QAAAjN,EAAA,IACAT,EAAA4M,QAAAnM,EAAA,IACAT,EAAAyQ,SAAAhQ,EAAA,IACAT,EAAA4L,UAAAnL,EAAA,IAGAT,EAAAiO,iBAAAxN,EAAA,IACAT,EAAA0Q,UAAAjQ,EAAA,IACAT,EAAAsQ,KAAA7P,EAAA,IACAT,EAAAqL,KAAA5K,EAAA,IACAT,EAAAuJ,KAAA9I,EAAA,IACAT,EAAA8O,MAAArO,EAAA,IACAT,EAAA2Q,MAAAlQ,EAAA,IACAT,EAAA4Q,SAAAnQ,EAAA,IACAT,EAAA6Q,QAAApQ,EAAA,IACAT,EAAA8Q,OAAArQ,EAAA,IAGAT,EAAAoJ,MAAA3I,EAAA,IACAT,EAAA2J,QAAAlJ,EAAA,IAGAT,EAAAiN,MAAAxM,EAAA,IACAT,EAAAK,KAAAI,EAAA,IAGAT,EAAAiO,iBAAA8C,EAAA/Q,EAAAsQ,MACAtQ,EAAA0Q,UAAAK,EAAA/Q,EAAAuJ,KAAAvJ,EAAA6Q,SACA7Q,EAAAsQ,KAAAS,EAAA/Q,EAAAuJ,gJC1DA,QAAAjJ,KACAN,EAAAgR,OAAAD,EAAA/Q,EAAAiR,cACAjR,EAAAK,KAAA0Q,IA7CA,GAAA/Q,GAAAD,CAQAC,GAAAwQ,MAAA,UAiBAxQ,EAAAkR,SAGAlR,EAAAmR,OAAA1Q,EAAA,IACAT,EAAAoR,aAAA3Q,EAAA,IACAT,EAAAgR,OAAAvQ,EAAA,IACAT,EAAAiR,aAAAxQ,EAAA,IAGAT,EAAAK,KAAAI,EAAA,IACAT,EAAAqR,IAAA5Q,EAAA,IACAT,EAAAM,UAAAA,EAaAN,EAAAmR,OAAAJ,EAAA/Q,EAAAoR,cACA9Q,8DC9BA,QAAAsQ,GAAAhR,EAAAmN,EAAAC,EAAA3D,EAAAlD,GAIA,GAHA2I,EAAAhP,KAAA2B,KAAA7B,EAAAmN,EAAA1D,EAAAlD,IAGA9F,EAAAoO,SAAAzB,GACA,KAAAxD,WAAA,2BAMA/H,MAAAuL,QAAAA,EAMAvL,KAAA6P,gBAAA,KAGA7P,KAAAqD,KAAA,EAxCAvE,EAAAR,QAAA6Q,CAGA,IAAA9B,GAAArO,EAAA,MACAmQ,EAAAlL,UAAAf,OAAAoG,OAAA+D,EAAApJ,YAAAgE,YAAAkH,GAAAzC,UAAA,UAEA,IAAAlB,GAAAxM,EAAA,IACAJ,EAAAI,EAAA,GA2CAmQ,GAAAxC,SAAA,SAAAxO,EAAAyO,GACA,MAAA,IAAAuC,GAAAhR,EAAAyO,EAAAtB,GAAAsB,EAAArB,QAAAqB,EAAAhF,KAAAgF,EAAAlI,UAMAyK,EAAAlL,UAAA4I,OAAA,WACA,OACAtB,QAAAvL,KAAAuL,QACA3D,KAAA5H,KAAA4H,KACA0D,GAAAtL,KAAAsL,GACAiC,OAAAvN,KAAAuN,OACA7I,QAAA1E,KAAA0E,UAOAyK,EAAAlL,UAAAtE,QAAA,WACA,GAAAK,KAAAoO,SACA,MAAApO,KAGA,IAAAwL,EAAAe,OAAAvM,KAAAuL,WAAAxN,EACA,KAAAyD,OAAA,qBAAAxB,KAAAuL,QAEA,OAAA8B,GAAApJ,UAAAtE,QAAAtB,KAAA2B,+CCjEA,QAAAkI,GAAA4H,GACA,GAAAA,EACA,IAAA,GAAA7M,GAAAC,OAAAD,KAAA6M,GAAAzQ,EAAA,EAAAA,EAAA4D,EAAA1D,SAAAF,EACAW,KAAAiD,EAAA5D,IAAAyQ,EAAA7M,EAAA5D,IAhBAP,EAAAR,QAAA4J,CAEA,IAAAtJ,GAAAI,EAAA,GAqCAkJ,GAAAvH,OAAA,SAAAgN,EAAAoC,GACA,MAAA/P,MAAAoI,MAAAzH,OAAAgN,EAAAoC,IASA7H,EAAA8H,gBAAA,SAAArC,EAAAoC,GACA,MAAA/P,MAAAoI,MAAA4H,gBAAArC,EAAAoC,IAUA7H,EAAA9G,OAAA,SAAA6O,GACA,MAAAjQ,MAAAoI,MAAAhH,OAAA6O,IAUA/H,EAAAgI,gBAAA,SAAAD,GACA,MAAAjQ,MAAAoI,MAAA8H,gBAAAD,IAUA/H,EAAAiI,OAAA,SAAAxC,GACA,MAAA3N,MAAAoI,MAAA+H,OAAAxC,IAQAzF,EAAAkC,WAAA,SAAAgG,GACA,MAAApQ,MAAAoI,MAAAgC,WAAAgG,IAUAlI,EAAAmI,KAAAnI,EAAAkC,WAQAlC,EAAAsC,SAAA,SAAAmD,EAAAjJ,GACA,MAAA1E,MAAAoI,MAAAoC,SAAAmD,EAAAjJ,IAQAwD,EAAAjE,UAAAuG,SAAA,SAAA9F,GACA,MAAA1E,MAAAoI,MAAAoC,SAAAxK,KAAA0E,IAOAwD,EAAAjE,UAAA4I,OAAA,WACA,MAAA7M,MAAAoI,MAAAoC,SAAAxK,KAAApB,EAAA0R,4CC3GA,QAAAjB,GAAAlR,EAAAyJ,EAAA2I,EAAA5K,EAAA6K,EAAAC,EAAA/L,GAaA,GAVA9F,EAAA8J,SAAA8H,IACA9L,EAAA8L,EACAA,EAAAC,EAAA1S,GAEAa,EAAA8J,SAAA+H,KACA/L,EAAA+L,EACAA,EAAA1S,GAIA6J,IAAA7J,IAAAa,EAAAoO,SAAApF,GACA,KAAAG,WAAA,wBAEA,KAAAnJ,EAAAoO,SAAAuD,GACA,KAAAxI,WAAA,+BAEA,KAAAnJ,EAAAoO,SAAArH,GACA,KAAAoC,WAAA,gCAEAyE,GAAAnO,KAAA2B,KAAA7B,EAAAuG,GAMA1E,KAAA4H,KAAAA,GAAA,MAMA5H,KAAAuQ,YAAAA,EAMAvQ,KAAAwQ,gBAAAA,GAAAzS,EAMAiC,KAAA2F,aAAAA,EAMA3F,KAAAyQ,iBAAAA,GAAA1S,EAMAiC,KAAA0Q,oBAAA,KAMA1Q,KAAA2Q,qBAAA,KArFA7R,EAAAR,QAAA+Q,CAGA,IAAA7C,GAAAxN,EAAA,MACAqQ,EAAApL,UAAAf,OAAAoG,OAAAkD,EAAAvI,YAAAgE,YAAAoH,GAAA3C,UAAA,QAEA,IAAA9N,GAAAI,EAAA,GAyFAqQ,GAAA1C,SAAA,SAAAxO,EAAAyO,GACA,MAAA,IAAAyC,GAAAlR,EAAAyO,EAAAhF,KAAAgF,EAAA2D,YAAA3D,EAAAjH,aAAAiH,EAAA4D,cAAA5D,EAAA6D,eAAA7D,EAAAlI,UAMA2K,EAAApL,UAAA4I,OAAA,WACA,OACAjF,KAAA,QAAA5H,KAAA4H,MAAA5H,KAAA4H,MAAA7J,EACAwS,YAAAvQ,KAAAuQ,YACAC,cAAAxQ,KAAAwQ,cACA7K,aAAA3F,KAAA2F,aACA8K,eAAAzQ,KAAAyQ,eACA/L,QAAA1E,KAAA0E,UAOA2K,EAAApL,UAAAtE,QAAA,WAGA,MAAAK,MAAAoO,SACApO,MAEAA,KAAA0Q,oBAAA1Q,KAAAsO,OAAAsC,WAAA5Q,KAAAuQ,aACAvQ,KAAA2Q,qBAAA3Q,KAAAsO,OAAAsC,WAAA5Q,KAAA2F,cAEA6G,EAAAvI,UAAAtE,QAAAtB,KAAA2B,0CCnFA,QAAA6Q,GAAAC,GACA,IAAAA,IAAAA,EAAAvR,OACA,MAAAxB,EAEA,KAAA,GADAgT,MACA1R,EAAA,EAAAA,EAAAyR,EAAAvR,SAAAF,EACA0R,EAAAD,EAAAzR,GAAAlB,MAAA2S,EAAAzR,GAAAwN,QACA,OAAAkE,GAgBA,QAAA9B,GAAA9Q,EAAAuG,GACA8H,EAAAnO,KAAA2B,KAAA7B,EAAAuG,GAMA1E,KAAAgR,OAAAjT,EAOAiC,KAAAiR,EAAA,KAGA,QAAAC,GAAAC,GAEA,MADAA,GAAAF,EAAA,KACAE,EAnFArS,EAAAR,QAAA2Q,CAGA,IAAAzC,GAAAxN,EAAA,MACAiQ,EAAAhL,UAAAf,OAAAoG,OAAAkD,EAAAvI,YAAAgE,YAAAgH,GAAAvC,UAAA,WAEA,IAIA5E,GACAsH,EALAxF,EAAA5K,EAAA,IACAqO,EAAArO,EAAA,IACAJ,EAAAI,EAAA,GAwBAiQ,GAAAtC,SAAA,SAAAxO,EAAAyO,GACA,MAAA,IAAAqC,GAAA9Q,EAAAyO,EAAAlI,SAAA0M,QAAAxE,EAAAoE,SAkBA/B,EAAA4B,YAAAA,EAyCA3N,OAAA6K,eAAAkB,EAAAhL,UAAA,eACA+E,IAAA,WACA,MAAAhJ,MAAAiR,IAAAjR,KAAAiR,EAAArS,EAAAyS,QAAArR,KAAAgR,YAOA/B,EAAAhL,UAAA4I,OAAA,WACA,OACAnI,QAAA1E,KAAA0E,QACAsM,OAAAH,EAAA7Q,KAAAsR,eASArC,EAAAhL,UAAAmN,QAAA,SAAAG,GACA,GAAAC,GAAAxR,IAEA,IAAAuR,EACA,IAAA,GAAAP,GAAAS,EAAAvO,OAAAD,KAAAsO,GAAAlS,EAAA,EAAAA,EAAAoS,EAAAlS,SAAAF,EACA2R,EAAAO,EAAAE,EAAApS,IACAmS,EAAA1E,KACAkE,EAAA1G,SAAAvM,EACA+J,EAAA6E,SACAqE,EAAAnH,SAAA9L,EACA6L,EAAA+C,SACAqE,EAAAU,UAAA3T,EACAqR,EAAAzC,SACAqE,EAAA1F,KAAAvN,EACAsP,EAAAV,SACAsC,EAAAtC,UAAA8E,EAAApS,GAAA2R,GAIA,OAAAhR,OAQAiP,EAAAhL,UAAA+E,IAAA,SAAA7K,GACA,MAAA6B,MAAAgR,QAAAhR,KAAAgR,OAAA7S,IACA,MAUA8Q,EAAAhL,UAAA0N,QAAA,SAAAxT,GACA,GAAA6B,KAAAgR,QAAAhR,KAAAgR,OAAA7S,YAAAyL,GACA,MAAA5J,MAAAgR,OAAA7S,GAAA0L,MACA,MAAArI,OAAA,iBAUAyN,EAAAhL,UAAA6I,IAAA,SAAAsD,GAEA,KAAAA,YAAA/C,IAAA+C,EAAA7C,SAAAxP,GAAAqS,YAAAtI,IAAAsI,YAAAxG,IAAAwG,YAAAhB,IAAAgB,YAAAnB,IACA,KAAAlH,WAAA,uCAEA,IAAA/H,KAAAgR,OAEA,CACA,GAAA/O,GAAAjC,KAAAgJ,IAAAoH,EAAAjS,KACA,IAAA8D,EAAA,CACA,KAAAA,YAAAgN,IAAAmB,YAAAnB,KAAAhN,YAAA6F,IAAA7F,YAAAmN,GAWA,KAAA5N,OAAA,mBAAA4O,EAAAjS,KAAA,QAAA6B,KARA,KAAA,GADAgR,GAAA/O,EAAAqP,YACAjS,EAAA,EAAAA,EAAA2R,EAAAzR,SAAAF,EACA+Q,EAAAtD,IAAAkE,EAAA3R,GACAW,MAAAmN,OAAAlL,GACAjC,KAAAgR,SACAhR,KAAAgR,WACAZ,EAAAwB,WAAA3P,EAAAyC,SAAA,QAZA1E,MAAAgR,SAoBA,OAFAhR,MAAAgR,OAAAZ,EAAAjS,MAAAiS,EACAA,EAAAyB,MAAA7R,MACAkR,EAAAlR,OAUAiP,EAAAhL,UAAAkJ,OAAA,SAAAiD,GAEA,KAAAA,YAAA5D,IACA,KAAAzE,WAAA,oCACA,IAAAqI,EAAA9B,SAAAtO,KACA,KAAAwB,OAAA4O,EAAA,uBAAApQ,KAOA,cALAA,MAAAgR,OAAAZ,EAAAjS,MACA+E,OAAAD,KAAAjD,KAAAgR,QAAAzR,SACAS,KAAAgR,OAAAjT,GAEAqS,EAAA0B,SAAA9R,MACAkR,EAAAlR,OASAiP,EAAAhL,UAAAxF,OAAA,SAAAwH,EAAA2G,GAEA,GAAAhO,EAAAoO,SAAA/G,GACAA,EAAAA,EAAAI,MAAA,SACA,KAAA5F,MAAA8H,QAAAtC,GACA,KAAA8B,WAAA,eACA,IAAA9B,GAAAA,EAAA1G,QAAA,KAAA0G,EAAA,GACA,KAAAzE,OAAA,wBAGA,KADA,GAAAuQ,GAAA/R,KACAiG,EAAA1G,OAAA,GAAA,CACA,GAAAyS,GAAA/L,EAAAO,OACA,IAAAuL,EAAAf,QAAAe,EAAAf,OAAAgB,IAEA,MADAD,EAAAA,EAAAf,OAAAgB,aACA/C,IACA,KAAAzN,OAAA,iDAEAuQ,GAAAjF,IAAAiF,EAAA,GAAA9C,GAAA+C,IAIA,MAFApF,IACAmF,EAAAX,QAAAxE,GACAmF,GAOA9C,EAAAhL,UAAAgO,WAAA,WAEA,IADA,GAAAjB,GAAAhR,KAAAsR,YAAAjS,EAAA,EACAA,EAAA2R,EAAAzR,QACAyR,EAAA3R,YAAA4P,GACA+B,EAAA3R,KAAA4S,aAEAjB,EAAA3R,KAAAM,SACA,OAAAK,MAAAL,WAUAsP,EAAAhL,UAAAsK,OAAA,SAAAtI,EAAAiM,EAAAC,GAQA,GALA,iBAAAD,KACAC,EAAAD,EACAA,EAAAnU,GAGAa,EAAAoO,SAAA/G,IAAAA,EAAA1G,OAAA,CACA,GAAA,MAAA0G,EACA,MAAAjG,MAAA4O,IACA3I,GAAAA,EAAAI,MAAA,SACA,KAAAJ,EAAA1G,OACA,MAAAS,KAGA,IAAA,KAAAiG,EAAA,GACA,MAAAjG,MAAA4O,KAAAL,OAAAtI,EAAAa,MAAA,GAAAoL,EAEA,IAAAE,GAAApS,KAAAgJ,IAAA/C,EAAA,GACA,IAAAmM,EACA,GAAA,IAAAnM,EAAA1G,QACA,IAAA2S,GAAAE,YAAAF,GACA,MAAAE,OACA,IAAAA,YAAAnD,KAAAmD,EAAAA,EAAA7D,OAAAtI,EAAAa,MAAA,GAAAoL,GAAA,IACA,MAAAE,EAGA,OAAA,QAAApS,KAAAsO,QAAA6D,EACA,KACAnS,KAAAsO,OAAAC,OAAAtI,EAAAiM,IAqBAjD,EAAAhL,UAAA2M,WAAA,SAAA3K,GACA,GAAAmM,GAAApS,KAAAuO,OAAAtI,EAAA6B,EACA,KAAAsK,EACA,KAAA5Q,OAAA,eACA,OAAA4Q,IAUAnD,EAAAhL,UAAAoO,cAAA,SAAApM,GACA,GAAAmM,GAAApS,KAAAuO,OAAAtI,EAAAmJ,EACA,KAAAgD,EACA,KAAA5Q,OAAA,kBACA,OAAA4Q,IAUAnD,EAAAhL,UAAAqO,WAAA,SAAArM,GACA,GAAAmM,GAAApS,KAAAuO,OAAAtI,EAAA2D,EACA,KAAAwI,EACA,KAAA5Q,OAAA,eACA,OAAA4Q,GAAAvI,QAGAoF,EAAAK,EAAA,SAAAiD,EAAAC,GACA1K,EAAAyK,EACAnD,EAAAoD,iDCnVA,QAAAhG,GAAArO,EAAAuG,GAEA,IAAA9F,EAAAoO,SAAA7O,GACA,KAAA4J,WAAA,wBAEA,IAAArD,IAAA9F,EAAA8J,SAAAhE,GACA,KAAAqD,WAAA,4BAMA/H,MAAA0E,QAAAA,EAMA1E,KAAA7B,KAAAA,EAMA6B,KAAAsO,OAAA,KAMAtO,KAAAoO,UAAA,EAMApO,KAAA+M,QAAA,KAMA/M,KAAAyE,SAAA,KA1DA3F,EAAAR,QAAAkO,EAEAA,EAAAE,UAAA,kBAEA,IAEAmC,GAFAjQ,EAAAI,EAAA,GAyDAkE,QAAAmG,iBAAAmD,EAAAvI,WAQA2K,MACA5F,IAAA,WAEA,IADA,GAAA+I,GAAA/R,KACA,OAAA+R,EAAAzD,QACAyD,EAAAA,EAAAzD,MACA,OAAAyD,KAUA/H,UACAhB,IAAA,WAGA,IAFA,GAAA/C,IAAAjG,KAAA7B,MACA4T,EAAA/R,KAAAsO,OACAyD,GACA9L,EAAAwM,QAAAV,EAAA5T,MACA4T,EAAAA,EAAAzD,MAEA,OAAArI,GAAAvD,KAAA,SAUA8J,EAAAvI,UAAA4I,OAAA,WACA,KAAArL,UAQAgL,EAAAvI,UAAA4N,MAAA,SAAAvD,GACAtO,KAAAsO,QAAAtO,KAAAsO,SAAAA,GACAtO,KAAAsO,OAAAnB,OAAAnN,MACAA,KAAAsO,OAAAA,EACAtO,KAAAoO,UAAA,CACA,IAAAQ,GAAAN,EAAAM,IACAA,aAAAC,IACAD,EAAA8D,EAAA1S,OAQAwM,EAAAvI,UAAA6N,SAAA,SAAAxD,GACA,GAAAM,GAAAN,EAAAM,IACAA,aAAAC,IACAD,EAAA+D,EAAA3S,MACAA,KAAAsO,OAAA,KACAtO,KAAAoO,UAAA,GAOA5B,EAAAvI,UAAAtE,QAAA,WACA,MAAAK,MAAAoO,SACApO,MACAA,KAAA4O,eAAAC,KACA7O,KAAAoO,UAAA,GACApO,OAQAwM,EAAAvI,UAAA+J,UAAA,SAAA7P,GACA,MAAA6B,MAAA0E,QACA1E,KAAA0E,QAAAvG,GACAJ,GAUAyO,EAAAvI,UAAAgK,UAAA,SAAA9P,EAAA+P,EAAAC,GAGA,MAFAA,IAAAnO,KAAA0E,SAAA1E,KAAA0E,QAAAvG,KAAAJ,KACAiC,KAAA0E,UAAA1E,KAAA0E,aAAAvG,GAAA+P,GACAlO,MASAwM,EAAAvI,UAAA2N,WAAA,SAAAlN,EAAAyJ,GACA,GAAAzJ,EACA,IAAA,GAAAzB,GAAAC,OAAAD,KAAAyB,GAAArF,EAAA,EAAAA,EAAA4D,EAAA1D,SAAAF,EACAW,KAAAiO,UAAAhL,EAAA5D,GAAAqF,EAAAzB,EAAA5D,IAAA8O,EACA,OAAAnO,OAOAwM,EAAAvI,UAAAiB,SAAA,WACA,GAAAwH,GAAA1M,KAAAiI,YAAAyE,UACA1C,EAAAhK,KAAAgK,QACA,OAAAA,GAAAzK,OACAmN,EAAA,IAAA1C,EACA0C,GAGAF,EAAA8C,EAAA,SAAAsD,GACA/D,EAAA+D,+BCnLA,QAAA1D,GAAA/Q,EAAA0U,EAAAnO,GAQA,GAPAjE,MAAA8H,QAAAsK,KACAnO,EAAAmO,EACAA,EAAA9U,GAEAyO,EAAAnO,KAAA2B,KAAA7B,EAAAuG,GAGAmO,IAAA9U,IAAA0C,MAAA8H,QAAAsK,GACA,KAAA9K,WAAA,8BAMA/H,MAAAkJ,MAAA2J,MAOA7S,KAAAqI,eA+BA,QAAAyK,GAAA5J,GACA,GAAAA,EAAAoF,OACA,IAAA,GAAAjP,GAAA,EAAAA,EAAA6J,EAAAb,YAAA9I,SAAAF,EACA6J,EAAAb,YAAAhJ,GAAAiP,QACApF,EAAAoF,OAAAxB,IAAA5D,EAAAb,YAAAhJ,IA1EAP,EAAAR,QAAA4Q,CAGA,IAAA1C,GAAAxN,EAAA,MACAkQ,EAAAjL,UAAAf,OAAAoG,OAAAkD,EAAAvI,YAAAgE,YAAAiH,GAAAxC,UAAA,OAEA,IAAAW,GAAArO,EAAA,GA2CAkQ,GAAAvC,SAAA,SAAAxO,EAAAyO,GACA,MAAA,IAAAsC,GAAA/Q,EAAAyO,EAAA1D,MAAA0D,EAAAlI,UAMAwK,EAAAjL,UAAA4I,OAAA,WACA,OACA3D,MAAAlJ,KAAAkJ,MACAxE,QAAA1E,KAAA0E,UAuBAwK,EAAAjL,UAAA6I,IAAA,SAAAtD,GAGA,KAAAA,YAAA6D,IACA,KAAAtF,WAAA,wBAOA,OANAyB,GAAA8E,QAAA9E,EAAA8E,SAAAtO,KAAAsO,QACA9E,EAAA8E,OAAAnB,OAAA3D,GACAxJ,KAAAkJ,MAAA1J,KAAAgK,EAAArL,MACA6B,KAAAqI,YAAA7I,KAAAgK,GACAA,EAAA6C,OAAArM,KACA8S,EAAA9S,MACAA,MAQAkP,EAAAjL,UAAAkJ,OAAA,SAAA3D,GAGA,KAAAA,YAAA6D,IACA,KAAAtF,WAAA,wBAEA,IAAAoE,GAAAnM,KAAAqI,YAAA+D,QAAA5C,EAEA,IAAA2C,EAAA,EACA,KAAA3K,OAAAgI,EAAA,uBAAAxJ,KAQA,OANAA,MAAAqI,YAAA/D,OAAA6H,EAAA,GACAA,EAAAnM,KAAAkJ,MAAAkD,QAAA5C,EAAArL,MAEAgO,GAAA,GACAnM,KAAAkJ,MAAA5E,OAAA6H,EAAA,GACA3C,EAAA6C,OAAA,KACArM,MAMAkP,EAAAjL,UAAA4N,MAAA,SAAAvD,GACA9B,EAAAvI,UAAA4N,MAAAxT,KAAA2B,KAAAsO,EAGA,KAAA,GAFAyE,GAAA/S,KAEAX,EAAA,EAAAA,EAAAW,KAAAkJ,MAAA3J,SAAAF,EAAA,CACA,GAAAmK,GAAA8E,EAAAtF,IAAAhJ,KAAAkJ,MAAA7J,GACAmK,KAAAA,EAAA6C,SACA7C,EAAA6C,OAAA0G,EACAA,EAAA1K,YAAA7I,KAAAgK,IAIAsJ,EAAA9S,OAMAkP,EAAAjL,UAAA6N,SAAA,SAAAxD,GACA,IAAA,GAAA9E,GAAAnK,EAAA,EAAAA,EAAAW,KAAAqI,YAAA9I,SAAAF,GACAmK,EAAAxJ,KAAAqI,YAAAhJ,IAAAiP,QACA9E,EAAA8E,OAAAnB,OAAA3D,EACAgD,GAAAvI,UAAA6N,SAAAzT,KAAA2B,KAAAsO,sCCxIA,QAAA0E,GAAA/C,EAAAgD,GACA,MAAAC,YAAA,uBAAAjD,EAAAkD,IAAA,OAAAF,GAAA,GAAA,MAAAhD,EAAA5I,KASA,QAAAkI,GAAA3O,GAMAZ,KAAAmH,IAAAvG,EAMAZ,KAAAmT,IAAA,EAMAnT,KAAAqH,IAAAzG,EAAArB,OA+EA,QAAA6T,KAEA,GAAAC,GAAA,GAAAC,GAAA,EAAA,GACAjU,EAAA,CACA,MAAAW,KAAAqH,IAAArH,KAAAmT,IAAA,GAaA,CACA,KAAA9T,EAAA,IAAAA,EAAA,CAEA,GAAAW,KAAAmT,KAAAnT,KAAAqH,IACA,KAAA2L,GAAAhT,KAGA,IADAqT,EAAAE,IAAAF,EAAAE,IAAA,IAAAvT,KAAAmH,IAAAnH,KAAAmT,OAAA,EAAA9T,KAAA,EACAW,KAAAmH,IAAAnH,KAAAmT,OAAA,IACA,MAAAE,GAIA,MADAA,GAAAE,IAAAF,EAAAE,IAAA,IAAAvT,KAAAmH,IAAAnH,KAAAmT,SAAA,EAAA9T,KAAA,EACAgU,EAxBA,KAAAhU,EAAA,IAAAA,EAGA,GADAgU,EAAAE,IAAAF,EAAAE,IAAA,IAAAvT,KAAAmH,IAAAnH,KAAAmT,OAAA,EAAA9T,KAAA,EACAW,KAAAmH,IAAAnH,KAAAmT,OAAA,IACA,MAAAE,EAKA,IAFAA,EAAAE,IAAAF,EAAAE,IAAA,IAAAvT,KAAAmH,IAAAnH,KAAAmT,OAAA,MAAA,EACAE,EAAAG,IAAAH,EAAAG,IAAA,IAAAxT,KAAAmH,IAAAnH,KAAAmT,OAAA,KAAA,EACAnT,KAAAmH,IAAAnH,KAAAmT,OAAA,IACA,MAAAE,EAgBA,IAfAhU,EAAA,EAeAW,KAAAqH,IAAArH,KAAAmT,IAAA,GACA,KAAA9T,EAAA,IAAAA,EAGA,GADAgU,EAAAG,IAAAH,EAAAG,IAAA,IAAAxT,KAAAmH,IAAAnH,KAAAmT,OAAA,EAAA9T,EAAA,KAAA,EACAW,KAAAmH,IAAAnH,KAAAmT,OAAA,IACA,MAAAE,OAGA,MAAAhU,EAAA,IAAAA,EAAA,CAEA,GAAAW,KAAAmT,KAAAnT,KAAAqH,IACA,KAAA2L,GAAAhT,KAGA,IADAqT,EAAAG,IAAAH,EAAAG,IAAA,IAAAxT,KAAAmH,IAAAnH,KAAAmT,OAAA,EAAA9T,EAAA,KAAA,EACAW,KAAAmH,IAAAnH,KAAAmT,OAAA,IACA,MAAAE,GAIA,KAAA7R,OAAA,2BAkCA,QAAAiS,GAAAtM,EAAArG,GACA,OAAAqG,EAAArG,EAAA,GACAqG,EAAArG,EAAA,IAAA,EACAqG,EAAArG,EAAA,IAAA,GACAqG,EAAArG,EAAA,IAAA,MAAA,EA+BA,QAAA4S,KAGA,GAAA1T,KAAAmT,IAAA,EAAAnT,KAAAqH,IACA,KAAA2L,GAAAhT,KAAA,EAEA,OAAA,IAAAsT,GAAAG,EAAAzT,KAAAmH,IAAAnH,KAAAmT,KAAA,GAAAM,EAAAzT,KAAAmH,IAAAnH,KAAAmT,KAAA,IAlPArU,EAAAR,QAAAiR,CAEA,IAEAC,GAFA5Q,EAAAI,EAAA,IAIAsU,EAAA1U,EAAA0U,SACAlM,EAAAxI,EAAAwI,KAkCAuM,EAAA,mBAAAlO,YACA,SAAA7E,GACA,GAAAA,YAAA6E,aAAAhF,MAAA8H,QAAA3H,GACA,MAAA,IAAA2O,GAAA3O,EACA,MAAAY,OAAA,mBAGA,SAAAZ,GACA,GAAAH,MAAA8H,QAAA3H,GACA,MAAA,IAAA2O,GAAA3O,EACA,MAAAY,OAAA,kBAUA+N,GAAAjG,OAAA1K,EAAAgV,OACA,SAAAhT,GACA,OAAA2O,EAAAjG,OAAA,SAAA1I,GACA,MAAAhC,GAAAgV,OAAAC,SAAAjT,GACA,GAAA4O,GAAA5O,GAEA+S,EAAA/S,KACAA,IAGA+S,EAEApE,EAAAtL,UAAA6P,EAAAlV,EAAA6B,MAAAwD,UAAA8P,UAAAnV,EAAA6B,MAAAwD,UAAA6C,MAOAyI,EAAAtL,UAAA+P,OAAA,WACA,GAAA9F,GAAA,UACA,OAAA,YACA,GAAAA,GAAA,IAAAlO,KAAAmH,IAAAnH,KAAAmT,QAAA,EAAAnT,KAAAmH,IAAAnH,KAAAmT,OAAA,IAAA,MAAAjF,EACA,IAAAA,GAAAA,GAAA,IAAAlO,KAAAmH,IAAAnH,KAAAmT,OAAA,KAAA,EAAAnT,KAAAmH,IAAAnH,KAAAmT,OAAA,IAAA,MAAAjF,EACA,IAAAA,GAAAA,GAAA,IAAAlO,KAAAmH,IAAAnH,KAAAmT,OAAA,MAAA,EAAAnT,KAAAmH,IAAAnH,KAAAmT,OAAA,IAAA,MAAAjF,EACA,IAAAA,GAAAA,GAAA,IAAAlO,KAAAmH,IAAAnH,KAAAmT,OAAA,MAAA,EAAAnT,KAAAmH,IAAAnH,KAAAmT,OAAA,IAAA,MAAAjF,EACA,IAAAA,GAAAA,GAAA,GAAAlO,KAAAmH,IAAAnH,KAAAmT,OAAA,MAAA,EAAAnT,KAAAmH,IAAAnH,KAAAmT,OAAA,IAAA,MAAAjF,EAGA,KAAAlO,KAAAmT,KAAA,GAAAnT,KAAAqH,IAEA,KADArH,MAAAmT,IAAAnT,KAAAqH,IACA2L,EAAAhT,KAAA,GAEA,OAAAkO,OAQAqB,EAAAtL,UAAAgQ,MAAA,WACA,MAAA,GAAAjU,KAAAgU,UAOAzE,EAAAtL,UAAAiQ,OAAA,WACA,GAAAhG,GAAAlO,KAAAgU,QACA,OAAA9F,KAAA,IAAA,EAAAA,GAAA,GAqFAqB,EAAAtL,UAAAkQ,KAAA,WACA,MAAA,KAAAnU,KAAAgU,UAcAzE,EAAAtL,UAAAmQ,QAAA,WAGA,GAAApU,KAAAmT,IAAA,EAAAnT,KAAAqH,IACA,KAAA2L,GAAAhT,KAAA,EAEA,OAAAyT,GAAAzT,KAAAmH,IAAAnH,KAAAmT,KAAA,IAOA5D,EAAAtL,UAAAoQ,SAAA,WAGA,GAAArU,KAAAmT,IAAA,EAAAnT,KAAAqH,IACA,KAAA2L,GAAAhT,KAAA,EAEA,OAAA,GAAAyT,EAAAzT,KAAAmH,IAAAnH,KAAAmT,KAAA,GA8BA,IAAAmB,GAAA,mBAAAC,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAE,EAAA,GAAAhP,YAAA+O,EAAA5T,OAEA,OADA4T,GAAA,IAAA,EACAC,EAAA,GACA,SAAAtN,EAAAgM,GAKA,MAJAsB,GAAA,GAAAtN,EAAAgM,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAqB,EAAA,IAGA,SAAArN,EAAAgM,GAKA,MAJAsB,GAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,GACAqB,EAAA,OAIA,SAAArN,EAAAgM,GACA,GAAAuB,GAAAjB,EAAAtM,EAAAgM,EAAA,GACAwB,EAAA,GAAAD,GAAA,IAAA,EACAE,EAAAF,IAAA,GAAA,IACAG,EAAA,QAAAH,CACA,OAAA,OAAAE,EACAC,EACAC,IACAH,GAAAI,EAAAA,GACA,IAAAH,EACA,sBAAAD,EAAAE,EACAF,EAAArU,KAAA0U,IAAA,EAAAJ,EAAA,MAAAC,EAAA,SAQAtF,GAAAtL,UAAAgR,MAAA,WAGA,GAAAjV,KAAAmT,IAAA,EAAAnT,KAAAqH,IACA,KAAA2L,GAAAhT,KAAA,EAEA,IAAAkO,GAAAoG,EAAAtU,KAAAmH,IAAAnH,KAAAmT,IAEA,OADAnT,MAAAmT,KAAA,EACAjF,EAGA,IAAAgH,GAAA,mBAAAC,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAV,EAAA,GAAAhP,YAAA2P,EAAAxU,OAEA,OADAwU,GAAA,IAAA,EACAX,EAAA,GACA,SAAAtN,EAAAgM,GASA,MARAsB,GAAA,GAAAtN,EAAAgM,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA;YACAiC,EAAA,IAGA,SAAAjO,EAAAgM,GASA,MARAsB,GAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,EAAA,GACAsB,EAAA,GAAAtN,EAAAgM,GACAiC,EAAA,OAIA,SAAAjO,EAAAgM,GACA,GAAAI,GAAAE,EAAAtM,EAAAgM,EAAA,GACAK,EAAAC,EAAAtM,EAAAgM,EAAA,GACAwB,EAAA,GAAAnB,GAAA,IAAA,EACAoB,EAAApB,IAAA,GAAA,KACAqB,EAAA,YAAA,QAAArB,GAAAD,CACA,OAAA,QAAAqB,EACAC,EACAC,IACAH,GAAAI,EAAAA,GACA,IAAAH,EACA,OAAAD,EAAAE,EACAF,EAAArU,KAAA0U,IAAA,EAAAJ,EAAA,OAAAC,EAAA,kBAQAtF,GAAAtL,UAAAoR,OAAA,WAGA,GAAArV,KAAAmT,IAAA,EAAAnT,KAAAqH,IACA,KAAA2L,GAAAhT,KAAA,EAEA,IAAAkO,GAAAgH,EAAAlV,KAAAmH,IAAAnH,KAAAmT,IAEA,OADAnT,MAAAmT,KAAA,EACAjF,GAOAqB,EAAAtL,UAAAgH,MAAA,WACA,GAAA1L,GAAAS,KAAAgU,SACAnT,EAAAb,KAAAmT,IACArS,EAAAd,KAAAmT,IAAA5T,CAGA,IAAAuB,EAAAd,KAAAqH,IACA,KAAA2L,GAAAhT,KAAAT,EAGA,OADAS,MAAAmT,KAAA5T,EACAsB,IAAAC,EACA,GAAAd,MAAAmH,IAAAc,YAAA,GACAjI,KAAA8T,EAAAzV,KAAA2B,KAAAmH,IAAAtG,EAAAC,IAOAyO,EAAAtL,UAAA/D,OAAA,WACA,GAAA+K,GAAAjL,KAAAiL,OACA,OAAA7D,GAAAE,KAAA2D,EAAA,EAAAA,EAAA1L,SAQAgQ,EAAAtL,UAAAqR,KAAA,SAAA/V,GACA,GAAA,gBAAAA,GAAA,CAEA,GAAAS,KAAAmT,IAAA5T,EAAAS,KAAAqH,IACA,KAAA2L,GAAAhT,KAAAT,EACAS,MAAAmT,KAAA5T,MAGA,IACA,GAAAS,KAAAmT,KAAAnT,KAAAqH,IACA,KAAA2L,GAAAhT,YACA,IAAAA,KAAAmH,IAAAnH,KAAAmT,OAEA,OAAAnT,OAQAuP,EAAAtL,UAAAsR,SAAA,SAAAjJ,GACA,OAAAA,GACA,IAAA,GACAtM,KAAAsV,MACA,MACA,KAAA,GACAtV,KAAAsV,KAAA,EACA,MACA,KAAA,GACAtV,KAAAsV,KAAAtV,KAAAgU,SACA,MACA,KAAA,GACA,OAAA,CACA,GAAA,IAAA1H,EAAA,EAAAtM,KAAAgU,UACA,KACAhU,MAAAuV,SAAAjJ,GAEA,KACA,KAAA,GACAtM,KAAAsV,KAAA,EACA,MAGA,SACA,KAAA9T,OAAA,qBAAA8K,EAAA,cAAAtM,KAAAmT,KAEA,MAAAnT,OAGAuP,EAAAD,EAAA,SAAAkG,GACAhG,EAAAgG,CAEA,IAAAtW,GAAAN,EAAAD,KAAA,SAAA,UACAC,GAAAuJ,MAAAoH,EAAAtL,WAEAwR,MAAA,WACA,MAAArC,GAAA/U,KAAA2B,MAAAd,IAAA,IAGAwW,OAAA,WACA,MAAAtC,GAAA/U,KAAA2B,MAAAd,IAAA,IAGAyW,OAAA,WACA,MAAAvC,GAAA/U,KAAA2B,MAAA4V,WAAA1W,IAAA,IAGA2W,QAAA,WACA,MAAAnC,GAAArV,KAAA2B,MAAAd,IAAA,IAGA4W,SAAA,WACA,MAAApC,GAAArV,KAAA2B,MAAAd,IAAA,mCCndA,QAAAsQ,GAAA5O,GACA2O,EAAAlR,KAAA2B,KAAAY,GAhBA9B,EAAAR,QAAAkR,CAGA,IAAAD,GAAAvQ,EAAA,KACAwQ,EAAAvL,UAAAf,OAAAoG,OAAAiG,EAAAtL,YAAAgE,YAAAuH,CAEA,IAAA5Q,GAAAI,EAAA,GAoBAJ,GAAAgV,SACApE,EAAAvL,UAAA6P,EAAAlV,EAAAgV,OAAA3P,UAAA6C,OAKA0I,EAAAvL,UAAA/D,OAAA,WACA,GAAAmH,GAAArH,KAAAgU,QACA,OAAAhU,MAAAmH,IAAA4O,UAAA/V,KAAAmT,IAAAnT,KAAAmT,IAAA7S,KAAA0V,IAAAhW,KAAAmT,IAAA9L,EAAArH,KAAAqH,yCCbA,QAAAwH,GAAAnK,GACAuK,EAAA5Q,KAAA2B,KAAA,GAAA0E,GAMA1E,KAAAiW,YAMAjW,KAAAkW,SA6BA,QAAAC,MAkMA,QAAAC,GAAAxH,EAAApF,GACA,GAAA6M,GAAA7M,EAAA8E,OAAAC,OAAA/E,EAAA+D,OACA,IAAA8I,EAAA,CACA,GAAAC,GAAA,GAAAjJ,GAAA7D,EAAAQ,SAAAR,EAAA8B,GAAA9B,EAAA5B,KAAA4B,EAAA8D,KAAAvP,EAAAyL,EAAA9E,QAIA,OAHA4R,GAAAzI,eAAArE,EACAA,EAAAoE,eAAA0I,EACAD,EAAAvJ,IAAAwJ,IACA,EAEA,OAAA,EA1QAxX,EAAAR,QAAAuQ,CAGA,IAAAI,GAAAjQ,EAAA,MACA6P,EAAA5K,UAAAf,OAAAoG,OAAA2F,EAAAhL,YAAAgE,YAAA4G,GAAAnC,UAAA,MAEA,IAIA5E,GACAyO,EACAC,EANAnJ,EAAArO,EAAA,IACA4K,EAAA5K,EAAA,IACAJ,EAAAI,EAAA,GAmCA6P,GAAAlC,SAAA,SAAAC,EAAAgC,GAKA,MAJAA,KACAA,EAAA,GAAAC,IACAjC,EAAAlI,SACAkK,EAAAgD,WAAAhF,EAAAlI,SACAkK,EAAAwC,QAAAxE,EAAAoE,SAWAnC,EAAA5K,UAAAwS,YAAA7X,EAAAqH,KAAAtG,QAaAkP,EAAA5K,UAAA0K,KAAA,QAAAA,GAAAlK,EAAAC,EAAAC,GAYA,QAAA+R,GAAA7W,EAAA+O,GAEA,GAAAjK,EAAA,CAEA,GAAAgS,GAAAhS,CAEA,IADAA,EAAA,KACAiS,EACA,KAAA/W,EACA8W,GAAA9W,EAAA+O,IAIA,QAAAiI,GAAApS,EAAA5B,GACA,IAGA,GAFAjE,EAAAoO,SAAAnK,IAAA,MAAAA,EAAAxC,OAAA,KACAwC,EAAAc,KAAA4S,MAAA1T,IACAjE,EAAAoO,SAAAnK,GAEA,CACA0T,EAAA9R,SAAAA,CACA,IACA2J,GADA0I,EAAAP,EAAA1T,EAAAkQ,EAAArO,GAEArF,EAAA,CACA,IAAAyX,EAAAC,QACA,KAAA1X,EAAAyX,EAAAC,QAAAxX,SAAAF,GACA+O,EAAA2E,EAAA0D,YAAAhS,EAAAqS,EAAAC,QAAA1X,MACAmF,EAAA4J,EACA,IAAA0I,EAAAE,YACA,IAAA3X,EAAA,EAAAA,EAAAyX,EAAAE,YAAAzX,SAAAF,GACA+O,EAAA2E,EAAA0D,YAAAhS,EAAAqS,EAAAE,YAAA3X,MACAmF,EAAA4J,GAAA,OAbA2E,GAAAnB,WAAA/O,EAAA6B,SAAA0M,QAAAvO,EAAAmO,QAeA,MAAAnR,GACA6W,EAAA7W,GAEA+W,GAAAK,GACAP,EAAA,KAAA3D,GAIA,QAAAvO,GAAAC,EAAAyS,GAGA,GAAAC,GAAA1S,EAAA2S,YAAA,mBACA,IAAAD,GAAA,EAAA,CACA,GAAAE,GAAA5S,EAAA6S,UAAAH,EACAE,KAAAb,KACA/R,EAAA4S,GAIA,KAAAtE,EAAAmD,MAAA9J,QAAA3H,IAAA,GAAA,CAKA,GAHAsO,EAAAmD,MAAA1W,KAAAiF,GAGAA,IAAA+R,GAUA,YATAI,EACAC,EAAApS,EAAA+R,EAAA/R,OAEAwS,EACAM,WAAA,aACAN,EACAJ,EAAApS,EAAA+R,EAAA/R,OAOA,IAAAmS,EAAA,CACA,GAAA/T,EACA,KACAA,EAAAjE,EAAAiG,GAAA2S,aAAA/S,GAAAS,SAAA,QACA,MAAArF,GAGA,YAFAqX,GACAR,EAAA7W,IAGAgX,EAAApS,EAAA5B,SAEAoU,EACArY,EAAA4F,MAAAC,EAAA,SAAA5E,EAAAgD,GAGA,KAFAoU,EAEAtS,EAEA,MAAA9E,QACAqX,EAEAD,GACAP,EAAA,KAAA3D,GAFA2D,EAAA7W,QAKAgX,GAAApS,EAAA5B,MAzGA,kBAAA6B,KACAC,EAAAD,EACAA,EAAA3G,EAEA,IAAAgV,GAAA/S,IACA,KAAA2E,EACA,MAAA/F,GAAAK,UAAA0P,EAAAoE,EAAAtO,EAAAC,EAEA,IAAAkS,GAAAjS,IAAAwR,EAqGAc,EAAA,CAIArY,GAAAoO,SAAAvI,KACAA,GAAAA,GACA,KAAA,GAAA2J,GAAA/O,EAAA,EAAAA,EAAAoF,EAAAlF,SAAAF,GACA+O,EAAA2E,EAAA0D,YAAA,GAAAhS,EAAApF,MACAmF,EAAA4J,EAEA,OAAAwI,GACA7D,GACAkE,GACAP,EAAA,KAAA3D,GACAhV,IAiCA8Q,EAAA5K,UAAA6K,SAAA,SAAArK,EAAAC,GACA,IAAA9F,EAAA6Y,OACA,KAAAjW,OAAA,gBACA,OAAAxB,MAAA2O,KAAAlK,EAAAC,EAAAyR,IAMAtH,EAAA5K,UAAAgO,WAAA,WACA,GAAAjS,KAAAiW,SAAA1W,OACA,KAAAiC,OAAA,4BAAAxB,KAAAiW,SAAA5S,IAAA,SAAAmG,GACA,MAAA,WAAAA,EAAA+D,OAAA,QAAA/D,EAAA8E,OAAAtE,WACAtH,KAAA,MACA,OAAAuM,GAAAhL,UAAAgO,WAAA5T,KAAA2B,MAIA,IAAA0X,GAAA,QA4BA7I,GAAA5K,UAAAyO,EAAA,SAAAtC,GACA,GAAAA,YAAA/C,GAEA+C,EAAA7C,SAAAxP,GAAAqS,EAAAxC,gBACAwI,EAAApW,KAAAoQ,IACApQ,KAAAiW,SAAAzW,KAAA4Q,OAEA,IAAAA,YAAAxG,GAEA8N,EAAAjW,KAAA2O,EAAAjS,QACAiS,EAAA9B,OAAA8B,EAAAjS,MAAAiS,EAAAvG,YAEA,CAEA,GAAAuG,YAAAtI,GACA,IAAA,GAAAzI,GAAA,EAAAA,EAAAW,KAAAiW,SAAA1W,QACA6W,EAAApW,KAAAA,KAAAiW,SAAA5W,IACAW,KAAAiW,SAAA3R,OAAAjF,EAAA,KAEAA,CACA,KAAA,GAAA2B,GAAA,EAAAA,EAAAoP,EAAAkB,YAAA/R,SAAAyB,EACAhB,KAAA0S,EAAAtC,EAAAa,EAAAjQ,GACA0W,GAAAjW,KAAA2O,EAAAjS,QACAiS,EAAA9B,OAAA8B,EAAAjS,MAAAiS,KAcAvB,EAAA5K,UAAA0O,EAAA,SAAAvC,GACA,GAAAA,YAAA/C,IAEA,GAAA+C,EAAA7C,SAAAxP,EACA,GAAAqS,EAAAxC,eACAwC,EAAAxC,eAAAU,OAAAnB,OAAAiD,EAAAxC,gBACAwC,EAAAxC,eAAA,SACA,CACA,GAAAzB,GAAAnM,KAAAiW,SAAA7J,QAAAgE,EAEAjE,IAAA,GACAnM,KAAAiW,SAAA3R,OAAA6H,EAAA,QAIA,IAAAiE,YAAAxG,GAEA8N,EAAAjW,KAAA2O,EAAAjS,aACAiS,GAAA9B,OAAA8B,EAAAjS,UAEA,IAAAiS,YAAAnB,GAAA,CAEA,IAAA,GAAA5P,GAAA,EAAAA,EAAA+Q,EAAAkB,YAAA/R,SAAAF,EACAW,KAAA2S,EAAAvC,EAAAa,EAAA5R,GAEAqY,GAAAjW,KAAA2O,EAAAjS,aACAiS,GAAA9B,OAAA8B,EAAAjS,QAKA0Q,EAAAS,EAAA,SAAAiD,EAAAoF,EAAAC,GACA9P,EAAAyK,EACAgE,EAAAoB,EACAnB,EAAAoB,mDCrVAtZ,EA6BA8Q,QAAApQ,EAAA,gCCeA,QAAAoQ,GAAAyI,EAAAC,EAAAC,GAEA,GAAA,kBAAAF,GACA,KAAA9P,WAAA,6BAEAnJ,GAAAmF,aAAA1F,KAAA2B,MAMAA,KAAA6X,QAAAA,EAMA7X,KAAA8X,mBAAAA,EAMA9X,KAAA+X,oBAAAA,EAxEAjZ,EAAAR,QAAA8Q,CAEA,IAAAxQ,GAAAI,EAAA,KAGAoQ,EAAAnL,UAAAf,OAAAoG,OAAA1K,EAAAmF,aAAAE,YAAAgE,YAAAmH,EA+EAA,EAAAnL,UAAA+T,QAAA,QAAAA,GAAAC,EAAAC,EAAAC,EAAAC,EAAAzT,GAEA,IAAAyT,EACA,KAAArQ,WAAA,4BAEA,IAAAgL,GAAA/S,IACA,KAAA2E,EACA,MAAA/F,GAAAK,UAAA+Y,EAAAjF,EAAAkF,EAAAC,EAAAC,EAAAC,EAEA,KAAArF,EAAA8E,QAEA,MADAN,YAAA,WAAA5S,EAAAnD,MAAA,mBAAA,GACAzD,CAGA,KACA,MAAAgV,GAAA8E,QACAI,EACAC,EAAAnF,EAAA+E,iBAAA,kBAAA,UAAAM,GAAA1B,SACA,SAAA7W,EAAA0F,GAEA,GAAA1F,EAEA,MADAkT,GAAAxO,KAAA,QAAA1E,EAAAoY,GACAtT,EAAA9E,EAGA,IAAA,OAAA0F,EAEA,MADAwN,GAAAjS,KAAA,GACA/C,CAGA,MAAAwH,YAAA4S,IACA,IACA5S,EAAA4S,EAAApF,EAAAgF,kBAAA,kBAAA,UAAAxS,GACA,MAAA1F,GAEA,MADAkT,GAAAxO,KAAA,QAAA1E,EAAAoY,GACAtT,EAAA9E,GAKA,MADAkT,GAAAxO,KAAA,OAAAgB,EAAA0S,GACAtT,EAAA,KAAAY,KAGA,MAAA1F,GAGA,MAFAkT,GAAAxO,KAAA,QAAA1E,EAAAoY,GACAV,WAAA,WAAA5S,EAAA9E,IAAA,GACA9B,IASAqR,EAAAnL,UAAAnD,IAAA,SAAAuX,GAOA,MANArY,MAAA6X,UACAQ,GACArY,KAAA6X,QAAA,KAAA,KAAA,MACA7X,KAAA6X,QAAA,KACA7X,KAAAuE,KAAA,OAAAH,OAEApE,kCC/HA,QAAAoP,GAAAjR,EAAAuG,GACAuK,EAAA5Q,KAAA2B,KAAA7B,EAAAuG,GAMA1E,KAAA0R,WAOA1R,KAAAsY,EAAA,KA+BA,QAAApH,GAAAqH,GAEA,MADAA,GAAAD,EAAA,KACAC,EAlEAzZ,EAAAR,QAAA8Q,CAGA,IAAAH,GAAAjQ,EAAA,MACAoQ,EAAAnL,UAAAf,OAAAoG,OAAA2F,EAAAhL,YAAAgE,YAAAmH,GAAA1C,UAAA,SAEA,IAAA2C,GAAArQ,EAAA,IACAJ,EAAAI,EAAA,IACA4Q,EAAA5Q,EAAA,GAmCAoQ,GAAAzC,SAAA,SAAAxO,EAAAyO,GACA,GAAA2L,GAAA,GAAAnJ,GAAAjR,EAAAyO,EAAAlI,QAEA,IAAAkI,EAAA8E,QACA,IAAA,GAAAD,GAAAvO,OAAAD,KAAA2J,EAAA8E,SAAArS,EAAA,EAAAA,EAAAoS,EAAAlS,SAAAF,EACAkZ,EAAAzL,IAAAuC,EAAA1C,SAAA8E,EAAApS,GAAAuN,EAAA8E,QAAAD,EAAApS,KACA,OAAAkZ,IASArV,OAAA6K,eAAAqB,EAAAnL,UAAA,gBACA+E,IAAA,WACA,MAAAhJ,MAAAsY,IAAAtY,KAAAsY,EAAA1Z,EAAAyS,QAAArR,KAAA0R,aAYAtC,EAAAnL,UAAA4I,OAAA,WACA,GAAA2L,GAAAvJ,EAAAhL,UAAA4I,OAAAxO,KAAA2B,KACA,QACA0E,QAAA8T,GAAAA,EAAA9T,SAAA3G,EACA2T,QAAAzC,EAAA4B,YAAA7Q,KAAAyY,kBACAzH,OAAAwH,GAAAA,EAAAxH,QAAAjT,IAOAqR,EAAAnL,UAAA+E,IAAA,SAAA7K,GACA,MAAA6B,MAAA0R,QAAAvT,IACA8Q,EAAAhL,UAAA+E,IAAA3K,KAAA2B,KAAA7B,IAMAiR,EAAAnL,UAAAgO,WAAA,WAEA,IAAA,GADAP,GAAA1R,KAAAyY,aACApZ,EAAA,EAAAA,EAAAqS,EAAAnS,SAAAF,EACAqS,EAAArS,GAAAM,SACA,OAAAsP,GAAAhL,UAAAtE,QAAAtB,KAAA2B,OAMAoP,EAAAnL,UAAA6I,IAAA,SAAAsD,GAEA,GAAApQ,KAAAgJ,IAAAoH,EAAAjS,MACA,KAAAqD,OAAA,mBAAA4O,EAAAjS,KAAA,QAAA6B,KACA,OAAAoQ,aAAAf,IACArP,KAAA0R,QAAAtB,EAAAjS,MAAAiS,EACAA,EAAA9B,OAAAtO,KACAkR,EAAAlR,OAEAiP,EAAAhL,UAAA6I,IAAAzO,KAAA2B,KAAAoQ,IAMAhB,EAAAnL,UAAAkJ,OAAA,SAAAiD,GACA,GAAAA,YAAAf,GAAA,CAGA,GAAArP,KAAA0R,QAAAtB,EAAAjS,QAAAiS,EACA,KAAA5O,OAAA4O,EAAA,uBAAApQ,KAIA,cAFAA,MAAA0R,QAAAtB,EAAAjS,MACAiS,EAAA9B,OAAA,KACA4C,EAAAlR,MAEA,MAAAiP,GAAAhL,UAAAkJ,OAAA9O,KAAA2B,KAAAoQ,IAUAhB,EAAAnL,UAAAqF,OAAA,SAAAuO,EAAAC,EAAAC,GAEA,IAAA,GADAW,GAAA,GAAA9I,GAAAR,QAAAyI,EAAAC,EAAAC,GACA1Y,EAAA,EAAAA,EAAAW,KAAAyY,aAAAlZ,SAAAF,EACAqZ,EAAA9Z,EAAA+Z,QAAA3Y,KAAAsY,EAAAjZ,GAAAM,UAAAxB,OAAAS,EAAA8C,QAAA,IAAA,KAAA,kCAAAiB,IAAA/D,EAAA+Z,QAAA3Y,KAAAsY,EAAAjZ,GAAAlB,OACAya,EAAA5Y,KAAAsY,EAAAjZ,GACAwZ,EAAA7Y,KAAAsY,EAAAjZ,GAAAqR,oBAAA7I,KACAiR,EAAA9Y,KAAAsY,EAAAjZ,GAAAsR,qBAAA9I,MAGA,OAAA6Q,kDCzEA,QAAA5Q,GAAA3J,EAAAuG,GACAuK,EAAA5Q,KAAA2B,KAAA7B,EAAAuG,GAMA1E,KAAAsK,UAMAtK,KAAA+Y,OAAAhb,EAMAiC,KAAAgZ,WAAAjb,EAMAiC,KAAAiZ,SAAAlb,EAMAiC,KAAAoL,MAAArN,EAOAiC,KAAAkZ,EAAA,KAOAlZ,KAAAsI,EAAA,KAOAtI,KAAA+I,EAAA,KAOA/I,KAAAmZ,EAAA,KA0EA,QAAAjI,GAAAtJ,GAKA,MAJAA,GAAAsR,EAAAtR,EAAAU,EAAAV,EAAAmB,EAAAnB,EAAAuR,EAAA,WACAvR,GAAAjH,aACAiH,GAAAxG,aACAwG,GAAAuI,OACAvI,EApNA9I,EAAAR,QAAAwJ,CAGA,IAAAmH,GAAAjQ,EAAA,MACA8I,EAAA7D,UAAAf,OAAAoG,OAAA2F,EAAAhL,YAAAgE,YAAAH,GAAA4E,UAAA,MAEA,IAAA9C,GAAA5K,EAAA,IACAkQ,EAAAlQ,EAAA,IACAqO,EAAArO,EAAA,IACAmQ,EAAAnQ,EAAA,IACAoQ,EAAApQ,EAAA,IACA2I,EAAA3I,EAAA,IACAkJ,EAAAlJ,EAAA,IACAuQ,EAAAvQ,EAAA,IACA0Q,EAAA1Q,EAAA,IACAJ,EAAAI,EAAA,IACAiN,EAAAjN,EAAA,IACAmM,EAAAnM,EAAA,IACAgQ,EAAAhQ,EAAA,IACAmL,EAAAnL,EAAA,GAQA8I,GAAA6E,SAAA,SAAAxO,EAAAyO,GACA,GAAAhF,GAAA,GAAAE,GAAA3J,EAAAyO,EAAAlI,QACAkD,GAAAoR,WAAApM,EAAAoM,WACApR,EAAAqR,SAAArM,EAAAqM,QAGA,KAFA,GAAAxH,GAAAvO,OAAAD,KAAA2J,EAAAtC,QACAjL,EAAA,EACAA,EAAAoS,EAAAlS,SAAAF,EACAuI,EAAAkF,KACA,IAAAF,EAAAtC,OAAAmH,EAAApS,IAAAkM,QACA4D,EAAAxC,SACAU,EAAAV,UAAA8E,EAAApS,GAAAuN,EAAAtC,OAAAmH,EAAApS,KAEA,IAAAuN,EAAAmM,OACA,IAAAtH,EAAAvO,OAAAD,KAAA2J,EAAAmM,QAAA1Z,EAAA,EAAAA,EAAAoS,EAAAlS,SAAAF,EACAuI,EAAAkF,IAAAoC,EAAAvC,SAAA8E,EAAApS,GAAAuN,EAAAmM,OAAAtH,EAAApS,KACA,IAAAuN,EAAAoE,OACA,IAAAS,EAAAvO,OAAAD,KAAA2J,EAAAoE,QAAA3R,EAAA,EAAAA,EAAAoS,EAAAlS,SAAAF,EAAA,CACA,GAAA2R,GAAApE,EAAAoE,OAAAS,EAAApS,GACAuI,GAAAkF,KACAkE,EAAA1F,KAAAvN,EACAsP,EAAAV,SACAqE,EAAA1G,SAAAvM,EACA+J,EAAA6E,SACAqE,EAAAnH,SAAA9L,EACA6L,EAAA+C,SACAqE,EAAAU,UAAA3T,EACAqR,EAAAzC,SACAsC,EAAAtC,UAAA8E,EAAApS,GAAA2R,IASA,MANApE,GAAAoM,YAAApM,EAAAoM,WAAAzZ,SACAqI,EAAAoR,WAAApM,EAAAoM,YACApM,EAAAqM,UAAArM,EAAAqM,SAAA1Z,SACAqI,EAAAqR,SAAArM,EAAAqM,UACArM,EAAAxB,QACAxD,EAAAwD,OAAA,GACAxD,GAyEA1E,OAAAmG,iBAAAvB,EAAA7D,WAQAmV,YACApQ,IAAA,WAEA,GAAAhJ,KAAAkZ,EACA,MAAAlZ,MAAAkZ,CACAlZ,MAAAkZ,IACA,KAAA,GAAAzH,GAAAvO,OAAAD,KAAAjD,KAAAsK,QAAAjL,EAAA,EAAAA,EAAAoS,EAAAlS,SAAAF,EAAA,CACA,GAAAmK,GAAAxJ,KAAAsK,OAAAmH,EAAApS,IACAiM,EAAA9B,EAAA8B,EAGA,IAAAtL,KAAAkZ,EAAA5N,GACA,KAAA9J,OAAA,gBAAA8J,EAAA,OAAAtL,KAEAA,MAAAkZ,EAAA5N,GAAA9B,EAEA,MAAAxJ,MAAAkZ,IAUA7Q,aACAW,IAAA,WACA,MAAAhJ,MAAAsI,IAAAtI,KAAAsI,EAAA1J,EAAAyS,QAAArR,KAAAsK,WAUAxB,aACAE,IAAA,WACA,MAAAhJ,MAAA+I,IAAA/I,KAAA+I,EAAAnK,EAAAyS,QAAArR,KAAA+Y,WASAlR,MACAmB,IAAA,WACA,MAAAhJ,MAAAmZ,IAAAnZ,KAAAmZ,EAAAxR,EAAA3H,MAAAiI,cAEAkB,IAAA,SAAAtB,GACA,GAAAA,KAAAA,EAAA5D,oBAAAiE,IACA,KAAAH,WAAA,qCACAF,GAAAwI,OACAxI,EAAAwI,KAAAnI,EAAAmI,MACArQ,KAAAmZ,EAAAtR,MAgBAC,EAAA7D,UAAA4I,OAAA,WACA,GAAA2L,GAAAvJ,EAAAhL,UAAA4I,OAAAxO,KAAA2B,KACA,QACA0E,QAAA8T,GAAAA,EAAA9T,SAAA3G,EACAgb,OAAA9J,EAAA4B,YAAA7Q,KAAA8I,aACAwB,OAAA2E,EAAA4B,YAAA7Q,KAAAqI,YAAAgR,OAAA,SAAAtI,GAAA,OAAAA,EAAAlD,sBACAmL,WAAAhZ,KAAAgZ,YAAAhZ,KAAAgZ,WAAAzZ,OAAAS,KAAAgZ,WAAAjb,EACAkb,SAAAjZ,KAAAiZ,UAAAjZ,KAAAiZ,SAAA1Z,OAAAS,KAAAiZ,SAAAlb,EACAqN,MAAApL,KAAAoL,OAAArN,EACAiT,OAAAwH,GAAAA,EAAAxH,QAAAjT,IAOA+J,EAAA7D,UAAAgO,WAAA,WAEA,IADA,GAAA3H,GAAAtK,KAAAqI,YAAAhJ,EAAA,EACAA,EAAAiL,EAAA/K,QACA+K,EAAAjL,KAAAM,SACA,IAAAoZ,GAAA/Y,KAAA8I,WACA,KADAzJ,EAAA,EACAA,EAAA0Z,EAAAxZ,QACAwZ,EAAA1Z,KAAAM,SACA,OAAAsP,GAAAhL,UAAAtE,QAAAtB,KAAA2B,OAMA8H,EAAA7D,UAAA+E,IAAA,SAAA7K,GACA,MAAA6B,MAAAsK,OAAAnM,IACA6B,KAAA+Y,QAAA/Y,KAAA+Y,OAAA5a,IACA6B,KAAAgR,QAAAhR,KAAAgR,OAAA7S,IACA,MAUA2J,EAAA7D,UAAA6I,IAAA,SAAAsD,GAEA,GAAApQ,KAAAgJ,IAAAoH,EAAAjS,MACA,KAAAqD,OAAA,mBAAA4O,EAAAjS,KAAA,QAAA6B,KAEA,IAAAoQ,YAAA/C,IAAA+C,EAAA7C,SAAAxP,EAAA,CAMA,GAAAiC,KAAAkZ,EAAAlZ,KAAAkZ,EAAA9I,EAAA9E,IAAAtL,KAAAoZ,WAAAhJ,EAAA9E,IACA,KAAA9J,OAAA,gBAAA4O,EAAA9E,GAAA,OAAAtL,KACA,IAAAA,KAAAsZ,aAAAlJ,EAAA9E,IACA,KAAA9J,OAAA,MAAA4O,EAAA9E,GAAA,mBAAAtL,KACA,IAAAA,KAAAuZ,eAAAnJ,EAAAjS,MACA,KAAAqD,OAAA,SAAA4O,EAAAjS,KAAA,oBAAA6B,KAOA,OALAoQ,GAAA9B,QACA8B,EAAA9B,OAAAnB,OAAAiD,GACApQ,KAAAsK,OAAA8F,EAAAjS,MAAAiS,EACAA,EAAAzC,QAAA3N,KACAoQ,EAAAyB,MAAA7R,MACAkR,EAAAlR,MAEA,MAAAoQ,aAAAlB,IACAlP,KAAA+Y,SACA/Y,KAAA+Y,WACA/Y,KAAA+Y,OAAA3I,EAAAjS,MAAAiS,EACAA,EAAAyB,MAAA7R,MACAkR,EAAAlR,OAEAiP,EAAAhL,UAAA6I,IAAAzO,KAAA2B,KAAAoQ,IAUAtI,EAAA7D,UAAAkJ,OAAA,SAAAiD,GACA,GAAAA,YAAA/C,IAAA+C,EAAA7C,SAAAxP,EAAA,CAGA,IAAAiC,KAAAsK,QAAAtK,KAAAsK,OAAA8F,EAAAjS,QAAAiS,EACA,KAAA5O,OAAA4O,EAAA,uBAAApQ,KAIA,cAHAA,MAAAsK,OAAA8F,EAAAjS,MACAiS,EAAA9B,OAAA,KACA8B,EAAA0B,SAAA9R,MACAkR,EAAAlR,MAEA,GAAAoQ,YAAAlB,GAAA,CAEA,IAAAlP,KAAA+Y,QAAA/Y,KAAA+Y,OAAA3I,EAAAjS,QAAAiS,EACA,KAAA5O,OAAA4O,EAAA,uBAAApQ,KAIA,cAHAA,MAAA+Y,OAAA3I,EAAAjS,MACAiS,EAAA9B,OAAA,KACA8B,EAAA0B,SAAA9R,MACAkR,EAAAlR,MAEA,MAAAiP,GAAAhL,UAAAkJ,OAAA9O,KAAA2B,KAAAoQ,IAQAtI,EAAA7D,UAAAqV,aAAA,SAAAhO,GACA,GAAAtL,KAAAiZ,SACA,IAAA,GAAA5Z,GAAA,EAAAA,EAAAW,KAAAiZ,SAAA1Z,SAAAF,EACA,GAAA,gBAAAW,MAAAiZ,SAAA5Z,IAAAW,KAAAiZ,SAAA5Z,GAAA,IAAAiM,GAAAtL,KAAAiZ,SAAA5Z,GAAA,IAAAiM,EACA,OAAA,CACA,QAAA,GAQAxD,EAAA7D,UAAAsV,eAAA,SAAApb,GACA,GAAA6B,KAAAiZ,SACA,IAAA,GAAA5Z,GAAA,EAAAA,EAAAW,KAAAiZ,SAAA1Z,SAAAF,EACA,GAAAW,KAAAiZ,SAAA5Z,KAAAlB,EACA,OAAA,CACA,QAAA,GAQA2J,EAAA7D,UAAAqF,OAAA,SAAAwG,GACA,MAAA,IAAA9P,MAAA6H,KAAAiI,IAOAhI,EAAA7D,UAAAuV,MAAA,WAKA,IAAA,GAFAxP,GAAAhK,KAAAgK,SACAwB,KACAnM,EAAA,EAAAA,EAAAW,KAAAqI,YAAA9I,SAAAF,EACAmM,EAAAhM,KAAAQ,KAAAsI,EAAAjJ,GAAAM,UAAAgK,aAuBA,OAtBA3J,MAAAW,OAAAsL,EAAAjM,MAAA2C,IAAAqH,EAAA,WACA0F,OAAAA,EACAlE,MAAAA,EACA5M,KAAAA,IAEAoB,KAAAoB,OAAA+J,EAAAnL,MAAA2C,IAAAqH,EAAA,WACAuF,OAAAA,EACA/D,MAAAA,EACA5M,KAAAA,IAEAoB,KAAAmQ,OAAAnB,EAAAhP,MAAA2C,IAAAqH,EAAA,WACAwB,MAAAA,EACA5M,KAAAA,IAEAoB,KAAAoK,WAAApK,KAAAqQ,KAAAlG,EAAAC,WAAApK,MAAA2C,IAAAqH,EAAA,eACAwB,MAAAA,EACA5M,KAAAA,IAEAoB,KAAAwK,SAAAL,EAAAK,SAAAxK,MAAA2C,IAAAqH,EAAA,aACAwB,MAAAA,EACA5M,KAAAA,IAEAoB,MASA8H,EAAA7D,UAAAtD,OAAA,SAAAgN,EAAAoC,GACA,MAAA/P,MAAAwZ,QAAA7Y,OAAAgN,EAAAoC,IASAjI,EAAA7D,UAAA+L,gBAAA,SAAArC,EAAAoC,GACA,MAAA/P,MAAAW,OAAAgN,EAAAoC,GAAAA,EAAA1I,IAAA0I,EAAA0J,OAAA1J,GAAA2J,UAWA5R,EAAA7D,UAAA7C,OAAA,SAAA6O,EAAA1Q,GACA,MAAAS,MAAAwZ,QAAApY,OAAA6O,EAAA1Q,IAUAuI,EAAA7D,UAAAiM,gBAAA,SAAAD,GAGA,MAFAA,aAAAV,KACAU,EAAAV,EAAAjG,OAAA2G,IACAjQ,KAAAoB,OAAA6O,EAAAA,EAAA+D,WAQAlM,EAAA7D,UAAAkM,OAAA,SAAAxC,GACA,MAAA3N,MAAAwZ,QAAArJ,OAAAxC,IAQA7F,EAAA7D,UAAAmG,WAAA,SAAAgG,GACA,MAAApQ,MAAAwZ,QAAApP,WAAAgG,IAUAtI,EAAA7D,UAAAoM,KAAAvI,EAAA7D,UAAAmG,WA0BAtC,EAAA7D,UAAAuG,SAAA,SAAAmD,EAAAjJ,GACA,MAAA1E,MAAAwZ,QAAAhP,SAAAmD,EAAAjJ,sHCndA,QAAAiV,GAAA9P,EAAAxI,GACA,GAAAhC,GAAA,EAAAua,IAEA,KADAvY,GAAA,EACAhC,EAAAwK,EAAAtK,QAAAqa,EAAAd,EAAAzZ,EAAAgC,IAAAwI,EAAAxK,IACA,OAAAua,GA1BA,GAAApO,GAAAlN,EAEAM,EAAAI,EAAA,IAEA8Z,GACA,SACA,QACA,QACA,SACA,SACA,UACA,WACA,QACA,SACA,SACA,UACA,WACA,OACA,SACA,QA6BAtN,GAAAC,MAAAkO,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAuBAnO,EAAA6C,SAAAsL,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACA/a,EAAA6J,WACA,OAYA+C,EAAA7C,KAAAgR,GACA,EACA,EACA,EACA,EACA,GACA,GAkBAnO,EAAAe,OAAAoN,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GAmBAnO,EAAAG,OAAAgO,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,gCCvLA,GAAA/a,GAAAE,EAAAR,QAAAU,EAAA,GAEAJ,GAAA8C,QAAA1C,EAAA,GACAJ,EAAA4F,MAAAxF,EAAA,GACAJ,EAAAqH,KAAAjH,EAAA,GAMAJ,EAAAiG,GAAAjG,EAAAuG,QAAA,MAOAvG,EAAAyS,QAAA,SAAAjB,GACA,GAAAU,KACA,IAAAV,EACA,IAAA,GAAAnN,GAAAC,OAAAD,KAAAmN,GAAA/Q,EAAA,EAAAA,EAAA4D,EAAA1D,SAAAF,EACAyR,EAAAtR,KAAA4Q,EAAAnN,EAAA5D,IACA,OAAAyR,GAWAlS,GAAA2L,SAAA,SAAAb,GACA,MAAA,KAAAA,EAAAjH,QATA,MASA,QAAAA,QARA,KAQA,OAAA,MAQA7D,EAAAib,QAAA,SAAArX,GACA,MAAAA,GAAAnC,OAAA,GAAAyZ,cAAAtX,EAAA8U,UAAA,4CCzBA,QAAAhE,GAAAC,EAAAC,GASAxT,KAAAuT,GAAAA,IAAA,EAMAvT,KAAAwT,GAAAA,IAAA,EAtCA1U,EAAAR,QAAAgV,CAEA,IAAA1U,GAAAI,EAAA,IA4CA+a,EAAAzG,EAAAyG,KAAA,GAAAzG,GAAA,EAAA,EAEAyG,GAAA/O,SAAA,WAAA,MAAA,IACA+O,EAAAC,SAAAD,EAAAnE,SAAA,WAAA,MAAA5V,OACA+Z,EAAAxa,OAAA,WAAA,MAAA,GAOA,IAAA0a,GAAA3G,EAAA2G,SAAA,kBAOA3G,GAAA9E,WAAA,SAAAN,GACA,GAAA,IAAAA,EACA,MAAA6L,EACA,IAAApF,GAAAzG,EAAA,CACAyG,KACAzG,GAAAA,EACA,IAAAqF,GAAArF,IAAA,EACAsF,GAAAtF,EAAAqF,GAAA,aAAA,CAUA,OATAoB,KACAnB,GAAAA,IAAA,EACAD,GAAAA,IAAA,IACAA,EAAA,aACAA,EAAA,IACAC,EAAA,aACAA,EAAA,KAGA,GAAAF,GAAAC,EAAAC,IAQAF,EAAAjD,KAAA,SAAAnC,GACA,GAAA,gBAAAA,GACA,MAAAoF,GAAA9E,WAAAN,EACA,IAAAtP,EAAAoO,SAAAkB,GAAA,CAEA,IAAAtP,EAAAD,KAGA,MAAA2U,GAAA9E,WAAA0L,SAAAhM,EAAA,IAFAA,GAAAtP,EAAAD,KAAAwb,WAAAjM,GAIA,MAAAA,GAAArD,KAAAqD,EAAApD,KAAA,GAAAwI,GAAApF,EAAArD,MAAA,EAAAqD,EAAApD,OAAA,GAAAiP,GAQAzG,EAAArP,UAAA+G,SAAA,SAAAD,GACA,IAAAA,GAAA/K,KAAAwT,KAAA,GAAA,CACA,GAAAD,GAAA,GAAAvT,KAAAuT,KAAA,EACAC,GAAAxT,KAAAwT,KAAA,CAGA,OAFAD,KACAC,EAAAA,EAAA,IAAA,KACAD,EAAA,WAAAC,GAEA,MAAAxT,MAAAuT,GAAA,WAAAvT,KAAAwT,IAQAF,EAAArP,UAAAmW,OAAA,SAAArP,GACA,MAAAnM,GAAAD,KACA,GAAAC,GAAAD,KAAA,EAAAqB,KAAAuT,GAAA,EAAAvT,KAAAwT,KAAAzI,IAEAF,IAAA,EAAA7K,KAAAuT,GAAAzI,KAAA,EAAA9K,KAAAwT,GAAAzI,WAAAA,GAGA,IAAAxJ,GAAAL,OAAA+C,UAAA1C,UAOA+R,GAAA+G,SAAA,SAAAC,GACA,MAAAA,KAAAL,EACAF,EACA,GAAAzG,IACA/R,EAAAlD,KAAAic,EAAA,GACA/Y,EAAAlD,KAAAic,EAAA,IAAA,EACA/Y,EAAAlD,KAAAic,EAAA,IAAA,GACA/Y,EAAAlD,KAAAic,EAAA,IAAA,MAAA,GAEA/Y,EAAAlD,KAAAic,EAAA,GACA/Y,EAAAlD,KAAAic,EAAA,IAAA,EACA/Y,EAAAlD,KAAAic,EAAA,IAAA,GACA/Y,EAAAlD,KAAAic,EAAA,IAAA,MAAA,IAQAhH,EAAArP,UAAAsW,OAAA,WACA,MAAArZ,QAAAC,aACA,IAAAnB,KAAAuT,GACAvT,KAAAuT,KAAA,EAAA,IACAvT,KAAAuT,KAAA,GAAA,IACAvT,KAAAuT,KAAA,GACA,IAAAvT,KAAAwT,GACAxT,KAAAwT,KAAA,EAAA,IACAxT,KAAAwT,KAAA,GAAA,IACAxT,KAAAwT,KAAA,KAQAF,EAAArP,UAAA+V,SAAA,WACA,GAAAQ,GAAAxa,KAAAwT,IAAA,EAGA,OAFAxT,MAAAwT,KAAAxT,KAAAwT,IAAA,EAAAxT,KAAAuT,KAAA,IAAAiH,KAAA,EACAxa,KAAAuT,IAAAvT,KAAAuT,IAAA,EAAAiH,KAAA,EACAxa,MAOAsT,EAAArP,UAAA2R,SAAA,WACA,GAAA4E,KAAA,EAAAxa,KAAAuT,GAGA,OAFAvT,MAAAuT,KAAAvT,KAAAuT,KAAA,EAAAvT,KAAAwT,IAAA,IAAAgH,KAAA,EACAxa,KAAAwT,IAAAxT,KAAAwT,KAAA,EAAAgH,KAAA,EACAxa,MAOAsT,EAAArP,UAAA1E,OAAA,WACA,GAAAkb,GAAAza,KAAAuT,GACAmH,GAAA1a,KAAAuT,KAAA,GAAAvT,KAAAwT,IAAA,KAAA,EACAmH,EAAA3a,KAAAwT,KAAA,EACA,OAAA,KAAAmH,EACA,IAAAD,EACAD,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,QAAA,EAAA,EACAC,EAAA,MACAA,EAAA,IAAA,EAAA,EACAA,EAAA,QAAA,EAAA,EACAC,EAAA,IAAA,EAAA,kCCvBA,QAAAxS,GAAAyS,EAAA5Y,EAAAmM,GACA,IAAA,GAAAlL,GAAAC,OAAAD,KAAAjB,GAAA3C,EAAA,EAAAA,EAAA4D,EAAA1D,SAAAF,EACAub,EAAA3X,EAAA5D,MAAAtB,GAAAoQ,IACAyM,EAAA3X,EAAA5D,IAAA2C,EAAAiB,EAAA5D,IACA,OAAAub,GAoBA,QAAAC,GAAA1c,GAEA,QAAA2c,GAAAnN,EAAAmC,GAEA,KAAA9P,eAAA8a,IACA,MAAA,IAAAA,GAAAnN,EAAAmC,EAKA5M,QAAA6K,eAAA/N,KAAA,WAAAgJ,IAAA,WAAA,MAAA2E,MAGAnM,MAAAuZ,kBACAvZ,MAAAuZ,kBAAA/a,KAAA8a,GAEA5X,OAAA6K,eAAA/N,KAAA,SAAAkO,MAAA1M,QAAAwZ,OAAA,KAEAlL,GACA3H,EAAAnI,KAAA8P,GAWA,OARAgL,EAAA7W,UAAAf,OAAAoG,OAAA9H,MAAAyC,YAAAgE,YAAA6S,EAEA5X,OAAA6K,eAAA+M,EAAA7W,UAAA,QAAA+E,IAAA,WAAA,MAAA7K,MAEA2c,EAAA7W,UAAAiB,SAAA,WACA,MAAAlF,MAAA7B,KAAA,KAAA6B,KAAA2N,SAGAmN,EA/OA,GAAAlc,GAAAN,CAGAM,GAAAK,UAAAD,EAAA,GAGAJ,EAAAqB,OAAAjB,EAAA,GAGAJ,EAAAmF,aAAA/E,EAAA,GAGAJ,EAAAuG,QAAAnG,EAAA,GAGAJ,EAAAwI,KAAApI,EAAA,GAGAJ,EAAAgI,KAAA5H,EAAA,GAGAJ,EAAA0U,SAAAtU,EAAA,IAOAJ,EAAA6J,WAAAvF,OAAAuL,OAAAvL,OAAAuL,cAMA7P,EAAAgK,YAAA1F,OAAAuL,OAAAvL,OAAAuL,cAOA7P,EAAA6Y,UAAA3Z,EAAA+Y,SAAA/Y,EAAA+Y,QAAAoE,UAAAnd,EAAA+Y,QAAAoE,SAAAC,MAQAtc,EAAAqO,UAAAkO,OAAAlO,WAAA,SAAAiB,GACA,MAAA,gBAAAA,IAAAkN,SAAAlN,IAAA5N,KAAAoD,MAAAwK,KAAAA,GAQAtP,EAAAoO,SAAA,SAAAkB,GACA,MAAA,gBAAAA,IAAAA,YAAAhN,SAQAtC,EAAA8J,SAAA,SAAAwF,GACA,MAAAA,IAAA,gBAAAA,IAOAtP,EAAAgV,OAAA,WACA,IACA,GAAAA,GAAAhV,EAAAuG,QAAA,UAAAyO,MAEA,OAAAA,GAAA3P,UAAAoX,UAAAzH,EAAA,KACA,MAAA9P,GAEA,MAAA,UAYAlF,EAAA0c,EAAA,KASA1c,EAAA2c,EAAA,KAOA3c,EAAA8P,UAAA,SAAA8M,GAEA,MAAA,gBAAAA,GACA5c,EAAAgV,OACAhV,EAAA2c,EAAAC,GACA,GAAA5c,GAAA6B,MAAA+a,GACA5c,EAAAgV,OACAhV,EAAA0c,EAAAE,GACA,mBAAA/V,YACA+V,EACA,GAAA/V,YAAA+V,IAOA5c,EAAA6B,MAAA,mBAAAgF,YAAAA,WAAAhF,MAMA7B,EAAAD,KAAAb,EAAA2d,SAAA3d,EAAA2d,QAAA9c,MAAAC,EAAAuG,QAAA,QAMAvG,EAAA8c,OAAA,mBAMA9c,EAAA+c,QAAA,wBAMA/c,EAAAgd,QAAA,6CAOAhd,EAAAid,WAAA,SAAA3N,GACA,MAAAA,GACAtP,EAAA0U,SAAAjD,KAAAnC,GAAAqM,SACA3b,EAAA0U,SAAA2G,UASArb,EAAAkd,aAAA,SAAAxB,EAAAvP,GACA,GAAAsI,GAAAzU,EAAA0U,SAAA+G,SAAAC,EACA,OAAA1b,GAAAD,KACAC,EAAAD,KAAAod,SAAA1I,EAAAE,GAAAF,EAAAG,GAAAzI,GACAsI,EAAArI,WAAAD,IAkBAnM,EAAAuJ,MAAAA,EAOAvJ,EAAA+Z,QAAA,SAAAnW,GACA,MAAAA,GAAAnC,OAAA,GAAAoN,cAAAjL,EAAA8U,UAAA,IA0CA1Y,EAAAic,SAAAA,EAkBAjc,EAAAod,cAAAnB,EAAA,iBAaAjc,EAAAqK,YAAA,SAAA4J,GAEA,IAAA,GADAoJ,MACA5c,EAAA,EAAAA,EAAAwT,EAAAtT,SAAAF,EACA4c,EAAApJ,EAAAxT,IAAA,CAOA,OAAA,YACA,IAAA,GAAA4D,GAAAC,OAAAD,KAAAjD,MAAAX,EAAA4D,EAAA1D,OAAA,EAAAF,GAAA,IAAAA,EACA,GAAA,IAAA4c,EAAAhZ,EAAA5D,KAAAW,KAAAiD,EAAA5D,MAAAtB,GAAA,OAAAiC,KAAAiD,EAAA5D,IACA,MAAA4D,GAAA5D,KASAT,EAAAwK,YAAA,SAAAyJ,GAQA,MAAA,UAAA1U,GACA,IAAA,GAAAkB,GAAA,EAAAA,EAAAwT,EAAAtT,SAAAF,EACAwT,EAAAxT,KAAAlB,SACA6B,MAAA6S,EAAAxT,MAUAT,EAAAsd,YAAA,SAAAtN,EAAAuN,GACA,IAAA,GAAA9c,GAAA,EAAAA,EAAA8c,EAAA5c,SAAAF,EACA,IAAA,GAAA4D,GAAAC,OAAAD,KAAAkZ,EAAA9c,IAAA2B,EAAA,EAAAA,EAAAiC,EAAA1D,SAAAyB,EAAA,CAGA,IAFA,GAAAiF,GAAAkW,EAAA9c,GAAA4D,EAAAjC,IAAAqF,MAAA,KACA0L,EAAAnD,EACA3I,EAAA1G,QACAwS,EAAAA,EAAA9L,EAAAO,QACA2V,GAAA9c,GAAA4D,EAAAjC,IAAA+Q,IASAnT,EAAA0R,eACA8L,MAAAlb,OACAmb,MAAAnb,OACA+J,MAAA/J,QAGAtC,EAAA0Q,EAAA,WACA,GAAAsE,GAAAhV,EAAAgV,MAEA,KAAAA,EAEA,YADAhV,EAAA0c,EAAA1c,EAAA2c,EAAA,KAKA3c,GAAA0c,EAAA1H,EAAAvD,OAAA5K,WAAA4K,MAAAuD,EAAAvD,MAEA,SAAAnC,EAAAoO,GACA,MAAA,IAAA1I,GAAA1F,EAAAoO,IAEA1d,EAAA2c,EAAA3H,EAAA2I,aAEA,SAAAxV,GACA,MAAA,IAAA6M,GAAA7M,yDC9VA,QAAAyV,GAAAhT,EAAAiT,GACA,MAAAjT,GAAArL,KAAA,KAAAse,GAAAjT,EAAAM,UAAA,UAAA2S,EAAA,KAAAjT,EAAAnG,KAAA,WAAAoZ,EAAA,MAAAjT,EAAA+B,QAAA,IAAA,IAAA,YAYA,QAAAmR,GAAA/a,EAAA6H,EAAAC,EAAA4B,GAEA,GAAA7B,EAAAG,aACA,GAAAH,EAAAG,uBAAAC,GAAA,CAAAjI,EACA,cAAA0J,GACA,YACA,WAAAmR,EAAAhT,EAAA,cACA,KAAA,GAAAvG,GAAAC,OAAAD,KAAAuG,EAAAG,aAAAE,QAAA7I,EAAA,EAAAA,EAAAiC,EAAA1D,SAAAyB,EAAAW,EACA,WAAA6H,EAAAG,aAAAE,OAAA5G,EAAAjC,IACAW,GACA,SACA,SACAA,GACA,8BAAA8H,EAAA4B,GACA,SACA,aAAA7B,EAAArL,KAAA,SAEA,QAAAqL,EAAA5B,MACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAAjG,EACA,0BAAA0J,GACA,WAAAmR,EAAAhT,EAAA,WACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAA7H,EACA,kFAAA0J,EAAAA,EAAAA,EAAAA,GACA,WAAAmR,EAAAhT,EAAA,gBACA,MACA,KAAA,QACA,IAAA,SAAA7H,EACA,2BAAA0J,GACA,WAAAmR,EAAAhT,EAAA,UACA,MACA,KAAA,OAAA7H,EACA,4BAAA0J,GACA,WAAAmR,EAAAhT,EAAA,WACA,MACA,KAAA,SAAA7H,EACA,yBAAA0J,GACA,WAAAmR,EAAAhT,EAAA,UACA,MACA,KAAA,QAAA7H,EACA,4DAAA0J,EAAAA,EAAAA,GACA,WAAAmR,EAAAhT,EAAA,WAIA,MAAA7H,GAYA,QAAAgb,GAAAhb,EAAA6H,EAAA6B,GAEA,OAAA7B,EAAA+B,SACA,IAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAA5J,EACA,6BAAA0J,GACA,WAAAmR,EAAAhT,EAAA,eACA,MACA,KAAA,QACA,IAAA,SACA,IAAA,SACA,IAAA,UACA,IAAA,WAAA7H,EACA,6BAAA0J,GACA,WAAAmR,EAAAhT,EAAA,oBACA,MACA,KAAA,OAAA7H,EACA,4BAAA0J,GACA,WAAAmR,EAAAhT,EAAA,gBAGA,MAAA7H,GASA,QAAAqN,GAAA3E,GAOA,IAAA,GAJA1I,GAAA/C,EAAA8C,QAAA,KACA,qCACA,WAAA,mBAEArC,EAAA,EAAAA,EAAAgL,EAAAhC,YAAA9I,SAAAF,EAAA,CACA,GAAAmK,GAAAa,EAAA/B,EAAAjJ,GAAAM,UACA0L,EAAA,IAAAzM,EAAA2L,SAAAf,EAAArL,KAGAqL,GAAAnG,KAAA1B,EACA,sBAAA0J,GACA,yBAAAA,GACA,WAAAmR,EAAAhT,EAAA,WACA,wBAAA6B,GACA,gCACAsR,EAAAhb,EAAA6H,EAAA,QACAkT,EAAA/a,EAAA6H,EAAAnK,EAAAgM,EAAA,UACA,KACA,MAGA7B,EAAAM,UAAAnI,EACA,sBAAA0J,GACA,yBAAAA,GACA,WAAAmR,EAAAhT,EAAA,UACA,gCAAA6B,GACAqR,EAAA/a,EAAA6H,EAAAnK,EAAAgM,EAAA,OACA,KACA,OAIA7B,EAAAqC,YACArC,EAAAG,cAAAH,EAAAG,uBAAAC,GAEAjI,EACA,sBAAA0J,GAHA1J,EACA,iCAAA0J,EAAAA,IAIAqR,EAAA/a,EAAA6H,EAAAnK,EAAAgM,GACA7B,EAAAqC,UAAAlK,EACA,MAEA,MAAAA,GACA,eAlKA7C,EAAAR,QAAA0Q,CAEA,IAAApF,GAAA5K,EAAA,IACAJ,EAAAI,EAAA,sCCgBA,QAAA4d,GAAA1d,EAAAmI,EAAA+F,GAMApN,KAAAd,GAAAA,EAMAc,KAAAqH,IAAAA,EAMArH,KAAA6c,KAAA9e,EAMAiC,KAAAoN,IAAAA,EAIA,QAAA0P,MAWA,QAAAC,GAAAhN,GAMA/P,KAAAgd,KAAAjN,EAAAiN,KAMAhd,KAAAid,KAAAlN,EAAAkN,KAMAjd,KAAAqH,IAAA0I,EAAA1I,IAMArH,KAAA6c,KAAA9M,EAAAmN,OAQA,QAAAxN,KAMA1P,KAAAqH,IAAA,EAMArH,KAAAgd,KAAA,GAAAJ,GAAAE,EAAA,EAAA,GAMA9c,KAAAid,KAAAjd,KAAAgd,KAMAhd,KAAAkd,OAAA,KAoDA,QAAAC,GAAA/P,EAAAjG,EAAAgM,GACAhM,EAAAgM,GAAA,IAAA/F,EAGA,QAAAgQ,GAAAhQ,EAAAjG,EAAAgM,GACA,KAAA/F,EAAA,KACAjG,EAAAgM,KAAA,IAAA/F,EAAA,IACAA,KAAA,CAEAjG,GAAAgM,GAAA/F,EAYA,QAAAiQ,GAAAhW,EAAA+F,GACApN,KAAAqH,IAAAA,EACArH,KAAA6c,KAAA9e,EACAiC,KAAAoN,IAAAA,EA8CA,QAAAkQ,GAAAlQ,EAAAjG,EAAAgM,GACA,KAAA/F,EAAAoG,IACArM,EAAAgM,KAAA,IAAA/F,EAAAmG,GAAA,IACAnG,EAAAmG,IAAAnG,EAAAmG,KAAA,EAAAnG,EAAAoG,IAAA,MAAA,EACApG,EAAAoG,MAAA,CAEA,MAAApG,EAAAmG,GAAA,KACApM,EAAAgM,KAAA,IAAA/F,EAAAmG,GAAA,IACAnG,EAAAmG,GAAAnG,EAAAmG,KAAA,CAEApM,GAAAgM,KAAA/F,EAAAmG,GA2CA,QAAAgK,GAAAnQ,EAAAjG,EAAAgM,GACAhM,EAAAgM,KAAA,IAAA/F,EACAjG,EAAAgM,KAAA/F,IAAA,EAAA,IACAjG,EAAAgM,KAAA/F,IAAA,GAAA,IACAjG,EAAAgM,GAAA/F,IAAA,GArSAtO,EAAAR,QAAAoR,CAEA,IAEAC,GAFA/Q,EAAAI,EAAA,IAIAsU,EAAA1U,EAAA0U,SACArT,EAAArB,EAAAqB,OACAmH,EAAAxI,EAAAwI,IAwHAsI,GAAApG,OAAA1K,EAAAgV,OACA,WACA,OAAAlE,EAAApG,OAAA,WACA,MAAA,IAAAqG,QAIA,WACA,MAAA,IAAAD,IAQAA,EAAA7I,MAAA,SAAAE,GACA,MAAA,IAAAnI,GAAA6B,MAAAsG,IAKAnI,EAAA6B,QAAAA,QACAiP,EAAA7I,MAAAjI,EAAAgI,KAAA8I,EAAA7I,MAAAjI,EAAA6B,MAAAwD,UAAA8P,WASArE,EAAAzL,UAAAzE,KAAA,SAAAN,EAAAmI,EAAA+F,GAGA,MAFApN,MAAAid,KAAAjd,KAAAid,KAAAJ,KAAA,GAAAD,GAAA1d,EAAAmI,EAAA+F,GACApN,KAAAqH,KAAAA,EACArH,MA8BAqd,EAAApZ,UAAAf,OAAAoG,OAAAsT,EAAA3Y,WACAoZ,EAAApZ,UAAA/E,GAAAke,EAOA1N,EAAAzL,UAAA+P,OAAA,SAAA9F,GAWA,MARAlO,MAAAqH,MAAArH,KAAAid,KAAAjd,KAAAid,KAAAJ,KAAA,GAAAQ,IACAnP,KAAA,GACA,IAAA,EACAA,EAAA,MAAA,EACAA,EAAA,QAAA,EACAA,EAAA,UAAA,EACA,EACAA,IAAA7G,IACArH,MASA0P,EAAAzL,UAAAgQ,MAAA,SAAA/F,GACA,MAAAA,GAAA,EACAlO,KAAAR,KAAA8d,EAAA,GAAAhK,EAAA9E,WAAAN,IACAlO,KAAAgU,OAAA9F,IAQAwB,EAAAzL,UAAAiQ,OAAA,SAAAhG,GACA,MAAAlO,MAAAgU,QAAA9F,GAAA,EAAAA,GAAA,MAAA,IAsBAwB,EAAAzL,UAAAyR,OAAA,SAAAxH,GACA,GAAAmF,GAAAC,EAAAjD,KAAAnC,EACA,OAAAlO,MAAAR,KAAA8d,EAAAjK,EAAA9T,SAAA8T,IAUA3D,EAAAzL,UAAAwR,MAAA/F,EAAAzL,UAAAyR,OAQAhG,EAAAzL,UAAA0R,OAAA,SAAAzH,GACA,GAAAmF,GAAAC,EAAAjD,KAAAnC,GAAA8L,UACA,OAAAha,MAAAR,KAAA8d,EAAAjK,EAAA9T,SAAA8T,IAQA3D,EAAAzL,UAAAkQ,KAAA,SAAAjG,GACA,MAAAlO,MAAAR,KAAA2d,EAAA,EAAAjP,EAAA,EAAA,IAeAwB,EAAAzL,UAAAmQ,QAAA,SAAAlG,GACA,MAAAlO,MAAAR,KAAA+d,EAAA,EAAArP,IAAA,IASAwB,EAAAzL,UAAAoQ,SAAA3E,EAAAzL,UAAAmQ,QAQA1E,EAAAzL,UAAA4R,QAAA,SAAA3H,GACA,GAAAmF,GAAAC,EAAAjD,KAAAnC,EACA,OAAAlO,MAAAR,KAAA+d,EAAA,EAAAlK,EAAAE,IAAA/T,KAAA+d,EAAA,EAAAlK,EAAAG,KAUA9D,EAAAzL,UAAA6R,SAAApG,EAAAzL,UAAA4R,OAEA,IAAA2H,GAAA,mBAAAjJ,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAE,EAAA,GAAAhP,YAAA+O,EAAA5T,OAEA,OADA4T,GAAA,IAAA,EACAC,EAAA,GACA,SAAArH,EAAAjG,EAAAgM,GACAqB,EAAA,GAAApH,EACAjG,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,GAAAsB,EAAA,IAGA,SAAArH,EAAAjG,EAAAgM,GACAqB,EAAA,GAAApH,EACAjG,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,GAAAsB,EAAA,OAIA,SAAAvG,EAAA/G,EAAAgM,GACA,GAAAwB,GAAAzG,EAAA,EAAA,EAAA,CAGA,IAFAyG,IACAzG,GAAAA,GACA,IAAAA,EACAqP,EAAA,EAAArP,EAAA,EAAA,EAAA,WAAA/G,EAAAgM,OACA,IAAAsK,MAAAvP,GACAqP,EAAA,WAAApW,EAAAgM,OACA,IAAAjF,EAAA,sBACAqP,GAAA5I,GAAA,GAAA,cAAA,EAAAxN,EAAAgM,OACA,IAAAjF,EAAA,uBACAqP,GAAA5I,GAAA,GAAArU,KAAAod,MAAAxP,EAAA,0BAAA,EAAA/G,EAAAgM,OACA,CACA,GAAAyB,GAAAtU,KAAAoD,MAAApD,KAAA0C,IAAAkL,GAAA5N,KAAAqd,KACA9I,EAAA,QAAAvU,KAAAod,MAAAxP,EAAA5N,KAAA0U,IAAA,GAAAJ,GAAA,QACA2I,IAAA5I,GAAA,GAAAC,EAAA,KAAA,GAAAC,KAAA,EAAA1N,EAAAgM,IAUAzD,GAAAzL,UAAAgR,MAAA,SAAA/G,GACA,MAAAlO,MAAAR,KAAAge,EAAA,EAAAtP,GAGA,IAAA0P,GAAA,mBAAAzI,cACA,WACA,GAAAC,GAAA,GAAAD,cAAA,GACAV,EAAA,GAAAhP,YAAA2P,EAAAxU,OAEA,OADAwU,GAAA,IAAA,EACAX,EAAA,GACA,SAAArH,EAAAjG,EAAAgM,GACAiC,EAAA,GAAAhI,EACAjG,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,GAAAsB,EAAA,IAGA,SAAArH,EAAAjG,EAAAgM,GACAiC,EAAA,GAAAhI,EACAjG,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,KAAAsB,EAAA,GACAtN,EAAAgM,GAAAsB,EAAA,OAIA,SAAAvG,EAAA/G,EAAAgM,GACA,GAAAwB,GAAAzG,EAAA,EAAA,EAAA,CAGA,IAFAyG,IACAzG,GAAAA,GACA,IAAAA,EACAqP,EAAA,EAAApW,EAAAgM,GACAoK,EAAA,EAAArP,EAAA,EAAA,EAAA,WAAA/G,EAAAgM,EAAA,OACA,IAAAsK,MAAAvP,GACAqP,EAAA,WAAApW,EAAAgM,GACAoK,EAAA,WAAApW,EAAAgM,EAAA,OACA,IAAAjF,EAAA,uBACAqP,EAAA,EAAApW,EAAAgM,GACAoK,GAAA5I,GAAA,GAAA,cAAA,EAAAxN,EAAAgM,EAAA,OACA,CACA,GAAA0B,EACA,IAAA3G,EAAA,wBACA2G,EAAA3G,EAAA,OACAqP,EAAA1I,IAAA,EAAA1N,EAAAgM,GACAoK,GAAA5I,GAAA,GAAAE,EAAA,cAAA,EAAA1N,EAAAgM,EAAA,OACA,CACA,GAAAyB,GAAAtU,KAAAoD,MAAApD,KAAA0C,IAAAkL,GAAA5N,KAAAqd,IACA,QAAA/I,IACAA,EAAA,MACAC,EAAA3G,EAAA5N,KAAA0U,IAAA,GAAAJ,GACA2I,EAAA,iBAAA1I,IAAA,EAAA1N,EAAAgM,GACAoK,GAAA5I,GAAA,GAAAC,EAAA,MAAA,GAAA,QAAAC,EAAA,WAAA,EAAA1N,EAAAgM,EAAA,KAWAzD,GAAAzL,UAAAoR,OAAA,SAAAnH,GACA,MAAAlO,MAAAR,KAAAoe,EAAA,EAAA1P,GAGA,IAAA2P,GAAAjf,EAAA6B,MAAAwD,UAAAkF,IACA,SAAAiE,EAAAjG,EAAAgM,GACAhM,EAAAgC,IAAAiE,EAAA+F,IAGA,SAAA/F,EAAAjG,EAAAgM,GACA,IAAA,GAAA9T,GAAA,EAAAA,EAAA+N,EAAA7N,SAAAF,EACA8H,EAAAgM,EAAA9T,GAAA+N,EAAA/N,GAQAqQ,GAAAzL,UAAAgH,MAAA,SAAAiD,GACA,GAAA7G,GAAA6G,EAAA3O,SAAA,CACA,KAAA8H,EACA,MAAArH,MAAAR,KAAA2d,EAAA,EAAA,EACA,IAAAve,EAAAoO,SAAAkB,GAAA,CACA,GAAA/G,GAAAuI,EAAA7I,MAAAQ,EAAApH,EAAAV,OAAA2O,GACAjO,GAAAmB,OAAA8M,EAAA/G,EAAA,GACA+G,EAAA/G,EAEA,MAAAnH,MAAAgU,OAAA3M,GAAA7H,KAAAqe,EAAAxW,EAAA6G,IAQAwB,EAAAzL,UAAA/D,OAAA,SAAAgO,GACA,GAAA7G,GAAAD,EAAA7H,OAAA2O,EACA,OAAA7G,GACArH,KAAAgU,OAAA3M,GAAA7H,KAAA4H,EAAAI,MAAAH,EAAA6G,GACAlO,KAAAR,KAAA2d,EAAA,EAAA,IAQAzN,EAAAzL,UAAAwV,KAAA,WAIA,MAHAzZ,MAAAkd,OAAA,GAAAH,GAAA/c,MACAA,KAAAgd,KAAAhd,KAAAid,KAAA,GAAAL,GAAAE,EAAA,EAAA,GACA9c,KAAAqH,IAAA,EACArH,MAOA0P,EAAAzL,UAAA6Z,MAAA,WAUA,MATA9d,MAAAkd,QACAld,KAAAgd,KAAAhd,KAAAkd,OAAAF,KACAhd,KAAAid,KAAAjd,KAAAkd,OAAAD,KACAjd,KAAAqH,IAAArH,KAAAkd,OAAA7V,IACArH,KAAAkd,OAAAld,KAAAkd,OAAAL,OAEA7c,KAAAgd,KAAAhd,KAAAid,KAAA,GAAAL,GAAAE,EAAA,EAAA,GACA9c,KAAAqH,IAAA,GAEArH,MAOA0P,EAAAzL,UAAAyV,OAAA,WACA,GAAAsD,GAAAhd,KAAAgd,KACAC,EAAAjd,KAAAid,KACA5V,EAAArH,KAAAqH,GAOA,OANArH,MAAA8d,QAAA9J,OAAA3M,GACAA,IACArH,KAAAid,KAAAJ,KAAAG,EAAAH,KACA7c,KAAAid,KAAAA,EACAjd,KAAAqH,KAAAA,GAEArH,MAOA0P,EAAAzL,UAAAyS,OAAA,WAIA,IAHA,GAAAsG,GAAAhd,KAAAgd,KAAAH,KACA1V,EAAAnH,KAAAiI,YAAApB,MAAA7G,KAAAqH,KACA8L,EAAA,EACA6J,GACAA,EAAA9d,GAAA8d,EAAA5P,IAAAjG,EAAAgM,GACAA,GAAA6J,EAAA3V,IACA2V,EAAAA,EAAAH,IAGA,OAAA1V,IAGAuI,EAAAJ,EAAA,SAAAyO,GACApO,EAAAoO,+BC/hBA,QAAApO,KACAD,EAAArR,KAAA2B,MAsCA,QAAAge,GAAA5Q,EAAAjG,EAAAgM,GACA/F,EAAA7N,OAAA,GACAX,EAAAwI,KAAAI,MAAA4F,EAAAjG,EAAAgM,GAEAhM,EAAAkU,UAAAjO,EAAA+F,GA3DArU,EAAAR,QAAAqR,CAGA,IAAAD,GAAA1Q,EAAA,KACA2Q,EAAA1L,UAAAf,OAAAoG,OAAAoG,EAAAzL,YAAAgE,YAAA0H,CAEA,IAAA/Q,GAAAI,EAAA,IAEA4U,EAAAhV,EAAAgV,MAiBAjE,GAAA9I,MAAA,SAAAE,GACA,OAAA4I,EAAA9I,MAAAjI,EAAA2c,GAAAxU,GAGA,IAAAkX,GAAArK,GAAAA,EAAA3P,oBAAAwB,aAAA,QAAAmO,EAAA3P,UAAAkF,IAAAhL,KACA,SAAAiP,EAAAjG,EAAAgM,GACAhM,EAAAgC,IAAAiE,EAAA+F,IAIA,SAAA/F,EAAAjG,EAAAgM,GACA,GAAA/F,EAAA8Q,KACA9Q,EAAA8Q,KAAA/W,EAAAgM,EAAA,EAAA/F,EAAA7N,YACA,KAAA,GAAAF,GAAA,EAAAA,EAAA+N,EAAA7N,QACA4H,EAAAgM,KAAA/F,EAAA/N,KAMAsQ,GAAA1L,UAAAgH,MAAA,SAAAiD,GACAtP,EAAAoO,SAAAkB,KACAA,EAAAtP,EAAA0c,EAAApN,EAAA,UACA,IAAA7G,GAAA6G,EAAA3O,SAAA,CAIA,OAHAS,MAAAgU,OAAA3M,GACAA,GACArH,KAAAR,KAAAye,EAAA5W,EAAA6G,GACAlO,MAaA2P,EAAA1L,UAAA/D,OAAA,SAAAgO,GACA,GAAA7G,GAAAuM,EAAAuK,WAAAjQ,EAIA,OAHAlO,MAAAgU,OAAA3M,GACAA,GACArH,KAAAR,KAAAwe,EAAA3W,EAAA6G,GACAlO","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.configure();\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(6);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(32);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction Class(type, ctor) {\r\n    if (!Type)\r\n        Type = require(30);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        ctor = Class.generate(type).eof(type.name); // named constructor function (codegen is required anyway)\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    (ctor.prototype = new Message()).constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    ctor.prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    var i = 0;\r\n    for (; i < /* initializes */ type.fieldsArray.length; ++i) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        ctor.prototype[type._fieldsArray[i].name] = Array.isArray(type._fieldsArray[i].resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(type._fieldsArray[i].defaultValue) && !type._fieldsArray[i].long\r\n              ? util.emptyObject\r\n              : type._fieldsArray[i].defaultValue; // if a long, it is frozen when initialized\r\n    }\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    var ctorProperties = {};\r\n    for (i = 0; i < /* initializes */ type.oneofsArray.length; ++i)\r\n        ctorProperties[type._oneofsArray[i].resolve().name] = {\r\n            get: util.oneOfGetter(type._oneofsArray[i].oneof),\r\n            set: util.oneOfSetter(type._oneofsArray[i].oneof)\r\n        };\r\n    if (i)\r\n        Object.defineProperties(ctor.prototype, ctorProperties);\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return ctor.prototype;\r\n}\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} type Type to use\r\n * @returns {Codegen} Codegen instance\r\n */\r\nClass.generate = function generate(type) { // eslint-disable-line no-unused-vars\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"p\");\r\n    // see issue #700\r\n    /*\r\n    for (var i = 0, field; i < type.fieldsArray.length; ++i)\r\n        if ((field = type._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    */\r\n    return gen\r\n    (\"if(p){\")\r\n        (\"for(var ks=Object.keys(p),i=0;i<ks.length;++i)\")\r\n            (\"this[ks[i]]=p[ks[i]];\")\r\n    (\"}\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @function\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = Class;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(14),\r\n    util = require(32);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        otherFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (fields[i].resolve().repeated)\r\n            repeatedFields.push(fields[i]);\r\n        else if (fields[i].map)\r\n            mapFields.push(fields[i]);\r\n        else\r\n            otherFields.push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0, field; i < otherFields.length; ++i) {\r\n            var field = otherFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    for (i = 0, field; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m%s!==undefined&&m%s!==null&&m.hasOwnProperty(%j)){\", prop, prop, field.name);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, i, prop);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(14),\r\n    types   = require(31),\r\n    util    = require(32);\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nencoder.compat = true;\r\n\r\nvar Enum     = require(14),\r\n    types    = require(31),\r\n    util     = require(32);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n * @ignore\r\n */\r\nfunction compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates encoders serializing in ascending field order\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray;\r\n    /* istanbul ignore else */\r\n    if (encoder.compat)\r\n        fields = fields.slice().sort(compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = encoder.compat ? mtype._fieldsArray.indexOf(field) : /* istanbul ignore next */ i;\r\n        if (field.partOf) // see below for oneofs\r\n            continue;\r\n        var type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length&&m.hasOwnProperty(%j)){\", ref, ref, field.name)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n                else if (field.bytes || field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j))\", ref, field.name);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < /* initializes */ mtype.oneofsArray.length; ++i) {\r\n        var oneof = mtype._oneofsArray[i]; gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        for (var j = 0; j < /* direct */ oneof.fieldsArray.length; ++j) {\r\n            var field    = oneof.fieldsArray[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name); gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, mtype._fieldsArray.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id\");\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(14),\r\n    types = require(31),\r\n    util  = require(32);\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n\r\n        /* istanbul ignore if */\r\n        if (!Type)\r\n            Type = require(30);\r\n\r\n        var scope = this.declaringField ? this.declaringField.parent : this.parent;\r\n        if (this.resolvedType = scope.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = scope.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type + \" in \" + scope);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary packed option (parser adds this) if not referencing an enum\r\n    if (this.options && this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n        delete this.options.packed;\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(13);\r\nprotobuf.decoder          = require(12);\r\nprotobuf.verifier         = require(35);\r\nprotobuf.converter        = require(11);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(22);\r\nprotobuf.Namespace        = require(21);\r\nprotobuf.Root             = require(26);\r\nprotobuf.Enum             = require(14);\r\nprotobuf.Type             = require(30);\r\nprotobuf.Field            = require(15);\r\nprotobuf.OneOf            = require(23);\r\nprotobuf.MapField         = require(18);\r\nprotobuf.Service          = require(29);\r\nprotobuf.Method           = require(20);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(10);\r\nprotobuf.Message          = require(19);\r\n\r\n// Utility\r\nprotobuf.types            = require(31);\r\nprotobuf.util             = require(32);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(36);\r\nprotobuf.BufferWriter = require(37);\r\nprotobuf.Reader       = require(24);\r\nprotobuf.BufferReader = require(25);\r\n\r\n// Utility\r\nprotobuf.util         = require(34);\r\nprotobuf.rpc          = require(27);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(15);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(14),\r\n    Field    = require(15),\r\n    util     = require(32);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterType || found instanceof filterType)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(32);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {?string}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(15);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n}\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[0] = buf[pos + 3];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[3] = buf[pos    ];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[0] = buf[pos + 7];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[7] = buf[pos    ];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(24);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(15),\r\n    Enum    = require(14),\r\n    util    = require(32);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {?string} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore next */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore next */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else /* istanbul ignore next */ if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(28);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(34);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n *\r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(32),\r\n    rpc    = require(27);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst(this._methodsArray[i].resolve().name)] = util.codegen(\"r\",\"c\")(\"return this.rpcCall(m,q,s,r,c)\").eof(util.lcFirst(this._methodsArray[i].name), {\r\n            m: this._methodsArray[i],\r\n            q: this._methodsArray[i].resolvedRequestType.ctor,\r\n            s: this._methodsArray[i].resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(14),\r\n    OneOf     = require(23),\r\n    Field     = require(15),\r\n    MapField  = require(18),\r\n    Service   = require(29),\r\n    Class     = require(10),\r\n    Message   = require(19),\r\n    Reader    = require(24),\r\n    Writer    = require(36),\r\n    util      = require(32),\r\n    encoder   = require(13),\r\n    decoder   = require(12),\r\n    verifier  = require(35),\r\n    converter = require(11);\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            /* istanbul ignore next */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        /* istanbul ignore next */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        /* istanbul ignore next */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (typeof this.reserved[i] !== \"string\" && this.reserved[i][0] <= id && this.reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (this.reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.from = Type.prototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(32);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(34);\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(7);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n *\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(6);\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(9);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(8);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(33);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Internal alias of or polyfull for Buffer.from.\r\n * @type {?function}\r\n * @param {string|number[]} value Value\r\n * @param {string} [encoding] Encoding if value is a string\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_from = null;\r\n\r\n/**\r\n * Internal alias of or polyfill for Buffer.allocUnsafe.\r\n * @type {?function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {function} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>=} properties Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message}\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations. Converts longs, enums and bytes to strings.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(14),\r\n    util      = require(32);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %d:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen(\"m\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(36);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(34);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"sourceRoot":"."}