{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/converter.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/index-light","src/index-minimal.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/minimal.js","src/verifier.js","src/writer.js","src/writer_buffer.js"],"names":["global","undefined","e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","Type","TypeError","util","Message","merge","$type","fieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","long","emptyObject","oneofsArray","oneof","defineProperty","get","oneOfGetter","set","oneOfSetter","genValuePartial_fromObject","fieldIndex","prop","resolvedType","Enum","values","repeated","typeDefault","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","fields","safeProp","toObject","repeatedFields","filter","mapFields","otherFields","valuesById","low","high","unsigned","toNumber","bytes","decoder","group","ref","id","keyType","types","basic","compat","packed","genTypePartial","encoder","oneofs","partOf","wireType","mapKey","required","oneofFields","indexOf","options","ReflectionObject","comments","self","EnumPrototype","className","testJSON","json","fromJSON","toJSON","add","comment","isString","isInteger","remove","val","Field","rule","toLowerCase","optional","message","Long","extensionField","declaringField","_packed","FieldPrototype","MapField","getOption","setOption","value","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","load","filename","root","protobuf","Root","loadSync","build","verifier","Namespace","OneOf","Service","Method","rpc","configure","Reader","_configure","roots","Writer","BufferWriter","BufferReader","define","amd","resolvedKeyType","MapFieldPrototype","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","nestedTypes","nestedError","arrayToJSON","array","obj","nested","_nestedArray","_clearProperties","clearCache","namespace","NamespacePrototype","methods","addJSON","toArray","nestedArray","nestedJson","ns","nestedName","getEnum","setOptions","onAdd","onRemove","ptr","part","resolveAll","filterType","parentAlreadyChecked","found","lookupType","lookupService","lookupEnum","ReflectionObjectPrototype","defineProperties","fullName","unshift","_handleAdd","_handleRemove","toString","fieldNames","_fieldsArray","addFieldsToParent","OneOfPrototype","index","fieldName","indexOutOfRange","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","skip","skipType","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","parse","common","resolvePath","finish","cb","sync","process","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","isNode","newDeferred","_parse","_common","rpcImpl","$rpc","endedByRPC","_methodsArray","service","ServicePrototype","methodName","inherited","methodsArray","requestDelimited","responseDelimited","rpcService","method","lcFirst","request","err4","requestData","responseData","response","err2","extensions","reserved","_fieldsById","_oneofsArray","_ctor","TypePrototype","oneOfName","fieldsById","names","setup","fld","fork","ldelim","bake","ucFirst","toUpperCase","LongBitsPrototype","zero","zzEncode","zeroHash","parseInt","fromString","fromHash","hash","toHash","mask","part0","part1","part2","versions","node","Number","isFinite","utf8Write","encoding","allocUnsafe","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","dst","fieldMap","lazyResolve","lazyTypes","longs","enums","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object.<string,*>} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted\r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(20),\r\n    util    = require(33);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a class instance, which is also a {@link Message} prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(31);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        // create named constructor functions (codegen is required anyway)\r\n        ctor = util.codegen(\"p\")(\"return ctor.call(this,p)\").eof(type.name, {\r\n            ctor: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.fieldsArray.forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.oneofsArray.forEach(function(oneof) {\r\n        Object.defineProperty(prototype, oneof.resolve().name, {\r\n            get: util.oneOfGetter(oneof.oneof),\r\n            set: util.oneOfSetter(oneof.oneof)\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(15),\r\n    util = require(33);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) {\r\n            var values = field.resolvedType.values; gen\r\n            (\"switch(d%s){\", prop);\r\n            Object.keys(values).forEach(function(key) {\r\n                if (field.repeated && values[key] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", key)\r\n                (\"case %j:\", values[key])\r\n                    (\"m%s=%j\", prop, values[key])\r\n                    (\"break\");\r\n            }); gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low,d%s.high).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s&&d%s.length)\", prop, prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low,m%s.high).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n    var repeatedFields = fields.filter(function(field) { return field.resolve().repeated; });\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        repeatedFields.forEach(function(field) { gen\r\n        (\"d%s=[]\", util.safeProp(field.name));\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    var mapFields = fields.filter(function(field) { return field.map; });\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        mapFields.forEach(function(field) { gen\r\n        (\"d%s={}\", util.safeProp(field.name));\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    var otherFields = fields.filter(function(field) { return !(field.repeated || field.map); });\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        otherFields.forEach(function(field) {\r\n            var prop = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m%s!==undefined&&m%s!==null&&m.hasOwnProperty(%j)){\", prop, prop, field.name);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, i, prop);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(32),\r\n    util     = require(33);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var oneofs = mtype.oneofsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve();\r\n        if (field.partOf) // see below for oneofs\r\n            continue;\r\n        var type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length&&m.hasOwnProperty(%j)){\", ref, ref, field.name)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n                else if (field.bytes) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j))\", ref, field.name);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i]; gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        var oneofFields = oneof.fieldsArray;\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name); gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n    \r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(23);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    var self = this;\r\n    Object.keys(values || {}).forEach(function(key) {\r\n        self.valuesById[self.values[key] = values[key]] = key;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id, comment) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    var val = this.values[name];\r\n    /* istanbul ignore next */\r\n    if (val === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(23);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(15),\r\n    types     = require(32),\r\n    util      = require(33);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(FieldPrototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(19);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) {\r\n        // if not a basic type, resolve it\r\n        if (!Type)\r\n            Type = require(31);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else /* istanbul ignore else */ if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // account for maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(18);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(14);\r\nprotobuf.decoder          = require(13);\r\nprotobuf.verifier         = require(36);\r\nprotobuf.converter        = require(12);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(23);\r\nprotobuf.Namespace        = require(22);\r\nprotobuf.Root             = require(27);\r\nprotobuf.Enum             = require(15);\r\nprotobuf.Type             = require(31);\r\nprotobuf.Field            = require(16);\r\nprotobuf.OneOf            = require(24);\r\nprotobuf.MapField         = require(19);\r\nprotobuf.Service          = require(30);\r\nprotobuf.Method           = require(21);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(11);\r\nprotobuf.Message          = require(20);\r\n\r\n// Utility\r\nprotobuf.types            = require(32);\r\nprotobuf.rpc              = require(28);\r\nprotobuf.util             = require(33);\r\n","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(37);\r\nprotobuf.BufferWriter = require(38);\r\nprotobuf.Reader       = require(25);\r\nprotobuf.BufferReader = require(26);\r\n\r\n// Utility\r\nprotobuf.util         = require(35);\r\nprotobuf.configure    = configure;\r\n\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n// assumes that loading \"long\" / define itself is asynchronous so that other builds can safely\r\n// continue populating `protobuf`. will see a BOOM eventually if this assumption is wrong:\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(16);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(23);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(31),\r\n    util = require(33);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(23);\r\n/** @alias NamespaceBase.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(15),\r\n    Field   = require(16),\r\n    util    = require(33);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(31);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(30);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @memberof Namespace\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(NamespacePrototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            /* istanbul ignore next */\r\n            throw TypeError(\"nested.\" + nestedName + \" must be JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (!nestedTypes)\r\n        initNested();\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object must be \" + nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object must be an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            /* istanbul ignore else */\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path)) {\r\n        path = path.split(\".\");\r\n    /* istanbul ignore next */\r\n    } else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            /* istanbul ignore next */\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(31);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(30);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.nestedArray;\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else /* istanbul ignore else */ if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterType || found instanceof filterType)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(31);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(30);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(33);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(27);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Root)\r\n        Root = require(27);\r\n\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Root)\r\n        Root = require(27);\r\n\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(23);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(16);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(OneOfPrototype, \"fieldsArray\", {\r\n    get: function() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(35);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        /* istanbul ignore next */\r\n        if (!BufferReader)\r\n            BufferReader = require(26);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(25);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(22);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(16),\r\n    util   = require(33);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore next */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore next */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued)\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            /* istanbul ignore else */\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n\r\nRoot._configure = function(_parse, _common) {\r\n    parse = _parse;\r\n    common = _common;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(29);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar EventEmitter = require(33).EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n(Service.prototype = Object.create(EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(22);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(21),\r\n    util   = require(33),\r\n    rpc    = require(28);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(ServicePrototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.methodsArray.forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) {\r\n                var err4 = Error(\"already ended\");\r\n                if (callback)\r\n                    return callback(err4);\r\n                throw err4;\r\n            }\r\n            if (!request)\r\n                throw TypeError(\"request must not be null\");\r\n            method.resolve();\r\n            var requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish(); // never throws if request is true-ish\r\n\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            return rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    /* istanbul ignore else */\r\n                    if (callback)\r\n                        return callback(err);\r\n                    /* istanbul ignore next */\r\n                    throw err;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    /* istanbul ignore else */\r\n                    if (callback)\r\n                        return callback(\"error\", err2);\r\n                    /* istanbul ignore next */\r\n                    throw err2;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                /* istanbul ignore else */\r\n                if (callback)\r\n                    return callback(null, response);\r\n                /* istanbul ignore next */\r\n                return undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(22);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(24),\r\n    Field     = require(16),\r\n    Service   = require(30),\r\n    Class     = require(11),\r\n    Message   = require(20),\r\n    Reader    = require(25),\r\n    Writer    = require(37),\r\n    util      = require(33),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(36),\r\n    converter = require(12);\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    Object.keys(json.fields).forEach(function(fieldName) {\r\n        type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n    });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            /* istanbul ignore next */\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            /* istanbul ignore next */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        /* istanbul ignore next */\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        /* istanbul ignore next */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        /* istanbul ignore next */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = this.fieldsArray.map(function(fld) { return fld.resolve().resolvedType; });\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nTypePrototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nTypePrototype.from = TypePrototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nTypePrototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(33);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(35);\r\n\r\nutil.asPromise    = require(1);\r\nutil.codegen      = require(3);\r\nutil.EventEmitter = require(4);\r\nutil.extend       = require(5);\r\nutil.fetch        = require(6);\r\nutil.path         = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    return object ? Object.keys(object).map(function(key) {\r\n        return object[key];\r\n    }) : [];\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\nutil.base64   = require(2);\r\nutil.inquire  = require(7);\r\nutil.utf8     = require(10);\r\nutil.pool     = require(9);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {};\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util.Buffer.allocUnsafe(sizeOrArray) // polyfilled\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util.Buffer.from(sizeOrArray) // polyfilled\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\nutil.LongBits = require(34);\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    fieldNames.forEach(function(name) {\r\n        fieldMap[name] = 1;\r\n    });\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    lazyTypes.forEach(function(types) {\r\n        Object.keys(types).forEach(function(index) {\r\n            var path = types[index |= 0].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            types[index] = ptr;\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(33);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9][0-9]*)$/.test(%s))\", ref) // it's important not to use any literals here that might be confused with short variable names by pbjs' beautify\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(35);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        /* istanbul ignore next */\r\n        if (!BufferWriter)\r\n            BufferWriter = require(38);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (typeof value === \"string\") {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(37);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(35);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n"],"sourceRoot":"."}