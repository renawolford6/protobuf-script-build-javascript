{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light","../src/index-minimal.js","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","isLong","util","configure","module","1","require","asPromise","fn","ctx","params","i","arguments","length","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","n","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","t","j","b","String","fromCharCode","decode","offset","c","charCodeAt","Error","test","codegen","functionParams","functionName","Codegen","formatStringOrScope","source","toString","verbose","console","log","scopeKeys","Object","keys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","replace","$0","$1","value","floor","JSON","stringify","body","functionNameOverride","join","EventEmitter","_listeners","prototype","on","evt","off","listeners","splice","emit","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","factory","Float32Array","writeFloat_f32_cpy","val","buf","pos","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","le","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","mantissa","pow","readFloat_ieee754","readUint","uint","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDouble_f64_cpy","f64","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","moduleName","mod","eval","e","path","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","utf8","len","read","chunk","write","c1","c2","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","Enum","values","repeated","typeDefault","fullName","isUnsigned","type","genValuePartial_toObject","converter","fromObject","mtype","fields","fieldsArray","safeProp","map","toObject","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","hasKs2","index","_fieldsArray","indexOf","missing","decoder","filter","group","ref","id","keyType","types","long","basic","packed","rfield","required","genTypePartial","encoder","wireType","mapKey","optional","ReflectionObject","TypeError","valuesById","create","comments","constructor","className","fromJSON","json","toJSON","add","comment","isString","isInteger","allow_alias","remove","Field","rule","extend","isObject","ruleRe","toLowerCase","message","defaultValue","bytes","extensionField","declaringField","_packed","Type","defineProperty","get","getOption","setOption","ifNotSet","resolved","defaults","parent","lookupTypeOrEnum","fromNumber","freeze","newBuffer","emptyObject","emptyArray","ctor","d","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","load","root","Root","loadSync","build","verifier","Namespace","OneOf","MapField","Service","Method","Message","wrappers","Reader","BufferReader","Writer","BufferWriter","rpc","roots","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","writer","encodeDelimited","reader","decodeDelimited","verify","object","toJSONOptions","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","nested","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","prev","setOptions","onAdd","onRemove","isArray","ptr","part","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Service_","defineProperties","unshift","_handleAdd","_handleRemove","Root_","fieldNames","oneof","addFieldsToParent","self","oneofName","oneOfGetter","set","oneOfSetter","indexOutOfRange","writeLength","RangeError","readLongVarint","bits","LongBits","readFixed32_end","readFixed64","create_array","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","double","skip","skipType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","parse","common","resolvePath","finish","cb","sync","process","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","lcFirst","m","q","s","oneofs","extensions","reserved","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","ctorProperties","isReservedId","isReservedName","setup","wrapper","originalThis","fork","ldelim","typeName","target","bake","o","key","ucFirst","str","toUpperCase","camelCase","a","decorateRoot","enumerable","decorateEnumIndex","enm","zero","toNumber","zzEncode","zeroHash","from","parseInt","fromString","low","high","unsigned","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","newError","CustomError","captureStackTrace","stack","versions","node","Number","isFinite","isset","isSet","hasOwnProperty","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","longs","enums","encoding","allocUnsafe","invalid","expected","genVerifyValue","genVerifyKey","seenFirstField","oneofProp","type_url","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            if (Long && Long.isLong) {\r\n                protobuf.util.Long = Long;\r\n                protobuf.configure();\r\n            }\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams)\r\n                               .apply(null, scopeValues);\r\n            }\r\n            return Function(source)();\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    };\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(14),\r\n    util = require(33);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        normalFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (!fields[i].partOf)\r\n            ( fields[i].resolve().repeated ? repeatedFields\r\n            : fields[i].map ? mapFields\r\n            : normalFields).push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (normalFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0; i < normalFields.length; ++i) {\r\n            var field = normalFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    var hasKs2 = false;\r\n    for (i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            index = mtype._fieldsArray.indexOf(field),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.map) {\r\n            if (!hasKs2) { hasKs2 = true; gen\r\n    (\"var ks2\");\r\n            } gen\r\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\r\n        (\"d%s={}\", prop)\r\n        (\"for(var j=0;j<ks2.length;++j){\");\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\r\n        (\"}\");\r\n        } else { gen\r\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\r\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        }\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(14),\r\n    types   = require(32),\r\n    util    = require(33);\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %i:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%i].decode(r))\"\r\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%i].decode(r)\"\r\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(14),\r\n    types    = require(32),\r\n    util     = require(33);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = mtype._fieldsArray.indexOf(field),\r\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name) // !== undefined && !== null\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n            // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            } gen\r\n    (\"}\");\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (field.optional) gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\r\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @returns {IEnum} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"values\"  , this.values\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {string} [comment] Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id\");\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(14),\r\n    types = require(32),\r\n    util  = require(33);\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {Type|null}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {OneOf|null}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {Type|Enum|null}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {Field|null}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {Field|null}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {boolean|null}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @returns {IField} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options\r\n    ]);\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary options\r\n    if (this.options) {\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\r\n    };\r\n};\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\nField._configure = function configure(Type_) {\r\n    Type = Type_;\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(13);\r\nprotobuf.decoder          = require(12);\r\nprotobuf.verifier         = require(36);\r\nprotobuf.converter        = require(11);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(22);\r\nprotobuf.Namespace        = require(21);\r\nprotobuf.Root             = require(26);\r\nprotobuf.Enum             = require(14);\r\nprotobuf.Type             = require(31);\r\nprotobuf.Field            = require(15);\r\nprotobuf.OneOf            = require(23);\r\nprotobuf.MapField         = require(18);\r\nprotobuf.Service          = require(30);\r\nprotobuf.Method           = require(20);\r\n\r\n// Runtime\r\nprotobuf.Message          = require(19);\r\nprotobuf.wrappers         = require(37);\r\n\r\n// Utility\r\nprotobuf.types            = require(32);\r\nprotobuf.util             = require(33);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\nprotobuf.Field._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(38);\r\nprotobuf.BufferWriter = require(39);\r\nprotobuf.Reader       = require(24);\r\nprotobuf.BufferReader = require(25);\r\n\r\n// Utility\r\nprotobuf.util         = require(35);\r\nprotobuf.rpc          = require(28);\r\nprotobuf.roots        = require(27);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(15);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(32),\r\n    util    = require(33);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {ReflectionObject|null}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @returns {IMapField} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"keyType\" , this.keyType,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\r\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\r\n\r\n    // submessage value: decorate the submessage and use its name as the type\r\n    if (typeof fieldValueType === \"function\")\r\n        fieldValueType = util.decorateType(fieldValueType).name;\r\n\r\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldValueType && typeof fieldValueType === \"object\")\r\n        fieldValueType = util.decorateEnum(fieldValueType).name;\r\n\r\n    return function mapFieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Properties<T>} [properties] Properties to set\r\n * @template T extends object\r\n */\r\nfunction Message(properties) {\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/*eslint-disable valid-jsdoc*/\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<T>} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.create = function create(properties) {\r\n    return this.$type.create(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {T} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {T} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n\r\n/*eslint-enable valid-jsdoc*/","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(33);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {IMethod} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @returns {IMethod} Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        \"requestType\"    , this.requestType,\r\n        \"requestStream\"  , this.requestStream,\r\n        \"responseType\"   , this.responseType,\r\n        \"responseStream\" , this.responseStream,\r\n        \"options\"        , this.options\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(14),\r\n    Field    = require(15),\r\n    util     = require(33);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {ReflectionObject[]|null}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @interface INamespace\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionField\r\n * @type {IExtensionField|IExtensionMapField}\r\n */\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedObject\r\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\r\n */\r\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @returns {INamespace} Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"nested\"  , arrayToJSON(this.nestedArray)\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterTypes === \"boolean\") {\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    } else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n\r\n    // Otherwise try each nested namespace\r\n    } else\r\n        for (var i = 0; i < this.nestedArray.length; ++i)\r\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\r\n                return found;\r\n\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(33);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {Namespace|null}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {string|null}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(15),\r\n    util  = require(33);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n}\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {IOneOf} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @returns {IOneOf} Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"oneof\"   , this.oneof\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} oneofName OneOf name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param {...string} fieldNames Field names\r\n * @returns {OneOfDecorator} Decorator function\r\n * @template T extends string\r\n */\r\nOneOf.d = function decorateOneOf() {\r\n    var fieldNames = [];\r\n    for (var i = 0; i < arguments.length; ++i)\r\n        fieldNames.push(arguments[i]);\r\n    return function oneOfDecorator(prototype, oneofName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new OneOf(oneofName, fieldNames));\r\n        Object.defineProperty(prototype, oneofName, {\r\n            get: util.oneOfGetter(fieldNames),\r\n            set: util.oneOfSetter(fieldNames)\r\n        });\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(35);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(24);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(15),\r\n    Enum    = require(14),\r\n    OneOf   = require(23),\r\n    util    = require(33);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(29);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(35);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(33),\r\n    rpc    = require(28);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {Method[]|null}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property {Object.<string,IMethod>} methods Method descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {IService} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    return service;\r\n};\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @returns {IService} Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return util.toObject([\r\n        \"options\" , inherited && inherited.options || undefined,\r\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        \"nested\"  , inherited && inherited.nested || undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst((method = this._methodsArray[i]).resolve().name)] = util.codegen([\"r\",\"c\"], util.lcFirst(method.name))(\"return this.rpcCall(m,q,s,r,c)\")({\r\n            m: method,\r\n            q: method.resolvedRequestType.ctor,\r\n            s: method.resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(14),\r\n    OneOf     = require(23),\r\n    Field     = require(15),\r\n    MapField  = require(18),\r\n    Service   = require(30),\r\n    Message   = require(19),\r\n    Reader    = require(24),\r\n    Writer    = require(38),\r\n    util      = require(33),\r\n    encoder   = require(13),\r\n    decoder   = require(12),\r\n    verifier  = require(36),\r\n    converter = require(11),\r\n    wrappers  = require(37);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {Object.<number,Field>|null}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {Field[]|null}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {OneOf[]|null}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {Constructor<{}>}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type {Constructor<{}>}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\r\n        },\r\n        set: function(ctor) {\r\n\r\n            // Ensure proper prototype\r\n            var prototype = ctor.prototype;\r\n            if (!(prototype instanceof Message)) {\r\n                (ctor.prototype = new Message()).constructor = ctor;\r\n                util.merge(ctor.prototype, prototype);\r\n            }\r\n\r\n            // Classes and messages reference their reflected type\r\n            ctor.$type = ctor.prototype.$type = this;\r\n\r\n            // Mix in static methods\r\n            util.merge(ctor, Message, true);\r\n\r\n            this._ctor = ctor;\r\n\r\n            // Messages have non-enumerable default values on their prototype\r\n            var i = 0;\r\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\r\n                this._fieldsArray[i].resolve(); // ensures a proper value\r\n\r\n            // Messages have non-enumerable getters and setters for each virtual oneof field\r\n            var ctorProperties = {};\r\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\r\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\r\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\r\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\r\n                };\r\n            if (i)\r\n                Object.defineProperties(ctor.prototype, ctorProperties);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nType.generateConstructor = function generateConstructor(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"p\"], mtype.name);\r\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\r\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\r\n        if ((field = mtype._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    return gen\r\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\r\n        (\"this[ks[i]]=p[ks[i]]\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Message type descriptor.\r\n * @interface IType\r\n * @extends INamespace\r\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,IField>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {number[][]} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {IType} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @returns {IType} Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return util.toObject([\r\n        \"options\"    , inherited && inherited.options || undefined,\r\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray),\r\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"group\"      , this.group || undefined,\r\n        \"nested\"     , inherited && inherited.nested || undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (typeof this.reserved[i] !== \"string\" && this.reserved[i][0] <= id && this.reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    if (this.reserved)\r\n        for (var i = 0; i < this.reserved.length; ++i)\r\n            if (this.reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n\r\n    // Replace setup methods with type-specific generated functions\r\n    this.encode = encoder(this)({\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this)({\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = converter.fromObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n\r\n    // Inject custom wrappers for common types\r\n    var wrapper = wrappers[fullName];\r\n    if (wrapper) {\r\n        var originalThis = Object.create(this);\r\n        // if (wrapper.fromObject) {\r\n            originalThis.fromObject = this.fromObject;\r\n            this.fromObject = wrapper.fromObject.bind(originalThis);\r\n        // }\r\n        // if (wrapper.toObject) {\r\n            originalThis.toObject = this.toObject;\r\n            this.toObject = wrapper.toObject.bind(originalThis);\r\n        // }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError<{}>} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @interface IConversionOptions\r\n * @property {Function} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {Function} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {Function} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Type.d} (TypeScript).\r\n * @typedef TypeDecorator\r\n * @type {function}\r\n * @param {Constructor<T>} target Target constructor\r\n * @returns {undefined}\r\n * @template T extends Message<T>\r\n */\r\n\r\n/**\r\n * Type decorator (TypeScript).\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {TypeDecorator<T>} Decorator function\r\n * @template T extends Message<T>\r\n */\r\nType.d = function decorateType(typeName) {\r\n    return function typeDecorator(target) {\r\n        util.decorateType(target, typeName);\r\n    };\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(33);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {null} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(35);\r\n\r\nvar roots = require(27);\r\n\r\nvar Type, // cyclic\r\n    Enum;\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\n/**\r\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\r\n * @param {Array.<*>} array Array to convert\r\n * @returns {Object.<string,*>} Converted object\r\n */\r\nutil.toObject = function toObject(array) {\r\n    var object = {};\r\n    for (var i = 0; i < array.length; i += 2) {\r\n        var key = array[i    ],\r\n            val = array[i + 1];\r\n        if (val !== undefined)\r\n            object[key] = val;\r\n    }\r\n    return object;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\nvar camelCaseRe = /_([a-z])/g;\r\n\r\n/**\r\n * Converts a string to camel case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0, 1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n\r\n/**\r\n * Decorator helper for types (TypeScript).\r\n * @param {Constructor<T>} ctor Constructor function\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {Type} Reflected type\r\n * @template T extends Message<T>\r\n * @property {Root} root Decorators root\r\n */\r\nutil.decorateType = function decorateType(ctor, typeName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (ctor.$type) {\r\n        if (typeName && ctor.$type.name !== typeName) {\r\n            util.decorateRoot.remove(ctor.$type);\r\n            ctor.$type.name = typeName;\r\n            util.decorateRoot.add(ctor.$type);\r\n        }\r\n        return ctor.$type;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(31);\r\n\r\n    var type = new Type(typeName || ctor.name);\r\n    util.decorateRoot.add(type);\r\n    type.ctor = ctor; // sets up .encode, .decode etc.\r\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\r\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\r\n    return type;\r\n};\r\n\r\nvar decorateEnumIndex = 0;\r\n\r\n/**\r\n * Decorator helper for enums (TypeScript).\r\n * @param {Object} object Enum object\r\n * @returns {Enum} Reflected enum\r\n */\r\nutil.decorateEnum = function decorateEnum(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (object.$type)\r\n        return object.$type;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Enum)\r\n        Enum = require(14);\r\n\r\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\r\n    util.decorateRoot.add(enm);\r\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Decorator root (TypeScript).\r\n * @name util.decorateRoot\r\n * @type {Root}\r\n * @readonly\r\n */\r\nObject.defineProperty(util, \"decorateRoot\", {\r\n    get: function() {\r\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(26))());\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(35);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// float handling accross browsers\r\nutil.float = require(6);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(7);\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(10);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(9);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(34);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(14),\r\n    util      = require(33);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = {};\r\n    if (oneofs.length) gen\r\n    (\"var p={}\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        if (field.optional) gen\r\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(!util.isObject(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"object\"))\r\n            (\"var k=Object.keys(%s)\", ref)\r\n            (\"for(var i=0;i<k.length;++i){\");\r\n                genVerifyKey(gen, field, \"k[i]\");\r\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(!Array.isArray(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"array\"))\r\n            (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                genVerifyValue(gen, field, i, ref + \"[i]\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (field.partOf) {\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            }\r\n            genVerifyValue(gen, field, i, ref);\r\n        }\r\n        if (field.optional) gen\r\n        (\"}\");\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\n\r\n/**\r\n * Wrappers for common types.\r\n * @type {Object.<string,IWrapper>}\r\n * @const\r\n */\r\nvar wrappers = exports;\r\n\r\nvar Message = require(19);\r\n\r\n/**\r\n * From object converter part of an {@link IWrapper}.\r\n * @typedef WrapperFromObjectConverter\r\n * @type {function}\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message<{}>} Message instance\r\n * @this Type\r\n */\r\n\r\n/**\r\n * To object converter part of an {@link IWrapper}.\r\n * @typedef WrapperToObjectConverter\r\n * @type {function}\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @this Type\r\n */\r\n\r\n/**\r\n * Common type wrapper part of {@link wrappers}.\r\n * @interface IWrapper\r\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\r\n * @property {WrapperToObjectConverter} [toObject] To object converter\r\n */\r\n\r\n// Custom wrapper for Any\r\nwrappers[\".google.protobuf.Any\"] = {\r\n\r\n    fromObject: function(object) {\r\n\r\n        // unwrap value type if mapped\r\n        if (object && object[\"@type\"]) {\r\n            var type = this.lookup(object[\"@type\"]);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                return this.create({\r\n                    type_url: object[\"@type\"],\r\n                    value: type.encode(object).finish()\r\n                });\r\n        }\r\n\r\n        return this.fromObject(object);\r\n    },\r\n\r\n    toObject: function(message, options) {\r\n\r\n        // decode value if requested and unmapped\r\n        if (options && options.json && message.type_url && message.value) {\r\n            var type = this.lookup(message.type_url);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                message = type.decode(message.value);\r\n        }\r\n\r\n        // wrap value if unmapped\r\n        if (!(message instanceof this.ctor) && message instanceof Message) {\r\n            var object = message.$type.toObject(message, options);\r\n            object[\"@type\"] = message.$type.fullName;\r\n            return object;\r\n        }\r\n\r\n        return this.toObject(message, options);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(35);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(38);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(35);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"sourceRoot":"."}