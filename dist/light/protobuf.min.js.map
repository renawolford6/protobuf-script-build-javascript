{"version":3,"sources":["node_modules/browser-pack/_prelude.js","light","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/extend/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/converter.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/minimal.js","src/verifier.js","src/writer.js","src/writer_buffer.js"],"names":["global","undefined","e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","load","filename","root","callback","protobuf","Root","loadSync","configure","Reader","_configure","build","roots","Writer","BufferWriter","BufferReader","encoder","decoder","verifier","converter","ReflectionObject","Namespace","Enum","Type","Field","OneOf","MapField","Service","Method","Class","Message","types","rpc","util","define","amd","Long","asPromise","fn","ctx","params","arguments","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","name","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","EventEmitter","_listeners","EventEmitterPrototype","prototype","on","evt","off","listeners","splice","emit","extend","ctor","create","constructor","fetch","path","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","type","TypeError","merge","$type","fieldsArray","forEach","field","isArray","defaultValue","emptyArray","isObject","long","emptyObject","oneofsArray","oneof","defineProperty","get","oneOfGetter","set","oneOfSetter","genValuePartial_fromObject","fieldIndex","prop","resolvedType","values","repeated","typeDefault","isUnsigned","genValuePartial_toObject","fromObject","mtype","fields","safeProp","toObject","repeatedFields","filter","mapFields","otherFields","valuesById","low","high","unsigned","toNumber","bytes","group","ref","id","keyType","basic","compat","packed","genTypePartial","oneofs","partOf","wireType","mapKey","required","oneofFields","indexOf","options","comments","self","EnumPrototype","className","testJSON","json","fromJSON","toJSON","add","comment","isString","isInteger","remove","val","rule","toLowerCase","optional","message","extensionField","declaringField","_packed","FieldPrototype","getOption","setOption","value","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","resolvedKeyType","MapFieldPrototype","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","MethodPrototype","initNested","nestedTypes","nestedError","arrayToJSON","array","obj","nested","_nestedArray","_clearProperties","clearCache","namespace","NamespacePrototype","methods","addJSON","toArray","nestedArray","nestedJson","ns","nestedName","getEnum","setOptions","onAdd","onRemove","ptr","part","resolveAll","filterType","parentAlreadyChecked","found","lookupType","lookupService","lookupEnum","ReflectionObjectPrototype","defineProperties","fullName","unshift","_handleAdd","_handleRemove","toString","fieldNames","_fieldsArray","addFieldsToParent","OneOfPrototype","index","fieldName","indexOutOfRange","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","skip","skipType","BufferReaderPrototype","utf8Slice","min","deferred","files","SYNC","handleExtension","extendedType","sisterField","RootPrototype","parse","common","resolvePath","finish","cb","sync","process","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","isNode","newDeferred","_parse","_common","rpcImpl","$rpc","endedByRPC","_methodsArray","service","ServicePrototype","methodName","inherited","methodsArray","requestDelimited","responseDelimited","rpcService","method","lcFirst","request","err4","requestData","responseData","response","err2","extensions","reserved","_fieldsById","_oneofsArray","_ctor","TypePrototype","oneOfName","fieldsById","names","setup","fld","fork","ldelim","bake","ucFirst","toUpperCase","LongBitsPrototype","zero","zzEncode","zeroHash","parseInt","fromString","fromHash","hash","toHash","mask","part0","part1","part2","versions","node","Number","isFinite","utf8Write","encoding","allocUnsafe","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","dst","fieldMap","lazyResolve","lazyTypes","longs","enums","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","WriterPrototype","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\nprotobuf.build = \"light\";\r\n\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\nprotobuf.load = load;\r\n\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer           = require(36);\r\nprotobuf.BufferWriter     = require(37);\r\nprotobuf.Reader           = require(24);\r\nprotobuf.BufferReader     = require(25);\r\nprotobuf.encoder          = require(15);\r\nprotobuf.decoder          = require(14);\r\nprotobuf.verifier         = require(35);\r\nprotobuf.converter        = require(13);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(22);\r\nprotobuf.Namespace        = require(21);\r\nprotobuf.Root             = require(26);\r\nprotobuf.Enum             = require(16);\r\nprotobuf.Type             = require(30);\r\nprotobuf.Field            = require(17);\r\nprotobuf.OneOf            = require(23);\r\nprotobuf.MapField         = require(18);\r\nprotobuf.Service          = require(29);\r\nprotobuf.Method           = require(20);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(12);\r\nprotobuf.Message          = require(19);\r\n\r\n// Utility\r\nprotobuf.types            = require(31);\r\nprotobuf.rpc              = require(27);\r\nprotobuf.util             = require(32);\r\nprotobuf.configure        = configure;\r\n\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/** @alias util.EventEmitter.prototype */\r\nvar EventEmitterPrototype = EventEmitter.prototype;\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitterPrototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = extend;\r\n\r\n/**\r\n * Lets the specified constructor extend `this` class.\r\n * @memberof util\r\n * @param {*} ctor Extending constructor\r\n * @returns {Object.<string,*>} Constructor prototype\r\n * @this Function\r\n */\r\nfunction extend(ctor) {\r\n    // copy static members\r\n    var keys = Object.keys(this);\r\n    for (var i = 0; i < keys.length; ++i)\r\n        ctor[keys[i]] = this[keys[i]];\r\n    // properly extend\r\n    var prototype = ctor.prototype = Object.create(this.prototype);\r\n    prototype.constructor = ctor;\r\n    return prototype;\r\n}\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(2),\r\n    inquire   = require(8);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted\r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(32);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a class instance, which is also a {@link Message} prototype.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected type\r\n */\r\nfunction Class(type) {\r\n    return create(type);\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @memberof Class\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction create(type, ctor) {\r\n    if (!Type)\r\n        Type = require(30);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        // create named constructor functions (codegen is required anyway)\r\n        ctor = util.codegen(\"p\")(\"return ctor.call(this,p)\").eof(type.name, {\r\n            ctor: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    var prototype = ctor.prototype = new Message();\r\n    prototype.constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    type.fieldsArray.forEach(function(field) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        prototype[field.name] = Array.isArray(field.resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(field.defaultValue) && !field.long\r\n              ? util.emptyObject\r\n              : field.defaultValue;\r\n    });\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    type.oneofsArray.forEach(function(oneof) {\r\n        Object.defineProperty(prototype, oneof.resolve().name, {\r\n            get: util.oneOfGetter(oneof.oneof),\r\n            set: util.oneOfSetter(oneof.oneof)\r\n        });\r\n    });\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return prototype;\r\n}\r\n\r\nClass.create = create;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(16),\r\n    util = require(32);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) {\r\n            var values = field.resolvedType.values; gen\r\n            (\"switch(d%s){\", prop);\r\n            Object.keys(values).forEach(function(key) {\r\n                if (field.repeated && values[key] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", key)\r\n                (\"case %j:\", values[key])\r\n                    (\"m%s=%j\", prop, values[key])\r\n                    (\"break\");\r\n            }); gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low,d%s.high).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s&&d%s.length)\", prop, prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low,m%s.high).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n    var repeatedFields = fields.filter(function(field) { return field.resolve().repeated; });\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        repeatedFields.forEach(function(field) { gen\r\n        (\"d%s=[]\", util.safeProp(field.name));\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    var mapFields = fields.filter(function(field) { return field.map; });\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        mapFields.forEach(function(field) { gen\r\n        (\"d%s={}\", util.safeProp(field.name));\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    var otherFields = fields.filter(function(field) { return !(field.repeated || field.map); });\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        otherFields.forEach(function(field) {\r\n            var prop = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        }); gen\r\n    (\"}\");\r\n    }\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m%s!==undefined&&m%s!==null&&m.hasOwnProperty(%j)){\", prop, prop, field.name);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, i, prop);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(16),\r\n    types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(16),\r\n    types    = require(31),\r\n    util     = require(32);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var oneofs = mtype.oneofsArray;\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve();\r\n        if (field.partOf) // see below for oneofs\r\n            continue;\r\n        var type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length&&m.hasOwnProperty(%j)){\", ref, ref, field.name)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n                else if (field.bytes) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j))\", ref, field.name);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < oneofs.length; ++i) {\r\n        var oneof = oneofs[i]; gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        var oneofFields = oneof.fieldsArray;\r\n        for (var j = 0; j < oneofFields.length; ++j) {\r\n            var field    = oneofFields[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name); gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, fields.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n    \r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias Enum.prototype */\r\nvar EnumPrototype = ReflectionObject.extend(Enum);\r\n\r\nEnum.className = \"Enum\";\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    var self = this;\r\n    Object.keys(values || {}).forEach(function(key) {\r\n        self.valuesById[self.values[key] = values[key]] = key;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes an enum.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes an enum\r\n */\r\nEnum.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.values);\r\n};\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnumPrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnumPrototype.add = function(name, id, comment) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n    /* istanbul ignore next */\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n    /* istanbul ignore next */\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnumPrototype.remove = function(name) {\r\n    /* istanbul ignore next */\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    var val = this.values[name];\r\n    /* istanbul ignore next */\r\n    if (val === undefined)\r\n        throw Error(\"'\" + name + \"' is not a name of \" + this);\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = ReflectionObject.extend(Field);\r\n\r\nField.className = \"Field\";\r\n\r\nvar Enum      = require(16),\r\n    types     = require(31),\r\n    util      = require(32);\r\n\r\nvar Type,     // cyclic\r\n    MapField; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n    /* istanbul ignore next */\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(FieldPrototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\")\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Tests if the specified JSON object describes a field.\r\n * @param {*} json Any JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nField.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.id !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    if (json.keyType !== undefined) {\r\n        if (!MapField)\r\n            MapField = require(18);\r\n        return MapField.fromJSON(name, json);\r\n    }\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) {\r\n        // if not a basic type, resolve it\r\n        if (!Type)\r\n            Type = require(30);\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else /* istanbul ignore else */ if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // account for maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = {};\r\n    else if (this.repeated)\r\n        this.defaultValue = [];\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(17);\r\n/** @alias Field.prototype */\r\nvar FieldPrototype = Field.prototype;\r\n/** @alias MapField.prototype */\r\nvar MapFieldPrototype = Field.extend(MapField);\r\n\r\nMapField.className = \"MapField\";\r\n\r\nvar types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a map field.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a field\r\n */\r\nMapField.testJSON = function testJSON(json) {\r\n    return Field.testJSON(json) && json.keyType !== undefined;\r\n};\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapFieldPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return FieldPrototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties) {\r\n        var keys = Object.keys(properties);\r\n        for (var i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias Method.prototype */\r\nvar MethodPrototype = ReflectionObject.extend(Method);\r\n\r\nMethod.className = \"Method\";\r\n\r\nvar Type = require(30),\r\n    util = require(32);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (type && !util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service method.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a map field\r\n */\r\nMethod.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.requestType !== undefined);\r\n};\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethodPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedRequestType = this.parent.lookup(this.requestType, Type)))\r\n        throw Error(\"unresolvable request type: \" + this.requestType);\r\n    /* istanbul ignore next */\r\n    if (!(this.resolvedResponseType = this.parent.lookup(this.responseType, Type)))\r\n        throw Error(\"unresolvable response type: \" + this.requestType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias NamespaceBase.prototype */\r\nvar NamespacePrototype = ReflectionObject.extend(Namespace);\r\n\r\nNamespace.className = \"Namespace\";\r\n\r\nvar Enum    = require(16),\r\n    Field   = require(17),\r\n    util    = require(32);\r\n\r\nvar Type,    // cyclic\r\n    Service; // cyclic\r\n\r\nvar nestedTypes, // contains cyclics\r\n    nestedError;\r\n\r\nfunction initNested() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(30);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(29);\r\n\r\n    nestedTypes = [ Enum, Type, Service, Field, Namespace ];\r\n    nestedError = \"one of \" + nestedTypes.map(function(ctor) { return ctor.name; }).join(\", \");\r\n}\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Tests if the specified JSON object describes not another reflection object.\r\n * @memberof Namespace\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes not another reflection object\r\n */\r\nNamespace.testJSON = function testJSON(json) {\r\n    return Boolean(json\r\n        && !json.fields                   // Type\r\n        && !json.values                   // Enum\r\n        && json.id === undefined          // Field, MapField\r\n        && !json.oneof                    // OneOf\r\n        && !json.methods                  // Service\r\n        && json.requestType === undefined // Method\r\n    );\r\n};\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n\r\n    /**\r\n     * Properties to remove when cache is cleared.\r\n     * @type {Array.<string>}\r\n     * @private\r\n     */\r\n    this._clearProperties = [];\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    for (var i = 0; i < namespace._clearProperties.length; ++i)\r\n        delete namespace[namespace._clearProperties[i]];\r\n    namespace._clearProperties = [];\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(NamespacePrototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        if (!nestedTypes)\r\n            initNested();\r\n        Object.keys(nestedJson).forEach(function(nestedName) {\r\n            var nested = nestedJson[nestedName];\r\n            for (var j = 0; j < nestedTypes.length; ++j)\r\n                if (nestedTypes[j].testJSON(nested))\r\n                    return ns.add(nestedTypes[j].fromJSON(nestedName, nested));\r\n            /* istanbul ignore next */\r\n            throw TypeError(\"nested.\" + nestedName + \" must be JSON for \" + nestedError);\r\n        });\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespacePrototype.get = function get(name) {\r\n    if (this.nested === undefined) // prevents deopt\r\n        return null;\r\n    return this.nested[name] || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespacePrototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespacePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (!nestedTypes)\r\n        initNested();\r\n    /* istanbul ignore next */\r\n    if (!object || nestedTypes.indexOf(object.constructor) < 0)\r\n        throw TypeError(\"object must be \" + nestedError);\r\n    /* istanbul ignore next */\r\n    if (object instanceof Field && object.extend === undefined)\r\n        throw TypeError(\"object must be an extension field when not part of a type\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            // initNested above already initializes Type and Service\r\n            /* istanbul ignore else */\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespacePrototype.remove = function remove(object) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    /* istanbul ignore next */\r\n    if (object.parent !== this || !this.nested)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespacePrototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path)) {\r\n        path = path.split(\".\");\r\n    /* istanbul ignore next */\r\n    } else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            /* istanbul ignore next */\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nNamespacePrototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(30);\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Type = require(29);\r\n\r\n    // Add uppercased (and thus conflict-free) nested types, services and enums as properties\r\n    // of the type just like static code does. This allows using a .d.ts generated for a static\r\n    // module with reflection-based solutions where the condition is met.\r\n    var nested = this.nestedArray;\r\n    for (var i = 0; i < nested.length; ++i)\r\n        if (/^[A-Z]/.test(nested[i].name)) {\r\n            if (nested[i] instanceof Type || nested[i] instanceof Service)\r\n                this[nested[i].name] = nested[i];\r\n            else /* istanbul ignore else */ if (nested[i] instanceof Enum)\r\n                this[nested[i].name] = nested[i].values;\r\n            else\r\n                continue;\r\n            this._clearProperties.push(nested[i].name);\r\n        }\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespacePrototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespacePrototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterType || found instanceof filterType)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespacePrototype.lookupType = function lookupType(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(30);\r\n\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespacePrototype.lookupService = function lookupService(path) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Service)\r\n        Service = require(29);\r\n\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespacePrototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nvar util = require(32);\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\nReflectionObject.extend = util.extend;\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n}\r\n\r\n/** @alias ReflectionObject.prototype */\r\nvar ReflectionObjectPrototype = ReflectionObject.prototype;\r\n\r\nObject.defineProperties(ReflectionObjectPrototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObjectPrototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (!Root)\r\n        Root = require(26);\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObjectPrototype.onRemove = function onRemove(parent) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!Root)\r\n        Root = require(26);\r\n\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Root)\r\n        Root = require(26);\r\n\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObjectPrototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObjectPrototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        Object.keys(options).forEach(function(name) {\r\n            this.setOption(name, options[name], ifNotSet);\r\n        }, this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObjectPrototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n/** @alias OneOf.prototype */\r\nvar OneOfPrototype = ReflectionObject.extend(OneOf);\r\n\r\nOneOf.className = \"OneOf\";\r\n\r\nvar Field = require(17);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (fieldNames && !Array.isArray(fieldNames))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof and are possibly not yet added to its parent.\r\n     * @type {Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = [];\r\n}\r\n\r\n/**\r\n * Fields that belong to this oneof as an array for iteration.\r\n * @name OneOf#fieldsArray\r\n * @type {Field[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(OneOfPrototype, \"fieldsArray\", {\r\n    get: function() {\r\n        return this._fieldsArray;\r\n    }\r\n});\r\n\r\n/**\r\n * Tests if the specified JSON object describes a oneof.\r\n * @param {*} json JSON object\r\n * @returns {boolean} `true` if the object describes a oneof\r\n */\r\nOneOf.testJSON = function testJSON(json) {\r\n    return Boolean(json.oneof);\r\n};\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent) {\r\n        oneof._fieldsArray.forEach(function(field) {\r\n            if (!field.parent)\r\n                oneof.parent.add(field);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this._fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOfPrototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this._fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this._fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    this.oneof.forEach(function(fieldName) {\r\n        var field = parent.get(fieldName);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self._fieldsArray.push(field);\r\n        }\r\n    });\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOfPrototype.onRemove = function onRemove(parent) {\r\n    this._fieldsArray.forEach(function(field) {\r\n        if (field.parent)\r\n            field.parent.remove(field);\r\n    });\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        /* istanbul ignore next */\r\n        if (!BufferReader)\r\n            BufferReader = require(25);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(24);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n/** @alias Root.prototype */\r\nvar RootPrototype = Namespace.extend(Root);\r\n\r\nRoot.className = \"Root\";\r\n\r\nvar Field  = require(17),\r\n    util   = require(32);\r\n\r\nvar parse,  // cyclic, might be excluded\r\n    common; // might be excluded\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    return root.setOptions(json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRootPrototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRootPrototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore next */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options);\r\n                if (parsed.imports)\r\n                    parsed.imports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name));\r\n                    });\r\n                if (parsed.weakImports)\r\n                    parsed.weakImports.forEach(function(name) {\r\n                        fetch(self.resolvePath(filename, name), true);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore next */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued)\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    filename.forEach(function(filename) {\r\n        fetch(self.resolvePath(\"\", filename));\r\n    });\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRootPrototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRootPrototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction handleExtension(field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleAdd = function handleAdd(object) {\r\n    // Try to handle any deferred extensions\r\n    var newDeferred = this.deferred.slice();\r\n    this.deferred = []; // because the loop calls handleAdd\r\n    var i = 0;\r\n    while (i < newDeferred.length)\r\n        if (handleExtension(newDeferred[i]))\r\n            newDeferred.splice(i, 1);\r\n        else\r\n            ++i;\r\n    this.deferred = newDeferred;\r\n    // Handle new declaring extension fields without a sister field yet\r\n    if (object instanceof Field && object.extend !== undefined && !object.extensionField && !handleExtension(object) && this.deferred.indexOf(object) < 0)\r\n        this.deferred.push(object);\r\n    else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleAdd(nested[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRootPrototype._handleRemove = function handleRemove(object) {\r\n    if (object instanceof Field) {\r\n        // If a deferred declaring extension field, cancel the extension\r\n        if (object.extend !== undefined && !object.extensionField) {\r\n            var index = this.deferred.indexOf(object);\r\n            /* istanbul ignore else */\r\n            if (index > -1)\r\n                this.deferred.splice(index, 1);\r\n        }\r\n        // If a declaring extension field with a sister field, remove its sister field\r\n        if (object.extensionField) {\r\n            object.extensionField.parent.remove(object.extensionField);\r\n            object.extensionField = null;\r\n        }\r\n    } else if (object instanceof Namespace) {\r\n        var nested = object.nestedArray;\r\n        for (var i = 0; i < nested.length; ++i) // recurse into the namespace\r\n            this._handleRemove(nested[i]);\r\n    }\r\n};\r\n\r\nRoot._configure = function(_parse, _common) {\r\n    parse = _parse;\r\n    common = _common;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\nrpc.Service = require(28);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar EventEmitter = require(32).EventEmitter;\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n */\r\nfunction Service(rpcImpl) {\r\n    EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.$rpc = rpcImpl;\r\n}\r\n\r\n(Service.prototype = Object.create(EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.$rpc) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.$rpc(null, null, null);\r\n        this.$rpc = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Service.prototype */\r\nvar ServicePrototype = Namespace.extend(Service);\r\n\r\nService.className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(32),\r\n    rpc    = require(27);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Tests if the specified JSON object describes a service.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a service\r\n */\r\nService.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.methods);\r\n};\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        Object.keys(json.methods).forEach(function(methodName) {\r\n            service.add(Method.fromJSON(methodName, json.methods[methodName]));\r\n        });\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(ServicePrototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.methods[name] || null;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nServicePrototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method} method Reflected method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Uint8Array} [responseData] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {function(Method, Uint8Array, function)} rpcImpl {@link RPCImpl|RPC implementation}\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} Runtime RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nServicePrototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl);\r\n    this.methodsArray.forEach(function(method) {\r\n        rpcService[util.lcFirst(method.name)] = function callVirtual(request, /* optional */ callback) {\r\n            if (!rpcService.$rpc) {\r\n                var err4 = Error(\"already ended\");\r\n                if (callback)\r\n                    return callback(err4);\r\n                throw err4;\r\n            }\r\n            if (!request)\r\n                throw TypeError(\"request must not be null\");\r\n            method.resolve();\r\n            var requestData = (requestDelimited ? method.resolvedRequestType.encodeDelimited(request) : method.resolvedRequestType.encode(request)).finish(); // never throws if request is true-ish\r\n\r\n            // Calls the custom RPC implementation with the reflected method and binary request data\r\n            // and expects the rpc implementation to call its callback with the binary response data.\r\n            return rpcImpl(method, requestData, function(err, responseData) {\r\n                if (err) {\r\n                    rpcService.emit(\"error\", err, method);\r\n                    /* istanbul ignore else */\r\n                    if (callback)\r\n                        return callback(err);\r\n                    /* istanbul ignore next */\r\n                    throw err;\r\n                }\r\n                if (responseData === null) {\r\n                    rpcService.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n                var response;\r\n                try {\r\n                    response = responseDelimited ? method.resolvedResponseType.decodeDelimited(responseData) : method.resolvedResponseType.decode(responseData);\r\n                } catch (err2) {\r\n                    rpcService.emit(\"error\", err2, method);\r\n                    /* istanbul ignore else */\r\n                    if (callback)\r\n                        return callback(\"error\", err2);\r\n                    /* istanbul ignore next */\r\n                    throw err2;\r\n                }\r\n                rpcService.emit(\"data\", response, method);\r\n                /* istanbul ignore else */\r\n                if (callback)\r\n                    return callback(null, response);\r\n                /* istanbul ignore next */\r\n                return undefined;\r\n            });\r\n        };\r\n    });\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n/** @alias Namespace.prototype */\r\nvar NamespacePrototype = Namespace.prototype;\r\n/** @alias Type.prototype */\r\nvar TypePrototype = Namespace.extend(Type);\r\n\r\nType.className = \"Type\";\r\n\r\nvar Enum      = require(16),\r\n    OneOf     = require(23),\r\n    Field     = require(17),\r\n    Service   = require(29),\r\n    Class     = require(12),\r\n    Message   = require(19),\r\n    Reader    = require(24),\r\n    Writer    = require(36),\r\n    util      = require(32),\r\n    encoder   = require(15),\r\n    decoder   = require(14),\r\n    verifier  = require(35),\r\n    converter = require(13);\r\n\r\nvar nestedTypes = [ Enum, Type, Field, Service ];\r\n\r\n/**\r\n * Tests if the specified JSON object describes a message type.\r\n * @param {*} json JSON object to test\r\n * @returns {boolean} `true` if the object describes a message type\r\n */\r\nType.testJSON = function testJSON(json) {\r\n    return Boolean(json && json.fields);\r\n};\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    Object.keys(json.fields).forEach(function(fieldName) {\r\n        type.add(Field.fromJSON(fieldName, json.fields[fieldName]));\r\n    });\r\n    if (json.oneofs)\r\n        Object.keys(json.oneofs).forEach(function(oneOfName) {\r\n            type.add(OneOf.fromJSON(oneOfName, json.oneofs[oneOfName]));\r\n        });\r\n    if (json.nested)\r\n        Object.keys(json.nested).forEach(function(nestedName) {\r\n            var nested = json.nested[nestedName];\r\n            for (var i = 0; i < nestedTypes.length; ++i) {\r\n                if (nestedTypes[i].testJSON(nested)) {\r\n                    type.add(nestedTypes[i].fromJSON(nestedName, nested));\r\n                    return;\r\n                }\r\n            }\r\n            /* istanbul ignore next */\r\n            throw Error(\"invalid nested object in \" + type + \": \" + nestedName);\r\n        });\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(TypePrototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            /* istanbul ignore next */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            var names = Object.keys(this.fields);\r\n            for (var i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class.create(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.toJSON = function toJSON() {\r\n    var inherited = NamespacePrototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return NamespacePrototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nTypePrototype.get = function get(name) {\r\n    return NamespacePrototype.get.call(this, name) || this.fields && this.fields[name] || this.oneofs && this.oneofs[name] || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nTypePrototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n        /* istanbul ignore next */\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nTypePrototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        /* istanbul ignore next */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        /* istanbul ignore next */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return NamespacePrototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nTypePrototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nTypePrototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = this.fieldsArray.map(function(fld) { return fld.resolve().resolvedType; });\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nTypePrototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nTypePrototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nTypePrototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nTypePrototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nTypePrototype.from = TypePrototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nTypePrototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(32);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(34);\r\n\r\nutil.asPromise    = require(2);\r\nutil.codegen      = require(4);\r\nutil.EventEmitter = require(5);\r\nutil.extend       = require(6);\r\nutil.fetch        = require(7);\r\nutil.path         = require(9);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    return object ? Object.keys(object).map(function(key) {\r\n        return object[key];\r\n    }) : [];\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\nutil.base64   = require(3);\r\nutil.inquire  = require(8);\r\nutil.utf8     = require(11);\r\nutil.pool     = require(10);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {};\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util.Buffer.allocUnsafe(sizeOrArray) // polyfilled\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util.Buffer.from(sizeOrArray) // polyfilled\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\nutil.LongBits = require(33);\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    fieldNames.forEach(function(name) {\r\n        fieldMap[name] = 1;\r\n    });\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    lazyTypes.forEach(function(types) {\r\n        Object.keys(types).forEach(function(index) {\r\n            var path = types[index |= 0].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            types[index] = ptr;\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(16),\r\n    util      = require(32);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            var values = util.toArray(field.resolvedType.values);\r\n            for (var j = 0; j < values.length; ++j) gen\r\n                (\"case %d:\", values[j]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9][0-9]*)$/.test(%s))\", ref) // it's important not to use any literals here that might be confused with short variable names by pbjs' beautify\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field = fields[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        /* istanbul ignore next */\r\n        if (!BufferWriter)\r\n            BufferWriter = require(37);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (typeof value === \"string\") {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(36);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(34);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n"],"sourceRoot":"."}