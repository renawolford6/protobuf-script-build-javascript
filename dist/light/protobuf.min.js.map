{"version":3,"sources":["lib/prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/converter.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/index-light","src/index-minimal.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/minimal.js","src/verifier.js","src/writer.js","src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","util","configure","module","1","require","asPromise","fn","ctx","params","i","arguments","length","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","n","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","t","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","Error","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","e","EventEmitter","_listeners","prototype","on","evt","off","listeners","splice","emit","fetch","path","callback","fs","readFile","contents","XMLHttpRequest","fetch_xhr","xhr","onreadystatechange","readyState","status","responseText","open","send","inquire","moduleName","mod","eval","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","ctor","Type","TypeError","Message","constructor","merge","$type","fieldsArray","_fieldsArray","isArray","defaultValue","emptyArray","isObject","long","emptyObject","ctorProperties","oneofsArray","_oneofsArray","get","oneOfGetter","oneof","set","oneOfSetter","defineProperties","create","genValuePartial_fromObject","field","fieldIndex","prop","resolvedType","Enum","values","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","fields","safeProp","toObject","repeatedFields","mapFields","otherFields","valuesById","low","high","unsigned","toNumber","bytes","decoder","group","ref","id","keyType","types","basic","compat","packed","genTypePartial","encoder","partOf","wireType","mapKey","required","indexOf","options","ReflectionObject","comments","className","fromJSON","json","toJSON","add","comment","isString","isInteger","remove","val","Field","rule","extend","toLowerCase","optional","message","extensionField","declaringField","_packed","defineProperty","getOption","setOption","value","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","load","filename","root","Root","loadSync","build","verifier","Namespace","OneOf","MapField","Service","Method","_configure","Reader","BufferReader","roots","Writer","BufferWriter","rpc","resolvedKeyType","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","requestType","responseType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","nested","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","setOptions","onAdd","onRemove","ptr","part","resolveAll","filterType","parentAlreadyChecked","found","lookupService","lookupEnum","Type_","Service_","unshift","_handleAdd","_handleRemove","toString","Root_","fieldNames","addFieldsToParent","index","self","indexOutOfRange","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","skip","skipType","BufferReader_","int64","uint64","sint64","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","parse","common","resolvePath","finish","cb","sync","process","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","response","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","lcFirst","m","q","s","oneofs","extensions","reserved","_fieldsById","_ctor","fieldsById","filter","setup","fork","ldelim","bake","o","ucFirst","toUpperCase","zero","zzEncode","zeroHash","parseInt","fromString","fromHash","hash","toHash","mask","part0","part1","part2","versions","node","Number","isFinite","utf8Write","encoding","allocUnsafe","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","dst","fieldMap","lazyResolve","lazyTypes","longs","enums","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.configure();\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(6);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} [callback] Callback function\r\n * @returns {Promise<string>|undefined} A Promise if `callback` has been omitted\r\n */\r\nfunction fetch(path, callback) {\r\n    if (!callback)\r\n        return asPromise(fetch, this, path); // eslint-disable-line no-invalid-this\r\n    if (fs && fs.readFile)\r\n        return fs.readFile(path, \"utf8\", function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch_xhr(path, callback)\r\n                : callback(err, contents);\r\n        });\r\n    return fetch_xhr(path, callback);\r\n}\r\n\r\nfunction fetch_xhr(path, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n        return xhr.readyState === 4\r\n            ? xhr.status === 0 || xhr.status === 200\r\n            ? callback(null, xhr.responseText)\r\n            : callback(Error(\"status \" + xhr.status))\r\n            : undefined;\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n    };\r\n    xhr.open(\"GET\", path);\r\n    xhr.send();\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(32);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction Class(type, ctor) {\r\n    if (!Type)\r\n        Type = require(30);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        // create named constructor functions (codegen is required anyway)\r\n        ctor = util.codegen(\"p\")(\"return c.call(this,p)\").eof(type.name, {\r\n            c: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    (ctor.prototype = new Message()).constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    ctor.prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    var i = 0;\r\n    for (; i < /* initializes */ type.fieldsArray.length; ++i) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        ctor.prototype[type._fieldsArray[i].name] = Array.isArray(type._fieldsArray[i].resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(type._fieldsArray[i].defaultValue) && !type._fieldsArray[i].long\r\n              ? util.emptyObject\r\n              : type._fieldsArray[i].defaultValue; // if a long, it is frozen when initialized\r\n    }\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    var ctorProperties = {};\r\n    for (i = 0; i < /* initializes */ type.oneofsArray.length; ++i)\r\n        ctorProperties[type._oneofsArray[i].resolve().name] = {\r\n            get: util.oneOfGetter(type._oneofsArray[i].oneof),\r\n            set: util.oneOfSetter(type._oneofsArray[i].oneof)\r\n        };\r\n    if (i)\r\n        Object.defineProperties(ctor.prototype, ctorProperties);\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return ctor.prototype;\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @function\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = Class;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(14),\r\n    util = require(32);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low,d%s.high).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low,m%s.high).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        otherFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (fields[i].resolve().repeated)\r\n            repeatedFields.push(fields[i]);\r\n        else if (fields[i].map)\r\n            mapFields.push(fields[i]);\r\n        else\r\n            otherFields.push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0, field; i < otherFields.length; ++i) {\r\n            var field = otherFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    for (i = 0, field; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m%s!==undefined&&m%s!==null&&m.hasOwnProperty(%j)){\", prop, prop, field.name);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, i, prop);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(14),\r\n    types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(14),\r\n    types    = require(31),\r\n    util     = require(32);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field    = mtype._fieldsArray[i].resolve();\r\n        if (field.partOf) // see below for oneofs\r\n            continue;\r\n        var type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length&&m.hasOwnProperty(%j)){\", ref, ref, field.name)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n                else if (field.bytes || field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j))\", ref, field.name);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < /* initializes */ mtype.oneofsArray.length; ++i) {\r\n        var oneof = mtype._oneofsArray[i]; gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        for (var j = 0; j < /* direct */ oneof.fieldsArray.length; ++j) {\r\n            var field    = oneof.fieldsArray[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name); gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, mtype._fieldsArray.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n    \r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id\");\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    this.comments[name] = comment || null;\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(14),\r\n    types = require(31),\r\n    util  = require(32);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n\r\n        /* istanbul ignore if */\r\n        if (!Type)\r\n            Type = require(30);\r\n\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(13);\r\nprotobuf.decoder          = require(12);\r\nprotobuf.verifier         = require(35);\r\nprotobuf.converter        = require(11);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(22);\r\nprotobuf.Namespace        = require(21);\r\nprotobuf.Root             = require(26);\r\nprotobuf.Enum             = require(14);\r\nprotobuf.Type             = require(30);\r\nprotobuf.Field            = require(15);\r\nprotobuf.OneOf            = require(23);\r\nprotobuf.MapField         = require(18);\r\nprotobuf.Service          = require(29);\r\nprotobuf.Method           = require(20);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(10);\r\nprotobuf.Message          = require(19);\r\n\r\n// Utility\r\nprotobuf.types            = require(31);\r\nprotobuf.util             = require(32);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n * \r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n * \r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(36);\r\nprotobuf.BufferWriter = require(37);\r\nprotobuf.Reader       = require(24);\r\nprotobuf.BufferReader = require(25);\r\n\r\n// Utility\r\nprotobuf.util         = require(34);\r\nprotobuf.rpc          = require(27);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(15);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(14),\r\n    Field    = require(15),\r\n    util     = require(32);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterType || found instanceof filterType)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(32);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(15);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n}\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        Reader.prototype.int64 = read_int64_long;\r\n        Reader.prototype.uint64 = read_uint64_long;\r\n        Reader.prototype.sint64 = read_sint64_long;\r\n        Reader.prototype.fixed64 = read_fixed64_long;\r\n        Reader.prototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        Reader.prototype.int64 = read_int64_number;\r\n        Reader.prototype.uint64 = read_uint64_number;\r\n        Reader.prototype.sint64 = read_sint64_number;\r\n        Reader.prototype.fixed64 = read_fixed64_number;\r\n        Reader.prototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(24);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(15),\r\n    Enum    = require(14),\r\n    util    = require(32);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string} Resolved path to `target`\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore next */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        fetch(self.resolvePath(filename, parsed.imports[i]));\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        fetch(self.resolvePath(filename, parsed.weakImports[i]), true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore next */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued)\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0; i < filename.length; ++i)\r\n        fetch(self.resolvePath(\"\", filename[i]));\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {   \r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(28);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(34);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n * \r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n * \r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(\"error\", err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(32),\r\n    rpc    = require(27);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst(this._methodsArray[i].resolve().name)] = util.codegen(\"r\",\"c\")(\"return this.rpcCall(m,q,s,r,c)\").eof(util.lcFirst(this._methodsArray[i].name), {\r\n            m: this._methodsArray[i],\r\n            q: this._methodsArray[i].resolvedRequestType.ctor,\r\n            s: this._methodsArray[i].resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(14),\r\n    OneOf     = require(23),\r\n    Field     = require(15),\r\n    MapField  = require(18),\r\n    Service   = require(29),\r\n    Class     = require(10),\r\n    Message   = require(19),\r\n    Reader    = require(24),\r\n    Writer    = require(36),\r\n    util      = require(32),\r\n    encoder   = require(13),\r\n    decoder   = require(12),\r\n    verifier  = require(35),\r\n    converter = require(11);\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            /* istanbul ignore next */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        /* istanbul ignore next */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        /* istanbul ignore next */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.from = Type.prototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(32);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(34);\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(7);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\nutil.asPromise    = require(1);\r\nutil.base64       = require(2);\r\nutil.EventEmitter = require(4);\r\nutil.inquire      = require(6);\r\nutil.utf8         = require(9);\r\nutil.pool         = require(8);\r\n\r\nutil.LongBits     = require(33);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {};\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util.Buffer.allocUnsafe(sizeOrArray) // polyfilled\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util.Buffer.from(sizeOrArray) // polyfilled\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(14),\r\n    util      = require(32);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %d:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9][0-9]*)$/.test(%s))\", ref) // it's important not to use any literals here that might be confused with short variable names by pbjs' beautify\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    if (/* initializes */ !mtype.fieldsArray.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(36);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(34);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n"],"sourceRoot":"."}