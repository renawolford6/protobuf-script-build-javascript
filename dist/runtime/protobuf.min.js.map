{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/ieee754.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","runtime","src/reader.js","src/reader_buffer.js","src/util/longbits.js","src/util/runtime.js","src/writer.js","src/writer_buffer.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","read","buffer","offset","isBE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","base64","string","p","charAt","ceil","b64","Array","s64","encode","start","end","j","b","String","fromCharCode","apply","invalidEncoding","decode","charCodeAt","undefined","inquire","moduleName","mod","eval","replace","Object","keys","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","parts","chunk","push","join","c1","c2","configure","Reader","_configure","protobuf","Writer","BufferWriter","BufferReader","util","roots","define","amd","Long","indexOutOfRange","reader","writeLength","RangeError","pos","this","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","toNumber","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","ieee754","ArrayImpl","Uint8Array","create","Buffer","prototype","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","float","readDouble","Float64Array","f64","double","bytes","constructor","skip","skipType","wireType","BufferReaderPrototype","utf8Slice","min","LongBitsPrototype","zero","zzEncode","fromNumber","sign","from","parseInt","fromString","low","high","unsigned","Boolean","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","process","versions","node","utf8Write","dcodeIO","isInteger","Number","isFinite","isString","isObject","longToHash","longFromHash","fromBits","longNeq","longNe","val","props","target","descriptors","forEach","key","prop","descriptor","ie8","ucKey","substring","toUpperCase","get","set","defineProperty","emptyArray","freeze","emptyObject","Op","fn","noop","State","writer","head","tail","next","states","writeByte","writeVarint32","writeVarint64","writeFixed32","WriterPrototype","writeFloat","writeDouble","writeBytes","fork","reset","ldelim","id","finish","writeStringBuffer","BufferWriterPrototype","allocUnsafe","writeBytesBuffer","name","copy","Buffer_from","encoding","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright (c) 2008, Fair Oaks Labs, Inc.\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//  * Redistributions of source code must retain the above copyright notice,\r\n//    this list of conditions and the following disclaimer.\r\n//\r\n//  * Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n//\r\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\r\n//    may be used to endorse or promote products derived from this software\r\n//    without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n//\r\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\r\n\r\n// ref: https://github.com/nodejs/node/blob/87286cc7371886d9856edf424785aaa890ba05a9/lib/buffer_ieee754.js\r\n\r\nexports.read = function readIEEE754(buffer, offset, isBE, mLen, nBytes) {\r\n    var e, m,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        nBits = -7,\r\n        i = isBE ? 0 : (nBytes - 1),\r\n        d = isBE ? 1 : -1,\r\n        s = buffer[offset + i];\r\n\r\n    i += d;\r\n\r\n    e = s & ((1 << (-nBits)) - 1);\r\n    s >>= (-nBits);\r\n    nBits += eLen;\r\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    m = e & ((1 << (-nBits)) - 1);\r\n    e >>= (-nBits);\r\n    nBits += mLen;\r\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\r\n\r\n    if (e === 0) {\r\n        e = 1 - eBias;\r\n    } else if (e === eMax) {\r\n        return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n    } else {\r\n        m = m + Math.pow(2, mLen);\r\n        e = e - eBias;\r\n    }\r\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n};\r\n\r\nexports.write = function writeIEEE754(buffer, value, offset, isBE, mLen, nBytes) {\r\n    var e, m, c,\r\n        eLen = nBytes * 8 - mLen - 1,\r\n        eMax = (1 << eLen) - 1,\r\n        eBias = eMax >> 1,\r\n        rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n        i = isBE ? (nBytes - 1) : 0,\r\n        d = isBE ? -1 : 1,\r\n        s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n    value = Math.abs(value);\r\n\r\n    if (isNaN(value) || value === Infinity) {\r\n        m = isNaN(value) ? 1 : 0;\r\n        e = eMax;\r\n    } else {\r\n        e = Math.floor(Math.log(value) / Math.LN2);\r\n        if (value * (c = Math.pow(2, -e)) < 1) {\r\n            e--;\r\n            c *= 2;\r\n        }\r\n        if (e + eBias >= 1) {\r\n            value += rt / c;\r\n        } else {\r\n            value += rt * Math.pow(2, 1 - eBias);\r\n        }\r\n        if (value * c >= 2) {\r\n            e++;\r\n            c /= 2;\r\n        }\r\n\r\n        if (e + eBias >= eMax) {\r\n            m = 0;\r\n            e = eMax;\r\n        } else if (e + eBias >= 1) {\r\n            m = (value * c - 1) * Math.pow(2, mLen);\r\n            e = e + eBias;\r\n        } else {\r\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n            e = 0;\r\n        }\r\n    }\r\n\r\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\r\n\r\n    e = (e << mLen) | m;\r\n    eLen += mLen;\r\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\r\n\r\n    buffer[offset + i - d] |= s * 128;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = [],\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            parts.push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (i)\r\n        parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n    return parts.join(\"\");\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","// This file exports just the bare minimum required to work with statically generated code.\r\n// Can be used as a drop-in replacement for the full library as it has the same general structure.\r\nvar protobuf = exports;\r\n\r\nprotobuf.Writer = require(11);\r\nprotobuf.BufferWriter = require(12);\r\nprotobuf.Reader = require(7);\r\nprotobuf.BufferReader = require(8);\r\nprotobuf.util = require(10);\r\nprotobuf.roots = {};\r\nprotobuf.configure = configure;\r\n\r\nfunction configure() {\r\n    Reader._configure();\r\n}\r\n\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(10),\r\n    ieee754   = require(1);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\nvar ArrayImpl = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(8);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return new BufferReader(buffer);\r\n        })(buffer);\r\n    }\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = ArrayImpl.prototype.subarray || ArrayImpl.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() { // eslint-disable-line wrap-iife\r\n    var value = 0xffffffff >>> 0; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        \r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return buf[end - 4]\r\n         | buf[end - 3] << 8\r\n         | buf[end - 2] << 16\r\n         | buf[end - 1] << 24;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        return ieee754.read(buf, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        \r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\nvar Reader = require(7);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(10);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(10);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (util.Buffer = util.inquire(\"buffer\")) && util.Buffer.Buffer || null;\r\n\r\n// Don't use browser-buffer\r\nif (util.Buffer && !util.Buffer.prototype.utf8Write)\r\n    util.Buffer = null;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n * @deprecated Use {@link util.longNe|longNe} instead\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === \"number\"\r\n         ? typeof b === \"number\"\r\n            ? a !== b\r\n            : (a = util.LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === \"number\"\r\n            ? (b = util.LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ie8 = !-[1,];\r\n    var ucKey = key.substring(0, 1).toUpperCase() + key.substring(1);\r\n    if (descriptor.get)\r\n        target[\"get\" + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target[\"set\" + ucKey] = ie8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (ie8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze([]);\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze({});\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(10),\r\n    ieee754   = require(1);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\nvar ArrayImpl = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    // this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(12);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new ArrayImpl(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (ArrayImpl !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, ArrayImpl.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 23, 4);\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(val, buf, pos) {\r\n        ieee754.write(buf, val, pos, false, 52, 8);\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = ArrayImpl.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend as a tag where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (typeof id === \"number\")\r\n        this.uint32((id << 3 | 2) >>> 0);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\nvar Writer = require(11);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(10);\r\n\r\nvar utf8   = util.utf8,\r\n    Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe\r\n        ? Buffer.allocUnsafe\r\n        : function allocUnsafe_new(size) {\r\n            return new Buffer(size);\r\n        })(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.from && Buffer.prototype.set.name[0] === \"s\" // node v4: set.name == \"deprecated\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node > 0.12)\r\n    }\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        val.copy(buf, pos, 0, val.length);\r\n    };\r\n\r\nvar Buffer_from = Buffer && Buffer.from || function(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n"],"sourceRoot":"."}