{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","runtime/index.js","src/converters.js","src/reader.js","src/reader_buffer.js","src/util/longbits.js","src/util/runtime.js","src/writer.js","src/writer_buffer.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","apply","invalidEncoding","decode","offset","c","charCodeAt","undefined","test","inquire","moduleName","mod","eval","replace","Object","keys","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","parts","chunk","push","join","write","c1","c2","configure","protobuf","Reader","_configure","global","Writer","BufferWriter","BufferReader","converters","util","roots","define","amd","Long","json","create","value","typeOrCtor","options","fieldsOnly","merge","enums","defaultValue","values","defaults","longs","defaultLow","defaultHigh","unsigned","longNe","low","high","Number","LongBits","from","toNumber","fromNumber","toString","fromValue","bytes","prototype","Buffer","isBuffer","message","ctor","fromString","newBuffer","indexOutOfRange","reader","writeLength","RangeError","pos","this","readLongVarint","bits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","constructor","skip","skipType","wireType","BufferReaderPrototype","utf8Slice","min","LongBitsPrototype","zero","zzEncode","zeroHash","parseInt","Boolean","fromHash","hash","toHash","mask","part0","part1","part2","isNode","process","versions","node","utf8Write","encoding","allocUnsafe","dcodeIO","isInteger","isFinite","floor","isString","isObject","longToHash","longFromHash","fromBits","val","emptyArray","freeze","emptyObject","arrayNe","Op","fn","next","noop","State","writer","head","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","WriterPrototype","writeFloat","isNaN","round","log","LN2","writeDouble","writeBytes","set","fork","reset","ldelim","finish","writeStringBuffer","BufferWriterPrototype","writeBytesBuffer","name","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return i ? String.fromCharCode.apply(String, chunk.slice(0, i)) : \"\";\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","// This file exports just the bare minimum required to work with statically generated code.\r\n// Can be used as a drop-in replacement for the full library as it has the same general structure.\r\n\"use strict\";\r\nvar protobuf = global.protobuf = exports;\r\n\r\nprotobuf.Writer       = require(\"../src/writer\");\r\nprotobuf.BufferWriter = require(\"../src/writer_buffer\");\r\nprotobuf.Reader       = require(\"../src/reader\");\r\nprotobuf.BufferReader = require(\"../src/reader_buffer\");\r\nprotobuf.converters   = require(\"../src/converters\");\r\nprotobuf.util         = require(\"../src/util/runtime\");\r\nprotobuf.roots        = {};\r\nprotobuf.configure    = configure;\r\n\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n","\"use strict\";\r\nvar converters = exports;\r\n\r\nvar util = require(10);\r\n\r\n/**\r\n * JSON conversion options as used by {@link Message#asJSON}.\r\n * @typedef JSONConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n * @property {*} [longs] Long conversion type. Only relevant with a long library.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to a possibly unsafe number without, and a `Long` with a long library.\r\n * @property {*} [enums=Number] Enum value conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to the numeric ids.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and `String` (the global types).\r\n * Defaults to return the underlying buffer type.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Converter implementation producing JSON.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.json = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        return options.fieldsOnly\r\n            ? {}\r\n            : util.merge({}, value);\r\n    },\r\n    enums: function(value, defaultValue, values, options) {\r\n        if (!options.defaults) {\r\n            if (value === undefined || value === defaultValue)\r\n                return undefined;\r\n        } else if (value === undefined)\r\n            value = defaultValue;\r\n        return options.enums === String && typeof value === \"number\"\r\n            ? values[value]\r\n            : value;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned, options) {\r\n        if (!value) {\r\n            if (options.defaults)\r\n                value = { low: defaultLow, high: defaultHigh };\r\n            else\r\n                return undefined;\r\n        } else if (!util.longNe(value, defaultLow, defaultHigh) && !options.defaults)\r\n            return undefined;\r\n        if (options.longs === Number)\r\n            return typeof value === \"number\"\r\n                ? value\r\n                : util.LongBits.from(value).toNumber(unsigned);\r\n        if (options.longs === String) {\r\n            if (typeof value === \"number\")\r\n                return util.Long.fromNumber(value, unsigned).toString();\r\n            value = util.Long.fromValue(value); // has no unsigned option\r\n            value.unsigned = unsigned;\r\n            return value.toString();\r\n        }\r\n        return value;\r\n    },\r\n    bytes: function(value, defaultValue, options) {\r\n        if (!value) {\r\n            if (options.defaults)\r\n                value = defaultValue;\r\n            else\r\n                return undefined;\r\n        } else if (!value.length && !options.defaults)\r\n            return undefined;\r\n        return options.bytes === String\r\n            ? util.base64.encode(value, 0, value.length)\r\n            : options.bytes === Array\r\n            ? Array.prototype.slice.call(value)\r\n            : options.bytes === util.Buffer && !util.Buffer.isBuffer(value)\r\n            ? util.Buffer.from(value) // polyfilled\r\n            : value;\r\n    }\r\n};\r\n\r\n/**\r\n * Message conversion options as used by {@link Message.from} and {@link Type#from}.\r\n * @typedef MessageConversionOptions\r\n * @type {Object}\r\n * @property {boolean} [fieldsOnly=false] Keeps only properties that reference a field\r\n */\r\n// Note that options.defaults and options.arrays also affect the message converter.\r\n// As defaults are already on the prototype, usage is not recommended and thus undocumented.\r\n\r\n/**\r\n * Converter implementation producing runtime messages.\r\n * @type {ConverterImpl}\r\n */\r\nconverters.message = {\r\n    create: function(value, typeOrCtor, options) {\r\n        if (!value)\r\n            return null;\r\n        // can't use instanceof Type here because converters are also part of the minimal runtime\r\n        return new (typeOrCtor.ctor ? typeOrCtor.ctor : typeOrCtor)(options.fieldsOnly ? undefined : value);\r\n    },\r\n    enums: function(value, defaultValue, values) {\r\n        if (typeof value === \"string\")\r\n            return values[value];\r\n        return value | 0;\r\n    },\r\n    longs: function(value, defaultLow, defaultHigh, unsigned) {\r\n        if (typeof value === \"string\")\r\n            return util.Long.fromString(value, unsigned);\r\n        if (typeof value === \"number\")\r\n            return util.Long.fromNumber(value, unsigned);\r\n        return value;\r\n    },\r\n    bytes: function(value/*, defaultValue*/) {\r\n        if (util.Buffer)\r\n            return util.Buffer.isBuffer(value)\r\n                ? value\r\n                : util.Buffer.from(value, \"base64\"); // polyfilled\r\n        if (typeof value === \"string\") {\r\n            var buf = util.newBuffer(util.base64.length(value));\r\n            util.base64.decode(value, buf, 0);\r\n            return buf;\r\n        }\r\n        return value instanceof util.Array\r\n            ? value\r\n            : new util.Array(value);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(10);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(8);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\nvar Reader = require(7);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(10);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(10);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.prototype.utf8Write) // refuse to use non-node buffers (performance)\r\n            return null;\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.from)\r\n            Buffer.from = function from(value, encoding) { return new Buffer(value, encoding); };\r\n\r\n        /* istanbul ignore next */\r\n        if (!Buffer.allocUnsafe)\r\n            Buffer.allocUnsafe = function allocUnsafe(size) { return new Buffer(size); };\r\n\r\n        return Buffer;\r\n\r\n    /* istanbul ignore next */\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n\r\n/**\r\n * Tests if two arrays are not equal.\r\n * @param {Array.<*>} a Array 1\r\n * @param {Array.<*>} b Array 2\r\n * @returns {boolean} `true` if not equal, otherwise `false`\r\n */\r\nutil.arrayNe = function arrayNe(a, b) {\r\n    if (a.length === b.length)\r\n        for (var i = 0; i < a.length; ++i)\r\n            if (a[i] !== b[i])\r\n                return true;\r\n    return false;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(10);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(12);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset()\r\n        .uint32(len)\r\n        .tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\nvar Writer = require(11);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(10);\r\n\r\nvar utf8   = util.utf8,\r\n    Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        val.copy(buf, pos, 0, val.length);\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n"],"sourceRoot":"."}