{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","runtime","src/reader.js","src/reader_buffer.js","src/util/longbits.js","src/util/runtime.js","src/writer.js","src/writer_buffer.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","base64","string","p","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","j","b","String","fromCharCode","apply","invalidEncoding","decode","offset","c","charCodeAt","undefined","inquire","moduleName","mod","eval","replace","Object","keys","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","parts","chunk","push","join","write","c1","c2","configure","protobuf","Reader","_configure","Writer","BufferWriter","BufferReader","util","roots","define","amd","Long","indexOutOfRange","reader","writeLength","RangeError","pos","this","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","toNumber","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","ReaderPrototype","int64","uint64","sint64","fixed64","sfixed64","create","Buffer","prototype","_slice","subarray","uint32","value","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","bytes","constructor","skip","skipType","wireType","BufferReaderPrototype","utf8Slice","min","LongBitsPrototype","zero","zzEncode","fromNumber","abs","from","parseInt","fromString","low","high","unsigned","Boolean","fromHash","hash","toHash","mask","part0","part1","part2","isNode","global","process","versions","node","isIE8","utf8Write","encoding","dcodeIO","isInteger","Number","isFinite","floor","isString","isObject","longToHash","longFromHash","fromBits","longNeq","longNe","val","ucFirst","str","toUpperCase","substring","props","target","descriptors","forEach","key","prop","descriptor","ucKey","get","set","defineProperty","emptyArray","freeze","emptyObject","Op","fn","next","noop","State","writer","head","tail","states","writeByte","writeVarint32","writeVarint64","writeFixed32","WriterPrototype","writeFloat","isNaN","round","log","LN2","writeDouble","writeBytes","fork","reset","ldelim","id","finish","writeStringBuffer","BufferWriterPrototype","allocUnsafe","writeBytesBuffer","name","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = [],\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            parts.push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (i)\r\n        parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n    return parts.join(\"\");\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","// This file exports just the bare minimum required to work with statically generated code.\r\n// Can be used as a drop-in replacement for the full library as it has the same general structure.\r\n\"use strict\";\r\nvar protobuf = exports;\r\n\r\nprotobuf.Writer       = require(10);\r\nprotobuf.BufferWriter = require(11);\r\nprotobuf.Reader       = require(6);\r\nprotobuf.BufferReader = require(7);\r\nprotobuf.util         = require(9);\r\nprotobuf.roots        = {};\r\nprotobuf.configure    = configure;\r\n\r\nfunction configure() {\r\n    protobuf.Reader._configure();\r\n}\r\n\r\n// Be nice to AMD\r\nif (typeof define === \"function\" && define.amd)\r\n    define([\"long\"], function(Long) {\r\n        if (Long) {\r\n            protobuf.util.Long = Long;\r\n            configure();\r\n        }\r\n        return protobuf;\r\n    });\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(9);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n    \r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array} buffer Buffer to read from\r\n * @returns {BufferReader|Reader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        if (!BufferReader)\r\n            BufferReader = require(7);\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return new BufferReader(buffer);\r\n        })(buffer);\r\n    }\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\n/** @alias Reader.prototype */\r\nvar ReaderPrototype = Reader.prototype;\r\n\r\nReaderPrototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.uint32 = (function read_uint32_setup() { // eslint-disable-line wrap-iife\r\n    var value = 0xffffffff >>> 0; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        \r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (i = 0; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    } else {\r\n        for (i = 0; i < 4; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (this.pos >= this.len)\r\n            throw indexOutOfRange(this);\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (i = 0; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (i = 0; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReaderPrototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReaderPrototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReaderPrototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReaderPrototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReaderPrototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n        \r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type: \" + wireType);\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction configure() {\r\n    if (util.Long) {\r\n        ReaderPrototype.int64 = read_int64_long;\r\n        ReaderPrototype.uint64 = read_uint64_long;\r\n        ReaderPrototype.sint64 = read_sint64_long;\r\n        ReaderPrototype.fixed64 = read_fixed64_long;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        ReaderPrototype.int64 = read_int64_number;\r\n        ReaderPrototype.uint64 = read_uint64_number;\r\n        ReaderPrototype.sint64 = read_sint64_number;\r\n        ReaderPrototype.fixed64 = read_fixed64_number;\r\n        ReaderPrototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n}\r\n\r\nReader._configure = configure;\r\n\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\nvar Reader = require(6);\r\n/** @alias BufferReader.prototype */\r\nvar BufferReaderPrototype = BufferReader.prototype = Object.create(Reader.prototype);\r\nBufferReaderPrototype.constructor = BufferReader;\r\n\r\nvar util = require(9);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n}\r\n\r\nif (util.Buffer)\r\n    BufferReaderPrototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReaderPrototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(9);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/** @alias util.LongBits.prototype */\r\nvar LongBitsPrototype = LongBits.prototype;\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign  = value < 0;\r\n        value = Math.abs(value);\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (typeof value === \"string\") {\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBitsPrototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        this.lo = ~this.lo + 1 >>> 0;\r\n        this.hi = ~this.hi     >>> 0;\r\n        if (!this.lo)\r\n            this.hi = this.hi + 1 >>> 0;\r\n        return -(this.lo + this.hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBitsPrototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBitsPrototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBitsPrototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBitsPrototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\n\r\nvar util = exports;\r\n\r\nutil.LongBits = require(\"./longbits\");\r\nutil.base64   = require(\"@protobufjs/base64\");\r\nutil.inquire  = require(\"@protobufjs/inquire\");\r\nutil.utf8     = require(\"@protobufjs/utf8\");\r\nutil.pool     = require(\"@protobufjs/pool\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Whether running within IE8 or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isIE8 = false; try { util.isIE8 = eval(\"!-[1,]\"); } catch (e) {} // eslint-disable-line no-eval, no-empty\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (util.Buffer = util.inquire(\"buffer\")) && util.Buffer.Buffer || null;\r\n\r\nif (util.Buffer) {\r\n    // Don't use browser-buffer for performance\r\n    if (!util.Buffer.prototype.utf8Write)\r\n        util.Buffer = null;\r\n    // Polyfill Buffer.from\r\n    else if (!util.Buffer.from)\r\n        util.Buffer.from = function from(value, encoding) { return new util.Buffer(value, encoding); };\r\n}\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array === \"undefined\" ? Array : Uint8Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Tests if two possibly long values are not equal.\r\n * @param {number|Long} a First value\r\n * @param {number|Long} b Second value\r\n * @returns {boolean} `true` if not equal\r\n * @deprecated Use {@link util.longNe|longNe} instead\r\n */\r\nutil.longNeq = function longNeq(a, b) {\r\n    return typeof a === \"number\"\r\n         ? typeof b === \"number\"\r\n            ? a !== b\r\n            : (a = util.LongBits.fromNumber(a)).lo !== b.low || a.hi !== b.high\r\n         : typeof b === \"number\"\r\n            ? (b = util.LongBits.fromNumber(b)).lo !== a.low || b.hi !== a.high\r\n            : a.low !== b.low || a.high !== b.high;\r\n};\r\n\r\n/**\r\n * Tests if a possibily long value equals the specified low and high bits.\r\n * @param {number|string|Long} val Value to test\r\n * @param {number} lo Low bits to test against\r\n * @param {number} hi High bits to test against\r\n * @returns {boolean} `true` if not equal\r\n */\r\nutil.longNe = function longNe(val, lo, hi) {\r\n    if (typeof val === \"object\") // Long-like, null is invalid and throws\r\n        return val.low !== lo || val.high !== hi;\r\n    var bits = util.LongBits.from(val);\r\n    return bits.lo !== lo || bits.hi !== hi;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) { // lcFirst counterpart is in core util\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Defines the specified properties on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {Object} descriptors Property descriptors\r\n * @returns {undefined}\r\n */\r\nutil.props = function props(target, descriptors) {\r\n    Object.keys(descriptors).forEach(function(key) {\r\n        util.prop(target, key, descriptors[key]);\r\n    });\r\n};\r\n\r\n/**\r\n * Defines the specified property on the specified target. Also adds getters and setters for non-ES5 environments.\r\n * @param {Object} target Target object\r\n * @param {string} key Property name\r\n * @param {Object} descriptor Property descriptor\r\n * @returns {undefined}\r\n */\r\nutil.prop = function prop(target, key, descriptor) {\r\n    var ucKey = util.ucFirst(key);\r\n    if (descriptor.get)\r\n        target[\"get\" + ucKey] = descriptor.get;\r\n    if (descriptor.set)\r\n        target[\"set\" + ucKey] = util.isIE8\r\n            ? function(value) {\r\n                  descriptor.set.call(this, value);\r\n                  this[key] = value;\r\n              }\r\n            : descriptor.set;\r\n    if (util.isIE8) {\r\n        if (descriptor.value !== undefined)\r\n            target[key] = descriptor.value;\r\n    } else\r\n        Object.defineProperty(target, key, descriptor);\r\n};\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : [];\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : {};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(9);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @private\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling linked operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        if (!BufferWriter)\r\n            BufferWriter = require(11);\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/** @alias Writer.prototype */\r\nvar WriterPrototype = Writer.prototype;\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.uint32 = function write_uint32(value) {\r\n    value = value >>> 0;\r\n    return this.push(writeVarint32,\r\n          value < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5\r\n    , value);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.int64 = WriterPrototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriterPrototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 0x80000000, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(0x7fffffff, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 0x7f800000) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 0x7fffff;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() { // eslint-disable-line wrap-iife\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 0x80000000, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(0xFFFFFFFF, buf, pos);\r\n            writeFixed32(0x7FFFFFFF, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 0x7FF00000) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 0xFFFFF) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (typeof value === \"string\" && len) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return len\r\n        ? this.uint32(len).push(writeBytes, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @param {number} [id] Id with wire type 2 to prepend as a tag where applicable\r\n * @returns {Writer} `this`\r\n */\r\nWriterPrototype.ldelim = function ldelim(id) {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset();\r\n    if (typeof id === \"number\")\r\n        this.uint32((id << 3 | 2) >>> 0);\r\n    this.uint32(len);\r\n    this.tail.next = head.next; // skip noop\r\n    this.tail = tail;\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriterPrototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\nvar Writer = require(10);\r\n/** @alias BufferWriter.prototype */\r\nvar BufferWriterPrototype = BufferWriter.prototype = Object.create(Writer.prototype);\r\nBufferWriterPrototype.constructor = BufferWriter;\r\n\r\nvar util = require(9);\r\n\r\nvar utf8   = util.utf8,\r\n    Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = Buffer.allocUnsafe\r\n        ? Buffer.allocUnsafe\r\n        : function allocUnsafe_new(size) {\r\n            return new Buffer(size);\r\n        })(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name[0] === \"s\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n    }\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        val.copy(buf, pos, 0, val.length);\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.bytes = function write_bytes_buffer(value) {\r\n    if (typeof value === \"string\")\r\n        value = Buffer.from(value, \"base64\"); // polyfilled\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriterPrototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n"],"sourceRoot":"."}